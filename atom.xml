<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>00&#39;s Adventure</title>
  
  <subtitle>Why join the navy if you can be a pirate</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://uegeek.com/"/>
  <updated>2019-03-27T06:55:10.907Z</updated>
  <id>http://uegeek.com/</id>
  
  <author>
    <name>kidult00</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三维制图讲义04 - 基础几何体</title>
    <link href="http://uegeek.com/190327-3d04-basic-geometry.html"/>
    <id>http://uegeek.com/190327-3d04-basic-geometry.html</id>
    <published>2019-03-27T06:54:02.000Z</published>
    <updated>2019-03-27T06:55:10.907Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/3d_course_title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190306-3d01-welcome-to-the-3d-world.html" target="_blank" rel="noopener">三维制图讲义01 - 欢迎来到三维世界</a></p><p><a href="https://www.uegeek.com/190314-3d02-workflow.html" target="_blank" rel="noopener">三维制图讲义02 - 三维制作流程</a></p><p><a href="https://www.uegeek.com/190320-3d03-blender-intro.html" target="_blank" rel="noopener">三维制图讲义03 - 三维软件和Blender介绍</a></p><h2 id="快速回顾"><a href="#快速回顾" class="headerlink" title="快速回顾"></a>快速回顾</h2><p>上一节课，我们介绍了 Blender 软件的下载、安装、设置和基本界面组成。</p><p>接着练习了视图的变换：</p><ul><li>围绕着兴趣点旋转视图：按下鼠标中键并移动</li><li>缩放视图：滚轮鼠标中键</li><li>平移视图：Shift+按下鼠标中键</li><li>正/右/顶视图切换：如果没有小键盘，需要先在设置中修改快捷键，比如我一般设置 Alt 1 / Alt3 / Alt7 为正/右/顶视图</li></ul><p>然后练习了最基本的几何体操作：位移、旋转和缩放（TRS）。</p><p><img src="http://img.viz.mobi/Blender_move.jpg" alt=""></p><p>特别需要练习的是，沿着某个轴做以上操作。当我们熟练使用界面中的辅助手柄来移动、旋转和缩放以后，还可以进一步使用鼠标来加速操作，毕竟这是最常使用的操作：</p><ul><li>按一下 G/R/S 键后，再按一下需要沿着哪个轴移动，比如沿着 x 轴就按下 x 键，然后移动物体；</li><li>或者配合鼠标中键使用：按下 G 键后，按住鼠标中键，沿着坐标轴参考线移动，物体就会只沿着这条坐标轴移动</li></ul><p>在这个基础上，我们加入<strong>复制并移动的练习</strong>：</p><ul><li>选中几何体(非编辑状态)</li><li>按 shift+D 复制一个一模一样的几何体</li><li>沿坐标轴移动到某处(配合鼠标中键使用)</li><li>需要对齐多个几何体时，需要切换为正/侧/顶视图查看</li><li>将几何体 translate 到合适的地方</li></ul><h2 id="几何体"><a href="#几何体" class="headerlink" title="几何体"></a>几何体</h2><p>当我们第一次打开 Blender 软件的时候，会看到编辑视图中央有一个立方体。如果我们按下 shift+A，会弹出添加菜单，在 mesh 选项里面，会有一系列选项，它们就是最最基本的几何体：平面、立方体、圆形、球体、圆柱体、圆锥体、圆环。</p><p><img src="http://jayanam.com/wp-content/uploads/2015/05/add_torus.jpg" alt=""></p><p>万丈高楼平地起。基础几何体就是万丈高楼的基本模块。</p><p>观察下面的几何体，想想在日常生活中，能见到哪些物品拥有类似的形状：</p><p><img src="http://img.viz.mobi/85715889-set-of-basic-3d-geometric-shapes-geometric-solids-vector-isolated-on-a-white-background-.jpg" alt=""></p><p>用不同的基础几何体组合，几乎可以搭出任意的形状。乐高就是最好的例子：</p><p><img src="http://img.viz.mobi/lego_bricks_pieces_02.jpg" alt=""></p><p>乐器？没问题啊~</p><p><img src="https://aintbaroque.files.wordpress.com/2012/11/nanoblocks.jpg" alt=""></p><p>练习观察几何体的构成，可以从方方正正的物体开始。比如上面的乐高钢琴，是由哪几部分组成的？不规则的形状可以由哪些比较规则的形状拼接而成？</p><p>除了观察，还可以通过游戏来训练三维的想象力和直觉！比如，三维俄罗斯方块，二维玩得再溜，刚接触三维版本也会觉得自己手残：</p><p><img src="https://www.androidsis.com/wp-content/uploads/2016/12/kubik-juego.jpg" alt=""></p><p>以后再玩跳一跳、纪念碑谷游戏，尤其是后者，记得仔细观察精美场景中的三维构造哦！</p><p><img src="http://n.sinaimg.cn/tech/crawl/w550h488/20180102/xZKm-fyqefvx0379699.jpg" alt=""></p><p><img src="http://www.domarketing.cn/uploadfile/2017/1120/20171120113509137.jpg" alt=""></p><p>而且，在现实世界中看到好玩有趣的物品，要留意它的不同侧面都长什么样子：</p><p><img src="http://img.viz.mobi/b23af8da78874d7d920823b86e2cb1f3.jpg" alt=""></p><h2 id="Blender-练习"><a href="#Blender-练习" class="headerlink" title="Blender 练习"></a>Blender 练习</h2><p>编辑模式点线面选择切换。</p><p>选中几何体后，按快捷键 Tab 进入编辑模式。这时候会看到物体变为橙色，顶点、边和面都跟物体状态时不太一样。</p><p>在编辑状态下，按键盘 1、2、3 键（或者点界面中模式选择右边的三个图标），可以切换为 点选择、边选择、面选择状态。</p><p>点选择（编辑模式下按1键）：</p><p><img src="http://img.viz.mobi/Blender_point_select.jpg" alt=""></p><p>面选择（编辑模式下按3键）：</p><p><img src="http://img.viz.mobi/Blender_face_select.jpg" alt=""></p><p>接下来，我们可以将点、线、面选择，跟位移、旋转、缩放结合起来练习：</p><ul><li>切换到点选择模式（编辑模式下按 1 键），选中点，进行移动（G）(包括沿轴的操作)</li><li>切换到边选择模式（编辑模式下按 2 键），选中多条边，进行旋转（R）(包括沿轴的操作)</li><li>切换到面选择模式（编辑模式下按 3 键），选中多个面，进行缩放（S）(包括沿轴的操作)</li></ul><p><img src="http://img.viz.mobi/Blender_edit.jpg" alt=""></p><p>完成了立方体的修改以后，再结合上一节的知识，用三个形状不一样的几何体，做成 3X3X3 的几何体矩阵，并且截下正/侧/斜面三张图，记录过程中的心得。</p><p>你已经开始创造属于自己的作品了 😀，加油~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/3d_course_title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="3D" scheme="http://uegeek.com/tags/3D/"/>
    
      <category term="Modeling" scheme="http://uegeek.com/tags/Modeling/"/>
    
      <category term="Blender" scheme="http://uegeek.com/tags/Blender/"/>
    
      <category term="Geometry" scheme="http://uegeek.com/tags/Geometry/"/>
    
  </entry>
  
  <entry>
    <title>数字制造讲义04-负责输入和输出的智能元件</title>
    <link href="http://uegeek.com/190326-df04-input-and-output.html"/>
    <id>http://uegeek.com/190326-df04-input-and-output.html</id>
    <published>2019-03-26T14:32:56.000Z</published>
    <updated>2019-03-26T14:35:06.137Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/week7title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190305-df01-digital-fabrication.html" target="_blank" rel="noopener">数字制造讲义01-成为数字世界的建造者</a><br><a href="https://www.uegeek.com/190313-df02-arduino-intro.html" target="_blank" rel="noopener">数字制造讲义02-Arduino入门</a><br><a href="https://www.uegeek.com/190319-df03-electronics-basic.html" target="_blank" rel="noopener">数字制造讲义03-电路基础</a></p><h2 id="快速回顾"><a href="#快速回顾" class="headerlink" title="快速回顾"></a>快速回顾</h2><p>让我们先回顾<a href="https://www.uegeek.com/190319-df03-electronics-basic.html" target="_blank" rel="noopener">上节课的内容</a>。</p><p>电路是由导体和元件组成的回路，电流可以在其中流动。电路有三种状态：通路，开路（某处断开）和短路。</p><p><img src="http://img.viz.mobi/3typesofCircuits.png" alt=""></p><p>闭合回路在同一点开始和结束，形成一个完整的循环，允许电力不间断地从（+）电源流到（ - ）地。短路是指，电路中有很大电流流过，但不流过负载，负载不起作用。</p><p><img src="https://i0.wp.com/www.makerspaces.com/wp-content/uploads/2017/05/led-switch-schematic-diagram.jpg?zoom=2&amp;resize=563%2C477&amp;ssl=1" alt=""></p><p>电路图通过符号表示电子元件及其位置。</p><p>电阻器通常用于限流，我们用欧姆定律计算电路中所需电阻阻值。更复杂的电路则需要用基尔霍夫定律。</p><h2 id="电路类型"><a href="#电路类型" class="headerlink" title="电路类型"></a>电路类型</h2><p>有了基本的电路元件，我们可以构建出不同类型的电路。除了通路、开路和短路，电路还有其他的分类方法。</p><p>比如，从构成来分，可以分为电气电路和电子电路两大类。电气电路由电阻、线圈、电容组成。电子电路除了电阻、线圈和电容之外，还包括晶体管和二极管等半导体元件。</p><p>按照功能来分，又分为以下类型的电路：</p><p><strong>放大电路</strong>：用于增大输入信号并且输出，例如常见的 Amplifier/功放</p><p><strong>振荡电路</strong>：使电路在没有输入信号时也能产生交流信号</p><p><strong>调制电路</strong>：可以调制振幅大小(AM)或频率(FM)的电路</p><p><img src="https://www.saysyou.net/wp-content/uploads/2017/06/AM-FM-gif.gif" alt=""></p><p><strong>检波电路</strong>：从信号中提取声音等（调幅波解调）</p><p><img src="https://www.st-andrews.ac.uk/~www_pa/Scots_Guide/RadCom/part9/fig2.gif" alt=""></p><p><strong>滤波器</strong>：提取指定频段的信号</p><p><img src="http://designer.mech.yzu.edu.tw/articlesystem/article/compressedfile/(2003-01-05" alt="">%20%E6%BF%BE%E6%B3%A2%E6%8A%80%E8%A1%93%E7%B0%A1%E4%BB%8B.files/image005.gif)</p><p><strong><a href="https://www.wikiwand.com/zh/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8" target="_blank" rel="noopener">运算放大器</a></strong>：能产生一个比输入端电势差大数十万倍的输出电势（对地而言）。集成电路的一种，输入输出互不影响。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/97/Op-amp_symbol.svg/400px-Op-amp_symbol.svg.png" alt=""></p><p><strong>逻辑电路</strong>：计算加法、乘法、记忆数字/文字</p><p><img src="http://wiki.jikexueyuan.com/project/mcu-tutorial-one/images/59.png" alt=""></p><p><strong>电源电路</strong>：交流直流电转换</p><h2 id="我有千里眼，你有顺风耳吗？"><a href="#我有千里眼，你有顺风耳吗？" class="headerlink" title="我有千里眼，你有顺风耳吗？"></a>我有千里眼，你有顺风耳吗？</h2><p>在初学电子电路知识时，很容易被种类繁多的电子元件搞晕。想要一种一种元件学习，不是不可能，但是没必要。我们需要提醒自己，学习电路的目标是做出自己需要的东西，带有功能和互动的装置。</p><p>电子元件虽然名目繁多，但是从用途来分，除了上节课介绍过的基本元件，接下来就是这节课要学习的两大类：输入类和输出类。</p><p><strong>输入类元件帮助我们感知和获取环境中的信息/状态，输出类元件负责向环境施加影响</strong>，例如展示数字/图像、移动物体等等。</p><p><img src="http://www.teachhub.com/sites/default/files/field/image/technology-in-the-classroom-human-body-websites.jpg" alt=""></p><p>想象一下人体，可以类比为装备着强大输入输出设备的智能体。输入设备包括眼睛、鼻子、耳朵、皮肤等，可以感知并接收图像、运动物体、声音、气味、压力等等复杂多样的信息。而输出设备包括嘴巴、身体关节和肌肉等，可以发出声音、做动作、移动物体等等。</p><p>当然，电子元件能够做的事情就更多了，比如，测量土壤湿度、测量脉搏、获取蓝牙信号等等。这些由各显神通的元器件来实现。</p><h2 id="输入设备"><a href="#输入设备" class="headerlink" title="输入设备"></a>输入设备</h2><p>我们借助输入设备，实时获取环境中的各种信息。</p><h3 id="开关"><a href="#开关" class="headerlink" title="开关"></a>开关</h3><p>开关也是一种设备？没错，电路本身就是一个小环境，这个小环境最重要的状态之一，就是电路是否形成通路。(聪明的你应该意识到，开关同时也是一种输出设备)</p><p>不要小看了开关，它有多种类型，可以控制多种状态。比如有按钮类型的，toggle 类型的，还有开关组：</p><p><img src="http://img.viz.mobi/8-parts-switch.jpg" alt=""></p><h3 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h3><p>检测环境中声音大小的元件(更高级一些的可以提取声音包络，或者做语音识别)。猜猜看，这类元件价格是多少？</p><p><img src="http://img.viz.mobi/9-15219.jpg" alt=""></p><h3 id="距离"><a href="#距离" class="headerlink" title="距离"></a>距离</h3><p>超声波传感器的本领，是不断发出探测距离的超声波，计算并报告元件距离目标物体(障碍)的距离：</p><p><img src="https://www.allelectronics.com/mas_assets/cache/image/3/b/5/5/480x480-15189.Jpg" alt=""></p><h3 id="温度"><a href="#温度" class="headerlink" title="温度"></a>温度</h3><p>测量温度的元件大多数都是热敏电阻，也就是阻值随着温度发生变化。</p><p><img src="http://img.viz.mobi/11-parts-Thermistors.jpg" alt=""></p><h3 id="光照"><a href="#光照" class="headerlink" title="光照"></a>光照</h3><p>测量光照亮度的元件大多数都是光敏电阻，也就是阻值随着亮度发生变化。</p><p><img src="http://img.viz.mobi/12-parts-Photoresistors.jpg" alt=""></p><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><p>想要识别物体，首先要获取图像。摄像头就是最常见的设备。现在的摄像头已经做到体积微小、成像高清。</p><p><img src="https://www.circuitspecialists.com/content/448097/CAMERA-MICRO-0.jpg" alt=""></p><p>另外一种传感器可以专门检测 RGB 的颜色值：</p><p><img src="https://www.circuitspecialists.com/content/172210/color-01-1.jpg" alt=""></p><h3 id="压力"><a href="#压力" class="headerlink" title="压力"></a>压力</h3><p>压电传感器用来检测振动或敲击。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/c/c4/SchemaPiezo.gif" alt=""></p><p><img src="http://img.viz.mobi/16-16808.jpg" alt=""></p><h3 id="磁场"><a href="#磁场" class="headerlink" title="磁场"></a>磁场</h3><p>我们常见的磁铁也是一种电子元件哦~</p><p><img src="http://img.viz.mobi/17-NEODYMIUM_MAGNET.jpg" alt=""></p><p>霍尔效应传感器也称霍尔传感器，是一个换能器，将变化的磁场转化为输出电压的变化。</p><p><img src="https://www.allelectronics.com/mas_assets/cache/image/4/1/e/8/480x480-16872.Jpg" alt=""></p><h3 id="红外"><a href="#红外" class="headerlink" title="红外"></a>红外</h3><p>互动装置总是少不了人的参与，其中经常会用到的一个元件，是检测某个距离内是否有人出现的红外传感器。</p><p><img src="https://www.allelectronics.com/mas_assets/cache/image/3/b/8/a/480x480-15242.Jpg" alt=""></p><h3 id="应变计"><a href="#应变计" class="headerlink" title="应变计"></a>应变计</h3><p>应变计是电阻随作用力变化的传感器；它将力、压力、张力、重量等物理量转化为电阻的变化，从而测量这些物理量。当外力作用于固定物体时，就会产生应力和应变。物体内部产生的（对外力的）反作用力即为应力，产生的位移和形变即为应变。</p><p><img src="http://img.viz.mobi/20-StrainGage.jpg" alt=""></p><p>例如基于应变计的称重传感器，将力转换为可测量的电信号输出的传感器。</p><h3 id="加速计"><a href="#加速计" class="headerlink" title="加速计"></a>加速计</h3><p>加速计（accelerometer）也叫重力感应器，是测量加速度的装置。相对于远距感测的装置，它测量的是自身组件在某个轴向的受力情况，表现形式为轴向的加速度大小和方向（XYZ）。这有点类似于陀螺仪，但陀螺仪的更多关注自身旋转情况，加速计则主要是测量受力情况，也就是三轴运动情况，更适合用于空间运动判断。</p><p><img src="http://img.viz.mobi/21-part-ACCELEROMETER.jpg" alt=""></p><p>陀螺仪（gyroscope）是一种基于角动量守恒理论感测与维持方向的装置。三轴陀螺仪的工作原理，是通过测量三维坐标系内陀螺转子的垂直轴与设备之间的夹角，并计算角速度，通过夹角和角速度来判别物体在三维空间的运动状态。三轴陀螺仪可以同时测定上、下、左、右、前、后等6个方向，最终可判断出设备的移动轨迹和加速度。</p><p>常见的体感游戏机、手机里都有这种元件。</p><p><img src="http://img.viz.mobi/22-pry-wiimote.gif" alt=""></p><h3 id="机器视觉"><a href="#机器视觉" class="headerlink" title="机器视觉"></a>机器视觉</h3><p>前面提到了获取图像的元件，也就是常见的摄像头。不过我们更常见的需求是用摄像头识别某些东西，比如人脸、比如让机器人拥有视力。所以，机器视觉相关的硬件和软件也是我们可能会用到的工具。</p><p>机器视觉是人工智能中一个重要的研究领域，相关的算法一直在改进。<a href="https://opencv.org/" target="_blank" rel="noopener">OpenCV</a> 就是使用最为广泛的机器视觉开源库，它提供了实时识别形状和物体的能力，许多机器视觉的应用都是在它的基础上改进实现的。</p><p>当然，也有一些硬件已经集成了特定的视觉能力。</p><p>比如 <a href="https://openmv.io/" target="_blank" rel="noopener">OpenMV</a> 项目提供低成本、可扩展、支持 Python 的机器视觉模块，成为「机器视觉的 Arduino」：</p><p><img src="https://cdn.shopify.com/s/files/1/0803/9211/products/web-new-cam-v2-angle_grande.jpg?v=1479601839" alt=""></p><p>又比如 Pixy2 摄像头，能通过简单的训练快速识别物体：</p><p><img src="![](https://pixycam.com/wp-content/uploads/2018/05/IMG_5269_result.jpg" alt="">)</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=s0753ulknzo" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/s0753ulknzo.html" target="_blank" rel="noopener">Pixy2摄像头图像识别</a></p><h2 id="输出设备"><a href="#输出设备" class="headerlink" title="输出设备"></a>输出设备</h2><p>看了这么多输入元件，是不是觉得人对环境的感知能力得到极大的扩展？这样我们可以收集无数来自环境的实时信息。接着，我们处理这些信息，或者设定一些规则，达到某些条件的时候，就自动去做某些事情。这就是智能硬件的基本原理。并不难，对吧？</p><p>接下来我们就了解一下输出设备，看看如果要对环境施加影响，我们都有哪些能力可以使用。</p><h3 id="LED"><a href="#LED" class="headerlink" title="LED"></a>LED</h3><p>严格来说，单个 LED 不算一类输出设备。但是它实在太常用了，而且多个 LED 组合起来，就可以成为可能性无穷的输出显示屏。</p><p><img src="http://img.viz.mobi/25-part-LEDdisplay.jpg" alt=""></p><h3 id="LCD"><a href="#LCD" class="headerlink" title="LCD"></a>LCD</h3><p>跟 LED 对应的还有另外一种专门用于显示的屏幕——LCD (Liquid Crystal Displays)。</p><p><img src="http://img.viz.mobi/26-part-LCD.jpg" alt=""></p><h3 id="扬声器"><a href="#扬声器" class="headerlink" title="扬声器"></a>扬声器</h3><p>视觉的输出设备有了，接下来是听觉。那就是各种扬声器，也就是喇叭了。</p><p><img src="http://img.viz.mobi/27-part-speaker.jpg" alt=""></p><h3 id="电机-马达"><a href="#电机-马达" class="headerlink" title="电机/马达"></a>电机/马达</h3><p>听和看都有了，那么接下来就是运动了。运动涉及到物理位移，我们需要借助电机来完成。</p><p>电机有非常多种，分类也各不相同，比如<a href="https://www.zhihu.com/question/24086069" target="_blank" rel="noopener">直流电机（DC Moter）和交流电机</a>。</p><p>在 DIY 装置中，常用到伺服电机、步进电机和舵机这几种。</p><p><strong>伺服电机</strong>：闭环控制，即通过传感器实时反馈电机的运行状态，由控制芯片进行实时调节。</p><p><img src="http://www.tedmotors.com/Archive/_cn/products/G0228/1607185816.jpg" alt=""></p><p><strong>步进电机</strong>：开环控制，接收的是电脉冲信号，根据信号数量转过相应的步距角（角位移）。</p><p><img src="https://www.allelectronics.com/mas_assets/cache/image/4/2/5/5/480x480-16981.Jpg" alt=""></p><p><strong>舵机</strong>：是伺服电机在航模、小型机器人等领域下常用的一个特殊版本</p><p><img src="https://www.allelectronics.com/mas_assets/cache/image/4/5/b/1/480x480-17841.Jpg" alt=""></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>今天我们认识了很多新伙伴。你可能眼有点花，头有点昏。不要紧，在动手实践过程中会慢慢加深了解的。</p><p>现在，你已经踏上了自己折腾的旅程——有那么多好玩的东西等着你去搭建呢！</p><p><code>输入+Arduino+输出</code> 可以实现无数的组合，只要你愿意细心查看元件的说明，按照电路的原理去设计接线，使用 tinkercad 等工具来模拟和检查电路，并且编写一些 Arduino 代码，理论上就可以做出许许多多好玩的东西。</p><p><img src="http://blog.codebender.cc/wp-content/uploads/2014/03/intro__zps2d47d1b6.png" alt=""></p><p>嗯，理论只是理论。在实际动手的过程中，我们还会遇到这样那样的问题，可能是搞不懂某个元件的工作原理，可能电路总是出问题，可能是编程很吃力。这些都是成为 Maker 的过程中必不可少的锻炼。别忘记，我们还有 instructables、Arduino 等网站和社区，上面有海量的例子、项目和资料，是我们折腾路上很好的陪伴。</p><p>接下来就开始扑腾吧！享受淹没在新知中的缺氧感，享受遇到问题解决问题的痛苦，享受打完大小 boss 通关后的成就感。不要忘记跟大家分享你的点滴心得~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/week7title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="制造" scheme="http://uegeek.com/tags/%E5%88%B6%E9%80%A0/"/>
    
      <category term="Maker" scheme="http://uegeek.com/tags/Maker/"/>
    
      <category term="Digital Fabrication" scheme="http://uegeek.com/tags/Digital-Fabrication/"/>
    
      <category term="Fab" scheme="http://uegeek.com/tags/Fab/"/>
    
      <category term="Arduino" scheme="http://uegeek.com/tags/Arduino/"/>
    
      <category term="电路" scheme="http://uegeek.com/tags/%E7%94%B5%E8%B7%AF/"/>
    
      <category term="传感器" scheme="http://uegeek.com/tags/%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>三维制图讲义03 - 三维软件和Blender介绍</title>
    <link href="http://uegeek.com/190320-3d03-blender-intro.html"/>
    <id>http://uegeek.com/190320-3d03-blender-intro.html</id>
    <published>2019-03-20T15:11:06.000Z</published>
    <updated>2019-03-20T16:14:27.040Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/3d_course_title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190306-3d01-welcome-to-the-3d-world.html" target="_blank" rel="noopener">三维制图讲义01 - 欢迎来到三维世界</a></p><p><a href="https://www.uegeek.com/190314-3d02-workflow.html" target="_blank" rel="noopener">三维制图讲义02 - 三维制作流程</a></p><p>三维软件实在太多了，到底该选哪一个？</p><p><img src="http://img.viz.mobi/3D_softwares.jpg" alt=""></p><p>我并不是资深从业者，用过的三维软件并不多。我只从个人需求出发：</p><ul><li>不贵，安装和维护简单</li><li>功能足够强大(不特别偏向工程制图/动画/三维雕塑)</li><li>软件还在持续改进中</li></ul><p>Blender 是比较理想的选择。开源、功能完善，安装和使用都比较轻巧，关键是，免费用正版啊：</p><p><img src="http://img.viz.mobi/3D_software_price.jpg" alt=""></p><p>如果是专业人士请直接忽略本文。或者移步 all3dp.com 在年初发布的一篇文章，介绍和比较了 30 款软件，其中 15 款为免费软件：</p><p><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#solidworks" target="_blank" rel="noopener">Best 3D Design/3D Modeling Software 2019 (15 of 30 are Free) | All3DP</a></p><table><thead><tr><th style="text-align:left">Name</th><th style="text-align:left">Level</th><th style="text-align:left">OS</th><th style="text-align:left">Price</th><th style="text-align:left">Formats</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#3d-slash" target="_blank" rel="noopener">3D Slash</a></td><td style="text-align:left">Beginner</td><td style="text-align:left">Windows, Mac, Linux, Raspberry Pi or Browser</td><td style="text-align:left">Free, 24$/year Premium</td><td style="text-align:left">3dslash, obj, stl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#librecad" target="_blank" rel="noopener">LibreCAD</a></td><td style="text-align:left">Beginner</td><td style="text-align:left">Windows, macOS and Linux</td><td style="text-align:left">Free</td><td style="text-align:left">dxf, dwg</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#photoshop-cc" target="_blank" rel="noopener">Photoshop CC</a></td><td style="text-align:left">Beginner</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">142€/year</td><td style="text-align:left">3ds, dae, kmz, obj, psd, stl, u3d</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#sculptgl" target="_blank" rel="noopener">SculptGL</a></td><td style="text-align:left">Beginner</td><td style="text-align:left">Browser</td><td style="text-align:left">Free</td><td style="text-align:left">obj, ply, sgl, stl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#selfcad" target="_blank" rel="noopener">SelfCAD</a></td><td style="text-align:left">Beginner</td><td style="text-align:left">Browser</td><td style="text-align:left">Free 30-day trial, 9.99$/month</td><td style="text-align:left">stl, mtl, ply, dae, svg</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#tinkercad" target="_blank" rel="noopener">TinkerCAD</a></td><td style="text-align:left">Beginner</td><td style="text-align:left">Browser</td><td style="text-align:left">Free</td><td style="text-align:left">123dx, 3ds, c4d, mb, obj, svg, stl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#clara-io" target="_blank" rel="noopener">Clara.io</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Browser</td><td style="text-align:left">Free, Premium features from 100$/year</td><td style="text-align:left">3dm, 3ds, cd, dae, dgn, dwg, emf, fbx, gf, gdf, gts, igs, kmz, lwo, rws, obj, off, ply, pm, sat, scn, skp, slc, sldprt, stp, stl, x3dv, xaml, vda, vrml, x_t, x, xgl, zpr</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#designspark" target="_blank" rel="noopener">DesignSpark</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows</td><td style="text-align:left">Freemium, 835$ (All Addons)</td><td style="text-align:left">rsdoc, dxf, ecad, idf, idb, emn, obj, skp, STL, iges, step</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#freecad" target="_blank" rel="noopener">FreeCAD</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows, Mac and Linux</td><td style="text-align:left">Free</td><td style="text-align:left">step, iges, obj, stl, dxf, svg, dae, ifc, off, nastran, Fcstd</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#makehuman" target="_blank" rel="noopener">MakeHuman</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows, Mac, Linux</td><td style="text-align:left">Free</td><td style="text-align:left">dae, fbx, obj, STL</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#meshmixer" target="_blank" rel="noopener">Meshmixer</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows, Mac and Linux</td><td style="text-align:left">Free</td><td style="text-align:left">amf, mix, obj, off, stl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#moment-of-inspiration-moi" target="_blank" rel="noopener">Moment of Inspiration (MoI)</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">266€</td><td style="text-align:left">3ds, 3dm, dxf, fbx, igs, lwo, obj, skp, stl, stp and sat</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#nanocad" target="_blank" rel="noopener">nanoCAD</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows</td><td style="text-align:left">Freemium, 180$/year</td><td style="text-align:left">sat, step, igs, iges, sldprt, STL, 3dm, dae, dfx, dwg, dwt, pdf, x_t, x_b, xxm_txt, ssm_bin</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#openscad" target="_blank" rel="noopener">OpenSCAD</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows, Mac and Linux</td><td style="text-align:left">Free</td><td style="text-align:left">dxf, off, stl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#sculptris" target="_blank" rel="noopener">Sculptris</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">Free</td><td style="text-align:left">obj, goz</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#sketchup" target="_blank" rel="noopener">SketchUp</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">Free, 240$ Pro</td><td style="text-align:left">dwg, dxf, 3ds, dae, dem, def, ifc, kmz, stl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#3ds-max" target="_blank" rel="noopener">3ds Max</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows</td><td style="text-align:left">1505$/year, Educational licenses available</td><td style="text-align:left">stl, 3ds, ai, abc, ase, asm, catproduct, catpart, dem, dwg, dxf, dwf, flt, iges, ipt, jt, nx, obj, prj, prt, rvt, sat, skp, sldprt, sldasm, stp, vrml, w3d xml</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#autocad" target="_blank" rel="noopener">AutoCAD</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">1575$/year</td><td style="text-align:left">dwg, dxf, pdf</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#blender" target="_blank" rel="noopener">Blender</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows, Mac and Linux</td><td style="text-align:left">Free</td><td style="text-align:left">3ds, dae, fbx, dxf, obj, x, lwo, svg, ply, stl, vrml, vrml97, x3d</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#cinema-4d" target="_blank" rel="noopener">Cinema 4D</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows, macOS</td><td style="text-align:left">3695$</td><td style="text-align:left">3ds, dae, dem, dxf, dwg, x, fbx, iges, lwf, rib, skp, stl, wrl, obj</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#modo" target="_blank" rel="noopener">modo</a></td><td style="text-align:left">Professionals</td><td style="text-align:left">Windows, macOS, Linux</td><td style="text-align:left">1799$</td><td style="text-align:left">lwo, abc, obj, pdb, 3dm, dae, fbx, dxf, x3d, geo, stl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#mudbox" target="_blank" rel="noopener">Mudbox</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">85€/year</td><td style="text-align:left">fbx, mud, obj</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#onshape" target="_blank" rel="noopener">Onshape</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows, Mac, Linux, iOS, Android</td><td style="text-align:left">2400€/year, free and price reduced business version available</td><td style="text-align:left">sat, step, igs, iges, sldprt, stl, 3dm, dae, dfx, dwg, dwt, pdf, x_t, x_b, xxm_txt, ssm_bin</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#poser" target="_blank" rel="noopener">Poser</a></td><td style="text-align:left">Professionals</td><td style="text-align:left">Windows, Mac</td><td style="text-align:left">Standard 129.99$, Pro 349.99$</td><td style="text-align:left">cr2, obj, pz2</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#rhino3d" target="_blank" rel="noopener">Rhino3D</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">495€ Educational, 995€ Commercial</td><td style="text-align:left">3dm, 3ds, cd, dae, dgn, dwg, emf, fbx, gf, gdf, gts, igs, kmz, lwo, rws, obj, off, ply, pm, sat, scn, skp, slc, sldprt, stp, stl, x3dv, xaml, vda, vrml, x_t, x, xgl, zpr</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#zbrush" target="_blank" rel="noopener">ZBrush</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">400€ Educational License, 720€ Single User License</td><td style="text-align:left">dxf, goz, ma, obj, stl, vrml, x3d</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#catia" target="_blank" rel="noopener">CATIA</a></td><td style="text-align:left">Industrial</td><td style="text-align:left">Windows</td><td style="text-align:left">7180€; Educational licenses available</td><td style="text-align:left">3dxml, catpart, igs, pdf, stp, stl, vrml</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#fusion-360" target="_blank" rel="noopener">Fusion 360</a></td><td style="text-align:left">Industrial</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">499.80€/year, Educational licenses available</td><td style="text-align:left">catpart, dwg, dxf, f3d, igs, obj, pdf, sat, sldprt, stp</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#inventor" target="_blank" rel="noopener">Inventor</a></td><td style="text-align:left">Industrial</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">1935$/year</td><td style="text-align:left">3dm, igs, ipt, nx, obj, prt, rvt, sldprt, stl, stp, x_b, xgl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#solidworks" target="_blank" rel="noopener">Solidworks</a></td><td style="text-align:left">Industrial</td><td style="text-align:left">Windows</td><td style="text-align:left">9950€, Educational licenses available</td><td style="text-align:left">3dxml, 3dm, 3ds, 3mf, amf, dwg, dxf, idf, ifc, obj, pdf, sldprt, stp, stl, vrml</td></tr></tbody></table><p>下载 Blender 请到官网 blender.org 选择 2.80 版本。不推荐之前的版本，是因为 2.8 版本的调整实在太大了，几乎对整个软件各方面都做了一些重构。尤其是加入了实时渲染的 eevee 引擎，用上就已经回不去之前的版本了……</p><p>Blender 官网每天会发布新的测试版(迭代速度真的飞快)。下载后找到应用程序直接打开就可以使用。</p><p>打开软件后，可以先按需做一些设置，比如显示中文菜单、修改小键盘相关的快捷键：</p><ul><li>语言选择：顶部菜单-Edit-Preferences-Interface-Translation</li><li>鼠标/键盘快捷键设置：顶部菜单-Edit-Preferences-Keymap</li></ul><p><img src="http://img.viz.mobi/Blender_language.png" alt=""></p><p>学习 Blender，最重要的是反复练习。在这个系列课程讲义中，我不会详细讲解怎么使用软件，网上已经有相当多很棒的视频教程了。</p><p>我会尝试提供一些基本的练习清单，也就是帮助大家去拆解需要训练的技能。</p><p>这一周涉及的技能模块是最基础也是最重要的，因为它们的组合构成了 Blender (包括在其他三维软件里) 大部分的操作。</p><h3 id="视图浏览"><a href="#视图浏览" class="headerlink" title="视图浏览"></a>视图浏览</h3><p>围绕着兴趣点旋转视图：按下鼠标中键并移动</p><p>缩放视图：滚轮鼠标中键</p><p>平移视图：Shift+按下鼠标中键</p><p>正/右/顶视图切换：如果没有小键盘，需要先在设置中修改快捷键，比如我一般设置 Alt 1 / Alt3 / Alt7 为正/右/顶视图</p><h3 id="物体移动-旋转-缩放"><a href="#物体移动-旋转-缩放" class="headerlink" title="物体移动+旋转+缩放"></a>物体移动+旋转+缩放</h3><p>非快捷键操作：先选中物体，然后在左侧工具栏选择 移动/选择/缩放 工具，然后操作</p><p><img src="http://img.viz.mobi/Blender_move.jpg" alt=""></p><p>快捷键操作：先选中物体，然后按一下 G 键，移动鼠标就会看到物体会跟随移动。移到目标位置后，点鼠标左键，物体就确认移动。</p><p>但是在移动时，我们经常需要只沿着某个轴(x轴辅助线为红色，y轴辅助线为绿色，z轴辅助线为蓝色)移动。</p><p>这个操作又有两种做法</p><ul><li>按一下 G/R/S 键后，再按一下需要沿着哪个轴移动，比如沿着 x 轴就按下 x 键，然后移动物体；</li><li>或者配合鼠标中键使用：按下 G 键后，按住鼠标中键，沿着坐标轴参考线移动，物体就会只沿着这条坐标轴移动</li></ul><p>确认移动都是点击鼠标左键。</p><p>沿着某个轴旋转和缩放也是类似的操作。</p><ul><li>比如，沿 x 轴旋转：r - x - 移动鼠标 - 按鼠标左键确认</li><li>比如，沿 z 轴缩放：s - z - 移动鼠标 - 按鼠标左键确认</li></ul><p>以上就是这节课的主要练习：用不同的视图查看物体，移动/旋转/缩放物体。</p><p>记得多练习几次哦，下周见~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/3d_course_title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="3D" scheme="http://uegeek.com/tags/3D/"/>
    
      <category term="Modeling" scheme="http://uegeek.com/tags/Modeling/"/>
    
      <category term="Blender" scheme="http://uegeek.com/tags/Blender/"/>
    
  </entry>
  
  <entry>
    <title>数字制造讲义03-电路基础</title>
    <link href="http://uegeek.com/190319-df03-electronics-basic.html"/>
    <id>http://uegeek.com/190319-df03-electronics-basic.html</id>
    <published>2019-03-19T14:47:16.000Z</published>
    <updated>2019-03-19T15:11:34.114Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/week7title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190305-df01-digital-fabrication.html" target="_blank" rel="noopener">数字制造讲义01-成为数字世界的建造者</a></p><p><a href="https://www.uegeek.com/190313-df02-arduino-intro.html" target="_blank" rel="noopener">数字制造讲义02-Arduino入门</a></p><p>上一节课，我们学习了时下最普及的单片机开发软硬件工具 Arduino。今天我们来了解 Arduino 开发板，以及其他电子元器件背后的基础——电路。</p><p>上次我们用 Arduino 和面包板搭了第一个简单的电路，了解到电路就是电流的通路，电流给电路中的负载输送能量，负载将电能转化为其他能量，比如💡亮起来。</p><p><img src="http://img.viz.mobi/circuitMetaphor.jpg" alt=""></p><h2 id="电路101"><a href="#电路101" class="headerlink" title="电路101"></a>电路101</h2><p>如果把电流比作水流，那么电路就有点像为水流提供通路的水渠。在没有人为干预的情况下，水从高处向地处流。如果想给不同高度的地方提供用水，就需要建造水塔，或者用水泵把水从 A 处运送到 B 处。</p><p>电流也是类似。电源是电位/电压的高点，接地点是电位的零基准点，电流由两点之间的电压差形成，从电压高的地方流量电压低的地方。</p><p><img src="http://img.viz.mobi/currentIllustration.jpg" alt=""></p><p>在流动的过程中，河床或水渠不可能绝对平整，而是会坑坑洼洼高低起伏，这样就对水流产生了一些阻碍作用。在电路中也是类似，电阻对电路产生阻力 (通过将电能转化为热能)。</p><p>简单来说，电路有三种状态：通路，开路（某处断开）和短路。</p><p><img src="http://img.viz.mobi/3typesofCircuits.png" alt=""></p><p>其中短路是指，电路中有很大电流流过，但不流过负载，负载不起作用。咳咳，也就是说，在电路中走捷径是有代价的（🤦‍♀️）。</p><p>下面这个视频，可以帮助我们形成对电路更直观的印象：</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=b0850foexnn" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/b0850foexnn.html" target="_blank" rel="noopener">Electric Circuits_腾讯视频</a></p><p>从电流/水流的类比中，我们总结出电路中几个基本的规律：</p><ul><li>电流趋向于电阻小的路径 (最小阻力原则)</li><li>电路始终要接地 (有始有终原则)</li><li>要防止短路 (有钱也不能任性原则)</li></ul><h2 id="电路102"><a href="#电路102" class="headerlink" title="电路102"></a>电路102</h2><h3 id="串联和并联"><a href="#串联和并联" class="headerlink" title="串联和并联"></a>串联和并联</h3><p>电路有两种基本类型：串联和并联。</p><p>为什么要学这个？因为它们是计算电路中电阻、电流等数值的基础知识。比如，要点亮多个 LED，需要多少伏的电源？</p><p>当多个元件串联（下图图二）时，会平均「瓜分」掉整段串联电路两端的电压，也就是起到分压作用。当多个元件并联时(下图图三)，「复制」了原本只有 1 个元件时的电压。</p><p><img src="http://img.viz.mobi/Series%20and%20Parallell%20Circuits.png" alt=""></p><p>via tinkercad.com</p><p>再仔细观察一下，对比图一，为什么图二中的 LED 几乎没有亮？图三的 LED 为什么稍微暗一点？(图中的电阻都是 60Ω)</p><p>在图一中，我们测到点亮 LED 所需的电压约为 2V。如果要在串联电路中点亮两个 LED，那么根据「瓜分」原理，就需要提供 4V 的电压。但是图二的电池只有 3V，所以灯就点不亮啦。</p><p>在图三中，如果用万用表测量 LED 两端的电压，会发现电压只稍微下降到 1.9x V，LED 只是稍微变暗一点，接入很多 LED 也可以点亮。</p><h3 id="欧姆定律"><a href="#欧姆定律" class="headerlink" title="欧姆定律"></a>欧姆定律</h3><blockquote><p>V = I * R</p><p>流过电阻的电流 I 与电阻两端电压 U 成正比，与电阻 R 成反比</p></blockquote><p>大家对欧姆定律都不陌生。那么知道欧姆定律在这门课中，最直接的应用是什么？它帮助我们计算电路中需要用多少阻值的电阻。</p><p>在前面一部分，我们讲过要防止短路。短路的本质就是电路中有很大的电流通过，这样会烧坏电路元件。电阻的作用是限制电流的大小，保护元件，保持电路正常运作。</p><p>比如一个 LED 的额定电流是 20 mA，我们手头只有一个 9V 电池。</p><p><img src="http://img.viz.mobi/shortCircuit.png" alt=""></p><p>如果要保证 LED 安全，电路的阻值应该为 <code>9V / 0.02A=450Ω</code> 。这样我们就知道应该选择多少阻值的电阻加入到电路中了。</p><h3 id="基尔霍夫定律"><a href="#基尔霍夫定律" class="headerlink" title="基尔霍夫定律"></a>基尔霍夫定律</h3><p>基尔霍夫定律？有什么用？</p><p>我们已经有欧姆定律了，为什么还需要多一个定律？因为电路也是会变得很复杂的嗯，比如有多个电池并联，比如要在电阻电路中加入电容(下一节会介绍)，那该怎么计算其中的电流与电压？</p><p>19世纪，德国物理学家基尔霍夫扩展了欧姆定律，提出基尔霍夫定律：</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=g0359uuom6b" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/g0359uuom6b.html" target="_blank" rel="noopener">Crash Course Physics 31_腾讯视频</a></p><p>基尔霍夫第一定律(电流定律) </p><blockquote><p>在任何一个节点电路，流入该节点的总和电流，等于流出该节点的电流的总和，或：所有进入某节点的电流总和,等于所有离开这节点的电流总和。</p><p>power: P = I<sup>2</sup> , R = I V</p></blockquote><p>基尔霍夫第二定律(电压定律)</p><blockquote><p>沿着闭合回路所有元件两端的电势差（电压）的代数和等于零。或者，所有电动势的代数和，等于所有电压降的代数和。</p></blockquote><h2 id="基本电路元件"><a href="#基本电路元件" class="headerlink" title="基本电路元件"></a>基本电路元件</h2><p><img src="http://img.viz.mobi/basicElectronicParts.jpg" alt=""></p><p>它们在电路图中的表示方法：</p><p><img src="https://i1.wp.com/www.makerspaces.com/wp-content/uploads/2017/05/electronic-symbols2.jpg?resize=673%2C800&amp;ssl=1" alt=""></p><h3 id="电阻"><a href="#电阻" class="headerlink" title="电阻"></a>电阻</h3><p>电阻的主要作用是限制电流。</p><p>不同的电路需要选择不同形态的电阻：DIP，SIP，SMD。</p><p>DIP（dual in-line package），两头都有引脚的电阻，是入门时使用的常见电阻。</p><p><img src="https://ae01.alicdn.com/kf/HTB1iEAaj1uSBuNjy1Xcq6AYjFXa5/Free-ship-with-track-brand-new-200pcs-2R-2W-DIP-Resistors-carbon-Resisters-2W-2ohm-5.jpg" alt=""></p><p>这种电阻的阻值一般通过彩色的色环识别。有 4 环和 5 环两种标记方法，一般是记不住的，手头备一张色环卡比较实在：</p><p><img src="https://www.digikey.com/-/media/Images/Marketing/Resources/Calculators/resistor-color-chart.png?ts=e802ab48-1ea0-4745-babf-9a21accec5c2&amp;la=en-US" alt=""></p><p>第一、二环是读数，第三环(五环的话是第四环)是乘数，比如 红-红-棕 表示 220 V。</p><p>SIP (single in-line package)，一头有引脚的电阻：</p><p><img src="https://images-na.ssl-images-amazon.com/images/I/310RCcbsdbL._SX342_.jpg" alt=""></p><p>SMD (Surface Mounted Device)，贴片电阻，用于常见的 PCB 电路板：</p><p><img src="https://leetechbd.com/wp-content/uploads/2017/12/SMD-Resistor.jpg" alt=""></p><h3 id="电容"><a href="#电容" class="headerlink" title="电容"></a>电容</h3><p>电容又是什么？</p><p>顾名思义，可以作为电荷容器的一种元件。</p><ul><li>充放电特性：电容将电路中的电荷收集起来，然后在电压变化时放电。</li><li>阻直通交特性：阻止直流电流通过，允许交流电流通过(像个交警)</li></ul><p>电容试图抵抗电路内的电压变化。因此，电容通常连接在电源和地之间，以保持稳定的电源并滤除间歇性的电压尖峰和下降。</p><p><img src="https://cdn.instructables.com/FIA/1QHW/IQU11IWI/FIA1QHWIQU11IWI.LARGE.jpg?auto=webp" alt=""></p><p>其他元件就不继续一一介绍了。元件外型可以到 <a href="https://library.io/explore/3dmodels" target="_blank" rel="noopener">Explore/3DModels | library.io</a> 查看，元件的参数可以找到对应的 datasheet 查看。</p><h2 id="电路图"><a href="#电路图" class="headerlink" title="电路图"></a>电路图</h2><p>电路图就是将各种元件连接起来组成完整电路的图示。</p><p>运用前面学过的知识，我们可以开始搭建电路图。在实际接线之前，建议先用工具画出接线图，可以帮助我们理清电路的功能和部件。推荐使用 Tinkercad 的 circuit 模块，网站上提供了一些常用的电路元件，方便快速搭建出虚拟电路。</p><p><img src="https://csg.tinkercad.com/things/gw3hgGtVAdR/t725.png?rev=1517977820936000000&amp;s=ff528d92add92115be11517f8d5f191d&amp;v=1&amp;type=circuits" alt=""></p><p>更棒的是，它还提供了电路模拟运行的功能，分析电路中可能出现的问题，尤其是存在短路时会明确提示。这样就再也不用担心电路接不好会频繁烧坏元件了！✌️</p><p><img src="https://cdn.instructables.com/F4A/OTSY/J1CEMMNL/F4AOTSYJ1CEMMNL.ANIMATED.SMALL.gif" alt=""></p><p>更让人开心的是，还集成了 Arduino 的模块功能，让没有编程基础的使用者，也能快速上手编写简易程序：</p><p><img src="https://www.tinkercad.com/img/electronics/circuits-editor.gif" alt=""></p><p>去试试看吧~ 👀</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/week7title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="制造" scheme="http://uegeek.com/tags/%E5%88%B6%E9%80%A0/"/>
    
      <category term="Maker" scheme="http://uegeek.com/tags/Maker/"/>
    
      <category term="Digital Fabrication" scheme="http://uegeek.com/tags/Digital-Fabrication/"/>
    
      <category term="Fab" scheme="http://uegeek.com/tags/Fab/"/>
    
      <category term="Arduino" scheme="http://uegeek.com/tags/Arduino/"/>
    
      <category term="电路" scheme="http://uegeek.com/tags/%E7%94%B5%E8%B7%AF/"/>
    
      <category term="基尔霍夫定律" scheme="http://uegeek.com/tags/%E5%9F%BA%E5%B0%94%E9%9C%8D%E5%A4%AB%E5%AE%9A%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>三维制图讲义02 - 三维制作流程</title>
    <link href="http://uegeek.com/190314-3d02-workflow.html"/>
    <id>http://uegeek.com/190314-3d02-workflow.html</id>
    <published>2019-03-14T11:25:06.000Z</published>
    <updated>2019-03-14T11:35:35.349Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/3d_course_title.jpg" alt=""></p><a id="more"></a><p>在进入三维软件的学习之前，我们先来了解一下在这方面应用最为成熟的产业之一：三维动画影视制作。</p><p>下面是 3D Production Pipeline 的流程图，很好地总结了一部完整的动画影片的制作过程。</p><p><img src="http://img.viz.mobi/3d_production_timelines.jpg" alt=""></p><p>我们在这个学期从零基础学起，主要涉及到的是 Modeling 建模和 Texturing 材质贴图部分，也会简单应用一些 Lighting 灯光和 Rendering 渲染的知识。</p><p>在整个制作流程中，会涉及很多工具。下面是以 Blender 为例的 workflow（<a href="http://www.bgteach.com/article/9" target="_blank" rel="noopener">来源</a>）：</p><p><img src="http://www.bgteach.com/files/default/2017/10-17/17124088c083968322.png" alt=""></p><p>在新年期间上映的「流浪地球」，已经充分展示出国内影视技术的实力。<a href="https://mp.weixin.qq.com/s/O8Zp7ok0JpPuFkofnQ7UaQ" target="_blank" rel="noopener">这篇访谈</a>介绍了大量的前期概念设计，涉及人物、场景、装备等等，推荐感兴趣的同学看一看。</p><p>相信绝大部分同学都看过皮克斯出品的动画：玩具总动员、海底总动员、超人总动员、机器人总动员、飞屋环游记、头脑特工队……每一部都是传奇般的经典。皮克斯不但连续制作出高水准的作品，而且为行业积累了大量实践经验，推动着影视动画制作向前发展。而且，皮克斯还推出了一套非常系统的动画制作入门课程，包括故事、角色、场景、材质、动效、灯光等等制作环节，制作精良，墙裂推荐大家观看。</p><p>下面的视频会对整个课程做一个导览：</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=w0527u1xhcs" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/w0527u1xhcs.html" target="_blank" rel="noopener">Pixar in Box_腾讯视频</a></p><h2 id="三维制作-3-1"><a href="#三维制作-3-1" class="headerlink" title="三维制作 3+1"></a>三维制作 3+1</h2><p>通过皮克斯的介绍视频，大家对整个制作过程有了一定了解。</p><p>在这么复杂的过程中，有三样东西是必不可少的。这三样东西也是我们打开 Blender 软件后，在视图区看到的东西：</p><p><img src="http://img.viz.mobi/blenderDefault.jpg" alt=""></p><p>那么 3+1 的 1 又是什么呢？有了几何体、灯光和镜头，我们还需要渲染，才能生成最终的图像。下面对 3+1 分别做简单的介绍。</p><h3 id="几何体"><a href="#几何体" class="headerlink" title="几何体"></a>几何体</h3><p>点线面是最基本的造型单位。在三维建模中，点线面有另外的名字：</p><ul><li>顶点-vertices：在几何体角落上的点</li><li>边-edges：连接顶点的线</li><li>面-faces：由若干条边围成的填充区域</li></ul><p><img src="http://img.viz.mobi/720px-Mesh_overview.svg.png" alt=""></p><p>任何的几何体，再复杂的模型，无非都是反复增删、调整顶点、边和面而形成的。</p><p>如果说点、线、面是基本的操作对象，那么平移（translation）、缩放（scale）、旋转（rotation）就是基本的操作方式。这些是我们在三维设计建模过程中主要的工作。</p><h3 id="材质-灯光"><a href="#材质-灯光" class="headerlink" title="材质/灯光"></a>材质/灯光</h3><p>材质和灯光决定了一个物体看起来是什么样的。</p><p>材质涉及到纹理、粗糙度、反射率、亮度等等复杂的参数。</p><p><img src="https://cdnb.artstation.com/p/assets/images/images/001/809/163/large/ania-przybylko-kostki.jpg?1453072206" alt=""></p><p>而灯光需要根据物体在真实光照环境下，对光线的反射规律来计算并呈现。在一个模型的表面，有许多多边形，每一个多边形接收和反射的光并不一样，这与人眼识别立体物体的原理有关。</p><p><img src="http://img.viz.mobi/$flatshading.png" alt=""></p><p>材质结合光照，组成了千变万化的组合，也给三维世界带来了无数的可能性。</p><p><img src="http://img.viz.mobi/materialWithLights.jpg" alt=""></p><h2 id="镜头"><a href="#镜头" class="headerlink" title="镜头"></a>镜头</h2><p>镜头是大家相对陌生的领域。因为我们天然就有着两个镜头——眼睛。看向哪里、怎么看，几乎不需要经过思考和反应，所以我们感觉不到自己身上这个「镜头」的存在。</p><p>但是在虚拟的三维世界中，镜头决定了场景的呈现。</p><p><a href="https://www.khanacademy.org/partner-content/pixar/sets/sets1/v/sets-overview" target="_blank" rel="noopener">Introduction to geometric transformations (video) | Khan Academy</a></p><p>在影视动画中，镜头是叙事的关键要素之一。如何设置镜头相关的参数，获得我们想要的渲染结果，会在后续的课程中涉及到。</p><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p>可以说，渲染是一个令人头疼的词。它意味着费时费力（主要是费计算机的算力）。</p><p>为什么需要渲染？相比手绘图像，三维图像其实不是被「画」出来的，而是由很多参数计算并自动绘制出来的成果。渲染就是计算机根据参数计算最终展示结果的过程。</p><p>计算机成像有不同的渲染方式。光栅化和光线追踪是常见的两种。</p><ul><li>光栅化（Rasterization）是把顶点转换为片元的过程，也就是将图转化为一个个栅格组成的图象，特点是每个元素对应帧缓冲区中的一个像素。  </li><li>光线追踪（Ray tracing）是三维计算机图形学中的特殊渲染算法，跟踪从眼睛发出的光线而不是光源发出的光线，生成编排好的场景的数学模型显现出来。</li></ul><p><img src="http://img.viz.mobi/HybridRendering.jpg" alt=""></p><p>在后续的课程中我们还会来讲解。</p><h2 id="补充知识：三维投影"><a href="#补充知识：三维投影" class="headerlink" title="补充知识：三维投影"></a>补充知识：三维投影</h2><p>计算机是二维屏幕，如何表示三维的物体和世界呢？</p><p>这里要借助三维投影的概念。</p><p><img src="http://img.viz.mobi/wireframeRendering.jpg" alt=""></p><p>从字面理解，投影就是物体被光照后投射到一个平面上的影像。计算机图形学里有大量关于光线和投影的研究。</p><p>在三维设计中，会经常接触到两种投影：透视投影（Perspective Projection）和正射投影（Orthographic Projection）。</p><p>下图可以帮助我们理解两者的区别：</p><p><img src="http://img.viz.mobi/projection_example.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/3d_course_title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="3D" scheme="http://uegeek.com/tags/3D/"/>
    
      <category term="Animation" scheme="http://uegeek.com/tags/Animation/"/>
    
      <category term="Modeling" scheme="http://uegeek.com/tags/Modeling/"/>
    
      <category term="Texture" scheme="http://uegeek.com/tags/Texture/"/>
    
      <category term="Camera" scheme="http://uegeek.com/tags/Camera/"/>
    
      <category term="Lighting" scheme="http://uegeek.com/tags/Lighting/"/>
    
  </entry>
  
  <entry>
    <title>数字制造讲义02-Arduino入门</title>
    <link href="http://uegeek.com/190313-df02-arduino-intro.html"/>
    <id>http://uegeek.com/190313-df02-arduino-intro.html</id>
    <published>2019-03-13T11:02:31.000Z</published>
    <updated>2019-03-13T11:16:52.392Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/week7title.jpg" alt=""></p><a id="more"></a><p>在这个学期，我们会学习数字制造中主要的环节和技术，包括 Build 和 Code 两部分。</p><p><img src="http://img.viz.mobi/Build&amp;Code.001.JPEG" alt=""></p><p>上半学期我们主要学习 Code 部分，它赋予物品「灵魂」，让一件物品能完成我们期望的功能和互动。</p><p>怎样让物品拥有一定的「智力」呢？</p><p>给它加上芯片嘛。</p><p>可是芯片、电路、元件、硬件啊，都涉及到很专业的知识，对一般人来说门槛太高了。所以今天我们来介绍通往硬件世界的捷径——Arduino。</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=m0823vlpahu" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/m0823vlpahu.html" target="_blank" rel="noopener">Arduino创始人TED演讲：开启开源想象力</a></p><p>Arduino 的初衷，是为了让没有电子相关专业背景的人，能够在很短的时间内上手。这个小小的板子，撬开了很多人的想象力，让动手做东西的门槛降低，让无数好玩的想法得以试验和实现。</p><h2 id="为什么要用-Arduino？"><a href="#为什么要用-Arduino？" class="headerlink" title="为什么要用 Arduino？"></a>为什么要用 Arduino？</h2><p>它可以帮助我们用很小的成本，快速地搭建智能物件的原型。也就是</p><blockquote><p>Prototype &amp; Digitize for the Real World</p></blockquote><p>很多时候，我们有一个想法，比如：有一个自动给花浇水的装置。「自动」意味着我们会设定一些规则，在某些条件下自动触发浇花这个动作。要实现自动，就会需要一个类似电脑一样的带有一定「理解能力」的执行者。如果每一个想法，都需要一台电脑来实现，那我们早就破产了。</p><p>这时候只需要一个电脑的极度简化版本——我们一般叫做单片机（Microcontrollers）。它是一种集成电路芯片，把具有数据处理能力的中央处理器CPU、随机存储器RAM、只读存储器ROM、多种I/O口和中断系统、定时器/计数器等功能集成到一块硅片上，构成的一个小而完善的微型计算机系统，在工业控制领域广泛应用。</p><p>单片机的大小确实可以只有薄薄的一片，方便我们放置到各种各样的物体内部，赋予它计算的能力。</p><p>Arduino 就是一种单片机。</p><p><img src="https://cdn.arduino.cc/homepage/static/media/arduino-UNO.bcc69bde.png" alt=""></p><p>类似的工具还有树莓派（不算单片机了，是基于 Linux 的低配电脑）等等，它比 Arduino 要强大，因为芯片不止 8 位，可以运行操作系统。</p><p><img src="https://shawzt.github.io/assets/images/raspberry_pi.png" alt=""></p><h2 id="模拟信号和数字信号"><a href="#模拟信号和数字信号" class="headerlink" title="模拟信号和数字信号"></a>模拟信号和数字信号</h2><p>当我们想要对实体环境施加影响，经常需要将模拟信号转化为数字信号——因为我们能操纵数字信号（编程就是一种强大的操纵），但是不能任意改变模拟信号。</p><p>那么什么是模拟信号和数字信号呢？</p><p>简单来说，模拟信号在时间上和取值上都是连续不间断的（可无限微分）。自然界常见的信号都是模拟信号，比如温度、声音等等。而数字信号在时间上和取值上，不完全连续，存在很多「档位」，档位越多，意味着信号的分辨率越高。</p><p>更详细的讲解，我们可以看看下面这个视频：</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=z06602duiv9" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/z06602duiv9.html" target="_blank" rel="noopener">什么是模拟信号？数字信号？区别是什么？它们又是如何完成转换的？</a></p><p>Arduino 的主要作用之一，就是帮助我们实现模数转换，完成对物理世界数据的采集，以及处理信号后反馈到物理世界中。</p><h2 id="Arduino-开发板"><a href="#Arduino-开发板" class="headerlink" title="Arduino 开发板"></a>Arduino 开发板</h2><p>Arduino 有许多不同型号、功能各异的开发板。</p><p><img src="https://assets.t3n.sc/news/wp-content/uploads/2016/07/Arduino-Boards-595x680.jpg" alt=""></p><p>其中一些体积更小，或是芯片的能力更强，又或者搭载了 wifi 或蓝牙模块。这样我们可以根据自己项目的需要，使用不同的板子。每一块板子的具体信息，可以在官网上查看。</p><p>Arduino 的开发板，本质上都是单片机应用开发板，使用的芯片大都是 AVR 芯片。开发板封装和简化了最常用的软硬件模块。硬件主要是提供基本的芯片、数字信号端口、模拟信号端口、电源和其他一些接口。软件主要提供了简单的函数和应用库，不用直接去操作寄存器，使得没有太多单片机基础的人也可以使用。</p><p><img src="http://img.viz.mobi/arduino-illustration.jpg" alt=""></p><h2 id="用-Arduino-搭建简易电路"><a href="#用-Arduino-搭建简易电路" class="headerlink" title="用 Arduino 搭建简易电路"></a>用 Arduino 搭建简易电路</h2><p>电路是什么玩意儿？</p><p>作为一种路，它其实跟公路、地铁线路有点类似，只不过它运送的不是车辆和人，而是电荷。人和车会选择最短路径或者换乘最少的路线，电荷也会沿着阻碍最小的路径移动。</p><p>在最简单的电路中，有三个必不可少的部分：电源、中间环节、负载。</p><p>负载是指将电能转化为其他形式能量的部分，例如灯泡、电机等。电路的使命，是为了让负载能够正常工作。</p><p><img src="http://img.viz.mobi/circuitMetaphor.jpg" alt=""></p><p>（雾）</p><p>下面就是一个最简单的电路，电流从电源正极流经 LED，返回到电源负极。</p><p><img src="http://img.viz.mobi/breadboardCircuit.jpg" alt=""></p><p>上图右侧是一块面包板，它的作用是提供电路连接，帮助我们快速搭建电路。</p><p>在面包板中，Terminal Strips 都是连通的，而两侧的 Power Rails 也是连通的。</p><p><img src="http://img.viz.mobi/breadboardEX.jpg" alt=""></p><p>关于电路板的使用，可以看看这个讲解得很仔细的视频：<a href="https://www.youtube.com/watch?v=6WReFkfrUIk" target="_blank" rel="noopener">https://www.youtube.com/watch?v=6WReFkfrUIk</a> （备好梯子）</p><p>Arduino 提供了电源和接地的端口，这样我们可以快速连成一个完整的电路：</p><p><img src="http://img.viz.mobi/veryBasicCircuit.png" alt=""></p><h2 id="Arduino-编程环境"><a href="#Arduino-编程环境" class="headerlink" title="Arduino 编程环境"></a>Arduino 编程环境</h2><p>Arduino 开发板是硬件部分。接下来我们了解软件部分。从 Arduino 官网下载 Arduino 软件并安装，打开后就看到 Arduino 的编程环境。</p><p>现在不但可以在软件中编程，还可以访问在线编程工具：<a href="https://create.arduino.cc/" target="_blank" rel="noopener">https://create.arduino.cc/</a></p><p><img src="https://hackster.imgix.net/uploads/attachments/256423/screenshot_2017-01-31_16_Jb6CmduoC2.png?auto=compress%2Cformat&amp;w=680&amp;h=510&amp;fit=max" alt=""></p><p>具体的界面功能就不详细介绍了。</p><p>同学们最开始上传程序到板子时容易遇到一个错误，大都是因为没有选择传输端口导致的。需要注意在 <code>Tools</code> 菜单中选择对应的端口再上传。如果使用 USB 连接板子和电脑，就选择包含 <code>USB</code> 的端口。</p><p><img src="https://i.stack.imgur.com/MOvDD.png" alt=""></p><p>下节课我们介绍一些电路基本知识。C U</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/week7title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="制造" scheme="http://uegeek.com/tags/%E5%88%B6%E9%80%A0/"/>
    
      <category term="Maker" scheme="http://uegeek.com/tags/Maker/"/>
    
      <category term="Digital Fabrication" scheme="http://uegeek.com/tags/Digital-Fabrication/"/>
    
      <category term="Fab" scheme="http://uegeek.com/tags/Fab/"/>
    
      <category term="Arduino" scheme="http://uegeek.com/tags/Arduino/"/>
    
      <category term="单片机" scheme="http://uegeek.com/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
      <category term="电路" scheme="http://uegeek.com/tags/%E7%94%B5%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>三维制图讲义01 - 欢迎来到三维世界</title>
    <link href="http://uegeek.com/190306-3d01-welcome-to-the-3d-world.html"/>
    <id>http://uegeek.com/190306-3d01-welcome-to-the-3d-world.html</id>
    <published>2019-03-06T11:02:11.000Z</published>
    <updated>2019-03-13T11:16:43.183Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/3d_course_title.jpg" alt=""></p><a id="more"></a><h2 id="一个价值数百小时的问题"><a href="#一个价值数百小时的问题" class="headerlink" title="一个价值数百小时的问题"></a>一个价值数百小时的问题</h2><blockquote><p>与我何干？</p></blockquote><p>为什么要学习三维制图？</p><p>有点诡异的是，还没有学的人，很难回答上来。但是，如果不<strong>自发</strong>地问自己这个问题，学不好的可能性会挺大——如果我都不知道为什么学，我又为什么要去学呢？</p><p>那到底这应该是学生问自己的问题，还是老师提出的问题？</p><p>双方都应该<strong>主动</strong>提出。</p><p>如果学生不在老师提出前就问问自己，学习动力就不会很强，「不就是一门必修课嘛」。如果老师不在课程之初提出来，大概也是借「这就是一门必修课」让自己省点力……如果不回答这个问题，这门课大概也就没必要继续上了——双方都不知道为了什么呀。</p><p>在 <a href="https://www.uegeek.com/180106-the-learning-myth.html" target="_blank" rel="noopener">大哉问05 - 什么是学习中最大的误区？</a> 中，我们讨论过学习中最大的误区：</p><p><img src="http://img.viz.mobi/mythOfStudy.png" alt=""></p><p>回顾自己这么多年的学习经历，但凡学了等于白学的东西，基本上都有一个共同特点：我不清楚为什么而学。</p><p>也就是，没有花十分钟时间去思考一下：到底跟我有什么关系？然后就浪费了数十、上百小时在上面。</p><p>学习是一件难受的事情，因为需要在某种程度上改变自己。比如这门课，对没有美术和绘画基础的同学来说，会进入一个不舒适的技能区域；它也会比想象要精（gui）密（mao），而且还有一些数学知识……当我不知道为何而战的时候，为什么要去承受一些折磨？我们费力是为了讨什么好？</p><p>这是我希望每一门课开始时，老师能告诉我的。更好的是，老师不只是告诉我，他还用他在其中获得的经验、快乐、热情来 fire 我——在旅途的起点就加上油，而不是一辆没有动力的车，需要人推着走。</p><h2 id="Why-3D"><a href="#Why-3D" class="headerlink" title="Why 3D?"></a>Why 3D?</h2><blockquote><p>重新认识我们的世界；如果有可能，去创造新世界</p></blockquote><p>这是我给自己定制的通用学习目标，适用于大部分知识和技能的学习。</p><h3 id="重新认识世界"><a href="#重新认识世界" class="headerlink" title="重新认识世界"></a>重新认识世界</h3><blockquote><p>世界上本来到处是神迹。神迹出现得多了，也就没有了神迹。——00</p></blockquote><p>我们生活在三维世界中。但是我们对「三维」的理解，大都是直觉，而不是精细编码过的知识。</p><p>「看」是每个人的本能，所以我们不需要去思考它，更不需要去理解它是如何运作的。但是，如果有一天，我们了解到其中的一些奥妙，从此看待世界的视角和眼光会发生改变——你不再会用以往的眼光，去看待那些看似平凡的神奇事物。人因此而习得了带有个性的审美和偏好，能够欣赏光影的变幻、赞叹生命的神奇，并且在探索谜题中获得乐趣。</p><p>我们不仅生活在三维世界中，我们还在编织、建造虚拟的三维世界：</p><p>比如说动画</p><p><img src="https://m.media-amazon.com/images/I/71+8hkKvieL._SS500_.jpg" alt=""></p><p>比如说电影</p><p><img src="http://img.viz.mobi/liulangdiqiu-poster.jpg" alt=""></p><p>VR</p><p><img src="https://sportsilab-cms.imgix.net/39qybULeGQWiAGGu642cA2/8f3c29e61c9a08d87380c633b9079948/The_International_2015__Key_Arena__Seattle__Washington_D.C..jpg?ixlib=rb-1.2.2&amp;fit=crop&amp;auto=fm%2Ccompress&amp;w=1280&amp;h=800&amp;s=685daf5f7c0beb8a433e80a764a866db" alt=""></p><p>游戏</p><p><img src="http://img.viz.mobi/zelda.jpg" alt=""></p><p>有些东西，知道以后，就再也回不去了。就像塞尔达的这张经典场景。新的世界就在眼前。</p><h3 id="创造新世界"><a href="#创造新世界" class="headerlink" title="创造新世界"></a>创造新世界</h3><p>更激动人心的是，我们可以亲手参与创造这些世界。也就是，为自己或他人造梦。</p><p>比如，现在的乐器，我们可以绘制和生产出来：</p><p><img src="https://d1ag85ptixulvl.cloudfront.net/k28kmvrzx80m/415FaERZHyIkOicEgiK2Is/3608caa87773424f67328628e6300f7b/family_seaboard_top.jpg?w=1200&amp;h=630" alt=""></p><p>那么，未来人们和音乐的关系可能是什么样的？未来的乐器可能是什么样的？</p><p><img src="http://hyperallergic.com/wp-content/uploads/2015/02/jsparksnomis.jpg" alt=""></p><p>以及，未来的音乐世界是什么样的？</p><p>过去已经有人探讨过，并且这种探索永远不会停止：</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=e0520x0cdpa" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/e0520x0cdpa.html" target="_blank" rel="noopener">Pipe Dream - Animusic</a></p><p>而且，这些梦境最终可以变成现实。因为真实世界也是三维的，我们可以将设想数字化，然后将它制造出来。</p><p><img src="https://digital.hammacher.com/Items/13068/13068_1000x1000.jpg" alt=""></p><h2 id="从蠢问题开始"><a href="#从蠢问题开始" class="headerlink" title="从蠢问题开始"></a>从蠢问题开始</h2><p>学习的起点在哪里？想法？课本？社群？</p><p>都可以。</p><p>我更喜欢从问一个「蠢问题」开始，比如：</p><blockquote><p>人怎么可以看见东西？</p></blockquote><p>对声音和音乐知识比较了解的同学知道，<a href="https://www.uegeek.com/180623-make-noise-02.html" target="_blank" rel="noopener">不同频率和振幅的声波，形成了不同音高和响度的声音</a>。</p><p><img src="http://img.viz.mobi/soundwave-f&amp;a.png" alt=""></p><p>听觉和视觉的原理有一些类似。跟声音类似，光也是一种波动，是能量的一种形式。人能看见东西，是因为有一种类似声波的波，它的频率决定了光的颜色，它的强度决定了光的亮度：</p><p><img src="http://img.viz.mobi/lightwave-f&amp;a.png" alt=""></p><p>人能看见的光，波长有一定的范围：</p><p><img src="http://sci.esa.int/science-e-media/img/cb/Figure_4_spectrum_High-energy_highlight.jpg" alt=""></p><p>正是环境中各种类型的光源，照射在物体上，产生了光的反射、漫射，让我们眼睛中的视网膜的感光细胞可以感知到，并且通过视神经传递到视觉皮层，由大脑「计算」出一幅关于真实世界的「投影」。</p><h2 id="神奇之处在哪里？"><a href="#神奇之处在哪里？" class="headerlink" title="神奇之处在哪里？"></a>神奇之处在哪里？</h2><p>先不说大脑到底是怎么把乱七八糟的感光强度变成一幅图像，那太硬核了。我们先来问另外一个蠢问题：</p><blockquote><p>三维世界是怎么被「拍扁」成二维图像的？</p></blockquote><p>这件事其实有人老早就在做，而且做得更专业，那就是照相机。</p><p>世界是三维的，照片是二维的，但是我们看到二维的照片，会觉得它「就是」三维的。</p><p>（此处省略摄影成像原理……）</p><p>跟照片有点类似，计算机屏幕的成像，也是二维的，也就是用 M 行 N 列的矩阵，来表示屏幕上每一个像素点。每个像素点填充不同的颜色，最终构成了整个屏幕的图像。</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=b0845ngqa6l" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/b0845ngqa6l.html" target="_blank" rel="noopener">scanline rendering</a></p><p>另一个更神奇的蠢问题：</p><blockquote><p>为什么二维平面可以模拟三维世界？</p></blockquote><p>我们去电影院看 3D 电影时，会用一副 3D 眼镜。这副眼镜帮助我们把原本二维的画面，变成三维。</p><p><img src="https://media.techeblog.com/images/3d_technology.jpg" alt=""></p><p>这一门课要学习的，其实都是关于怎么在二维的平面/屏幕上呈现三维的世界。</p><h2 id="What-is-Rio"><a href="#What-is-Rio" class="headerlink" title="What is Rio"></a>What is Rio</h2><p>将二维的麻瓜平面变成三维的巫师场景，最大的目标或者敌人就是：</p><blockquote><p>怎么让物体看起来真实？</p></blockquote><p><img src="http://www.ykwjlg.com/images/201704/source_img/3630_G_1491353910155.jpg" alt=""></p><h3 id="形状·比例"><a href="#形状·比例" class="headerlink" title="形状·比例"></a>形状·比例</h3><p>人天生对人体各种部位的比例敏感，对物体的形状也有远超计算机的辨认能力。「真」的第一要义，是形状和比例要接近我们对真实人事物的印象。</p><p><img src="https://cdn3-www.comingsoon.net/assets/uploads/2017/07/Westworld.jpg" alt=""></p><p>（当然，虚拟场景尤其是游戏、动画另当别论）</p><p><img src="http://img.viz.mobi/Vitruvian%20lego.jpg" alt=""></p><h3 id="颜·皮·光"><a href="#颜·皮·光" class="headerlink" title="颜·皮·光"></a>颜·皮·光</h3><p>一个方块只是一个方块，在还没有给它披上皮之前：</p><p><img src="https://cdnb.artstation.com/p/assets/images/images/001/809/163/large/ania-przybylko-kostki.jpg?1453072206" alt=""></p><blockquote><p>要有光。——God</p></blockquote><p>一个人只是一个人，在没有让他进入不同的光照环境之前：</p><p><img src="http://img.viz.mobi/Different-Light-and-shadow-prmote-original.jpg" alt=""></p><p>预警：学习了光照的知识后，容易开启发呆状态。一个光影可以让人盯着出神好久……因为光中有影中有光中有光有影中有光~</p><h2 id="上路之前"><a href="#上路之前" class="headerlink" title="上路之前"></a>上路之前</h2><p>新世界的大门（坑）马上就要开启了。在上路之前，还有几点对同学们、也是对自己的寄望。除了上面提到的对世界新的视角和理解、拥有建造新世界的能力，希望通过这个学期的学习，我们还能一起收获：</p><p><strong>创造者心态</strong></p><p>消费陷阱千万个，通往创造的小路只有两三条。围绕消费的生活终究没有尽头。为自己创造点什么，为他人创造点什么，这两个简单的目标，可以帮助我们躲开一些无聊、迷茫、寂寞、心理疾病甚至厄运。在这门课上，我们有很多机会站在设计和创造者的角度来观察世界、思考问题，从而习得一种创造的心态。</p><p><strong>改进过的学习习惯</strong></p><p>学习方法不对，往往是对低效学习方式的痛感不够强。我经历过许多学习的痛苦，相信学习本身就是一种迭代过程。学什么其实不太重要，重要的是<a href="https://www.uegeek.com/learning-guide-v1.html" target="_blank" rel="noopener">用什么姿势去学，以及这种姿势适用于什么情境，是否可以迁移到任意一种知识的学习</a>。</p><p><img src="http://img.viz.mobi/LearningGuide-s.png" alt=""></p><p>(如需完整版高清大图，请关注公众号 HackYourself，回复“指南”)</p><p><strong>眼界和审美</strong></p><p>学习完课程，能独立完成简单的乐器设计当然重要。但更重要的是，看到更大的世界，看到各行各业的苦与乐，看到这个世界中迷人的部分，开始分辨什么是美、怎样是更美，并且挑选吸引自己的谜题去深入探索。</p><p><strong>以终为始的旅程</strong></p><p><a href="https://www.uegeek.com/180106-the-learning-myth.html" target="_blank" rel="noopener">学习不是学习行为本身</a>，<a href="https://www.uegeek.com/learning-about-learn.html" target="_blank" rel="noopener">学习是一种改变</a>。如果能清晰地描述自己当前所处的 A 点是什么样子，想去到的 B 点又是什么样子，这段学习的旅程会更富有挑战、意义和乐趣。现在就去立 🚩吧~ </p><p>更有效的做法，是找到一个标杆（作品），提醒自己走到 B 点时，要拿出什么样的旗子插在上面。</p><p><img src="http://img.viz.mobi/rethinkingLearning.png" alt=""></p><p>希望这是一个有点不一样的开始。</p><p>希望陪伴你们度过一个痛苦又有趣的学期~</p><p>00</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/3d_course_title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="3D" scheme="http://uegeek.com/tags/3D/"/>
    
      <category term="Animation" scheme="http://uegeek.com/tags/Animation/"/>
    
      <category term="Modeling" scheme="http://uegeek.com/tags/Modeling/"/>
    
  </entry>
  
  <entry>
    <title>数字制造讲义01-成为数字世界的建造者</title>
    <link href="http://uegeek.com/190305-df01-digital-fabrication.html"/>
    <id>http://uegeek.com/190305-df01-digital-fabrication.html</id>
    <published>2019-03-05T11:01:46.000Z</published>
    <updated>2019-03-13T11:16:48.695Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/week7title.jpg" alt=""></p><a id="more"></a><h2 id="开始的开始"><a href="#开始的开始" class="headerlink" title="开始的开始"></a>开始的开始</h2><p>并没有想过自己有机会在大学里讲这门课——一门自己永远觉得学不够（会）的课。</p><p>三年前的今天，我正在痛苦的上一门叫做 Digital Fabrication 的课。它由 MIT 原子与比特中心 FabAcademy 开设，前身是一门叫做 How to Make Allmost Anything 的课程。</p><p><img src="http://img.viz.mobi/FabAcademy%20Website.png" alt=""></p><p>关于课程学习什么，我写了<a href="https://www.uegeek.com/tags/Fab/" target="_blank" rel="noopener">一系列的笔记</a>，这里就不多介绍了。</p><p><img src="http://img.viz.mobi/Fab18topics.jpg" alt=""></p><p>How to make almost anything:</p><p><img src="http://img.viz.mobi/Fabacademy13.11.projects.jpg" alt=""></p><p>伴随 FabAcademy 的发展，Fab Lab 已经遍布全球：</p><p><img src="https://www.fablabconnect.com/wp-content/uploads/2017/07/Map-3-world.jpg" alt=""></p><p>今年我有机会把这门课的体验带给你们，把这门课改进得更本土化、可操作，以及尝试如何在小成本的实验室里进行基本的实践。这门课不仅仅是为了帮助你们学习制作乐器的一些基本知识和技能，更重要的是，我们有机会一起探索人与音乐互动的历史、边界和可能性，一起体会动手做东西的痛苦和快乐、挫败和成就感，从而形成对一个全新身份的理解和认同——创客，或者更具体点，音乐创客。</p><h2 id="数字制造的浪潮"><a href="#数字制造的浪潮" class="headerlink" title="数字制造的浪潮"></a>数字制造的浪潮</h2><p>什么是数字制造？</p><p>简单说就是将制造流程数字化、自动化、智能化。我把它划分为三个部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CAD + Programming + CAM</span><br><span class="line"></span><br><span class="line">数字化设计 + 编程 + 数控生产</span><br></pre></td></tr></table></figure><p>数字化浪潮已经翻滚很多年了，一些领域早已完成数字化，而一些领域还处在变革当中，包括制造业。</p><p>数字制造浪潮的背后有两大基础：工业 4.0 和创客运动。</p><p><img src="https://www.sanofi.com/-/media/Project/One-Sanofi-Web/Websites/Global/Sanofi-COM/Home/en/about-us/img/Infographie_RevolutionIndustrielle_1940x960_EN-5.JPG?la=en&amp;hash=547E56AAEB6EC72BBE213128E2D59FA671F59A65" alt=""></p><p>工业 4.0 在机械化、自动化生产的基础上，进一步把生产流程相关的所有数据整合进来，形成物联网、全流程数据化、数据智能驱动物理计算和执行。过去是机器排好队，人来引导。现在则是构建一套数据自动流转的网络，人不参与的情况下也能由各种系统自动完成。</p><p>另外一个是更偏文化影响的基础：创客文化。</p><p>创客文化根植于欧美国家的 DIY 传统，大家喜欢自己动手做东西。为什么喜欢动手做东西呢？因为人工很贵啊！而且房子大，家里面一般都有车库，可以用做工作室或者是创业的办公室。很多东西就是这样在车库里面捣鼓出来了。（所以高房价和廉价劳动力真是创客文化的敌人 😒）</p><p><img src="http://makerfaire.wpengine.com/wp-content/uploads/2014/05/unknown.jpeg" alt=""></p><p>Maker 杂志每年举办的 Maker Faire 已经成为全球创客盛大的节日，还一度开到了白宫里面。（真·网红）</p><p>制造，曾经是一个离一般人很遥远的行业。在我们的印象中，制造业干的都是一些有技术含量的体力活。女生？不可能的~</p><p>但世界的变化比我们想象得要快。</p><p>随着数字化浪潮席卷各行各业，随着制造工具变得更强大、更小、更便宜，随着包括电子、编程在内的通识教育的普及，随着项目的积累和开源，我们不知不觉已经站在了 Personal Digital Fabrication 的门口。配备一个设备齐全的 lab，也不再是那么遥远的念想。</p><p><img src="http://img.viz.mobi/18.01.fablab.jpg" alt=""></p><h2 id="数字制造基本流程"><a href="#数字制造基本流程" class="headerlink" title="数字制造基本流程"></a>数字制造基本流程</h2><p>我们先来看一个不那么数字化的制造流程：</p><p><a href="https://v.qq.com/x/page/i0569cc1q2r.html" target="_blank" rel="noopener">匠心工艺 小提琴精湛工艺的制作</a></p><p>然后是一个 Fab lab 中的制造流程：</p><p><a href="https://v.qq.com/x/page/u0845zxy0vl.html" target="_blank" rel="noopener">Making an Electric Violin</a></p><p>然后看看制造业里面经常用到的 CNC 制造过程：</p><p><a href="https://v.qq.com/x/page/i08458jou2c.html" target="_blank" rel="noopener">CNC machining a Fender body</a></p><p>在这个学期里，我们会学习数字制造中主要的环节和技术，包括 Build 和 Code 两部分。Build 部分主要负责物品的造型和外观，以及如何把它从设计变成实物。Code 的部分赋予物品「灵魂」，让一件物品能完成我们期望的功能和互动。</p><p><img src="http://img.viz.mobi/Build&amp;Code.001.JPEG" alt=""></p><p>颜值和智商，都不可以偏废。</p><p>一个音箱表面看起来是这样的：</p><p><img src="https://www.apple.com/v/homepod/h/images/overview/homepod_side_dark_large_2x.jpg" alt=""></p><p>为了不只是胸大无脑，它里面是这样的：</p><p><img src="https://www.apple.com/v/homepod/h/images/overview/guts_4_large_2x.jpg" alt=""></p><p>从数字制造的三个模块来看，一个合成器的制造可以分成几个部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CAD + Programming + CAM</span><br><span class="line"></span><br><span class="line">数字化设计 + 编程 + 数控生产</span><br></pre></td></tr></table></figure><p>首先是合成什么样的音色？以前只能通过物理的方式，用不同的电路电压获得波形，然后做各种调制的效果。而现在我们可以用软件编程的方式来实现</p><p><img src="http://1cyjknyddcx62agyb002-c74projects.s3.amazonaws.com/files/2015/01/godel2c.jpg" alt=""></p><p>其次是合成器的外观造型部分，如何设计：</p><p><img src="http://cdn.shopify.com/s/files/1/0244/6325/products/Korg-MS-10-Mono-Synthesizer-Cover-1_grande.jpg?v=1510921210" alt=""></p><p>然后如何把每一个部件制造出来并组装：</p><p><img src="http://static1.squarespace.com/static/583893b7d2b857c44d3569de/587e1f701b631be781cc42ba/59a8787f6f4ca391ad4004c6/1548105972274/VC-10-.jpg?format=1500w" alt=""></p><h2 id="挖宝和立🚩"><a href="#挖宝和立🚩" class="headerlink" title="挖宝和立🚩"></a>挖宝和立🚩</h2><p>这门课程的学习，将会是一个混乱的过程——因为有太多陌生的名词、知识和领域。但也意味着一旦入了门，就拥有了一件无价之宝：可能性。</p><p>结合同学们的专业，这里有两个建议的方向，选择一个作为自己期末项目的目标，整个学习过程会更有针对性。</p><h3 id="专业乐器方向"><a href="#专业乐器方向" class="headerlink" title="专业乐器方向"></a>专业乐器方向</h3><p>主要尝试制作通用的、已经商业化的专业乐器。例如：</p><p>音序器</p><p><img src="https://mixmag.net/assets/uploads/images/_full/SEQ_2.jpg" alt=""></p><p>模块化的 MIDI controller</p><p><img src="https://macprovid.vo.llnwd.net/o43/hub/media/1001/12979/headline-specialwaves-Mine-modular-MIDI-Controller.jpg" alt=""></p><h3 id="实验乐器方向"><a href="#实验乐器方向" class="headerlink" title="实验乐器方向"></a>实验乐器方向</h3><p>这个方向简直就没有边界了……</p><p><img src="https://catherineodson.files.wordpress.com/2017/01/15994547_10104285061140089_7978028209646499382_o.jpg?w=825" alt=""></p><p><img src="https://www.bareconductive.com/wp-content/uploads/2016/03/FR9ZLIXIGQW6BSJ.LARGE_1000x667-720x415.jpg" alt=""></p><p>做点东西并不容易，要做出真实世界中存在的、能正常运转、甚至有点好玩的东西，就更困难了。</p><p>好消息是，你不是一个人。已经有无数的前人探索过，玩得不亦乐乎，还留下了许多…文档和源文件！我建议在学期之初，就去寻找一些让自己脑洞大开、心痒手痒的项目，作为标杆。如果能在一个学期内，逼近这些标杆，那么成就感将是巨大的。</p><p>挖宝地址：</p><ul><li><a href="http://www.nime.org/archives/" target="_blank" rel="noopener">NIME | Archive of NIME Proceedings</a></li><li><a href="https://www.dezeen.com/tag/musical-instruments/" target="_blank" rel="noopener">Musical instrument design</a></li><li><a href="https://www.instructables.com/" target="_blank" rel="noopener">Instructables - How to make anything</a></li><li><a href="http://mc.dfrobot.com.cn/portal.php" target="_blank" rel="noopener">DF创客社区</a></li></ul><p>希望陪伴你们度过一个痛苦又有趣的学期~</p><p>LET’S MAKE!</p><p><img src="https://res.cloudinary.com/www-virgin-com/virgin-com-prod/sites/virgin.com/files/Articles/Music/Ototo_in_use.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/week7title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="制造" scheme="http://uegeek.com/tags/%E5%88%B6%E9%80%A0/"/>
    
      <category term="Maker" scheme="http://uegeek.com/tags/Maker/"/>
    
      <category term="Digital Fabrication" scheme="http://uegeek.com/tags/Digital-Fabrication/"/>
    
      <category term="Fab" scheme="http://uegeek.com/tags/Fab/"/>
    
  </entry>
  
  <entry>
    <title>2018，敬自由和迷失</title>
    <link href="http://uegeek.com/181230-freedom-and-lost-2018.html"/>
    <id>http://uegeek.com/181230-freedom-and-lost-2018.html</id>
    <published>2018-12-30T14:44:15.000Z</published>
    <updated>2019-01-05T14:53:59.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>今年是特别的一年，特别到在写年终总结的时候，如此不情愿为它画上句点。</p><p>整整一年，在远未实现财务自由的时候，就贸然送给自己一个长假。嗯，是奢侈的，是幸运的。</p><p>回顾这其实挺丧的一年，也还是收获不少：</p><ul><li>自由职业状态存活 1 年，完成设计项目若干，开了工作室</li><li>规划职业逃跑路线，努力更新知识体系和技术栈</li><li>做了 Max/MSP, Ableton Live, Arduino, TouchDesigner, Unreal Engine 等五门课的助教</li><li>HackYourself 和 ArtxCode 共发原创 72 篇约 17 万字；第一次做 TEDx speaker，外加线下分享会 3 次</li><li>继续单身，继续喜欢着一个人</li><li>读书 68 本，出游 3 次，看展和 Live 若干，没有宅出病</li><li>P2P 收益平稳，股市和币圈资产严重缩水……</li></ul><p>如果说去年的主题大概是认识自己、理解人心，那么今年的主题就更明确了：</p><blockquote><p>自由和迷失</p></blockquote><p>谁不向往自由呀，可是只有跟自由狭路相逢短兵相接时，才有机会近距离领教它的无情和凛冽。如果你对「生命中不能承受之轻」是怎样一种状态，感到好奇和困惑，那么给自己一年的自由，你会深刻理解它。</p><p>自由的代价很高昂。这几乎是一场甜蜜的、没有硝烟的战斗。</p><h2 id="自由即无序"><a href="#自由即无序" class="headerlink" title="自由即无序"></a>自由即无序</h2><p>产生这个想法的那一刻，大概是今年最佳的 「Aha moment」。</p><p>如果你愿意，现在就可以开始设想，如果自己自由了，接下来会发生什么。试着问自己，在每个周一早上醒来的时候，能否明确告诉自己，接下来要做什么。</p><p>“做什么不好呢？吃饭睡觉打豆豆，看剧发呆卖个萌。”</p><blockquote><p>然后呢？</p></blockquote><p>如果足够诚实，试着连续问自己 10 个「然后呢？」，就会看到我们在这简单的三个字面前，其实不堪一击。</p><blockquote><p>个人在新制度中发挥积极独立的作用，获得了积极意义上的自由。但他同时摆脱了曾给他安全感和归属感的纽带。由于人失去他在封闭社会里的固定位置，所以也找不到生活的意义所在。</p></blockquote><p>弗洛姆在「逃避自由」中写道。人为了逃避真正的自由，是什么事都干得出的。</p><p>自由意味着可以往任何方向去。没有既定的目的地，没有雀跃的欲求，没有明确的路径，甚至不再有对错、爱恨、意义、仪式、惯例和默契。一切坚固的东西都烟消云散了。</p><p>生命大概是一种反热力学第二定律的存在，是在万事万物趋于无序、死寂的洪流中，一个孤独的分支。布朗运动多自由啊！可是生命没有止步于无意义的死寂，生命就是生命所追求的终极秩序。</p><p>自由的代价，是要承受生命趋于无序时的惊慌失措。这可是一种跟死亡同源的恐慌啊！</p><p>人难以忍受自由之轻，因为它太重了。</p><h2 id="自由即责任"><a href="#自由即责任" class="headerlink" title="自由即责任"></a>自由即责任</h2><p>一个生命的基本意图，是维持生存状态，也就是维持对生命而言有序和有意义的状态。</p><p>如果我们获得了自由，同时也就不得不面对生命趋于耗散这个事实，于是就需要投入更多资源去维系生命的秩序。</p><p>自由好像确实只能以更大的自律来成就。这种自律，不是用命令、坚持、毅力堆砌成的行为规范，而是身处注意力摄魂怪无处不在的信息社会，如何葆有一种自觉、自洽又开放的知行准则，用这套准则推动个人的成长。</p><p>在不自由时，我们还可以轻而易举地遁逃到假想的自由空间。可是一旦身处自由的腹地，却发现无处可逃。这里是目标的真空，是自我的无限投射。从此不能再怨公司怨老板怨大环境，也不能再找没时间没力气没必要之类的借口。</p><p>不过，自由首先不是要负起责任，而是区分责任。</p><p>反思过去的诸多苦恼，发现很多困局都源于对自我责任缺乏清晰的界定，要么没有承担自己应付的责任，要么默许甚至期望别人担负属于自己的责任，要么去干涉、争抢原本属于他人的责任。这条界限的把握，是自我关系和人际关系的永恒难题。好在，在自由的议题下，我们有机会回归责任的本质，有两条准则会慢慢浮现：</p><blockquote><p>我不需要为任何一个人负责</p><p>我要对自己负起全部的责任</p></blockquote><p>什么？不需要为任何人负责？那工作怎么办？家庭怎么办？</p><p>只对自己负责。完不完成工作，怎样完成工作，怎样算负责，这个责任牵涉到哪些需要考虑的因素等等，界定这些本身就是自己责任的一部分。我们为自己定义的「负责」而负责，如果这种定义适应不良，造成了后果，那就由自己去承担这些后果，去决定要不要调整观念和行动。</p><p>不再为了老板负责、为了工资负责、为了所爱的人负责、为了事情本身负责、为了他人或社会文化强加在身的权利义务以及「应该不应该」负责，而是为自己那一整套为人处事的理念和行为结果负责。</p><p>去承担该承担的，去挣得应有的自由。</p><h2 id="自由即重建"><a href="#自由即重建" class="headerlink" title="自由即重建"></a>自由即重建</h2><p>自由的光鲜之下，逃不过一场可弱可强的自我崩塌。</p><p>自由带来了真空，而它吸引来的都是一些送命题：</p><blockquote><p>我想干什么？为什么要干这个？</p><p>我想成为什么样的人？</p><p>我存在的价值是什么？</p><p>当拿掉一个人的职位，抹去他的职业经历，他会是怎样一个人？</p><p>我要如何认识自己？别人会如何认识我？</p></blockquote><p>真空渴望被填补。</p><p>如果没有自发自觉的欲求，又没有主动探索和实现这些欲求的勇气，就需要别人来教导我们怎样去生活，怎么去行动和选择，要跟同事朋友交流什么，甚至是在朋友圈展示什么，根据运势今天又该穿什么。</p><p>我们所有的迷茫、不满、委屈，看似都来自于某个混乱的困局或气场不合的人，但是夜深人静扪心自问，问题的泉眼最终还是会指向自己：我到底想过一种什么样的生活，想获得什么样的成果，想成为什么样的人？</p><p>如果不去寻找这条串起人生意义的线索，而且每天反复提醒自己为何而战、开始去动手建设，那么真空一下子就会被千奇百怪的模因、价值观、媒体内容、口号、论战、广告、行动召唤、账单等等所填满。</p><p>坍塌不全是坏事。灾后总是要重建的。我们也终于有机会在碎成一片一片的瓦砾中，清除残余，重新建起带有自己印记的一砖一瓦。</p><p>这不是一件容易的事，我们可能已经把这个责任/权利让渡出去太久了。</p><p>还好，我还有需要挣的钱，有想探索的领域，有愿意珍惜和守护的人。慢慢的，它们汇聚成理想生活的图景，而我要做的，是放开与过去的纠缠，全身心地投入到这幅图景的建设当中。</p><h2 id="无关紧要是幸福的起点"><a href="#无关紧要是幸福的起点" class="headerlink" title="无关紧要是幸福的起点"></a>无关紧要是幸福的起点</h2><p>今年在自由里面迷失得太久了。这种迷失似乎是过去多年种种困惑的一个缩影，也是我始终难以交出答卷的人生课题。</p><p>我们早已生活在一个道理远比行动多的时代，卖道理已经成为产业，蔚为壮观。每当我们遇到难题，总是忍不住想去抓住一些「道理」来帮自己化险为夷。可是，道听途说的道理跟段子没有太大区别。想过一种富有意义的生活，靠的是从万千道理中，提炼出一种关于「我何以成为我」的信仰，并且亲测、调整再亲测，看看这种信仰能否经受行动和时间洪流的重重考验。</p><p>在与自由日夜斗争的这一年，有更多的机会、时间和耐心，来跟自己的自卑、自恋、幻想、贪欲、嫉妒、无助们对谈。出乎意料地，最大的收获不是进入一种向往的生活状态，而是慢慢习得一种「与我无关」的心态。这种心态，帮助我提高关于「自我」的分辨率，逐渐回撤那些投入在既与我无关、我也无法影响的人事物上的资源，重新投放在我可以也应该掌控的事情上面。</p><p>到底什么与我有关，到底什么真正要紧。</p><p>我相信，「与我无关」是专注的开始，是幸福的起点，也恰好就是人与人之间相互尊重的本源。</p><p>愿你我在来年，都能珍惜对的人，好好经营对的事情，将自己生命的印记，印刻在那些值得浪费的当下。</p><p>新年快乐。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;今年是特别的一年，特别到在写年终总结的时候，如此不情愿为它画上句点。&lt;/p&gt;
&lt;p&gt;整整一年，在远未实现财务自由的时候，就贸然送给自己一个长假。嗯，是奢侈的，是幸运的。&lt;/p&gt;
&lt;p&gt;回顾这其实挺丧的一年，也还是收获不少：&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
      <category term="HackYourself" scheme="http://uegeek.com/categories/HackYourself/"/>
    
    
      <category term="HackYourself" scheme="http://uegeek.com/tags/HackYourself/"/>
    
      <category term="2018" scheme="http://uegeek.com/tags/2018/"/>
    
      <category term="自由职业" scheme="http://uegeek.com/tags/%E8%87%AA%E7%94%B1%E8%81%8C%E4%B8%9A/"/>
    
      <category term="自由" scheme="http://uegeek.com/tags/%E8%87%AA%E7%94%B1/"/>
    
      <category term="幸福" scheme="http://uegeek.com/tags/%E5%B9%B8%E7%A6%8F/"/>
    
      <category term="成长" scheme="http://uegeek.com/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>生成式艺术和算法创作10-响应式智能体和智能架构</title>
    <link href="http://uegeek.com/181213-generative-art-creativity-10.html"/>
    <id>http://uegeek.com/181213-generative-art-creativity-10.html</id>
    <published>2018-12-13T11:45:46.000Z</published>
    <updated>2018-12-13T11:51:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/CC-blogtitle.png" alt=""></p><a id="more"></a><ul><li><a href="https://www.uegeek.com/181009-generative-art-creativity-01.html" target="_blank" rel="noopener">生成式艺术和算法创作01-概述</a></li><li><a href="https://www.uegeek.com/181014-generative-art-creativity-02.html" target="_blank" rel="noopener">生成式艺术和算法创作02-随机和噪声</a></li><li><a href="https://www.uegeek.com/181021-generative-art-creativity-03.html" target="_blank" rel="noopener">生成式艺术和算法创作03-混沌和分形</a></li><li><a href="https://www.uegeek.com/181023-generative-art-creativity-04.html" target="_blank" rel="noopener">生成式艺术和算法创作04-规则系统</a></li><li><a href="https://www.uegeek.com/181107-generative-art-creativity-05.html" target="_blank" rel="noopener">生成式艺术和算法创作05-Tessellation</a></li><li><a href="https://www.uegeek.com/181120-generative-art-creativity-06.html" target="_blank" rel="noopener">生成式艺术和算法创作06-形状语法</a></li><li><a href="https://www.uegeek.com/181123-generative-art-creativity-07.html" target="_blank" rel="noopener">生成式艺术和算法创作07-向自然致敬的 L-system</a></li><li><a href="https://www.uegeek.com/181130-generative-art-creativity-08.html" target="_blank" rel="noopener">生成式艺术和算法创作08-马尔可夫模型</a></li><li><a href="https://www.uegeek.com/181208-generative-art-creativity-09.html" target="_blank" rel="noopener">生成式艺术和算法创作09-人工智能体</a></li></ul><p>上一篇我们了解了<a href="https://www.uegeek.com/181208-generative-art-creativity-09.html" target="_blank" rel="noopener">人工智能体的概念和在创作领域的应用</a>。今天我们来看看其中一种重要的智能体：响应式智能体。</p><h2 id="Langton’s-ant"><a href="#Langton’s-ant" class="headerlink" title="Langton’s ant"></a>Langton’s ant</h2><p>兰顿蚂蚁（Langton’s ant）是元胞自动机的例子。它由 Christopher Langton 在 1986 年提出，它由黑白格子和一只「蚂蚁」构成，是一个二维图灵机。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/0/09/LangtonsAntAnimated.gif" alt=""></p><p>Animation of first 200 steps of Langton’s ant</p><p>兰顿蚂蚁的算法:</p><ul><li>第1步：向前迈出一步</li><li>步骤2：如果当前单元格为白色，将其变为黑色并向右旋转 90°</li><li>步骤3：如果当前单元格为黑色，则将其变为白色并向左转 90°</li></ul><p>兰顿蚂蚁拥有非常简单的逻辑和复杂的表现。在 2000 年，兰顿蚂蚁的图灵完备性被证明。兰顿蚂蚁的想法后来被推广，比如使用多种颜色。</p><p><img src="https://ai2-s2-public.s3.amazonaws.com/figures/2017-08-08/1bd77e59d60852dd135b541fa41b4492713c461b/3-Figure6-1.png" alt=""></p><p>兰顿蚂蚁其实就是一种响应式的架构。它有以下优点：</p><ul><li>简单</li><li>计算易处理</li><li>稳健性</li><li>模型优雅</li></ul><p>而缺点则包括：</p><ul><li>仅使用局部知识推动行动，无法将非局部或长期信息考虑在内</li><li>缺乏清晰的工程设计方法，难以调试</li><li>丧失透明度和可读性，与人类的互动很困难</li></ul><h2 id="智能体架构"><a href="#智能体架构" class="headerlink" title="智能体架构"></a>智能体架构</h2><p>典型的认知智能体由一系列过程组成。</p><p><img src="http://img.viz.mobi/robot%20layered%20control%20system.png" alt="cognitive agent arch"></p><p>智能体通过感应器感知世界。由一个感知模块提供信息给建模模块，更新世界的表征。然后由一个向智能体提供目标和关于世界的信念的规划模块，决定执行什么动作。最后，有一个马达控制模块执行动作，向促动器发送命令。</p><p>Rodney Brooks 提出的这个架构是任务完成行为的层次结构，较低层代表更原始的行为。 每种行为都是一种相当简单的规则结构，每种行为都与其他行为竞争，以控制智能体 。</p><p>Rodney Brooks 也提出过另外一种架构——不是基于一系列链接在一起的模块，而是在行为层次上彼此平行放置：</p><p><img src="http://img.viz.mobi/robot%20layered%20control%20system2.png" alt="reactive agents"></p><p>在子层级中，可以使用更灵活的结构：</p><p><img src="http://img.viz.mobi/subsumption%20architecture-modified.png" alt="subsumption arch"></p><p>Rodney Brooks 根据这些架构设计了机器人 Ghengis：</p><p><img src="http://www.ai.mit.edu/projects/genghis/genghis.jpg" alt=""></p><h2 id="混合架构"><a href="#混合架构" class="headerlink" title="混合架构"></a>混合架构</h2><p>混合架构设计中的关键问题，是各个子组件（响应组件和协商组件）之间交互的元控制。</p><p>多层架构：</p><p><img src="/Users/kidult00/Downloads/Courses/Kadenze/generative-art-and-computational-creativity-i/5-reactive-agents-and-multiagent-systems/layered%20hybrid%20arch.png" alt="layered hybrid arch"></p><p>水平结构的例子：</p><p><img src="/Users/kidult00/Downloads/Courses/Kadenze/generative-art-and-computational-creativity-i/5-reactive-agents-and-multiagent-systems/layering%20arch.png" alt="layering arch"></p><p>Touring Machines: Autonomous Agents with Attitudes (book, by Innes A. Ferguson, Publisher: IEEE Computer Society Press, Published Date: 01/10/2017)</p><p>垂直架构的例子：</p><p><img src="/Users/kidult00/Downloads/Courses/Kadenze/generative-art-and-computational-creativity-i/5-reactive-agents-and-multiagent-systems/InteRRaP.png" alt="InteRRaP"></p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://www.wikiwand.com/en/Intelligent_agent" target="_blank" rel="noopener">Intelligent agent - Wikiwand</a></li><li>Rodney Brooks, A Robust Layered Control System for a Mobile Robot, AI Memo report, 1985</li><li><a href="https://www.wikiwand.com/en/Langton%27s_ant" target="_blank" rel="noopener">Langton’s ant - Wikiwand</a></li><li><a href="https://www.kadenze.com/courses/generative-art-and-computational-creativity-i" target="_blank" rel="noopener">Generative Art and Computational Creativity | Kadenze</a></li><li><a href="https://www.kadenze.com/courses/generative-art-and-computational-creativity-i/sessions/cognitive-agents-and-multiagent-systems" target="_blank" rel="noopener">Cognitive Agents And Multiagent Systems | Kadenze</a></li></ul><p>Robot art</p><p>CYSP1, Nicolas Schoffer, 1953</p><p><img src="https://www.olats.org/schoffer/archives/img/cysprd1.jpg" alt=""></p><p>Nenage, Norman White, 1974, multi-robot</p><p><img src="http://dada.compart-bremen.de/imageUploads/medium/11WhiteMenage74.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/CC-blogtitle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="AI" scheme="http://uegeek.com/tags/AI/"/>
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="艺术" scheme="http://uegeek.com/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Generative Art" scheme="http://uegeek.com/tags/Generative-Art/"/>
    
      <category term="Computational Creativity" scheme="http://uegeek.com/tags/Computational-Creativity/"/>
    
      <category term="创意" scheme="http://uegeek.com/tags/%E5%88%9B%E6%84%8F/"/>
    
      <category term="创造力" scheme="http://uegeek.com/tags/%E5%88%9B%E9%80%A0%E5%8A%9B/"/>
    
      <category term="Agent" scheme="http://uegeek.com/tags/Agent/"/>
    
      <category term="智能体" scheme="http://uegeek.com/tags/%E6%99%BA%E8%83%BD%E4%BD%93/"/>
    
      <category term="认知智能体" scheme="http://uegeek.com/tags/%E8%AE%A4%E7%9F%A5%E6%99%BA%E8%83%BD%E4%BD%93/"/>
    
      <category term="BDI" scheme="http://uegeek.com/tags/BDI/"/>
    
  </entry>
  
  <entry>
    <title>生成式艺术和算法创作09-人工智能体</title>
    <link href="http://uegeek.com/181208-generative-art-creativity-09.html"/>
    <id>http://uegeek.com/181208-generative-art-creativity-09.html</id>
    <published>2018-12-08T11:43:54.000Z</published>
    <updated>2018-12-08T11:55:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/CC-blogtitle.png" alt=""></p><a id="more"></a><ul><li><a href="https://www.uegeek.com/181009-generative-art-creativity-01.html" target="_blank" rel="noopener">生成式艺术和算法创作01-概述</a></li><li><a href="https://www.uegeek.com/181014-generative-art-creativity-02.html" target="_blank" rel="noopener">生成式艺术和算法创作02-随机和噪声</a></li><li><a href="https://www.uegeek.com/181021-generative-art-creativity-03.html" target="_blank" rel="noopener">生成式艺术和算法创作03-混沌和分形</a></li><li><a href="https://www.uegeek.com/181023-generative-art-creativity-04.html" target="_blank" rel="noopener">生成式艺术和算法创作04-规则系统</a></li><li><a href="https://www.uegeek.com/181107-generative-art-creativity-05.html" target="_blank" rel="noopener">生成式艺术和算法创作05-Tessellation</a></li><li><a href="https://www.uegeek.com/181120-generative-art-creativity-06.html" target="_blank" rel="noopener">生成式艺术和算法创作06-形状语法</a></li><li><a href="https://www.uegeek.com/181123-generative-art-creativity-07.html" target="_blank" rel="noopener">生成式艺术和算法创作07-向自然致敬的 L-system</a></li><li><a href="https://www.uegeek.com/181130-generative-art-creativity-08.html" target="_blank" rel="noopener">生成式艺术和算法创作08-马尔可夫模型</a></li></ul><h2 id="人工智能体"><a href="#人工智能体" class="headerlink" title="人工智能体"></a>人工智能体</h2><p>我们常看到 OOP - 面向对象的编程，对象是 Object。这篇文章则是关于智能体（agent）的综述。智能体和对象有什么区别呢？智能体是主动的，对象则不是。</p><p>智能体的概念是计算机科学的核心，在认知科学中也很重要。因为它可以研究真实的主体，建模和在现实世界中模拟并观察智能群体。</p><p>人工智能体是一个计算机系统，能够代表使用者或设计者自主运行。<strong>智能体可以形式化表达为从感知到行动的函数</strong>，它将每个可能的感知序列，映射到智能体可以执行的操作，或映射到影响最终操作的系数、反馈元素、函数或常量。软件和机器人都可视为智能体。</p><p>人工智能体有以下特征：</p><ul><li>情境性（situatedness）：通过传感器感知环境，能够通过行动效果器（effectors）影响环境 </li><li>自主和积极主动（Autonomy and pro-activity）: 行动没有外部干预，自己控制内部状态</li><li>灵活性<ul><li>可响应: 及时响应环境的变化</li><li>社交性：与其他智能体或人类互动</li></ul></li></ul><p><img src="https://www.doc.ic.ac.uk/project/examples/2005/163/g0516334/images/sensorseniv.png" alt=""></p><p>智能体的结构</p><ul><li>认知（Cognitive）：维持内部符号表征（一般会有记忆），可能包含推理和规划的评估结构（deliberative architectures）</li><li>反应（Reactive）：没有明确的环境表征，专注于行为规则<ul><li>反射：没有内部状态（只是将输入映射到输出）</li><li>反应：有内部状态（但不是认知）</li></ul></li><li>混合（Hybrid）：混合反应和认知成分，以平衡反应性（reactiveness）和审慎性（deliberativeness）</li></ul><blockquote><p>A first-order intentional system has beliefs and desires but no beliefs and desires about beliefs and desires.</p><p>A second -order intentioal system has beliefs and desires about beliefs and desires both those of others and its own.</p></blockquote><p>一阶意向系统和二阶意向系统。</p><h2 id="Belief–Desire–Intention-BDI-模型"><a href="#Belief–Desire–Intention-BDI-模型" class="headerlink" title="Belief–Desire–Intention BDI 模型"></a>Belief–Desire–Intention BDI 模型</h2><p>信念 - 愿望 - 意图模型（BDI）是智能体编程的软件模型。从表面看，它以智能体的信念、愿望和意图的实现为特征，使用这些概念来解决智能体编程中的特定问题。 实质上它提供了一种机制，将选择计划的活动与当前活动计划的执行分开。 因此，BDI 智能体能够平衡计划（选择做什么）和执行这些计划所花费的时间。</p><p><img src="http://www.inf.ufrgs.br/prosoft/bdi4jade/wp-content/uploads/bdiArch.jpg" alt=""></p><ul><li>Beliefs：信息态度，表示状态和智能体的 know-how，可能是错误的，由 perception 和 reasoning 更新</li><li>Desires：动机态度，评估是对欲望的过滤，决定哪个愿望可以提升为真正的意图</li><li>Intertions：智能体致力于发生的愿望，它是一致的、不冲突的、可能达成的，比 Desires 要强</li></ul><p>确定性行动由以下元素表示：</p><ul><li>可能包含参数的名称</li><li>前置条件列表：必须为真的要执行操作的事实列表</li><li>删除列表：执行操作后不再为真的事实列表</li><li>添加列表：通过执行操作使事实为真的列表</li></ul><p><img src="http://img.viz.mobi/3-BDI%20agent.png" alt="BDI agent"></p><p>Interpreter 主要做两个操作：</p><ul><li>根据当前的信念选择需要追求的意图</li><li>Mean-end 推理生成或选择要执行的计划，以实现意图</li></ul><p>BDI 算法可以表达如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(B,D,I): = Initialize-state();</span><br><span class="line"></span><br><span class="line">While(true):</span><br><span class="line"></span><br><span class="line">    update(B,D,I); //according to internal and external perceptions</span><br><span class="line"></span><br><span class="line">    Options: = option-generator(B,D,I)</span><br><span class="line"></span><br><span class="line">    Selected-options: = deliberate(B,D,I)</span><br><span class="line"></span><br><span class="line">    Update-intentions(selected-options, I)</span><br><span class="line"></span><br><span class="line">    Plan: = planning(I,B)</span><br><span class="line"></span><br><span class="line">    execute(plan);</span><br><span class="line"></span><br><span class="line">    Get-new-perceptions()</span><br><span class="line"></span><br><span class="line">end while</span><br></pre></td></tr></table></figure><p>可以对基础 BDI 算法做很多调整，比如重新规划或意图再考虑。问题是，如果经常重新考虑，会花费太多时间来评估而没有足够时间采取行动；如果使用两种策略，不经常重新考虑，那么盲目执行可能会做出不相关的行动。</p><p>真是经典的 exploration vs. exploitation (deliberation and action) tension 呢！</p><h2 id="智能体在多个创作领域的应用"><a href="#智能体在多个创作领域的应用" class="headerlink" title="智能体在多个创作领域的应用"></a>智能体在多个创作领域的应用</h2><h3 id="UNMAKEABLE-LOVE"><a href="#UNMAKEABLE-LOVE" class="headerlink" title="UNMAKEABLE LOVE"></a>UNMAKEABLE LOVE</h3><p>UNMAKEABLE LOVE 是一个互动多媒体装置作品。此作品由多人操控，但观众无法操控 3D 动画影像，只能透过手电筒感应器的虚拟光束投射到背投式影幕，聚光探索 3D 人物动画的行为与影像。</p><p><img src="http://unmakeablelove.org/images/UML_main.png" alt=""></p><p><a href="http://unmakeablelove.org/" target="_blank" rel="noopener">UNMAKEABLELOVE</a></p><p>作品中的六角形立体柱有六面背投式影幕，可由六个人同时操控手电筒聚光探索 3D 人物活动状况。当观众在操控手电筒投射屏幕观看时，会看到对面的观用者也在用手电筒投射，观看到的对方是真实人物经由红外线摄取影像呈现在屏幕，让观看者仿佛看到真实的另一观看者，让观看者之间在虚拟 3D人物动画的氛围情境内互动。</p><p>这个作品通过算法智能体，人工生命，虚拟社区，人机交互，增强虚拟，混合现实和多媒体表现的实践，以「参与身体的原始铭文」。它将 Beckett 的 “lost ones” 定位在一个虚拟空间中，这个虚拟空间代表着一种严重的身体限制状态，可能会唤起监狱，庇护，拘留营，甚至是「现实」的电视节目。</p><h3 id="The-Painting-Fool"><a href="#The-Painting-Fool" class="headerlink" title="The Painting Fool"></a>The Painting Fool</h3><p>2013 年 7 月，一名崭露头角的艺术家在巴黎 Galerie Oberkampf 举办了展览会。</p><p>展览会持续了一周时间，民众前来观看，新闻媒体广泛报道，一些作品花了多年时间创作，还有一些直接画在画廊上。无论怎么看，这都是一场典型的艺术展。唯一不同的是，这名艺术家不是真人，而是一个名叫 The Painting Fool 的电脑程序。</p><p><img src="http://www.thepaintingfool.com/commercial/tree.png" alt=""></p><p>The painting fool  是一个模块化的架构，包括：</p><ul><li>视觉系统</li><li>内存模块</li><li>一些自我评价系统</li><li>感知系统</li><li>情绪系统</li><li>一些渲染模块，例如 肖像模块</li><li>解释系统</li><li>概念生成模块</li></ul><p>The Painting Fool 是 Simon Colton 的作品。Colton 是伦敦大学金史密斯学院的计算机创作学教授，他认为要让程序创作，先要跨过一些与图灵测试不同的测试。图灵测试要求机器按人类的方式进行可以信服的交谈，Colton 却认为 AI 艺术家要让自己的行为变得「富有技巧」、「可以欣赏」、「富有想像力」才行。</p><p>到目前为止，Painting Fool 已经在这三个方面取得了进步。所谓的欣赏性，按 Colton 的意思就是对情绪作出反应。Painting Fool 的早期作品由图片拼成。程序先要扫描英国卫报一篇关于阿富汗战争的文章，从中提取关键字，比如“军队”和“英国人”，然后寻找与之相关的图片。找到之后程序用图片制作合成图，以反映报纸文章的内容和情绪。</p><h3 id="音乐智能体"><a href="#音乐智能体" class="headerlink" title="音乐智能体"></a>音乐智能体</h3><p>在音乐智能智能体方面，George E. Lewis 在 1983 完成了一个即兴的爵士演奏，是早期有智能智能体参与的例子：</p><div class="video-container"><iframe src="//www.youtube.com/embed/hO47LiHsFtc" frameborder="0" allowfullscreen></iframe></div><p><a href="https://www.youtube.com/watch?v=hO47LiHsFtc&amp;list=RDhO47LiHsFtc#t=12" target="_blank" rel="noopener">George E. Lewis – Voyager Duo 4 - YouTube</a></p><p>Arne Eigenfeldt 是加拿大作曲家，他创作互动和生成音乐系统。 Eigenfeldt 为当代舞蹈做了大量工作，特别是与编舞家Serge Bennathan合作。他的电子音乐主要用 Max/MSP 编写的软件中实时生成。 他最近的研究重点是将知识编码到智能性能系统中。 </p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Arne_eigenfeldt_04_jpg.jpg/1200px-Arne_eigenfeldt_04_jpg.jpg" alt=""></p><div class="video-container"><iframe src="//www.youtube.com/embed/i7IP9d_KBzA" frameborder="0" allowfullscreen></iframe></div><p><a href="https://www.youtube.com/watch?v=i7IP9d_KBzA" target="_blank" rel="noopener">Moments: Time and Space - YouTube</a></p><p><a href="https://aeigenfeldt.wordpress.com/works/music-by-agents/" target="_blank" rel="noopener">Music by agents</a> 是 Arne Eigenfeldt 创建的实时作曲系统，由一组 BDI 智能体组成。智能体们协商各种参数，实现和谐的实时作曲。</p><p><a href="http://metacreation.net/?page_id=443" target="_blank" rel="noopener">James Maxwell</a>, <a href="http://metacreation.net/?page_id=479" target="_blank" rel="noopener">Arne Eigenfeldt</a>, <a href="http://metacreation.net/?page_id=482" target="_blank" rel="noopener">Philippe Pasquier</a>开发的 <a href="http://metacreation.net/musicogmanuscore/" target="_blank" rel="noopener">MusiCOG</a> 是一个用于单声道音乐信息的识别，生成，延续和模式编辑的系统模型。</p><blockquote><p>Music composition is an intellectually demanding human activity that engages a wide range of cognitive faculties. In designing MusiCOG, we wanted to bring forward ideas from our previous work, and combine these with principles from the fields of music perception and cognition and ICA design, in an initial attempt at an integrated model. </p></blockquote><p>为音乐理解和分类设计的 MusiCog 是认知智能体中，处理领域特定知识的智能体。音乐认知智能体一般会参与以下活动：</p><ul><li>自己演奏</li><li>与人类一起演奏</li><li>帮助人类创作新材料</li></ul><p>MUME 是一个汇集了对开发系统感兴趣的艺术家、从业者和研究人员的组织，研究可以自主地识别、学习、表现、编写、完成、陪伴或解释音乐的系统。Metacreation 涉及使用人工智能，人工生命和机器学习的工具和技术，它们本身通常受到认知和生命科学的启发。其中有一个项目叫做 Musebot。</p><p><img src="http://img.viz.mobi/mume_logo-e1544125760113.png" alt=""></p><p>Musebot 项目的目标是建立一个有趣和实验性的研究，教育和制作平台。它是一个协作性的创造性实验：共同制作自主软件智能体，共同制作原创音乐。这些软件智能体将在一个计算机网络上运行。每个软件智能体大致对应于一段音乐中的单个乐器部分，如贝斯或鼓点。</p><p>Musebot 可以与其他 Musebot 一起自动生成音乐。Musebot 协议传递实时数据，但不是具体数据，而是更高层次的音乐概念。</p><h3 id="会话智能体，虚拟智能体，游戏智能体"><a href="#会话智能体，虚拟智能体，游戏智能体" class="headerlink" title="会话智能体，虚拟智能体，游戏智能体"></a>会话智能体，虚拟智能体，游戏智能体</h3><p>会话智能体是相对成熟的智能智能体研究领域，一些典型的智能体包括：</p><ul><li><p>ELIZA, Joseph Weizenbaum, 1964</p></li><li><p>PARRY, Kenneth Colby, 1972</p></li><li><p>SmarterChild, ActiveBuddy, 2001</p></li><li><p>Eugene Goostman, 2001</p></li></ul><p>虚拟智能体</p><p><a href="http://stelarc.org/?catID=20241" target="_blank" rel="noopener">STELARC | PROSTHETIC HEAD</a> (Stelarc, 2003) 是基于认知智能体体系结构的互动作品。智能体可以感知环境，通过检测颜色的超声波传感器来感知观众的服装颜色和基本的运动及行为：<br><img src="http://stelarc.org/media/img/pro-head/head-animation-on-white.gif" alt=""></p><p>游戏中存在许多认知智能体，它们通常不是游戏玩家，而是执行一些需要自动化的任务。这些互动叙事中的智能体行为，可能是预先编写好的，也可能是由程序自动生成的（比如 intelligent drama/story/manager 或 procedural simulation）。</p><h2 id="智能体通信"><a href="#智能体通信" class="headerlink" title="智能体通信"></a>智能体通信</h2><p>认知智能体通过智能体消息和智能体通信协议进行交流，也可能使用 Agent communication language(ACL) 交流，常用的 ACL 有 KQML，FIPA ACL。</p><p>言语行为类型：</p><ul><li>自信：speaker 表达世界表现（告知，断言，……）</li><li>指令：speaker 要求其他人（订单，问题，请求……）</li><li>承诺：speaker 承诺（承诺）</li><li>表达：speaker 表达感受（爱情宣言，…）</li><li>陈述：speaker 根据情境行事（开除，祝福，结婚……）</li></ul><p>消息类型语义：言语行为，前提条件，后置条件。</p><p>智能体之间的通讯过程也涉及到复杂的感知、解释、推理、评估、行动等过程：</p><p><img src="http://img.viz.mobi/9-conversational%20agents.png" alt="conversational agents"></p><p>智能体通讯协议帮助结构化智能体之间的对话，提高通讯效率：</p><p><img src="http://img.viz.mobi/10-agent%20communication%20protocals.png" alt="agent communication protocals"></p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://www.wikiwand.com/en/Intelligent_agent" target="_blank" rel="noopener">Intelligent agent - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Belief%E2%80%93desire%E2%80%93intention_software_model" target="_blank" rel="noopener">Belief–desire–intention software model - Wikiwand</a></li><li><a href="https://www.kadenze.com/courses/generative-art-and-computational-creativity-i/sessions/cognitive-agents-and-multiagent-systems" target="_blank" rel="noopener">Cognitive Agents And Multiagent Systems | Kadenze</a></li><li><a href="http://musicalmetacreation.org/musebots/musebot-getting-started/" target="_blank" rel="noopener">Musebot Getting Started | Musical Metacreation</a></li><li><a href="https://www.doc.ic.ac.uk/project/examples/2005/163/g0516334/" target="_blank" rel="noopener">Topics in AI : AGENTS</a></li><li><a href="http://www.thepaintingfool.com/index.html" target="_blank" rel="noopener">The Painting Fool - A Computer Artist</a></li><li><a href="https://www.researchgate.net/profile/Philippe_Pasquier/publication/220982337_Shadow_agent_a_new_type_of_virtual_agent/links/0912f510ac2bea76ef000000.pdf" target="_blank" rel="noopener">Shadow agent: a new type of virtual agent</a></li><li><a href="https://aeigenfeldt.wordpress.com/works/music-by-agents/" target="_blank" rel="noopener">music by agents – arne eigenfeldt</a></li><li><a href="http://metacreation.net/musicogmanuscore/" target="_blank" rel="noopener">MusiCOG &amp; ManuScore |</a></li><li><a href="https://www.jiqizhixin.com/articles/2016-10-28-4" target="_blank" rel="noopener">40年认知架构研究概览：实现通用人工智能的道路上我们已走了多远？ | 机器之心</a></li><li><a href="https://www.leiphone.com/news/201602/W3R5gl8rWGCV7xDL.html" target="_blank" rel="noopener">机器学徒：AI有可能变成画家吗？ | 雷锋网</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/CC-blogtitle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="AI" scheme="http://uegeek.com/tags/AI/"/>
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="艺术" scheme="http://uegeek.com/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Generative Art" scheme="http://uegeek.com/tags/Generative-Art/"/>
    
      <category term="Computational Creativity" scheme="http://uegeek.com/tags/Computational-Creativity/"/>
    
      <category term="创意" scheme="http://uegeek.com/tags/%E5%88%9B%E6%84%8F/"/>
    
      <category term="创造力" scheme="http://uegeek.com/tags/%E5%88%9B%E9%80%A0%E5%8A%9B/"/>
    
      <category term="Agent" scheme="http://uegeek.com/tags/Agent/"/>
    
      <category term="智能体" scheme="http://uegeek.com/tags/%E6%99%BA%E8%83%BD%E4%BD%93/"/>
    
      <category term="认知智能体" scheme="http://uegeek.com/tags/%E8%AE%A4%E7%9F%A5%E6%99%BA%E8%83%BD%E4%BD%93/"/>
    
      <category term="BDI" scheme="http://uegeek.com/tags/BDI/"/>
    
  </entry>
  
  <entry>
    <title>生成式艺术和算法创作08-马尔可夫模型</title>
    <link href="http://uegeek.com/181130-generative-art-creativity-08.html"/>
    <id>http://uegeek.com/181130-generative-art-creativity-08.html</id>
    <published>2018-11-30T14:16:40.000Z</published>
    <updated>2018-11-30T14:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/CC-blogtitle.png" alt=""></p><a id="more"></a><ul><li><a href="https://www.uegeek.com/181009-generative-art-creativity-01.html" target="_blank" rel="noopener">生成式艺术和算法创作01-概述</a></li><li><a href="https://www.uegeek.com/181014-generative-art-creativity-02.html" target="_blank" rel="noopener">生成式艺术和算法创作02-随机和噪声</a></li><li><a href="https://www.uegeek.com/181021-generative-art-creativity-03.html" target="_blank" rel="noopener">生成式艺术和算法创作03-混沌和分形</a></li><li><a href="https://www.uegeek.com/181023-generative-art-creativity-04.html" target="_blank" rel="noopener">生成式艺术和算法创作04-规则系统</a></li><li><a href="https://www.uegeek.com/181107-generative-art-creativity-05.html" target="_blank" rel="noopener">生成式艺术和算法创作05-Tessellation</a></li><li><a href="https://www.uegeek.com/181120-generative-art-creativity-06.html" target="_blank" rel="noopener">生成式艺术和算法创作06-形状语法</a></li><li><a href="https://www.uegeek.com/181123-generative-art-creativity-07.html" target="_blank" rel="noopener">生成式艺术和算法创作07-向自然致敬的 L-system</a></li></ul><h2 id="马尔可夫模型-Markov-Model"><a href="#马尔可夫模型-Markov-Model" class="headerlink" title="马尔可夫模型 Markov Model"></a>马尔可夫模型 Markov Model</h2><p>开始的开始，有必要来认识一下主人公，俄国数学家安德雷·安德耶维齐·马尔可夫。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/70/AAMarkov.jpg/640px-AAMarkov.jpg" alt=""></p><p>1874 年，18 岁的马尔可夫考入圣彼得堡大学，师从切比雪夫（著名的切比雪夫定理提出者）。他是物理-数学博士，圣彼得堡大学教授，圣彼得堡科学院院士。在概率论、数论、函数逼近论和微分方程等方面卓有成就。</p><p>总的来说，马尔可夫模型是一种<strong>统计模型</strong>，可以用于计算条件概率分布，为一系列的离散事件建模。这就应用很广泛了，哪些是「离散事件」呢？句子中的词汇，音乐中的音符，通过交通灯的车辆数，女票每个月购物的次数……</p><p>以「马尔可夫」开头的术语有很多，先来熟悉一下最重要的几个：</p><ul><li>马尔可夫性质：当一个随机过程在给定现在状态及所有过去状态情况下，其未来状态的条件概率分布仅依赖于当前状态。</li><li>马尔可夫过程：是一个具备了马可夫性质的随机过程，不具备记忆特质（memorylessness）。换言之，马可夫过程的条件概率仅仅与系统的当前状态相关，而与过去历史或未来状态，都是独立、不相关的。</li><li>马尔可夫链：具备离散状态的马可夫过程，通常使用离散的时间集合定义。</li><li>马尔可夫模型：用马尔科夫过程生成序列的算法模型</li></ul><p>它们之间的关系大概可以这样划分：</p><table><thead><tr><th></th><th>系统状态是完全可观察的</th><th>系统状态是部分可观察的</th></tr></thead><tbody><tr><td>系统是自治的</td><td><a href="https://www.wikiwand.com/en/Markov_chain" target="_blank" rel="noopener">马尔可夫链</a></td><td><a href="https://www.wikiwand.com/en/Hidden_Markov_model" target="_blank" rel="noopener">隐马尔可夫模型</a></td></tr><tr><td>系统受到控制</td><td><a href="https://www.wikiwand.com/en/Markov_decision_process" target="_blank" rel="noopener">马尔可夫决策过程</a></td><td><a href="https://www.wikiwand.com/en/Partially_observable_Markov_decision_process" target="_blank" rel="noopener">部分可观察的马尔可夫决策过程</a></td></tr></tbody></table><p>在马尔可夫模型中</p><ul><li>$X_t$ 是时间 t 时表示音符的随机变量</li><li>$P(X_t)$ 是随机事件 $X_t$ 的概率分布</li></ul><p><img src="http://img.viz.mobi/cc-markov-model.png" alt=""></p><p>马尔可夫模型可以基于「上文」做出判断和预测，未来状态只取决于当前状态或者限定范围的过去状态。</p><p>实现马尔可夫模型的学习算法有几个步骤：</p><ul><li>构建一个 transition count table (state transition matrix)，计算每一种可能的上下文的频率分布</li><li>用每一种组合的 count 除以所有的组合总数，即下表中每一行加起来为 1</li><li>随机选择一个起始值，根据概率表格选择下一个序列值</li></ul><p>马尔可夫模型生成算法其实也是一种 <a href="https://www.uegeek.com/181014-generative-art-creativity-02.html" target="_blank" rel="noopener">random walk</a> ，根据转换概率分布，基于目前已经生成的序列，随机选择下一个序列值。</p><p>以一段乐曲为例，它由音符 B2,C4#,D4,E4,F4#,G4,G4#,A4,B4,C5#,D5,E5 组成。计算每一个音符后面紧跟着的音符的出现概率。例如，最后一个音符 E5，出现在它后面的音符只有 A4 和 C5#，出现概率分别是 6/16 和 10/16。当生成新的序列时，如果当前音符是 E5，那么根据表格，下一个音符只可能是 A4 或 C5#。</p><p><img src="http://img.viz.mobi/2-song%20corpus.png" alt="song corpus"></p><p>再来看一个三节点的马尔可夫链：</p><p><img src="http://codehop.com/wp-content/uploads/2010/07/3_node_markov_chain.gif" alt=""></p><p>这首马尔可夫旋律以 state_0 开始，播放一个八分音符 Eb。然后选择一个新的状态。选择 state_0，state_1 或 state_2 的概率相等，都是 1/3。假设选择了 state_2，则播放下加二间的十六分音符 G。从 state_2 开始，state_0 被选择的概率是 1/10，state_1 是 2/10，state_2 是 7/10。</p><p>因为马尔可夫模型状态是离散的，可以用有限状态的自动机 (automata) 来表示。</p><p><img src="http://img.viz.mobi/4-markov%20models%20automata%20representation.png" alt="markov models automata representation"></p><h2 id="变量马尔可夫模型"><a href="#变量马尔可夫模型" class="headerlink" title="变量马尔可夫模型"></a>变量马尔可夫模型</h2><p>在随机过程中，变量马尔可夫（Variable order Markov Models/VOM/VMM/VOMM）模型是一类重要的模型，它扩展了马尔可夫模型。</p><p>马尔可夫模型中，具有马尔可夫性质的序列中的每个随机变量，取决于固定数量的随机变量；在 VOM 模型中，该数量的调节随机变量可以基于观察到的特定实现而变化。</p><p>这个实现序列通常被称为上下文 ; 因此 VOM 模型也称为上下文树。调节随机变量数量的灵活性对于许多应用来说是非常有利的，例如统计分析、分类和预测。</p><p>变量马尔可夫模型一般由三部分组成：</p><ul><li>Counting：建立转换表，这是预测的来源</li><li>Smoothing：处理未见过的事件/序列</li><li>Variable length modeling:<ul><li>A transition matrix</li><li>Probabilistic suffix tree</li><li>Factor Oracle, and Context Tree Weighting method (CTW)</li><li>Lempel-Ziv 78 and its improvement LZ-MS</li><li>Prediction by partial match</li></ul></li></ul><p>它的缺点之一是难以产生语料之外的内容。</p><h2 id="隐马尔科夫模型-Hidden-Markov-Model"><a href="#隐马尔科夫模型-Hidden-Markov-Model" class="headerlink" title="隐马尔科夫模型 Hidden Markov Model"></a>隐马尔科夫模型 Hidden Markov Model</h2><p>隐马尔可夫模型（Hidden Markov Model，HMM）是统计模型，它用来描述一个<strong>含有隐含未知参数的马尔可夫过程</strong>。其难点是<strong>从可观察的参数中确定该过程的隐含参数</strong>，然后利用这些参数来作进一步的分析，例如模式识别。</p><p>在一般的马尔可夫模型中，状态对于观察者来说是直接可见的。这样状态的转换概率便是全部的参数。</p><p>而在隐马尔可夫模型中，状态并不是直接可见的，<strong>但受状态影响的某些变量是可见的</strong>。每一个状态在可能输出的符号上，都有一定的概率分布。因此输出符号的序列能够透露出状态序列的一些信息。</p><p><img src="http://www.davidsbatista.net/assets/images/2017-11-11-HMM.png" alt=""></p><p>也就是说，HMM 系统的实际状态是隐藏的，只能观察到 emission probilities。</p><p>HMM 常用来学习两个耦合的内容语料。例如，在语音识别中，可见的信息是音频信号，隐藏的信息是语音词汇。又例如，旋律是可见信息，伴奏/ 和声 是隐藏的信息。</p><p>最常见的三种 Hidden Markov Model 算法：</p><ul><li>the forward algorithm: 计算特定序列的概率，假设已知 transitions and observation 概率和初始状态</li><li>the Baum-Welch algorithm：找出被观测序列中最常见的参数</li><li>the Viterbi algorithm：维特比算法，基于观测序列计算隐藏状态最可能的序列（viterbi path）</li></ul><p>隐马尔科夫模型的优势：</p><ul><li>是学习和生成离散序列最有效和使用广泛的算法</li><li>可以对横轴和纵轴的相关性都建模，HMM 是随机耦合过程</li><li>比马尔可夫模型更好保留原始的数据结构</li></ul><p>劣势：</p><ul><li>需要有很好的领域知识来调整模型结构和参数</li><li>需要相对大的训练数据集</li></ul><h2 id="马尔可夫模型在音乐中的应用"><a href="#马尔可夫模型在音乐中的应用" class="headerlink" title="马尔可夫模型在音乐中的应用"></a>马尔可夫模型在音乐中的应用</h2><p>Lejaren Hiller 在 1957 年完成了算法生成的弦乐四重奏「依利亚克组曲」（Illiac Suite），这也是历史上第一支完全由计算机生成的音乐作品。首先使用马尔可夫链模型来产生有限控制的随机音符，之后利用和声与复调的规则测试这些音符，最后选择符合规则的材料，修改、组合成传统音乐记谱的弦乐四重奏。</p><p><img src="https://pbs.twimg.com/media/DfAdXfHV4AA0Bxb.jpg" alt="ILLIAC Suite "></p><div class="video-container"><iframe src="//www.youtube.com/embed/QyqiSbbwHIs" frameborder="0" allowfullscreen></iframe></div><p><a href="https://www.youtube.com/watch?v=QyqiSbbwHIs" target="_blank" rel="noopener">Lejaren Hiller - Illiac Suite for String Quartet [4/4] - YouTube</a></p><p><a href="http://www.musicainformatica.org/topics/illiac-suite.php" target="_blank" rel="noopener">该作品分为四个乐章</a>：</p><ul><li>第一乐章：计算机生成的不同长度的固定主题旋律</li><li>第二乐章：使用变奏的规则生成的四声部音乐</li><li>第三乐章：通过计算机对节奏、动态和演奏法的不同处理生成的音乐</li><li>第四乐章：通过衍生算法和马尔可夫链的不同模型及概率生成的音乐（pitch, intervals and textures）</li></ul><p>Iannis Xenakis在他 1958 年的专辑 Analogique 中就使用了马尔可夫链来作曲。</p><p><img src="http://img.viz.mobi/xenakis.jpg" alt=""></p><p>在他的著作 Formalized Music: Thought and Mathematics in Composition 里详细描述了使用马尔可夫模型的算法。</p><p><img src="https://discourse-cdn-sjc2.com/standard17/uploads/critterandguitari/original/2X/a/aede09d8452c1b3d4273a4515dfa6c941c62e21e.jpg" alt=""></p><p><img src="http://img.viz.mobi/markovian%20stochastic%20music.png" style="zoom:50%"></p><p>用马尔可夫模型生成音乐的优势，包括符合直觉、容易理解，以及计算量小。但也存在一些问题。例如，输出相当随机、缺乏整体结构；抽象层级有限，容易重复语料库中的片段；限于一维符号序列；限于风格模仿等等。</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://www.wikiwand.com/en/Markov_model" target="_blank" rel="noopener">Markov model - Wikiwand</a></li><li><a href="https://www.wikiwand.com/zh-hans/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%80%A7%E8%B4%A8" target="_blank" rel="noopener">马尔可夫性质 - Wikiwand</a></li><li><a href="https://www.wikiwand.com/zh-hans/%E9%A6%AC%E5%8F%AF%E5%A4%AB%E9%81%8E%E7%A8%8B" target="_blank" rel="noopener">马可夫过程 - Wikiwand</a></li><li><a href="https://www.wikiwand.com/zh-hans/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">隐马尔可夫模型 - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Variable-order_Markov_model" target="_blank" rel="noopener">Variable-order Markov model - Wikiwand</a></li><li><a href="http://setosa.io/ev/markov-chains/" target="_blank" rel="noopener">Markov Chains explained visually</a></li><li><a href="http://codehop.com/three-node-markov-chain/" target="_blank" rel="noopener">Three Node Markov Chain</a></li><li><a href="https://www.uegeek.com/170713-algorithmic-composition-1.html" target="_blank" rel="noopener">算法作曲历险记01-简史 | 00’s Adventure</a></li><li><a href="https://www.wikiwand.com/en/Iannis_Xenakis" target="_blank" rel="noopener">Iannis Xenakis - Wikiwand</a></li><li><a href="http://metacreation.net/project_1/" target="_blank" rel="noopener">Harmonic Progression</a></li><li><a href="http://www.sfu.ca/~eigenfel/ControlledMarkovSelection.pdf" target="_blank" rel="noopener">Realtime Generation of Harmonic Progressions Using Controlled Markov Selection | PDF</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/CC-blogtitle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="艺术" scheme="http://uegeek.com/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Generative Art" scheme="http://uegeek.com/tags/Generative-Art/"/>
    
      <category term="Computational Creativity" scheme="http://uegeek.com/tags/Computational-Creativity/"/>
    
      <category term="创意" scheme="http://uegeek.com/tags/%E5%88%9B%E6%84%8F/"/>
    
      <category term="创造力" scheme="http://uegeek.com/tags/%E5%88%9B%E9%80%A0%E5%8A%9B/"/>
    
      <category term="Markov" scheme="http://uegeek.com/tags/Markov/"/>
    
      <category term="马尔可夫" scheme="http://uegeek.com/tags/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB/"/>
    
      <category term="马尔可夫模型" scheme="http://uegeek.com/tags/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>算法创作实战03 - 用 MaxMSP 实现 L-system</title>
    <link href="http://uegeek.com/181128-computational-creativity-in-maxmsp-03.html"/>
    <id>http://uegeek.com/181128-computational-creativity-in-maxmsp-03.html</id>
    <published>2018-11-28T13:28:33.000Z</published>
    <updated>2018-11-28T13:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/CC-title1.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/181017-computational-creativity-in-maxmsp-01.html" target="_blank" rel="noopener">算法创作实战01 - 巴纳姆效应之随机星座实验</a></p><p><a href="https://www.uegeek.com/181021-computational-creativity-in-maxmsp-02.html" target="_blank" rel="noopener">算法创作实战02 - 用 MaxMSP 生成随机颜色</a></p><p>好久不见~</p><p>前面两篇算法创作的实战，都是相对容易的小程序。今天我们一起来挑战用 Max/MSP (更准确说，是用 jitter) 来「种」植物。</p><blockquote><p>名称：L-system</p><p>主要使用的对象：jit.linden, jit.turtle, jit.matrix, jit.str.fromsymbol, jit.iter, jit.lcd, jit.pwindow</p><p>难度系数：★★★★☆</p></blockquote><h2 id="什么是-L-system"><a href="#什么是-L-system" class="headerlink" title="什么是 L-system?"></a>什么是 L-system?</h2><p>在<a href="https://www.uegeek.com/181123-generative-art-creativity-07.html" target="_blank" rel="noopener">生成式艺术和算法创作07-向自然致敬的 L-system</a> 中，已经对 L-system 做了详细的介绍。L-system 是 Aristid Lindenmayer  提出的有关生长发展中的细胞交互作用的数学模型，被广泛应用于植物生长过程的研究和建模，也常用于模拟各种生物体的形态。</p><p>L-system 是一系列不同形式的语法规则，它的自然递归规则产生自相似性，也能用于生成自相似的分形，例如迭代函数系统。它一般可以这样定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">G ＝｛V,S,ω,P&#125;,</span><br><span class="line"></span><br><span class="line">V: 变量符号集合</span><br><span class="line"></span><br><span class="line">S: 常量符号集合</span><br><span class="line"></span><br><span class="line">ω: 初始状态串(i.e. seed or axiom)</span><br><span class="line"></span><br><span class="line">P: 生成式规则(production)</span><br></pre></td></tr></table></figure><p>接下来，我们动手来实现它。</p><h2 id="开始的正确姿势"><a href="#开始的正确姿势" class="headerlink" title="开始的正确姿势"></a>开始的正确姿势</h2><blockquote><p>如何在 Max/MSP 实现 L-system？</p></blockquote><p>最开始面对这个问题，会觉得茫然无措：该从哪里开始？</p><p>回答与软件相关的工程问题，最好答案永远是——搜索。</p><p>而搜索的第一站，不是 Google，应该是官方文档。在经历了长时间漫无头绪的搜索，各种成功不成功的尝试后，00 再次获得了一个多么痛的领悟——永远先搜索软件文档。搜索结果已经清楚明白地列出跟 L-system 有关的对象了！</p><p><img src="http://img.viz.mobi/searchL-systemInMax.png" alt=""></p><p>然后我们来仔细读一下文档里面的说明吧。</p><h2 id="jit-linden"><a href="#jit-linden" class="headerlink" title="jit.linden"></a><code>jit.linden</code></h2><p>打开 <code>jit.linden</code> 的帮助文档，例子如下：</p><p><img src="http://img.viz.mobi/jit.linden-help.png" alt=""></p><p>一阵头晕目眩后冷静下来，试着运行程序。然而并不知道它在做什么……</p><p>只好静下心来一点一点看。</p><p>首先是找出核心对象。核心对象 <code>jit.linden</code> 前面连接的是一个矩阵，接收了 tolinden 的消息（unlock patch 后才看到 <code>s tolinden</code> 的内容）；后面连接的是同一个矩阵。将矩阵可视化出来时需要变成 1 维 1 平面的矩阵。但是这个可视化方式非常不直观，需要另外寻找方法。（所以搜索结果列出了 <code>jit.turtle</code> 是不是……）</p><p>例子右边是规则相关的部分。在<a href="https://www.uegeek.com/181123-generative-art-creativity-07.html" target="_blank" rel="noopener">生成式艺术和算法创作07-向自然致敬的 L-system</a> 中我们已经知道，生成式规则(production) 是决定 L-system 生成结果的关键。那么，这里 production 后面的一串 <code>* F * +[F+]* G * -[GF-]F - F --</code> 是什么意思呢？下面给出的注释是：</p><blockquote><p>list of symbols in the format：<br><code>left_context  strict_predecessor  right_context  successor</code></p><p>if a symbol matching the strict_predecessors is found in the matrix it is replaced with the sucessor string if the left and right context is met. the wildcard character (‘*’ by default) means no left or right context.</p></blockquote><p>还是一知半解的感觉，这时候需要打开顶部 <code>p moreinfo</code> 子 patch。里面解释了 production 规则是如何设定的。</p><blockquote><p>L-systems work on an interpreted grammar model wherein a syntax is defined for replacing individual elements of the incoming string with a replacement string. </p><p>L-systems get larger through successive productions. the size of the Jitter matrix used by the object determines the maximum length of the string, so a large matrix is advisable, even if the axiom (starting string) is very small.</p></blockquote><p>大意是，随着迭代，矩阵会变得越来越大，建议设定一个较大尺寸的矩阵。</p><blockquote><p>‘production <em> F </em> +F[F]’ tells jit.linden to take every ‘F’ found in the input matrix and replace it with the string ‘+F[F]’. So the first four generations of an L-system with an axiom of ‘F’ would look like this:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F</span><br><span class="line">+F[F]</span><br><span class="line">++F[F][+F[F]]</span><br><span class="line">+++F[F][+F[F]][++F[F][+F[F]]]</span><br></pre></td></tr></table></figure><p>production 接着的第一个 <em> F 是初始值，或者叫做 axiom（公理），第二个 </em> 是 axiom 替代自己的规则。</p><blockquote><p>More complex models can be created by adding multiple productions, or by introducing context matching into the L-system grammar. </p></blockquote><p>例如：<code>production G F * +F</code>  意思是只有在 <code>F</code> 前面是一个 <code>G</code> 的时候，才将 <code>F</code> 替换为 <code>+F</code> 。</p><p>又如：<code>production G F * +F * G * G-</code> 包含两个规则，一个是上面提到的 <code>GF</code> 替换 为 <code>G+F</code>; 另一个是 <code>G</code> 替换为 <code>G-</code>。</p><p><code>jit.linden</code> 最多可以定义 50 个规则。</p><blockquote><p>the jit.turtle object interprets L-systems as turtle graphics, so that characters such as ‘F’, ‘+’, and ‘-‘ acquire special meaning. you could easily use jit.iter to access the Lindenmayer string in Max.</p></blockquote><p>这一段也剧透了很多重要信息，包括用 <code>jit.iter</code> 获取字符串和用 <code>jit.turtle</code> 显示 L-system 生成的图形。 </p><h2 id="jit-turtle"><a href="#jit-turtle" class="headerlink" title="jit.turtle"></a><code>jit.turtle</code></h2><p> 然后再来看看 <code>jit.turtle</code> 怎么画图。</p><p><img src="http://img.viz.mobi/jit.turtle-help.png" alt=""></p><p><code>jit.turtle</code> 前面是设定各种参数，例如步进值、旋转角度、起始点等，然后接收 <code>jtr</code> 传来的 production 规则，尤其要理解 F、+、- 的含义。<code>jit.turtle</code> 后面接的是一个 <code>jit.lcd</code> ，将规则显示出来。</p><h2 id="生成-L-system"><a href="#生成-L-system" class="headerlink" title="生成 L-system"></a>生成 L-system</h2><p>下面开始动手尝试了。好消息是，不必从零开始，从 <code>jit.linden</code> 帮助里面 copy 主要的部分，就可以快速建立起程序的框架。</p><p>首先是用规则生成矩阵的部分。又可以分为矩阵、公理和规则三部分：</p><ol><li>矩阵部分：<code>jit.linden</code> 前面是一个初始化矩阵，<code>r generate</code> 接收每一步的生成指令；<code>jit.linden</code> 后面是一步生成后存储的矩阵，在下面用 <code>jit.cellblock</code> 和 <code>jit.pwindow</code> 显示存储的值和存储占用情况</li><li>公理：用 <code>jit.str.fromsymbol</code> 接收 axiom 字母并转换成 ASCII 编码，同时指定矩阵的大小，如 1000</li><li>规则：将包含 axiom、production、turtle 参数的规则写入一个 <code>message</code> 中，然后用 <code>r linden</code> 接收并传入 <code>jit.linden</code> </li></ol><p><img src="http://img.viz.mobi/CCMax03-jit.lindenPart.png" alt=""></p><p>接下来将矩阵中存储的规则用 <code>jit.turtle</code> 画出来。</p><p>这里的关键是用 <code>jit.iter</code> 将矩阵中每个值依次传到 <code>jit.turtle</code> ，并且接收 <code>r turtle</code> 中关于角度、大小等设置值，然后传给 <code>jit.lcd</code> 绘制：</p><p><img src="http://img.viz.mobi/CCMax03-jit.turtlePart.png" alt=""></p><h2 id="Let’s-Play"><a href="#Let’s-Play" class="headerlink" title="Let’s Play!"></a>Let’s Play!</h2><p>接下来终于进入寻找有趣 production 的游戏环节了~</p><p>可以自己试验，也可以从网上搜刮一些已经写好的规则。一个完整的规则可以写到一个 <code>message</code> 里面，打包传给 <code>jit.linden</code>:</p><p><img src="http://img.viz.mobi/CCMax03weed%20production.png" alt=""></p><p>下面进入愉快的玩耍时间~</p><p>种草：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* A * F * F * F-[[A]+A]+F[+FA]</span><br></pre></td></tr></table></figure><p><img src="http://img.viz.mobi/CCMax-weed.gif" alt=""></p><p>种（歪的）树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* X * C0F-[C2[X]+C3X]+C1F[C3+FX]-X * F * FF</span><br></pre></td></tr></table></figure><p><img src="http://img.viz.mobi/CCMax-tree.gif" alt=""></p><p>种粮食：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* A * G * G * GFX[+G][-G] * X * X[-FFF][+FFF]FX</span><br></pre></td></tr></table></figure><p><img src="http://img.viz.mobi/CCMax-grain.gif" alt=""></p><p>大城市的“地铁图”：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* F * +F[--F+F]</span><br></pre></td></tr></table></figure><p><img src="http://img.viz.mobi/CCMax-sub.gif" alt=""></p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="https://www.uegeek.com/181123-generative-art-creativity-07.html" target="_blank" rel="noopener">生成式艺术和算法创作07-向自然致敬的 L-system</a> </li><li><a href="https://www.wikiwand.com/en/L-system" target="_blank" rel="noopener">L-system - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Koch_snowflake" target="_blank" rel="noopener">Koch snowflake - Wikiwand</a></li><li><a href="http://paulbourke.net/fractals/lsys/" target="_blank" rel="noopener">L-System manual</a></li><li><a href="https://www.wikiwand.com/en/Turtle_graphics" target="_blank" rel="noopener">Turtle graphics - Wikiwand</a></li><li><a href="http://piratefsh.github.io/p5js-art/public/lsystems/" target="_blank" rel="noopener">L-Systems Renderer</a></li><li><a href="http://www.kevs3d.co.uk/dev/lsystems/" target="_blank" rel="noopener">L-Systems Turtle Graphics Renderer - HTML5 Canvas - by Kevin Roast</a></li></ul><hr><ul><li><a href="https://www.uegeek.com/180821-jitter-01.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 01 - 什么是矩阵？</a></li><li><a href="https://www.uegeek.com/180822-jitter-02.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 02 - Jitter 对象的属性</a></li><li><a href="https://www.uegeek.com/180825-jitter-03.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频</a></li><li><a href="https://www.uegeek.com/180826-jitter-04.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 04 - 创建矩阵</a></li><li><a href="https://www.uegeek.com/180828-jitter-05.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 05 - 矩阵的数学运算</a></li><li><a href="https://www.uegeek.com/180829-jitter-06.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 06 - 控制视频播放</a></li><li><a href="https://www.uegeek.com/180830-jitter-07.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 07 - ARGB 颜色</a></li><li><a href="https://www.uegeek.com/180831-jitter-08.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 08 - 调整颜色</a></li><li><a href="https://www.uegeek.com/180901-jitter-09.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 09 - 调整图像颜色</a></li><li><a href="https://www.uegeek.com/180902-jitter-10.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 10 - 简单混合</a></li></ul><hr><blockquote><p>友情提示：独自折腾 Max 易患上癔症……不妨入群互助 </p></blockquote><p>👇👇👇</p><p><img src="http://img.viz.mobi/maxgroup0825.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/CC-title1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="艺术" scheme="http://uegeek.com/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Generative Art" scheme="http://uegeek.com/tags/Generative-Art/"/>
    
      <category term="Computational Creativity" scheme="http://uegeek.com/tags/Computational-Creativity/"/>
    
      <category term="创意" scheme="http://uegeek.com/tags/%E5%88%9B%E6%84%8F/"/>
    
      <category term="创造力" scheme="http://uegeek.com/tags/%E5%88%9B%E9%80%A0%E5%8A%9B/"/>
    
      <category term="MaxMSP" scheme="http://uegeek.com/tags/MaxMSP/"/>
    
      <category term="分形" scheme="http://uegeek.com/tags/%E5%88%86%E5%BD%A2/"/>
    
      <category term="L-system" scheme="http://uegeek.com/tags/L-system/"/>
    
  </entry>
  
  <entry>
    <title>生成式艺术和算法创作07-向自然致敬的 L-system</title>
    <link href="http://uegeek.com/181123-generative-art-creativity-07.html"/>
    <id>http://uegeek.com/181123-generative-art-creativity-07.html</id>
    <published>2018-11-23T12:20:51.000Z</published>
    <updated>2018-11-23T12:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/CC-blogtitle.png" alt=""></p><a id="more"></a><ul><li><a href="https://www.uegeek.com/181009-generative-art-creativity-01.html" target="_blank" rel="noopener">生成式艺术和算法创作01-概述</a></li><li><a href="https://www.uegeek.com/181014-generative-art-creativity-02.html" target="_blank" rel="noopener">生成式艺术和算法创作02-随机和噪声</a></li><li><a href="https://www.uegeek.com/181021-generative-art-creativity-03.html" target="_blank" rel="noopener">生成式艺术和算法创作03-混沌和分形</a></li><li><a href="https://www.uegeek.com/181023-generative-art-creativity-04.html" target="_blank" rel="noopener">生成式艺术和算法创作04-规则系统</a></li><li><a href="https://www.uegeek.com/181107-generative-art-creativity-05.html" target="_blank" rel="noopener">生成式艺术和算法创作05-Tessellation</a></li><li><a href="https://www.uegeek.com/181120-generative-art-creativity-06.html" target="_blank" rel="noopener">生成式艺术和算法创作06-形状语法</a></li></ul><p>Lindenmayer system，简称 L-system，是由荷兰乌特勒支大学的生物学和植物学家，匈牙利裔的 Aristid Lindenmayer 于 1968 年提出的有关生长发展中的细胞交互作用的数学模型，被广泛应用于植物生长过程的研究和建模，也常用于模拟各种生物体的形态。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Fractal_weeds.jpg/600px-Fractal_weeds.jpg" alt=""></p><p>使用 L-system 生成的 3D 杂草</p><h2 id="L-system-语法"><a href="#L-system-语法" class="headerlink" title="L-system 语法"></a>L-system 语法</h2><p>L-system 是一系列不同形式的语法规则，它的自然递归规则产生自相似性，也能用于生成自相似的分形，例如迭代函数系统，因此也是一种形态发生（morphogenesis）算法。</p><p>L-system 一般可以这样定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">G ＝｛V,S,ω,P&#125;,</span><br><span class="line"></span><br><span class="line">V: 变量符号集合</span><br><span class="line"></span><br><span class="line">S: 常量符号集合</span><br><span class="line"></span><br><span class="line">ω: 初始状态串(i.e. seed or axiom)</span><br><span class="line"></span><br><span class="line">P: 生成式规则(production)</span><br></pre></td></tr></table></figure><p>例如，Lindenmayer 研究海藻生长模式时提出的最早的 L-system：</p><blockquote><p><strong>变量</strong> : A B</p><p><strong>常量</strong> : 无</p><p><strong>公理 </strong>(axiom) : A</p><p><strong>规则</strong> : (A → AB), (B → A)</p></blockquote><p>迭代过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">n = 0 : A</span><br><span class="line">n = 1 : AB</span><br><span class="line">n = 2 : ABA</span><br><span class="line">n = 3 : ABAAB</span><br><span class="line">n = 4 : ABAABABA</span><br><span class="line">n = 5 : ABAABABAABAAB</span><br><span class="line">n = 6 : ABAABABAABAABABAABABA</span><br><span class="line">n = 7 : ABAABABAABAABABAABABAABAABABAABAAB</span><br><span class="line"></span><br><span class="line">用树状分枝表示迭代过程会更容易理解：</span><br><span class="line"></span><br><span class="line">n=0:         A           开始 (公理/起始点)</span><br><span class="line">            / \</span><br><span class="line">n=1:       A   B         根据规则(A → AB)起始点A拓展成AB，由于起始点没有B，规则(B → A)没有被用到</span><br><span class="line">          /|    \</span><br><span class="line">n=2:     A B     A       AB中的A拓展成AB，B变成A，于是得到了ABA</span><br><span class="line">        /| |     |\</span><br><span class="line">n=3:   A B A     A B     可以看到每个A都是一个新的子树的根，由此引发出和整体结构同构的子结构。</span><br><span class="line">      /| | |\    |\ \</span><br><span class="line">n=4: A B A A B   A B A</span><br></pre></td></tr></table></figure><p>下面我们来看看著名的 Koch snowflake（科赫曲线）是如何用 L-system 生成迭代过程的：</p><p><img src="https://www.researchgate.net/profile/Hamid_Bennis/publication/316742654/figure/fig1/AS:545826508607488@1507146588038/Koch-curve-at-iterations-from-0-to-4.png" alt=""></p><p> L-system 规则是：F→F+F–F+F。想象一下有一只乌龟🐢，当它接收到指令 F 时向前走，接收到指令 + 号就左转 60°，- 号右转 60°：</p><p><img src="http://www.fractalcurves.com/images/side_turtle_draws_Koch.jpg" alt=""></p><p>F→F+F–F+F 的意思就是：把每一个线段 F，用 <code>F&#39; 右转 F&#39; 左转再左转 F&#39; 右转 F&#39;</code> 替代……晕了吧？00 为你准备了分解动作示意图：</p><p><img src="http://img.viz.mobi/Koch%20Snowflake%20Rule.png" alt=""></p><p>使用 L-system 生成图形图像时，模型中的符号要能引用计算机屏幕上的图形元素。例如，Fractint 程序使用 Turtle graphics（类似于 Logo 编程语言中的图形）来生成屏幕图像。它将 L-system 模型中的每个常量解释为海龟命令。</p><p>在 L-system 的语法中，常用的符号及其含义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Character        Meaning</span><br><span class="line">   F         Move forward by line length drawing a line</span><br><span class="line">   f         Move forward by line length without drawing a line</span><br><span class="line">   +         Turn left by turning angle</span><br><span class="line">   -         Turn right by turning angle</span><br><span class="line">   |         Reverse direction (ie: turn by 180 degrees)</span><br><span class="line">   [         Push current drawing state onto stack</span><br><span class="line">   ]         Pop current drawing state from the stack</span><br><span class="line">   #         Increment the line width by line width increment</span><br><span class="line">   !         Decrement the line width by line width increment</span><br><span class="line">   @         Draw a dot with line width radius</span><br><span class="line">   &#123;         Open a polygon</span><br><span class="line">   &#125;         Close a polygon and fill it with fill colour</span><br><span class="line">   &gt;         Multiply the line length by the line length scale factor</span><br><span class="line">   &lt;         Divide the line length by the line length scale factor</span><br><span class="line">   &amp;         Swap the meaning of + and -</span><br><span class="line">   (         Decrement turning angle by turning angle increment</span><br><span class="line">   )         Increment turning angle by turning angle increment</span><br></pre></td></tr></table></figure><h2 id="L-system-在生成式艺术中的应用"><a href="#L-system-在生成式艺术中的应用" class="headerlink" title="L-system 在生成式艺术中的应用"></a>L-system 在生成式艺术中的应用</h2><p>L-system 常被艺术家用于生成植物形态或者模拟植物的生长过程。</p><p>例如，下面的规则可以生成一株 Fractal plant：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">变量 : X F</span><br><span class="line">常量 : + − [ ]</span><br><span class="line">起始状态 : X</span><br><span class="line">规则 : (X → F+[[X]-X]-F[-FX]+X), (F → FF)</span><br><span class="line">角度 : 25°</span><br></pre></td></tr></table></figure><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Fractal-plant.svg/906px-Fractal-plant.svg.png" style="zoom:50%"></p><p>如果 L-system 语法中每个规则仅涉及单个符号而不涉及邻近符号，则属于 context-free。如果规则不仅取决于单个符号而且还取决于邻近符号，则属于 context-sensitive  L-system。这样，不同的规则可以在不同的上下文中运用。</p><p>如果每个符号对应多个 production，并且在每次迭代时以一定概率随机选择，则它是随机 L-system（Stochastic L-systems）。</p><p><img src="https://image.slidesharecdn.com/20procedural-120403132552-phpapp01/95/cs-354-procedural-methods-23-728.jpg?cb=1333459756" alt=""></p><p>L-system weed:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axiom = F</span><br><span class="line">F -&gt; FF-[XY]+[XY]</span><br><span class="line">X -&gt; +FY</span><br><span class="line">Y -&gt; -FX</span><br><span class="line">angle = 22.5</span><br></pre></td></tr></table></figure><p><img src="http://paulbourke.net/fractals/lsys/weed_1.gif" alt=""></p><p>L-system 已经是很成熟的算法，组合不同的规则、尺寸、角度和迭代次数，可以生成变化多样、富有美感的生成式图形。</p><p><img src="http://img.viz.mobi/l-system%20generator1.png" alt=""></p><p><img src="http://img.viz.mobi/l-system%20generator2.png" style="zoom:50%"></p><p>Christa Sommerer 和 Laurent Mignonneau 研究互动式植物生成过程，采集人在环境中的移动等数据作为参数，加入到生成式算法中。</p><div class="video-container"><iframe src="//www.youtube.com/embed/JXX7JNFD2X8" frameborder="0" allowfullscreen></iframe></div><p><a href="https://www.youtube.com/watch?v=JXX7JNFD2X8" target="_blank" rel="noopener">Interactive Plant Growing - YouTube</a></p><p><img src="http://www.interface.ufg.ac.at/christa-laurent/BOOK/InteractiveArtResearch/InteractiveArtResearch.jpg" alt=""></p><p>Jon McCormack 是莫纳什大学的一名艺术家兼计算机科学教授，他的工作包含了算法创作。</p><p>他创作的 Fifty Sisters (2012)系列的特色是「未来的植物」，这些植物用代码通过算法生成。在另一部名为 Eden 的作品中，他创作了一个以虚拟生物为主题的装置作品。</p><p>Bloom 是昆士兰州 QUT 创意产业区委托他制作的一幅 43米 x 9.7米 的数字图像。</p><p><img src="http://jonmccormack.info/wp-content/uploads/2011/04/Bloom960.png" alt=""></p><p>「我认为自己是艺术家」，McCormack 在谈到他的作品时说。</p><blockquote><p>电脑仍然非常原始——它没有人类的创造力，但它有能力做一些我们无法做到的事情。人工智能目前只能给艺术实践带来有限的视角，它们只能利用所学到的知识，而人类的现实情况则是非常广阔的，并且能够给艺术带来了更深刻的视角。</p></blockquote><p>McCormack 指出，人工智能本身就可以创造出看起来像艺术的东西，但是能否把它看作艺术是一个更难的问题。「我们对艺术的看法，很大程度上是人类之间的交流。一旦把一台电脑带进这个情境，你就会突然发现一个非人类的实体正在努力实现这个角色，而这个角色过去是由人类主导的。」</p><p>我们不仅把机器当成一个工具，更是一个合作伙伴或合作者，它拥有自己创造的能力。McCormack 说：</p><blockquote><p>我们一直认为列侬和麦卡特尼是伟大的音乐创作伙伴。我们最终是否会看到一个转折点，这个转折点让我们承认，人类和计算机的伙伴关系不仅仅是其各部分的总和。</p></blockquote><h2 id="L-system-在建筑设计中的应用"><a href="#L-system-在建筑设计中的应用" class="headerlink" title="L-system 在建筑设计中的应用"></a>L-system 在建筑设计中的应用</h2><p>建筑一直都离不开技术的影响。如今电脑技术已经为建筑界带来了许多改变，但它依然潜力无限，甚至可能彻底动摇建筑界的基础规则。</p><p>Michael Hansmeyer 是一位建筑师和程序员，他探索使用算法和计算来生成建筑形式。受到了细胞分裂的启发，Michael Hansmeyer 写下了拥有惊人艳丽的造型和无数刻面的设计运算法则。没人能将他们手绘出来，但它们确实可以被做出来——它们也可以向常规的建筑形态掀起思想狂潮。</p><p><img src="http://www.michael-hansmeyer.com/images/l-systems/l-system-7.jpg" alt=""></p><p><img src="http://www.michael-hansmeyer.com/images/l-systems/l-system-2.jpg" alt=""></p><p>下面是 Michael Hansmeyer 在 TED 2012 年会上的演讲 Building unimaginable shapes：</p><iframe height="498" width="510" src="http://player.youku.com/embed/XNDc4MDM2NzA4" frameborder="0" 'allowfullscreen'=""></iframe><p><a href="https://v.youku.com/v_show/id_XNDc4MDM2NzA4.html" target="_blank" rel="noopener">Michael Hansmeyer：塑造不可思议</a></p><h2 id="L-systems-在音乐中的应用"><a href="#L-systems-在音乐中的应用" class="headerlink" title="L-systems 在音乐中的应用"></a>L-systems 在音乐中的应用</h2><p>使用 L-system 辅助生成音乐片段的研究由来已久。</p><p>Przemyslaw Prusinkiewicz 在 1986 年的论文 Score generation with L-system 中探讨了用算法生成乐谱的方法：用 L-system 生成字符符号，再讲符号解析成一系列的音符<br><img src="https://ai2-s2-public.s3.amazonaws.com/figures/2017-08-08/2820acc0a2efeeaae441ed3b8fba00b7fbcaac8b/4-Figure4-1.png" alt=""></p><p>The score associated with the Hilbert curv in the common musical notation</p><p>随着技术的演进，生成式音乐、算法作曲越来越成熟，架构也越来越复杂，L-system 依然被用作规则和语法生成的方式：</p><p><img src="https://ai2-s2-public.s3.amazonaws.com/figures/2017-08-08/fabba1ee66cd3a835fdfabcb78e19f330eabaf9f/4-Figure1-1.png" alt=""></p><p>via: Improving L-System Music Rendering Using a Hybrid of Stochastic and Context-Sensitive Grammars in a Visual Language Framework.</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://www.wikiwand.com/en/L-system" target="_blank" rel="noopener">L-system - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Koch_snowflake" target="_blank" rel="noopener">Koch snowflake - Wikiwand</a></li><li><a href="http://paulbourke.net/fractals/lsys/" target="_blank" rel="noopener">L-System manual</a></li><li><a href="https://www.wikiwand.com/en/Turtle_graphics" target="_blank" rel="noopener">Turtle graphics - Wikiwand</a></li><li><a href="http://piratefsh.github.io/p5js-art/public/lsystems/" target="_blank" rel="noopener">L-Systems Renderer</a></li><li><a href="http://www.kevs3d.co.uk/dev/lsystems/" target="_blank" rel="noopener">L-Systems Turtle Graphics Renderer - HTML5 Canvas - by Kevin Roast</a></li><li><a href="http://jonmccormack.info/" target="_blank" rel="noopener">Jon McCormack</a></li><li><a href="http://www.michael-hansmeyer.com/l-systems" target="_blank" rel="noopener">Michael Hansmeyer - L-Systems</a></li><li><a href="http://www.michael-hansmeyer.com/" target="_blank" rel="noopener">Michael Hansmeyer - Computational Architecture</a></li><li><a href="http://algorithmicbotany.org/papers/score.icmc86.html" target="_blank" rel="noopener">Score generation with L-systems</a></li><li><a href="https://www.semanticscholar.org/paper/Improving-L-System-Music-Rendering-Using-a-Hybrid-a-Lim-Talib/fabba1ee66cd3a835fdfabcb78e19f330eabaf9f" target="_blank" rel="noopener">Improving L-System Music Rendering Using a Hybrid of Stochastic and Context-Sensitive Grammars in a Visual Language Framework - Semantic Scholar</a></li><li><a href="http://www.theatreofnoise.com/2014/03/l-system-garden-max-implementation-of.html" target="_blank" rel="noopener">theatre of noise: L-System Garden: Max implementation of Lindenmeyer</a></li><li><a href="http://creativetuts.com/creating-cubic-spline-with-mospline-l-system/" target="_blank" rel="noopener">Creating Cubic Spline with Mospline L-System</a></li><li><a href="http://www.motionesque.com/beautyoffractals/" target="_blank" rel="noopener">The Beauty of Fractals - L-system in Houdini - motionesque - Andrea Kühne | motionesquemotionesque</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/CC-blogtitle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="艺术" scheme="http://uegeek.com/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Generative Art" scheme="http://uegeek.com/tags/Generative-Art/"/>
    
      <category term="Computational Creativity" scheme="http://uegeek.com/tags/Computational-Creativity/"/>
    
      <category term="创意" scheme="http://uegeek.com/tags/%E5%88%9B%E6%84%8F/"/>
    
      <category term="创造力" scheme="http://uegeek.com/tags/%E5%88%9B%E9%80%A0%E5%8A%9B/"/>
    
      <category term="分形" scheme="http://uegeek.com/tags/%E5%88%86%E5%BD%A2/"/>
    
      <category term="L-system" scheme="http://uegeek.com/tags/L-system/"/>
    
  </entry>
  
  <entry>
    <title>生成式艺术和算法创作06-形状语法</title>
    <link href="http://uegeek.com/181120-generative-art-creativity-06.html"/>
    <id>http://uegeek.com/181120-generative-art-creativity-06.html</id>
    <published>2018-11-20T12:51:14.000Z</published>
    <updated>2018-11-23T12:21:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/CC-blogtitle.png" alt=""></p><a id="more"></a><ul><li><a href="https://www.uegeek.com/181009-generative-art-creativity-01.html" target="_blank" rel="noopener">生成式艺术和算法创作01-概述</a></li><li><a href="https://www.uegeek.com/181014-generative-art-creativity-02.html" target="_blank" rel="noopener">生成式艺术和算法创作02-随机和噪声</a></li><li><a href="https://www.uegeek.com/181021-generative-art-creativity-03.html" target="_blank" rel="noopener">生成式艺术和算法创作03-混沌和分形</a></li><li><a href="https://www.uegeek.com/181023-generative-art-creativity-04.html" target="_blank" rel="noopener">生成式艺术和算法创作04-规则系统</a></li><li><a href="https://www.uegeek.com/181107-generative-art-creativity-05.html" target="_blank" rel="noopener">生成式艺术和算法创作05-Tessellation</a></li></ul><p>形状语法/形状文法（Shape grammars）是生成特定类别几何形状的生产系统。</p><p>1971年，<a href="https://www.wikiwand.com/en/George_Stiny" target="_blank" rel="noopener">George Stiny</a> 和 <a href="https://www.wikiwand.com/en/James_Gips" target="_blank" rel="noopener">James Gips</a> 在一篇开创性的文章中定义了形状语法的基础。形状语法是一种计算机辅助设计方法，是研究二维和三维语言的一种方式，它可以按照人们的设计思想和要求，按照一定的规则自动产生新形态。</p><p><img src="http://web.mit.edu/haldane/www/icerays/sm_iceray07.jpg" alt=""></p><p>具体来说，形状语法由形状规则（shape rules）和选择、处理规则的生成引擎（generation engine）组成。形状语法执行计算的两个主要步骤是：识别特定形状，用可能的形状替代。</p><p>形状规则定义如何转换现有形状，由两个部分组成，两个部分由从左到右指向的箭头分隔：</p><ul><li>箭头左侧的部分称为左侧（LHS），描绘形状和标记的条件。</li><li>箭头右侧的部分称为右侧（RHS），描述如何转换 LHS 形状以及标记的位置，标记有助于定位和定向新形状。</li></ul><p>形状语法最少由三个形状规则组成：<strong>起始规则，至少一个转换规则和终止规则</strong>。形状语法中的生产规则可以连续应用，类似 <a href="https://www.wikiwand.com/en/L-System" target="_blank" rel="noopener">L-Systems 中的</a> productions。</p><p>形状语法通常是一个四元组，SG＝（S, L, R, I）。其中 S 是形状的有限集合，L 是符号的有限集合，R 是规则的有限集合，I 是初始形状。形状文法产生的形状，都应通过形状规则由初始形状派生出来。</p><p><img src="/Users/kidult00/Downloads/Courses/Kadenze/generative-art-and-computational-creativity-i/3-rule-based-systems-grammars-and-markov-chains/shape%20grammars%20in%20action.png" alt="shape grammars in action"></p><p><img src="https://d2w9rnfcy7mm78.cloudfront.net/2351379/display_c5bf667d63e6917a82a5163d65212a6d.jpg" alt=""></p><p>形状语法在一个小规模的、定义明确的生成问题（如住房布局和结构细化）时最有用。由于形状规则通常是在小形状上定义的，因此形状语法可以包含许多规则。</p><p>Mitchell 提出的 Palladian 别墅形状语法包含 69 个规则，这些规则适用于整个八个实施步骤。</p><p><img src="https://images.slideplayer.com/27/9112988/slides/slide_6.jpg" alt=""></p><p><img src="https://images.slideplayer.com/27/9112988/slides/slide_7.jpg" alt=""></p><p>Rules of Mughal garden：</p><p><img src="https://arch.gatech.edu/sites/default/files/03_mughal_production.jpg" alt=""></p><p>借助 CAD，形状语法可以节省人力、缩短设计周期、产生系列化方案，能很好地传承文脉，使设计内涵在新环境下得以保存和发展，受到了设计界尤其是建筑设计的高度重视。</p><p><img src="http://keyan.info/wp-content/uploads/2013/04/KeyanGrammar2.png" alt=""></p><p><img src="https://arch.gatech.edu/sites/default/files/08_98_cube_subgroups.jpg" alt=""></p><p>近几十年来，形状语法在计算机图形学中越来越重要。 </p><p>除了用于建筑物或城市的程序建模（例如电影或视频游戏），Shape Grammars 是许多开发系统的基础，它们使用生产规则来生成各种不同的 3D 模型。 使用 Shape Grammars 可以创建具有逼真外观的街道平面图，以及建筑物的外墙或内部空间。</p><p>运用形状语法生成的建筑模型和建筑设计：</p><p><img src="/Users/kidult00/Downloads/Courses/Kadenze/generative-art-and-computational-creativity-i/3-rule-based-systems-grammars-and-markov-chains/architecture%20used%20shape%20grammars.png" alt="architecture used shape grammars"></p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://www.wikiwand.com/en/Shape_grammar" target="_blank" rel="noopener">Shape grammar - Wikiwand</a></li><li><a href="http://www.shapegrammar.org/" target="_blank" rel="noopener">Shape Grammars</a></li><li><a href="https://www.youtube.com/watch?v=pg1NpMmPv48" target="_blank" rel="noopener">The complex geometry of Islamic design - Eric Broug - YouTube</a></li><li><a href="http://users.metu.edu.tr/baykan/arch467/Readings/Stiny-Mitchell.pdf" target="_blank" rel="noopener">Stiny-Mitchell.pdf</a></li><li><a href="https://arch.gatech.edu/design-computation-1" target="_blank" rel="noopener">Design Computation | School of Architecture | Georgia Institute of Technology | Atlanta, GA</a></li><li><a href="https://slideplayer.com/slide/9522024/" target="_blank" rel="noopener">What is computation? What is a shape grammar? How are shape grammars used in design? How is a shape grammar developed? - ppt download</a></li><li><a href="https://www.youtube.com/watch?v=t-VUpX-xVo4" target="_blank" rel="noopener">Procedural Building Generation with Grammars - YouTube</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/CC-blogtitle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="艺术" scheme="http://uegeek.com/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Generative Art" scheme="http://uegeek.com/tags/Generative-Art/"/>
    
      <category term="Computational Creativity" scheme="http://uegeek.com/tags/Computational-Creativity/"/>
    
      <category term="创意" scheme="http://uegeek.com/tags/%E5%88%9B%E6%84%8F/"/>
    
      <category term="创造力" scheme="http://uegeek.com/tags/%E5%88%9B%E9%80%A0%E5%8A%9B/"/>
    
      <category term="Shape Grammar" scheme="http://uegeek.com/tags/Shape-Grammar/"/>
    
      <category term="形状语法" scheme="http://uegeek.com/tags/%E5%BD%A2%E7%8A%B6%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>兴趣多动症的自救指南 | 00 的 TEDx 演讲全文</title>
    <link href="http://uegeek.com/181112TedxWumaStreet.html"/>
    <id>http://uegeek.com/181112TedxWumaStreet.html</id>
    <published>2018-11-12T15:54:05.000Z</published>
    <updated>2018-11-12T16:25:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/TEDxWumaStreet.jpg" alt="TEDxWumaStreet"></p><blockquote><p>11 月 3 日，一场以「变」为主题的思想大会 TEDxWumaStreet 在温州开讲。12 位来自学术界、互联网、新闻界、文化产业、地产行业、设计领域的讲者，跨越山川湖海，共赴这场知识盛宴。 </p><p>尽管行业不同、背景各异，但他们都是自身领域中的思考者和实践者，都在用思想和行动 Remake 人生，讲述精彩故事。 </p></blockquote><p><img src="http://img.viz.mobi/TEDxWumaStreetSpeakers1.jpg" alt="TEDxWumaStreetSpeakers1"></p><p><img src="http://img.viz.mobi/TEDxWumaStreetSpeakers2.jpg" alt="TEDxWumaStreetSpeakers2"></p><p>00 有幸作为本年度 TedxWumaStreet 的受邀演讲者，以自己所经历的兴趣和职业之「变」为主题，分享了个人的 Remake 故事。</p><p>以下是演讲全文，也许你也能感受到这个颇受关注的议题的共鸣，欢迎参与讨论。</p><a id="more"></a><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.002.jpeg" alt="兴趣多动症的自救指南.002"></p><p>这是一则寻人启事。</p><p>请大家回忆一下，在自己的亲朋好友、同事同学里面，有没有这样一类人：他们兴趣广泛，每隔一段时间都会开辟一些新的爱好。比如，这个月是美食博主、下个月可能就玩起了电子音乐。可是，他们挖坑远比填坑快，很难有长久的兴趣。</p><p>你可以回想一下这个朋友的名字，又或者，那个人就是你自己。</p><p>那么，欢迎加入兴趣多动症大家庭。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.005.jpeg" alt=""></p><p>这个词是我编造的，我用它来称呼这样一群人，他们经常要面对一个来自灵魂的拷问：</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.006.jpeg" alt=""></p><p>兴趣太多，容易一事无成，怎么办？</p><p>我被这个问题困扰了很久，应该是一个资深的患者。</p><p>我是学地理出身的互联网产品设计师，曾经在微信、网易等团队做了多年的产品和人机交互设计，业余运营两个公众号 HackYourself 和 ArtxCode，是一名写得了代码、焊的了电路板的菜鸟创客。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.007.jpeg" alt=""></p><p>今天想跟大家分享的是，作为一个兴趣多动症患者，这十多年来我的困惑和领悟。</p><p>兴趣多动症，其实是一种长时间注意力缺乏的表现，做事容易三分钟热度。据我观察，患有这个病症的人群正在快速扩大，因为我们身处的时代，信息越来越丰富，而注意力越来越稀缺。</p><p>具体来说呢，这个病症主要有两个症状——多和动。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.010.jpeg" alt=""></p><p>这一群人很容易被有意思的事情所吸引，这也觉得新鲜，那也觉得好玩。兴趣广泛是好事，可是兴趣泛滥就很难收拾了。然后，他们不但爱胡思乱想，还喜欢比划两下。行动力强是好事，可是经常乱动，也许就是不规则的布朗运动了。</p><p>//</p><p>俗话说，久病成医。</p><p>因为跟这个病症斗争了许多年，我也慢慢开始学着自救。自救的第一步呢，是先给自己把把脉。</p><p>之所容易兴趣广泛变成兴趣泛滥、行动变成乱动，我认为是没有处理好三对主要矛盾：</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.012.jpeg" alt=""></p><p><strong>一个是深度和广度的矛盾。一个是探索和应用的矛盾，应该多探索不同的领域，还是应该尽可能地学以致用，提高投入产出比？还有一个矛盾是愉悦和成就。是满足自己的好奇心、追求新鲜刺激呢，还是应该潜下心来好好积累，成为专家？</strong></p><p>这一群人自然是会选择广度、探索和愉悦的。</p><p>那么，有没有可能，既顺应天性，又不需要去做两难的取舍呢？</p><p>我想应该是有的，前提是要从我们给自己设下的二元对立的陷阱中挣脱出来。</p><p>//</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.014.jpeg" alt=""></p><p>第一个矛盾是追求深度还是追求广度。</p><p>我小时候是个乖学生，但是发现我的同桌们，有一个解答难题最取巧的方法。那就是——直接看别人的答案。所以，我们也可以找出那些兴趣很多，但是样样精通的人，看看他们是如何做到的。</p><p>大家可以想象这样一个人吗？他既拿过奥斯卡奖，又得过奥运会冠军。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.015.jpeg" alt=""></p><p>赫伯特·西蒙就是这样一位神奇的人物，不过他不是奥斯卡影帝和奥运金牌得主，他是至今唯一一位既得过诺贝尔奖又得过图灵奖的学术泰斗。图灵奖就好比计算机科学里的奥斯卡奖。</p><p>对多数人而言，一辈子在一个领域有所成就已经非常幸运了，而西蒙一生一共拿了 9 个博士学位，在经济学、政治学、管理学、人工智能、心理学、认知科学等领域都是大师级的人物……这简直是开了挂的人生，他是怎么做到的呢？</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.016.jpeg" alt=""></p><p>西蒙那些看似庞杂的研究领域，其实是围绕一个大问题展开的：</p><blockquote><p>人类如何决策</p></blockquote><p>他意识到这是人类行为的中心问题，无法由单一学科来解答。他分别从政治学、经济学与管理学视角研究过组织行为以后，转向了心理学，提出有限理性理论。为了深入解释人类决策的机制，又尝试用计算机去模拟人的思维过程，于是成为人工智能的先驱之一。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.017.jpeg" alt=""></p><p>西蒙的例子告诉我们，如果由一个大的主题来驱动，庞杂的兴趣不是障碍，反而是优势。但是如果反过来，先任由兴趣蔓延，再尝试将它们有机结合起来，则要困难很多。</p><p>那么，要如何找到属于自己的主题呢？这也是我探索了多年的问题。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.019.jpeg" alt=""></p><p>我在大学学的是地理信息系统和旅游规划，却做了<a href="https://www.uegeek.com/tags/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/" target="_blank" rel="noopener">互联网产品</a>和<a href="https://www.uegeek.com/tags/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/" target="_blank" rel="noopener">交互设计</a>的工作。刚开始我觉得挺焦虑的，好像那么多年白费了，一切要从零开始。后来，当我尝试把学科和领域抽象出来，寻找它们的共性，就有了不一样的发现。</p><p>我学的专业是地理，地理学的核心问题是人地关系，对应的实践领域是 planning，规划。我的工作是人机交互设计，顾名思义就是要研究人和计算机的关系，对应的实践领域是 design，设计。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.020.jpeg" alt=""></p><p>其实规划和设计的相似远大于差异，只不过我研究的对象、还有问题的尺度发生了变化，从区域、城市、旅游景区的规划，变成了电脑和手机屏幕界面的设计。</p><p>这就是我对第一个矛盾的理解：<strong>当我们觉得自己的兴趣太多太杂的时候，不仿为它寻找一个主题。</strong></p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.021.jpeg" alt=""></p><p>//</p><p>第二个矛盾，探索和应用，我把它称为资本家的小算盘。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.022.jpeg" alt=""></p><p>试想一下，如果我们是一名淘金者，可能经常需要做这样的取舍：是继续找更大的金矿，还是先把已经找到的矿开采完？探索还是开采，是资源有限的情况下，经常会遇到的两难。当我们面对新的领域和知识，想尝试另外一种职业、另外一种身份，甚至另外一种人生的时候，这个主题就会反复出现。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.023.jpeg" alt=""></p><p>我认为，想种不同的果树、尝试不同的人生，没有问题。问题往往出在，果树还没有结出果实就把树砍了，一种人生的滋味还没有尝到就提前离席了。</p><p>兴趣太多，最容易遇上的尴尬就是从刚入门到秒放弃。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.025.jpeg" alt=""></p><p>比如我，高中开始学吉他，但是几乎每一次都是练到手指起茧刚开始有进步，就没有继续下去了。所以十多年来依然停留在高级入门水平。</p><p>任何兴趣，都需要一个生长期。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.026.jpeg" alt=""></p><p>深耕一个领域，一两年太短，十年又可能坐不住。<strong>那么不妨试着给兴趣分配一笔大额的预算，以两年或者四年为一个财政周期，就像重新读一次本科或者研究生，在开始时就选好课题，督促自己在这个周期内必需学有所成，交出像样的作品才能拿到毕业证。</strong></p><p>Tim Ferriss 也是一名兴趣多动症患者。他是企业家、畅销书作家、演员、武术和舞蹈爱好者，会 6 国语言，拿过中国散打全美冠军、保持着一项探戈舞吉尼斯世界记录。虽然涉猎广泛，但是他会在某一段时间内（比如说 3-6 个月）沉浸地学习某项新技能，直到学有所成，并且把学习经验整理出来出版。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.027.jpeg" alt=""></p><p>我觉得他的方法非常好。所以我也试着给我的兴趣至少半年的时间，并且记录自己的学习过程。</p><p>我一直对做东西感兴趣，所以参加了 <a href="https://www.uegeek.com/tags/Fab/" target="_blank" rel="noopener">MIT 麻省理工大学一个向全球开放的课程</a>，用半年的时间专门学习数字制造的各种技能，包括 3D 建模，3D 打印，电路设计，嵌入式开发等等。每周要去上课，在实验室里动手做作业。</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=t0312hw9hzn" allowfullscreen="true"></iframe><p>因为当时是在国内最早的一批学生，没有什么中文的资料，所以我把<a href="https://www.uegeek.com/tags/Fab/" target="_blank" rel="noopener">每一周的笔记和需要动手做出实物的作业</a>都写成了教程。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.029.jpeg" alt=""></p><p>半年里，看着自己一点一点地学着画图、操作机器、接电路板、编程，最终还通过了答辩拿到了毕业证，就会觉得从入门到没有放弃，这种感觉真是太鼓舞人心了。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.030.jpeg" alt=""></p><p>所以，<strong>面对探索和应用的矛盾，我们可以设定兴趣周期，在相对固定的时间框架内自由探索，并且形成积累，成为下一个阶段的储备。</strong></p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.031.jpeg" alt=""></p><p>//</p><p>第三个难题，是如何平衡愉悦和成就。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.032.jpeg" alt=""></p><p>多动症患者很喜欢 接触新课题时的感觉，喜欢即时满足，可能容易欺骗自己认为已经学到了，而对漫长、看似停滞的练习阶段缺乏耐心。可是如果不经过积累，哪来的成果和意义呢？</p><p>这个矛盾困扰了我很久。直到有一天，我突然反问自己，为什么愉悦和成就变成了矛盾呢？</p><blockquote><p>愉悦到底来自哪里？</p><p>什么样的愉悦是我们应该追求的？</p><p>怎样可以既愉悦又有所建树？</p></blockquote><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.034.jpeg" alt=""></p><p>村上春树在《我的职业是小说家》这本书里这样写到。在外人看来，村上的写作生活，规律到有点乏味，就像钟表一样分秒不差。每天 4 点起床，写作 5 小时，下午跑步 1 小时或游泳 1 个半小时，然后读书、听音乐，晚上 9 点睡觉。这样的作息，从他写长篇小说开始，几乎从未改变。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.035.jpeg" alt=""></p><p>愉悦和成就本来就不该是对立的，恰恰相反，在常人并没有什么感觉的事情上面，能体会到持续的愉悦，才容易做出不一般的成绩。我想，不论是写作还是跑步，村上应该都体验到了极强的心流。</p><p>心流是积极心理学的创始人之一，希斯赞特米哈伊提出的概念，它是指我们在做某些事情时，那种全神贯注、投入忘我的状态，甚至感觉不到时间的存在，而完成之后会有一种充满能量并且非常满足的感受。在做那些自己喜欢、擅长、有挑战的事情时，就容易体验到心流，比如写作、演奏乐器、玩游戏、运动等等。</p><p>所以，并不是所有的愉悦都值得追求。现在我常常会<strong>用一个标准来过滤兴趣，那就是看这件事情能否容易让我进入心流状态。</strong></p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.037.jpeg" alt=""></p><p>想要兼顾愉悦和成就，最简单有效的做法就是在心流中形成作品——不论是一篇文章，一个程序，还是一件物品。</p><p>//</p><p>以上就是我对兴趣多动症三个主要矛盾的自救策略。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.038.jpeg" alt=""></p><p><strong>深度和广度的矛盾，可以用主题来整合。探索和应用的矛盾，可以用兴趣周期来拆分。愉悦和成就的矛盾，可以用心流换作品，皆大欢喜。</strong></p><p>兴趣多动症是一种频发症状，这也是我给自己的三颗速效救心丸。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.039.jpeg" alt=""></p><p>在这些年的自救过程中，我曾经焦虑于自己的不专注，期望自己变成在兴趣上很专一的人。但是都失败了。因为那不是我。一个人最鲜明的特质，往往就是最大的缺点，也是最大的优点。<strong>找出那些自己能够以苦为乐的事情，不断地觉察、顺应、引导和锻炼天性，把它培养成优势，是我们每一个人真正的人生课题。</strong></p><p>所以我的多动症还在继续。</p><p>你看，因为想给这次演讲做一个小片头，我又新开了一个坑：学做 3D 动画。我跟着教程做了一个四处张望的多动的潜水艇。</p><p><img src="http://img.viz.mobi/HHD-TEDxWumaStreet.040.jpeg" alt=""></p><p>做完以后，我发现它更适合做片尾，因为这是我的第一个练习作品，前面有一个大坑等着我来填。</p><p>如果你跟我一样，曾经被兴趣太多而困扰，不妨试着善待自己本性，把天性塑造成独特的优势。</p><p>每个人都可以、并且应该成为自己的伯乐，为世界贡献一人份的多样性。</p><hr><p><img src="http://img.viz.mobi/TEDxWumaStreet-thanks.jpeg" alt=""></p><p>你也是兴趣多动症患者吗？欢迎在留言区吐槽和支招 ~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/TEDxWumaStreet.jpg&quot; alt=&quot;TEDxWumaStreet&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;11 月 3 日，一场以「变」为主题的思想大会 TEDxWumaStreet 在温州开讲。12 位来自学术界、互联网、新闻界、文化产业、地产行业、设计领域的讲者，跨越山川湖海，共赴这场知识盛宴。 &lt;/p&gt;
&lt;p&gt;尽管行业不同、背景各异，但他们都是自身领域中的思考者和实践者，都在用思想和行动 Remake 人生，讲述精彩故事。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/TEDxWumaStreetSpeakers1.jpg&quot; alt=&quot;TEDxWumaStreetSpeakers1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/TEDxWumaStreetSpeakers2.jpg&quot; alt=&quot;TEDxWumaStreetSpeakers2&quot;&gt;&lt;/p&gt;
&lt;p&gt;00 有幸作为本年度 TedxWumaStreet 的受邀演讲者，以自己所经历的兴趣和职业之「变」为主题，分享了个人的 Remake 故事。&lt;/p&gt;
&lt;p&gt;以下是演讲全文，也许你也能感受到这个颇受关注的议题的共鸣，欢迎参与讨论。&lt;/p&gt;
    
    </summary>
    
      <category term="HackYourself" scheme="http://uegeek.com/categories/HackYourself/"/>
    
    
      <category term="TED" scheme="http://uegeek.com/tags/TED/"/>
    
      <category term="Speech" scheme="http://uegeek.com/tags/Speech/"/>
    
      <category term="演讲" scheme="http://uegeek.com/tags/%E6%BC%94%E8%AE%B2/"/>
    
      <category term="兴趣" scheme="http://uegeek.com/tags/%E5%85%B4%E8%B6%A3/"/>
    
  </entry>
  
  <entry>
    <title>生成式艺术和算法创作05-Tessellation</title>
    <link href="http://uegeek.com/181107-generative-art-creativity-05.html"/>
    <id>http://uegeek.com/181107-generative-art-creativity-05.html</id>
    <published>2018-11-07T13:13:18.000Z</published>
    <updated>2018-11-07T13:27:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/CC-blogtitle.png" alt=""></p><a id="more"></a><ul><li><a href="https://www.uegeek.com/181009-generative-art-creativity-01.html" target="_blank" rel="noopener">生成式艺术和算法创作01-概述</a></li><li><a href="https://www.uegeek.com/181014-generative-art-creativity-02.html" target="_blank" rel="noopener">生成式艺术和算法创作02-随机和噪声</a></li><li><a href="https://www.uegeek.com/181021-generative-art-creativity-03.html" target="_blank" rel="noopener">生成式艺术和算法创作03-混沌和分形</a></li><li><a href="https://www.uegeek.com/181023-generative-art-creativity-04.html" target="_blank" rel="noopener">生成式艺术和算法创作04-规则系统</a></li></ul><p>Tessellation（密铺/镶嵌/平面填充）或称细分曲面（subdivision surface），是指用一些较小的表面填满（tiling）一个较大的表面而不留任何空隙。在数学上，Tessellation 可以推广到更高的维度，称为空间填充。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/Leeuwarden_-_Tegeltableau_Escher.jpg/580px-Leeuwarden_-_Tegeltableau_Escher.jpg" alt=""></p><p>A wall sculpture in <a href="https://www.wikiwand.com/en/Leeuwarden" target="_blank" rel="noopener">Leeuwarden</a> celebrating the artistic tessellations of <a href="https://www.wikiwand.com/en/M._C._Escher" target="_blank" rel="noopener">M. C. Escher</a></p><p>在几何学中，两块相邻 tiles 的边界叫做 edge，三个或更多 tiles 的交点叫做 vertex。平面密铺分为规则和不规则两种，规则镶嵌即重复组合一种或多种不同的图形，具有周期性的重复模式。由正多边形组成的可以分为正镶嵌、半正镶嵌（Demiregular Tessellation）和不均匀半正镶嵌和复合多边形镶嵌等种类。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/03/Academ_Periodic_tiling_by_hexagons_and_other_regular_polygons.svg/240px-Academ_Periodic_tiling_by_hexagons_and_other_regular_polygons.svg.png" alt=""></p><p>通过两个或多个凸规则多边形对平面进行细分，使得相同顺序的相同多边形围绕每个多边形顶点称为半规则 Tessellation，或者有时称为阿基米德曲面细分：</p><p><img src="http://mathworld.wolfram.com/images/eps-gif/SemiregularTessellations_700.gif" alt=""></p><p>有 14 个单向 Tessellation 是三个常规和八个半规则镶嵌的有序组合：</p><p><img src="http://mathworld.wolfram.com/images/eps-gif/DemiregularTessellations_600.gif" alt=""></p><p>有规律的填充形成的图案，可分为 17 组。你没有看错，是总共只有 17 组，详细的介绍请见 <a href="https://www.wikiwand.com/en/Wallpaper_group" target="_blank" rel="noopener">Wallpaper group</a>，感觉有必要单开一篇来专门研究。</p><p><img src="http://img.viz.mobi/Overview%20of%20wallpaper%20groups.png" alt=""></p><p>缺乏重复图案的密铺称为非周期平铺（Non-periodic/Aperiodic）。非周期平铺使用一些较小的表面来填满一个较大的表面而不留任何空隙，但由于每一片的形状皆不相同，以致无法形成重复图案。</p><p>另外，也存在非欧几里得空间的密铺，如正七边形镶嵌、七阶三角形镶嵌等。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/H2_tiling_237-4.png/240px-H2_tiling_237-4.png" alt=""></p><p>在三维成像中也会使用 Tessellation 快速生成 3D 成像的小三角形。可以使用 GPU 通过 Programmable Tessellator 实现细分曲面，使得渲染对象的表面和边缘更平滑，物件呈现更为精细。</p><p>（写到这里只有一个感受：需要完全重修几何学和计算机图形学……）</p><p><img src="http://tessellations.org/tgp-seth/angry-birds-tessellation.jpg" alt=""></p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://www.wikiwand.com/en/Tessellation" target="_blank" rel="noopener">Tessellation - Wikiwand</a></li><li><a href="http://mathworld.wolfram.com/Tessellation.html" target="_blank" rel="noopener">Tessellation – from Wolfram MathWorld</a></li><li><a href="https://www.mathsisfun.com/geometry/tessellation.html" target="_blank" rel="noopener">Tessellation</a></li><li><a href="https://www.wikiwand.com/en/Wallpaper_group" target="_blank" rel="noopener">Wallpaper group - Wikiwand</a></li></ul><p>二次搬运 Wolfram 的 Reference：</p><ul><li>Ball, W. W. R. and Coxeter, H. S. M. <em>Mathematical Recreations and Essays, 13th ed.</em> New York: Dover, pp. 105-107, 1987.</li><li>Bhushan, A.; Kay, K.; and Williams, E. “Totally Tessellated.” <a href="http://library.thinkquest.org/16661/" target="_blank" rel="noopener">http://library.thinkquest.org/16661/</a>.</li><li>Britton, J. <em>Symmetry and Tessellations: Investigating Patterns.</em> Englewood Cliffs, NJ: Prentice-Hall, 1999.</li><li>Critchlow, K. <em>Order in Space: A Design Source Book.</em> New York: Viking Press, 1970.</li><li>Cundy, H. and Rollett, A. <em>Mathematical Models, 3rd ed.</em> Stradbroke, England: Tarquin Pub., pp. 60-63, 1989.</li><li>Gardner, M. <em>Martin Gardner’s New Mathematical Diversions from Scientific American.</em> New York: Simon and Schuster, pp. 201-203, 1966.</li><li>Gardner, M. “Tilings with Convex Polygons.” Ch. 13 in <em>Time Travel and Other Mathematical Bewilderments.</em> New York: W. H. Freeman, pp. 162-176, 1988.</li><li>Ghyka, M. <em>The Geometry of Art and Life.</em> New York: Dover, 1977.</li><li>Kraitchik, M. “Mosaics.” §8.2 in <em>Mathematical Recreations.</em> New York: W. W. Norton, pp. 199-207, 1942.</li><li>Lines, L. <em>Solid Geometry, with Chapters on Space-Lattices, Sphere-Packs, and Crystals.</em> New York: Dover, pp. 199 and 204-207 1965.</li><li>Pappas, T. “Tessellations.” <em>The Joy of Mathematics.</em> San Carlos, CA: Wide World Publ./Tetra, pp. 120-122, 1989.</li><li>Peterson, I. <em>The Mathematical Tourist: Snapshots of Modern Mathematics.</em> New York: W. H. Freeman, p. 75, 1988.</li><li>Radin, C. <em>Miles of Tiles.</em> Providence, RI: Amer. Math. Soc., 1999.</li><li>Rawles, B. <em>Sacred Geometry Design Sourcebook: Universal Dimensional Patterns.</em> Nevada City, CA: Elysian Pub., 1997.</li><li>Steinhaus, H. <em>Mathematical Snapshots, 3rd ed.</em> New York: Dover, pp. 75-76 and 78-82, 1999.</li><li>Vichera, M. “Archimedean Polyhedra.” <a href="http://www.vicher.cz/puzzle/telesa/telesa.htm" target="_blank" rel="noopener">http://www.vicher.cz/puzzle/telesa/telesa.htm</a>.</li><li>Walsh, T. R. S. “Characterizing the Vertex Neighbourhoods of Semi-Regular Polyhedra.” <em>Geometriae Dedicata</em> <strong>1</strong>, 117-123, 1972.</li><li>Weisstein, E. W. “Books about Tilings.” <a href="http://www.ericweisstein.com/encyclopedias/books/Tilings.html" target="_blank" rel="noopener">http://www.ericweisstein.com/encyclopedias/books/Tilings.html</a>.</li><li>Wells, D. <em>The Penguin Dictionary of Curious and Interesting Geometry.</em> London: Penguin, pp. 121, 213, and 226-227, 1991.</li><li>Williams, R. <em>The Geometrical Foundation of Natural Structure: A Source Book of Design.</em> New York: Dover, pp. 35-43, 1979.</li><li>Woo, M.; Neider, J.; Davis, T.; and Shreiner, D. Ch. 11 in <em>OpenGL 1.2 Programming Guide, 3rd ed.: The Official Guide to Learning OpenGL, Version 1.2.</em> Reading, MA: Addison-Wesley, 1999.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/CC-blogtitle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="艺术" scheme="http://uegeek.com/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Generative Art" scheme="http://uegeek.com/tags/Generative-Art/"/>
    
      <category term="Computational Creativity" scheme="http://uegeek.com/tags/Computational-Creativity/"/>
    
      <category term="创意" scheme="http://uegeek.com/tags/%E5%88%9B%E6%84%8F/"/>
    
      <category term="创造力" scheme="http://uegeek.com/tags/%E5%88%9B%E9%80%A0%E5%8A%9B/"/>
    
      <category term="Tessellation" scheme="http://uegeek.com/tags/Tessellation/"/>
    
  </entry>
  
  <entry>
    <title>生成式艺术和算法创作04-规则系统</title>
    <link href="http://uegeek.com/181023-generative-art-creativity-04.html"/>
    <id>http://uegeek.com/181023-generative-art-creativity-04.html</id>
    <published>2018-10-23T11:32:35.000Z</published>
    <updated>2018-10-23T11:36:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/CC-blogtitle.png" alt=""></p><a id="more"></a><ul><li><a href="https://www.uegeek.com/181009-generative-art-creativity-01.html" target="_blank" rel="noopener">生成式艺术和算法创作01-概述</a></li><li><a href="https://www.uegeek.com/181014-generative-art-creativity-02.html" target="_blank" rel="noopener">生成式艺术和算法创作02-随机和噪声</a></li><li><a href="https://www.uegeek.com/181021-generative-art-creativity-03.html" target="_blank" rel="noopener">生成式艺术和算法创作03-混沌和分形</a></li></ul><h2 id="规则系统"><a href="#规则系统" class="headerlink" title="规则系统"></a>规则系统</h2><blockquote><p>In computer science, rule-based systems are used as a way to store and manipulate knowledge to interpret information in a useful way. –Wiki</p></blockquote><p>规则系统（rule-based systems）的类型：</p><ul><li>生成语法和乔姆斯基等级（乔姆斯基在20世纪50年代提出）</li><li>形式逻辑系统和逻辑程序：推理规则，定理求解程序，论证系统，案例推理系统</li><li>专家系统：将特定领域的专业知识，编码在可以执行演绎和归纳的框架中</li><li>跃迁过程网络（Transition-based networks）：有限状态自动机（finite state automata）和扩展随机系统（extension stochastic systems）如马尔可夫模型，马尔可夫链，以及隐马尔可夫模型</li></ul><p><img src="https://cdn-ed.haymarketbooks.org/images/000001/149/Noam_Chomsky_(c" alt="">_Don_Usner-f_large-863c2ffef0e17c5b6fa999586cc0419d.jpg)</p><p>乔姆斯基（C.Chomsky）最初从产生语言的角度研究语言；他将语言 L 形式地定义为由一个字母表中的字母 ∑ 组成的一些串的集合 <img src="https://www.zhihu.com/equation?tex=%5Cforall+L%2C+%5Cexists+%5CSigma%2C+L%5Csubseteq+%5CSigma%5E%2A" alt="\forall L, \exists \Sigma, L\subseteq \Sigma^*"> ，可以在字母表上按照一定的规则定义一个方法，该文法产生的所有句子组成的集合，就是该文法产生的语言。形式语言是模拟这些语言的一类数学语言，它采用数学符号，按照严格的语法规则构成。</p><p>那么，到底什么是规则呢？</p><blockquote><p>α→β</p></blockquote><p>α 和 β 是由终结符（terminal symbol 如名词、动词等）或非终结符（如句子、动词短语、名词短语等）组成的表达式。</p><h2 id="生成文法"><a href="#生成文法" class="headerlink" title="生成文法"></a>生成文法</h2><p>生成文法（generative grammar）尝试给出一套规则，能正确的预测在一种语言中怎样的词汇组合能成为正确的句子，这些规则通常也能预测句子中的构词法。生成文法可以借助<a href="https://www.wikiwand.com/en/Chomsky_hierarchy" target="_blank" rel="noopener">乔姆斯基等级</a>来描述和比较。</p><p>文法 G 是一个四元组：G =（V, T, P, S）</p><ul><li>V：变量/非终结符号的非空有穷集；</li><li>T：终结符的非空有穷集，V∩T=Ø；</li><li>P：生成式的非空有穷集合；</li><li>S：开始符号，S 是 V 中的元素。</li></ul><p>P 生成式的基本形式是 α→β，这里 α 和 β 都是（V∪T）中的元素，即它们都是由变元和终结符组成的符号串，但要求 α 至少含有一个非终结符；在形式文法定义中 P 至关重要，它决定了语言是如何构造出来的。</p><p>根据 P 中生成式 α→β 的特点，可以将形式文法及其产生的形式语言分类，构成形式语言谱系，对应四种自动机：</p><ul><li><p>0 型文法，又称为短语文法：对生成式 α→β 不作特殊限制，α 和 β 可以是任意的文法符号串，当然 α 不能是空字符串；0 型文法是形式语言谱系中最大的文法类，是图灵机所识别的语言类，即递归可枚举语言。</p></li><li><p>1 型文法，又称为上下文有关文法：要求生成式 α→β 满足 |α|≤|β|，即 β 要至少和 α 一样长；由 1 型文法产生的语言称为 1 型语言或上下文有关语言，是非确定型线性有界自动机所识别的语言类。</p></li><li><p>2 型文法，又称为上下文无关文法（context-free grammars ）：要求生成式 α→β 中的 α 必须是变元；由 2 型文法产生的语言称为 2 型语言或上下文无关语言，是由下推自动机所识别的语言类。</p></li><li><p>3 型文法，又称为正则文法，这种文法分为两种类型：生成式的形式必须是 A→ωB 或 A→ω，其中 A，B 都是变元，ω 是终结符串（可以是空串），这种特殊的正则文法称为右线性文法；第二类正则文法称为左线性文法，它要求生成式必须是 A→Bω，或 A→ω 的形式。由正则文法生成的语言称为正则语言，它是有穷自动机所识别的语言类。</p></li></ul><p>上述定义的 4 种语言类具有依次包含关系，即对于 i＝0，1，2，在不考虑空字符串时，i 型语言都真包含 i＋1 型语言。</p><p>通过这种语法推导出的句子可以用派生树描述。相邻的单词被组合成成分，可以进一步与其他单词或成分组合以创建分层树结构。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Basic_english_syntax_tree.svg/300px-Basic_english_syntax_tree.svg.png" alt=""></p><p>看着很晕吧？…… 我们还是来看一些艺术创作领域的例子吧！</p><p>法国诗人雷蒙·格诺 (Raymond Queneau) 是国际文学团体乌力波（Oulipo, Ouvroir de littérature potentielle, 潜在文学工场）的创始人，其会员中名气较大的有意大利作家卡尔维诺（Italo Calvino），法国作家乔治·佩雷克（Georges Perec），此外还有一些成员是和文学不搭边的数学家。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Ambigramme_Oulipo_%28bold_pencil%29.png/300px-Ambigramme_Oulipo_%28bold_pencil%29.png" alt=""></p><p>Raymond Queneau 的诗集「百万亿首诗」(Cent mille milliards de poèmes) 是一本不寻常的诗集：表面上看这本书是由 10 首十四行诗构成，10 首诗的同一行都押同一个韵，实际上它能排列组合成一百万亿首诗。首行诗句有 10 种选择，第二行诗句也有 10 种选择，十四行诗组合在一起也就得到了 10 的 14 次方首各不相同的诗了。</p><p>诗集的设计也很特别，每一行都被剪成纸条，读完第一首诗的第一行，然后把第二行的纸条折过去读第二首诗的第二行，以此类推……这便是一个语法生成系统了。</p><p><img src="http://www.greenchairpress.com/blog/wp-content/uploads/2014/08/queneau.png" alt=""></p><h2 id="自动机"><a href="#自动机" class="headerlink" title="自动机"></a>自动机</h2><p>最简单的来说，自动机（Automaton）就是具有离散输入输出的数学模型，接受一定的输入，执行一定的动作，产生一定的结果。</p><p>状态是一个标识，能区分自动机在不同时刻的状况。可以使用状态迁移描述整个工作过程。有限状态系统具有任意有限数目的内部状态。自动机的本质是，<strong>根据状态、输入和规则决定下一个状态，即</strong></p><blockquote><p>状态 ＋ 输入（激励）＋ 规则 → 状态迁移</p></blockquote><p>可能的状态、运行的规则都是事先确定的。一旦开始运行，就按照事先确定的规则工作，因此叫自动机。</p><p>根据结构不同，自动机又可分为：</p><ul><li>有限自动机，可以认为是由一个带有读头的有限控制器和一条写有字符的输入带组成；</li><li>下推自动机，可以看作是由一条输入带、一个有限控制器和一个下推栈组成；</li><li>基本图灵机，由一个具有读写头的有限控制器和一条无限带组成</li></ul><p>在这个系列的后续文章中，还会单独来讲讲元胞自动机。</p><h2 id="Transition-network"><a href="#Transition-network" class="headerlink" title="Transition network"></a>Transition network</h2><p>Transition Networks 是一系列有限状态自动机。</p><p>如果用有向图表示，节点表示状态，边缘表示转换过程。每一个自动机表示一个非终结符；每一个转换过程产生一个非终结符或终结符。</p><p><img src="http://img.viz.mobi/eg-transition-network.png" style="zoom:50%"></p><p>Augmented transition networks (ATN) 是一种形式语言操作化定义的图论结构。ATN 建立在使用有限状态机来解析句子的基础上，它理论上可以分析任何句子的结构，无论多么复杂。ATN 的一个优点是延迟决策——当模糊性出现时，许多语法会在对句子的了解还不够时进行猜测。而 ATN 使用递归来推迟决定，直到对句子了解得更多。</p><p>算法作曲的先驱 David Cope 创作的 EMI 是著名的和开创新的系统。EMI 使用了 ATN，由系统分析和分割给定的语料库，然后重新组合元素。<br><img src="/Users/kidult00/Downloads/Courses/Kadenze/generative-art-and-computational-creativity-i/3-rule-based-systems-grammars-and-markov-chains/David%20Cope%20EMI%20ATN.png" alt="David Cope EMI ATN"></p><p>在这里，终结符是各种音乐片段，非终结符元素则捕捉各种层级的片段结构。</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://www.wikiwand.com/en/Rule-based_system" target="_blank" rel="noopener">Rule-based system - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Generative_grammar" target="_blank" rel="noopener">Generative grammar - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Context-free_grammar" target="_blank" rel="noopener">Context-free grammar - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Oulipo" target="_blank" rel="noopener">Oulipo - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Automaton" target="_blank" rel="noopener">Automaton - Wikiwand</a></li><li><a href="https://book.douban.com/subject/24089566/" target="_blank" rel="noopener">乌力波（2） (豆瓣)</a></li><li><a href="https://zhuanlan.zhihu.com/p/28624160" target="_blank" rel="noopener">形式语言与自动机</a></li><li><a href="http://artsites.ucsc.edu/faculty/cope/experiments.htm" target="_blank" rel="noopener">EMI</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/CC-blogtitle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="艺术" scheme="http://uegeek.com/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Generative Art" scheme="http://uegeek.com/tags/Generative-Art/"/>
    
      <category term="Computational Creativity" scheme="http://uegeek.com/tags/Computational-Creativity/"/>
    
      <category term="创意" scheme="http://uegeek.com/tags/%E5%88%9B%E6%84%8F/"/>
    
      <category term="创造力" scheme="http://uegeek.com/tags/%E5%88%9B%E9%80%A0%E5%8A%9B/"/>
    
      <category term="规则系统" scheme="http://uegeek.com/tags/%E8%A7%84%E5%88%99%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>生成式艺术和算法创作03-混沌和分形</title>
    <link href="http://uegeek.com/181021-generative-art-creativity-03.html"/>
    <id>http://uegeek.com/181021-generative-art-creativity-03.html</id>
    <published>2018-10-21T12:11:30.000Z</published>
    <updated>2018-10-21T12:20:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/CC-blogtitle.png" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/181009-generative-art-creativity-01.html" target="_blank" rel="noopener">生成式艺术和算法创作01-概述</a></p><p><a href="https://www.uegeek.com/181014-generative-art-creativity-02.html" target="_blank" rel="noopener">生成式艺术和算法创作02-随机和噪声</a></p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/5b/Lorenz_attractor_yb.svg/800px-Lorenz_attractor_yb.svg.png?1538707261695" style="zoom:50%"></p><h2 id="动态系统"><a href="#动态系统" class="headerlink" title="动态系统"></a>动态系统</h2><p>动态系统（dynamical system）是数学上的一个概念，是一种固定的规则，它描述一个给定空间中所有点随着时间变化的情况，例如运动的钟摆、弹跳的球、管道中水的流动等。</p><p>动态系统的行为可以分为四类：</p><ul><li>Fixed point behavior (equilibrium)：固定（平衡）行为</li><li>Limit cycle or periodic behavior：循环或周期行为</li><li>Quasi-periodic behavior：准周期行为</li><li>Chaotic behavior：混沌行为</li></ul><p><strong>虽然动态系统是可以确定的，但是一旦输入发生微小改变，结果都会变得难以预测。混沌系统短期、局部可预测，长期、全局不可预测的特点，让它成为算法创作中常用的手段。</strong></p><p><img src="http://sprott.physics.wisc.edu/pubs/354fig01.gif" alt=""></p><p>via Generalization of the simplest autonomous chaotic system</p><p>单峰映象（logistic map）是一个二次的多项式映射，是由简单非线性方程式产生<a href="https://www.wikiwand.com/zh/%E6%B7%B7%E6%B2%8C%E7%90%86%E8%AE%BA" target="_blank" rel="noopener">混沌</a>现象的经典范例。</p><p>这种映射因生物学家 Robert May 在 1976 年发表的一篇论文而著名。公式为 $$x_{n+1}=rx_n(1-x_n)$$。对于任一个 r 值，最多只有一个稳定的极限环，若稳定极限环存在，几乎所有的点最后都会趋近极限。这些情况可用分枝图表示，分枝图中的横轴是 r 的数值，纵轴中显示大部份初值下稳态可能的 x 值，若数值在 2 个值中震荡，分枝图上对应的数值就会有 2 个点。若某 r 值已无法明确有几个对应的点，系统可能已经处于混沌状态。</p><p>分枝图有自相似的特性。若将分枝图中 r=3.82 的部份展开，只取三个分支中的一个，图形会好像是原分枝图缩放及扭曲后的结果。所有非混沌的参数 r 都有此一特性。可以看出混沌和分形的关系。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/7/7d/LogisticMap_BifurcationDiagram.png" alt=""></p><p>吸引子（attractor）是微积分和系统科学论中的一个概念。一个系统有朝某个稳态发展的趋势，这个稳态就叫做吸引子。</p><p>吸引子分为平庸吸引子和奇异吸引子。例如一个钟摆系统有一个平庸吸引子，这个吸引子使钟摆系统向停止晃动的稳态发展。平庸吸引子有不动点（平衡）、极限环（周期运动）和整数维环面（概周期运动）三种模式。不属于平庸的吸引子的都称为奇异吸引子，它表现了混沌系统中非周期性，无序的系统状态，例如天气系统。目前吸引子在学术上还没有完善的定义，奇异吸引子对于<a href="https://www.wikiwand.com/zh/%E6%B7%B7%E6%B2%8C%E7%90%86%E8%AE%BA" target="_blank" rel="noopener">混沌系统</a>的研究意义重大。</p><p>混沌理论的思想也从上世纪后半叶开始，逐渐渗入到音乐和作曲领域。</p><p>1960 年 George Brecht 在滴水事件（drip event）中，使不同来源的水，滴进所有空的容器。这个作品可以被视为音乐、剧场、或者是动态雕塑。</p><p><img src="https://www.moma.org/media/W1siZiIsIjMwNDk2NSJdLFsicCIsImNvbnZlcnQiLCItcmVzaXplIDIwMDB4MjAwMFx1MDAzZSJdXQ.jpg?sha=74b38f4f98552501" alt=""></p><p>Brecht 的极简主义艺术活动是神秘费解、令人困惑的，这些作品及其配乐为观众设计成仅在想象的范围内可被解读与激活。滴水音乐（drip music）由此形成，指可由单个或多个表演者演出单一滴水水源与一个空的容器，通过设置使水滴入容器中。Drip music 很快就成为激浪派（fluxus）的标志，flux 一词本身不仅指持续的运动与改变，也指流体与流动，或更精确的是一个流体的流动速度。</p><p>80 年代，混沌理论开始被应用在作曲中。它适用于音高、持续时间、动态范围和编排。它们很容易产生重复，以及周期性/准周期性模型变化，或者在混沌模式下产生更多不可预测的行为，而重复、变化、convergence 和 divergence 是音乐作曲里的关键要素。</p><h2 id="分形"><a href="#分形" class="headerlink" title="分形"></a>分形</h2><p>分形是一个可以分成数个部分的几何形状，且每一部分都（至少近似地）是整体缩小后的形狀，即具有<a href="https://www.wikiwand.com/zh/%E8%87%AA%E7%9B%B8%E4%BC%BC" target="_blank" rel="noopener">自相似</a>的性质。分形也被称为扩展对称或展开对称。如果在每次放大后，形状的重复是完全相同的，被称为自相似。作为一个数学函数，分形通常是处处不可微的。无穷分形曲线可以理解为一条一维的曲线在空间中绕行。</p><blockquote><p>Fractals are mathematical dynamic systems represented by iterative equations that develop curves and geometrical shapes that have property of self-similarity. </p></blockquote><p>Sierpinski 三角是典型的自相似分形图形。1915 年由波兰数学家 Wacław Franciszek Sierpiński 提出。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/a/a8/Sierpinski_triangle_%28blue%29.jpg" alt=""></p><p>算法：</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/Sierpinski_triangle_evolution.svg/1024px-Sierpinski_triangle_evolution.svg.png" alt=""></p><ol><li>取一个实心的三角形（多数使用等边三角形）</li><li>沿三边中点的连线，将它分成四个小三角形</li><li>去掉中间的那一个小三角形</li><li>对其余三个小三角形重复第 1 步</li></ol><p>Sierpinski 三角可由分型树产生：</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/a/a9/Fractal_tree.gif" alt=""></p><p>分形算法已经被广泛用于生成式艺术创作中。</p><p>Bogdan Soban 是斯洛文尼亚的信息学专家和软件开发者，退休后作为自由艺术家从事创作。他从 1999 年开始接触生成式艺术，开始编写基于算法的生成式艺术软件用于创作。</p><p><img src="http://www.soban-art.com/images/naslovnica.jpg" alt=""></p><p>Paul DeCelle 用 Frederik Slijkerman 开发的 <a href="http://www.ultrafractal.com/" target="_blank" rel="noopener">Ultra Fractal</a> 创作了一些列作品：</p><p><img src="http://www.submit.manscostyle.com/submit/130_Image9.jpg" alt=""></p><p><img src="https://www.fractalus.com/paul/20071022-kesius.jpg" alt=""></p><p>Etienne Saint Amant 是来自加拿大魁北克省舍布鲁克的艺术家。他专注于用数学语言设计和描述的大幅艺术品，致力于概念研究和当代艺术创作。</p><p><img src="https://t00.deviantart.net/AIQ7rP3wX0CLZ0sC29rhgA1QBZE=/fit-in/700x350/filters:fixed_height(100,100" alt="">:origin()/pre00/ae50/th/pre/i/2005/136/1/4/rakis_by_etiennesaintamant.jpg)</p><p><img src="https://chaoscopia.com/artworks/m20180926-13.jpg" alt=""></p><p>一些分形艺术的软件：</p><ul><li><a href="https://www.ultrafractal.com/" target="_blank" rel="noopener">Ultra Fractal: Advanced Fractal Software for Windows and macOS</a></li><li><a href="http://fract.al/" target="_blank" rel="noopener">Frax - Immerse, Create, Inspire</a> </li><li><a href="https://mandelbulber.com/" target="_blank" rel="noopener">Laravel</a></li><li><a href="http://www.fractal-explorer.com/" target="_blank" rel="noopener">Fractal Explorer</a></li><li><a href="http://www.apophysis.org/" target="_blank" rel="noopener">Apophysis.org</a></li></ul><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://www.wikiwand.com/en/Dynamical_system" target="_blank" rel="noopener">Dynamical system - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Attractor" target="_blank" rel="noopener">Attractor - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Logistic_map" target="_blank" rel="noopener">Logistic map - Wikiwand</a></li><li><a href="https://www.wikiwand.com/zh/%E5%88%86%E5%BD%A2" target="_blank" rel="noopener">分形 - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Sierpinski_triangle" target="_blank" rel="noopener">Sierpinski triangle - Wikiwand</a></li><li><a href="http://sprott.physics.wisc.edu/pubs/paper354.htm" target="_blank" rel="noopener">Generalization of the Simplest Autonomous Chaotic System</a></li><li><a href="https://www.moma.org/collection/works/127310?artist_id=756&amp;locale=zh&amp;page=1&amp;sov_referrer=artist" target="_blank" rel="noopener">Poul Hansen, George Brecht, Dick Higgins. George Brecht’s Drip Music, performed by Dick Higgins during Fluxus/Musik og Anti-Musik/det Instrumentale Teater, Nikolai Kirke, Copenhagen, November 23, 1962. 1962 | MoMA</a></li><li><a href="http://www.soban-art.com/index-ang.asp" target="_blank" rel="noopener">Generative Art - generated, artificial, random, software</a></li><li><a href="https://www.fractalus.com/paul/" target="_blank" rel="noopener">Fractal Art by Paul DeCelle</a></li><li><a href="https://chaoscopia.com/nouveautes_en.html" target="_blank" rel="noopener">chaoscopia - news</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/CC-blogtitle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="艺术" scheme="http://uegeek.com/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Generative Art" scheme="http://uegeek.com/tags/Generative-Art/"/>
    
      <category term="Computational Creativity" scheme="http://uegeek.com/tags/Computational-Creativity/"/>
    
      <category term="创意" scheme="http://uegeek.com/tags/%E5%88%9B%E6%84%8F/"/>
    
      <category term="创造力" scheme="http://uegeek.com/tags/%E5%88%9B%E9%80%A0%E5%8A%9B/"/>
    
      <category term="混沌" scheme="http://uegeek.com/tags/%E6%B7%B7%E6%B2%8C/"/>
    
      <category term="分形" scheme="http://uegeek.com/tags/%E5%88%86%E5%BD%A2/"/>
    
      <category term="Chaotic" scheme="http://uegeek.com/tags/Chaotic/"/>
    
      <category term="Fractal" scheme="http://uegeek.com/tags/Fractal/"/>
    
  </entry>
  
  <entry>
    <title>算法创作实战02 - 用 MaxMSP 生成随机颜色</title>
    <link href="http://uegeek.com/181021-computational-creativity-in-maxmsp-02.html"/>
    <id>http://uegeek.com/181021-computational-creativity-in-maxmsp-02.html</id>
    <published>2018-10-21T11:13:58.000Z</published>
    <updated>2018-10-21T11:15:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/CC-title1.jpg" alt=""></p><a id="more"></a><p>在「生成式艺术和算法创作」系列第二篇中，00 <a href="https://www.uegeek.com/181014-generative-art-creativity-02.html" target="_blank" rel="noopener">介绍了随机和噪声在算法创作中的应用</a>。上一篇我们<a href="https://www.uegeek.com/181017-computational-creativity-in-maxmsp-01.html" target="_blank" rel="noopener">用 Max/MSP 做了一个随机生成星座描述的小应用</a>，切身实践和感受了巴纳姆效应。</p><p>今天我们一起来用 Max/MSP 实现简单的随机颜色生成器，加深对 Max/MSP 中 <code>random</code> 对象的了解。</p><blockquote><p>名称：Random Color</p><p>主要使用的对象：random, send, receive, uzi, pack, jit.matrix, jit.pwindow</p><p>难度系数：★☆☆☆☆</p></blockquote><p>这个程序叫 Random Color，可以指定行（y）和列（x）的数量，然后用随机颜色填充，可以手动生成新的图像，也可以自动连续生成。生成的图像可以导出成图片。最后的成果是这样：</p><p><img src="http://img.viz.mobi/RandomColor.png" alt=""></p><p>首先来拆解需要实现的功能：</p><ul><li>手动生成或者自动连续生成</li><li>指定图像的尺寸(dim)</li><li>生成随机颜色</li><li>自动填充每一个单元格</li><li>显示图像</li><li>导出图片</li></ul><p>开始动手前，请复习 Max/MSP 文档中 random, send, receive, uzi, pack, jit.matrix, jit.pwindow 等对象的说明。</p><p>准备就绪后，我们先来看前两步如何实现：</p><p><img src="http://img.viz.mobi/RandomColorPatch-1.png" alt=""></p><p><strong>1.手动生成或者自动连续生成</strong></p><p>用 <code>button</code> 触发生成事件，前面加上 <code>metro</code> 对象并指定时间间隔就可以自动连续触发生成事件。</p><p><strong>2.指定图像的尺寸(dim)</strong></p><p>设置两个整数数字框，可以输入水平和垂直维度的数量，来指定图像的尺寸。</p><p>生成事件的 bang、x 和 y 的数值，都通过 <code>send</code>(简写为 s) 对象传递到后面的步骤。</p><p>接下来是关键的部分，用随机颜色自动填充每一个单元格：</p><p><img src="http://img.viz.mobi/RandomColorPatch-2.png" alt=""></p><p><strong>3.生成随机颜色</strong></p><p>用 3 个<code>random</code> 对象分别生成 R G B 三个颜色值，然后用 <code>pack</code> 对象打包起来。因为最后需要用 <code>jit.pwindow</code> 显示图像，它需要接收 ARGB 颜色，所以我们还需要用 <code>setcell</code> 消息指定需要填充的单元格，并且传递 255 作为 ARGB 的 Alpha 值。于是，pack 对象的参数需要写成：<code>pack setcell 0 0 val 255 0 0 0</code>。其中，前面两个 0  会传入之前通过数字框输入的 x 和 y 的垂直和水平 dim 值，后面 3 个 0 会传入由 <code>random</code> 对象生成的 GRB 值。</p><p><strong>4.自动填充每一个单元格</strong></p><p>编程中经常使用 for 循环来实现矩阵的填充，在 MaxMSP 里常用 <code>uzi</code> 对象来实现简单的循环效果。（当然，如果是 modern 的矩阵处理和运算，会用 jit 提供的丰富的矩阵功能；这里我们怀旧一下用 uzi）<code>uzi</code> 的作用是连续发出 bang，左入口接收触发命令，右入口接收连续 bang 的数量；左出口输出 bang，中出口输出完成所有 bang 后的消息，右出口输出当前是第几个 bang。</p><p>首先接收 y 维度的值，用 1 个 <code>uzi</code> 作为外层循环。因为 <code>uzi</code> 对象从 1 开始计数，所以需要减去 1 再传给 <code>setcell</code>，因为矩阵单元格从 0  开始计数。然后接收 x 维度的值，作为内层循环（同样要减去 1）。</p><p><code>uzi</code> 和 <code>random</code> 生成的矩阵单元格位置和颜色都传给 <code>pack</code> 对象打包。</p><p>最后是显示和导出图像：</p><p><img src="http://img.viz.mobi/RandomColorPatch-3.png" alt=""></p><p><strong>5.显示图像</strong></p><p>使用 <code>jit.matrix</code> 存储并显示矩阵，更多 <code>jit.matrix</code> 的用法请参考 <a href="https://www.uegeek.com/tags/Max-MSP/" target="_blank" rel="noopener">00  翻译的 Max/MSP/Jitter 官方教程系列</a>。</p><p>指定矩阵为 4 个平面（plane），用 <code>receive</code> 对象（简写为 r）接受 x 和 y 维度的值。为了实时响应维度修改的操作，这里用 <code>pak</code> 对象而不是 <code>pack</code> 对象。<code>pak</code> 对象响应任一一个输入的变化，而 <code>pack</code> 对象需要由 bang 触发何时响应。</p><p>另外，使用一直开启的 <code>qmetro</code> 对象（@active 属性为 1）来监控矩阵的变化，以便随时更新，将矩阵值通过 <code>send</code> 对象发送给 <code>jit.pwindow</code> 中显示。</p><p><strong>6.导出图片</strong></p><p>用 <code>exportimage</code> 消息可以触发 <code>jit.matrix</code> 导出图像保存。因为矩阵的初始尺寸是 10x10，所以最后用了一个 <code>jit.matrix 4 char 400 400</code> 将矩阵扩大为 400x400 的尺寸，这样导出的图像大小就是 400x400 像素。</p><p><img src="http://img.viz.mobi/randomColorExport.png" alt=""></p><p>完整的 patch 如下：</p><p><img src="http://img.viz.mobi/RandomColorPatch.png" alt=""></p><hr><ul><li><a href="https://www.uegeek.com/180821-jitter-01.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 01 - 什么是矩阵？</a></li><li><a href="https://www.uegeek.com/180822-jitter-02.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 02 - Jitter 对象的属性</a></li><li><a href="https://www.uegeek.com/180825-jitter-03.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频</a></li><li><a href="https://www.uegeek.com/180826-jitter-04.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 04 - 创建矩阵</a></li><li><a href="https://www.uegeek.com/180828-jitter-05.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 05 - 矩阵的数学运算</a></li><li><a href="https://www.uegeek.com/180829-jitter-06.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 06 - 控制视频播放</a></li><li><a href="https://www.uegeek.com/180830-jitter-07.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 07 - ARGB 颜色</a></li><li><a href="https://www.uegeek.com/180831-jitter-08.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 08 - 调整颜色</a></li><li><a href="https://www.uegeek.com/180901-jitter-09.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 09 - 调整图像颜色</a></li><li><a href="https://www.uegeek.com/180902-jitter-10.html" target="_blank" rel="noopener">Max/MSP/Jitter 教程 10 - 简单混合</a></li></ul><hr><blockquote><p>友情提示：独自折腾 Max 易患上癔症……不妨入群互助 </p></blockquote><p>👇👇👇</p><p><img src="http://img.viz.mobi/maxgroup0825.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/CC-title1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="艺术" scheme="http://uegeek.com/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="颜色" scheme="http://uegeek.com/tags/%E9%A2%9C%E8%89%B2/"/>
    
      <category term="Generative Art" scheme="http://uegeek.com/tags/Generative-Art/"/>
    
      <category term="Computational Creativity" scheme="http://uegeek.com/tags/Computational-Creativity/"/>
    
      <category term="创意" scheme="http://uegeek.com/tags/%E5%88%9B%E6%84%8F/"/>
    
      <category term="创造力" scheme="http://uegeek.com/tags/%E5%88%9B%E9%80%A0%E5%8A%9B/"/>
    
      <category term="随机" scheme="http://uegeek.com/tags/%E9%9A%8F%E6%9C%BA/"/>
    
      <category term="MaxMSP" scheme="http://uegeek.com/tags/MaxMSP/"/>
    
  </entry>
  
</feed>
