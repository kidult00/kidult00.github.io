<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>00&#39;s Adventure</title>
  
  <subtitle>Why join the navy if you can be a pirate</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://uegeek.com/"/>
  <updated>2019-04-23T13:43:47.210Z</updated>
  <id>http://uegeek.com/</id>
  
  <author>
    <name>kidult00</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数字制造讲义08-Arduino声音应用2</title>
    <link href="http://uegeek.com/190423-df08-arduino-sound-2.html"/>
    <id>http://uegeek.com/190423-df08-arduino-sound-2.html</id>
    <published>2019-04-23T13:42:52.000Z</published>
    <updated>2019-04-23T13:43:47.210Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/week7title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190305-df01-digital-fabrication.html" target="_blank" rel="noopener">数字制造讲义01-成为数字世界的建造者</a></p><p><a href="https://www.uegeek.com/190313-df02-arduino-intro.html" target="_blank" rel="noopener">数字制造讲义02-Arduino入门</a></p><p><a href="https://www.uegeek.com/190319-df03-electronics-basic.html" target="_blank" rel="noopener">数字制造讲义03-电路基础</a></p><p><a href="https://www.uegeek.com/190326-df04-input-and-output.html" target="_blank" rel="noopener">数字制造讲义04-负责输入和输出的智能元件</a></p><p><a href="https://www.uegeek.com/190402-df05-communication.html" target="_blank" rel="noopener">数字制造讲义05-软硬件数据通信</a></p><p><a href="https://www.uegeek.com/190409-df06-midi-osc-practice.html" target="_blank" rel="noopener">数字制造讲义06-MIDI 和 OSC 数据传输练习</a></p><p><a href="https://www.uegeek.com/190417-df07-arduino-sound.html" target="_blank" rel="noopener">数字制造讲义07-Arduino声音应用</a></p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>还记得<a href="https://www.uegeek.com/190417-df07-arduino-sound.html" target="_blank" rel="noopener">上一周</a> 完成的三个练习吗：</p><ul><li>让蜂鸣器发声</li><li>蜂鸣器发出交替的报警声</li><li>用按键触发声音</li></ul><p><img src="http://img.viz.mobi/w7-buttonBuzzer.jpg" alt=""></p><p>这一周我们继续来完善，做出一个简单的旋律控制器。</p><h2 id="挑战4：用电位计控制音高"><a href="#挑战4：用电位计控制音高" class="headerlink" title="挑战4：用电位计控制音高"></a>挑战4：用电位计控制音高</h2><p>既然蜂鸣器可以发出不同的音高，那我们可不可以用旋钮控制音高，做一个 mini 的极简控制器呢？</p><p>在之前<a href="https://www.uegeek.com/190326-df04-input-and-output.html" target="_blank" rel="noopener">第四周的课程中</a>，我们已经建立起比较完整的输入输出元件的概念。在项目练习时就可以慢慢养成习惯：在动手之前，先构想出输入部分是什么、输出部分是什么、从输入到输出要完成什么样的转换。</p><p><img src="https://www.popcorn.org/portals/0/Images/what%20makes%20popcorn%20pop.jpg?ver=2015-09-18-093058-067" alt=""></p><p>这里，输入部分是电位计（的位置），输出部分是蜂鸣器(的音高)，中间的连接就是电位计的数值转换为蜂鸣器的音高。</p><p>接线部分，使用的元件包括：蜂鸣器，电位计。</p><p><img src="http://img.viz.mobi/w7-potentiometerBuzzer.jpg" alt=""></p><p>当我们还是编程新手，每次要开始自己写代码时，容易两眼一抹黑，不知道该从哪里下手。</p><p>其实，每次写代码时，并不是直接打开 Arduino IDE 就开始噼里啪啦敲代码了。在这之前，我们需要现在脑子里构思这个代码<strong>要做什么，怎么做到</strong>。</p><p>大家会想一下，怎么把大象放进冰箱里呢？</p><p><img src="http://cdc.tencent.com/wp-content/uploads/2011/03/banner12.jpg" alt=""></p><p>不要笑，这就是所谓的「算法」：做一件事情的步骤。</p><p>所以在还没有清晰思路的时候，我们可以先把程序要完成的大致步骤写下来：</p><ul><li>需要用一个模拟端口读取电位计的数值</li><li>需要用一个数字（输出）端口给蜂鸣器发出指令</li><li>找一个办法让蜂鸣器发出不同音高</li><li>将电位计数值控制音高</li></ul><p>接着，我们再想办法把每一个步骤都转化成对应的变量、语法、库。所以学会搜索和查看官方文档就很重要的了。</p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// connect a potentiometer to pin A0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> buzzerPin=<span class="number">8</span>; </span><br><span class="line"><span class="keyword">int</span> potPin=A0;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">  pinMode(buzzerPin, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> freq = analogread(A0);</span><br><span class="line">  freq = <span class="built_in">map</span> (freq,<span class="number">0</span>,<span class="number">1023</span>,<span class="number">20</span>,<span class="number">20000</span>); <span class="comment">//map the value read from the potentiometer into the audible range</span></span><br><span class="line">  tone (buzzerPin,freq); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，最核心的一行，是把从电位计读取的模拟信号数值（范围是 0~1023），映射到人耳可感知的声音的频率范围(20~20000)：<code>freq = map (freq,0,1023,20,20000);</code>  其中 map() 函数的作用就是数值映射。 </p><h2 id="挑战5：播放连续音高"><a href="#挑战5：播放连续音高" class="headerlink" title="挑战5：播放连续音高"></a>挑战5：播放连续音高</h2><p>这个挑战一定会更吸引你：用蜂鸣器播放一段旋律。</p><p>这个挑战的难度主要在代码上，从这里开始，我们会开始接触并深入理解函数、循环、头文件、库等概念。</p><p>比较复杂的代码不可能一下子就能写出来。所以我们要经历一个重要的练习：看懂别人的代码。</p><p>我们在官方网站上找到教程 <a href="https://www.arduino.cc/en/Tutorial/ToneMelody?from=Tutorial.Tone" target="_blank" rel="noopener">Arduino - ToneMelody</a>。仔细研读它给出的代码，尤其是代码的注释：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Melody</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Plays a melody</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  circuit:</span></span><br><span class="line"><span class="comment">  - 8 ohm speaker on digital pin 8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  created 21 Jan 2010</span></span><br><span class="line"><span class="comment">  modified 30 Aug 2011</span></span><br><span class="line"><span class="comment">  by Tom Igoe</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  This example code is in the public domain.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  http://www.arduino.cc/en/Tutorial/Tone</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pitches.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// notes in the melody:</span></span><br><span class="line"><span class="keyword">int</span> melody[] = &#123;</span><br><span class="line">  NOTE_C4, NOTE_G3, NOTE_G3, NOTE_A3, NOTE_G3, <span class="number">0</span>, NOTE_B3, NOTE_C4</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// note durations: 4 = quarter note, 8 = eighth note, etc.:</span></span><br><span class="line"><span class="keyword">int</span> noteDurations[] = &#123;</span><br><span class="line">  <span class="number">4</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// iterate over the notes of the melody:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> thisNote = <span class="number">0</span>; thisNote &lt; <span class="number">8</span>; thisNote++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// to calculate the note duration, take one second divided by the note type.</span></span><br><span class="line">    <span class="comment">//e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.</span></span><br><span class="line">    <span class="keyword">int</span> noteDuration = <span class="number">1000</span> / noteDurations[thisNote];</span><br><span class="line">    tone(<span class="number">8</span>, melody[thisNote], noteDuration);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// to distinguish the notes, set a minimum time between them.</span></span><br><span class="line">    <span class="comment">// the note's duration + 30% seems to work well:</span></span><br><span class="line">    <span class="keyword">int</span> pauseBetweenNotes = noteDuration * <span class="number">1.30</span>;</span><br><span class="line">    delay(pauseBetweenNotes);</span><br><span class="line">    <span class="comment">// stop the tone playing:</span></span><br><span class="line">    noTone(<span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// no need to repeat the melody.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把注释部分全部替换成自己的理解，这个代码看起来就不再那么复杂和难懂了。但是这个过程一定要自己完成。</p><p>当在代码里看到不熟悉的函数，例如 <code>delay()</code> , <code>noTone()</code> ，就可以到官方文档中搜索并阅读，一般文档都会给出例子，这些例子就是最好的学习材料。</p><p>最后，留给大家的作业，是用两个压电片触发两段不同的旋律，大家动手试试吧！</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=p08632k4vzj" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/p08632k4vzj.html" target="_blank" rel="noopener">Arduino Melody_腾讯视频</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/week7title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Sound" scheme="http://uegeek.com/tags/Sound/"/>
    
      <category term="声音" scheme="http://uegeek.com/tags/%E5%A3%B0%E9%9F%B3/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="制造" scheme="http://uegeek.com/tags/%E5%88%B6%E9%80%A0/"/>
    
      <category term="Maker" scheme="http://uegeek.com/tags/Maker/"/>
    
      <category term="Digital Fabrication" scheme="http://uegeek.com/tags/Digital-Fabrication/"/>
    
      <category term="Fab" scheme="http://uegeek.com/tags/Fab/"/>
    
      <category term="Arduino" scheme="http://uegeek.com/tags/Arduino/"/>
    
  </entry>
  
  <entry>
    <title>三维制图讲义07 - 基础几何体练习2</title>
    <link href="http://uegeek.com/190418-3d07-basic-geometry.html"/>
    <id>http://uegeek.com/190418-3d07-basic-geometry.html</id>
    <published>2019-04-18T14:26:32.000Z</published>
    <updated>2019-04-18T14:27:32.833Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/3d_course_title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190306-3d01-welcome-to-the-3d-world.html" target="_blank" rel="noopener">三维制图讲义01 - 欢迎来到三维世界</a></p><p><a href="https://www.uegeek.com/190314-3d02-workflow.html" target="_blank" rel="noopener">三维制图讲义02 - 三维制作流程</a></p><p><a href="https://www.uegeek.com/190320-3d03-blender-intro.html" target="_blank" rel="noopener">三维制图讲义03 - 三维软件和Blender介绍</a></p><p><a href="https://www.uegeek.com/190327-3d04-basic-geometry.html" target="_blank" rel="noopener">三维制图讲义04 - 基础几何体</a></p><p><a href="https://www.uegeek.com/190403-3d05-basic-geometry-edit.html" target="_blank" rel="noopener">三维制图讲义05 - 几何体编辑：拉伸和环切</a></p><p><a href="https://www.uegeek.com/190411-3d06-geometry-practice.html" target="_blank" rel="noopener">三维制图讲义06 - 基础几何体练习</a></p><p><a href="https://www.uegeek.com/190411-3d06-geometry-practice.html" target="_blank" rel="noopener">上一节课</a>我们通过实际例子讲解了内插面和 Subdivision Surfaces 的应用。</p><p><img src="http://img.viz.mobi/2019-04-11%2010.31.46.gif" alt=""></p><p>这周我们继续通过实际的例子来练习已经学过的知识，并且学习新的技巧。</p><h2 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h2><p>这个练习我们做一个底部是球状的瓶子。</p><p><img src="http://img.viz.mobi/w6-shape4.jpg" alt=""></p><p>首先是观察造型。这个瓶子跟上周练习的牛奶瓶有近似的部分，也有不同的地方。它的底部是一个球体，颈部弯曲比较平滑，瓶口也是跟牛奶瓶类似的形状。</p><p>所以思路是用一个球体，拉伸部分的曲面作为颈部，然后将顶部拉伸变形为瓶口的形状。</p><h3 id="选中部分曲面拉伸并用环切调整"><a href="#选中部分曲面拉伸并用环切调整" class="headerlink" title="选中部分曲面拉伸并用环切调整"></a>选中部分曲面拉伸并用环切调整</h3><p>选中部分曲面，可以用圈选操作来实现。也就是在面编辑模式下，按 c (circle的意思)，然后按下鼠标开始移动，在圆圈之内的面就会被选中。</p><p><img src="http://img.viz.mobi/bledner-circle-select.gif" alt=""></p><p>选中要拉伸的部分(按shift选择可以取消选中)，按 e 拉伸。</p><p>然后需要将顶部的曲面整平：选中状态下按 s，然后按 z，按数字键 0。意思是沿 z 轴缩放，全部调整为 0(在同一个水平面)。</p><p><img src="http://img.viz.mobi/2019-04-10%2000.12.46.gif" alt=""></p><p>接下来的部分，可以复习<a href="https://www.uegeek.com/190411-3d06-geometry-practice.html" target="_blank" rel="noopener">上一周制作瓶子的技巧</a>，也就是用环切、内插面、subdivision surfaces 等功能调整瓶子的形状了。</p><p>你也来试试吧！</p><h2 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h2><p><img src="http://img.viz.mobi/w6-shape5.jpg" alt=""></p><p>这个练习我们会学到一个常用的修改器：镜射 / Mirror。</p><p>从字面上理解，就是生成对称的部分。</p><p><img src="https://blenderartists.org/uploads/default/original/4X/5/e/e/5eeff56a1927f6ad94d6fff32fe7cb9229092444.gif" alt=""></p><p>因为大部分的物体都会有对称的部分，所以这个功能很实用，可以帮助我们节省（一半的）时间。</p><p>需要留意的是，Mirror modifier 可以对 x/y/z 轴分别做镜像，也可以选择几何体为镜像中心。</p><p>观察我们要做的几何体，它应该是以 z 轴为基准的上下镜像，所以我们在镜射的选项中要勾选 z 轴。</p><p>我们以中间为参考线，拉伸立方体形成中部的长方体，然后做两道环切，选中中间两个面拉伸两次，然后选择两个需要桥接的面，接合。</p><p><img src="http://img.viz.mobi/2019-04-17%2021.31.04.gif" alt=""></p><p>这里要注意勾选上 Mirror modifier 的 Clipping 选项，它会帮助我们把镜像接缝处合并而不会留下重合的部分。</p><p>接下来的部分就简单了，对顶面拉伸然后缩放出一个较大的平面，然后向上拉伸，就得到了最终的形状。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/3d_course_title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="3D" scheme="http://uegeek.com/tags/3D/"/>
    
      <category term="Modeling" scheme="http://uegeek.com/tags/Modeling/"/>
    
      <category term="Blender" scheme="http://uegeek.com/tags/Blender/"/>
    
      <category term="Geometry" scheme="http://uegeek.com/tags/Geometry/"/>
    
      <category term="Mirror" scheme="http://uegeek.com/tags/Mirror/"/>
    
  </entry>
  
  <entry>
    <title>数字制造讲义07-Arduino声音应用</title>
    <link href="http://uegeek.com/190417-df07-arduino-sound.html"/>
    <id>http://uegeek.com/190417-df07-arduino-sound.html</id>
    <published>2019-04-17T12:08:53.000Z</published>
    <updated>2019-04-17T12:48:00.983Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/week7title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190305-df01-digital-fabrication.html" target="_blank" rel="noopener">数字制造讲义01-成为数字世界的建造者</a></p><p><a href="https://www.uegeek.com/190313-df02-arduino-intro.html" target="_blank" rel="noopener">数字制造讲义02-Arduino入门</a></p><p><a href="https://www.uegeek.com/190319-df03-electronics-basic.html" target="_blank" rel="noopener">数字制造讲义03-电路基础</a></p><p><a href="https://www.uegeek.com/190326-df04-input-and-output.html" target="_blank" rel="noopener">数字制造讲义04-负责输入和输出的智能元件</a></p><p><a href="https://www.uegeek.com/190402-df05-communication.html" target="_blank" rel="noopener">数字制造讲义05-软硬件数据通信</a></p><p><a href="https://www.uegeek.com/190409-df06-midi-osc-practice.html" target="_blank" rel="noopener">数字制造讲义06-MIDI 和 OSC 数据传输练习</a></p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>上一节课，我们练习如何在不同软硬件设备（手机、Max、Arduino、Ableton Live）中传输 MIDI 和 OSC 数据。这些都是用软件发出声音。</p><p><img src="http://img.viz.mobi/Serial2Max.png" alt=""></p><p>这周我们继续通过实际的例子，学习如何用硬件发出声音。</p><h2 id="挑战1：让蜂鸣器发声"><a href="#挑战1：让蜂鸣器发声" class="headerlink" title="挑战1：让蜂鸣器发声"></a>挑战1：让蜂鸣器发声</h2><p>蜂鸣器是啥？</p><p>简单来说，它是一种一体化结构的电子讯响器，广泛应用于计算机、打印机、复印机、报警器、电子玩具、汽车电子设备、电话机、定时器等电子产品中，作发声器件。</p><p>蜂鸣器又可以分为有源蜂鸣器和无源蜂鸣器两种。</p><p><img src="http://img.viz.mobi/buzzer1.jpg" alt=""></p><p>它们的区别是什么？要如何区分呢？</p><ul><li>有源蜂鸣器内部集成有<strong>震荡源</strong>，只要提供直流电源就可以发声。无源蜂鸣器没有集成震荡源，需要接在音频输出电路中才可以发声。</li><li>无源蜂鸣器通的电路板通常是裸露的（如上图右），有源蜂鸣器的电路通常被黑胶覆盖</li><li>更精确的判断方法，用万用表电阻档 Rxl 档测试：用黑表笔接蜂鸣器 “+”引脚，红表笔在另一引脚上来回碰触，如果触发出咔、咔声的且电阻只有8Ω（或16Ω）的是无源蜂鸣器;如果能发出持续声音的，且电阻在几百欧以上的，是有源蜂鸣器。</li></ul><p>下面我们用到的是无源蜂鸣器。</p><p>在电路中连接蜂鸣器不需要增加额外的电阻，所以接线十分简单。在 Arduino 程序中，使用 <code>tone</code> 函数来指定蜂鸣器的频率和持续时间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> buzzerPin = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(buzzerPin, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  tone(buzzerPin, <span class="number">440</span>, <span class="number">500</span>);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="挑战2：蜂鸣器发出交替的报警声"><a href="#挑战2：蜂鸣器发出交替的报警声" class="headerlink" title="挑战2：蜂鸣器发出交替的报警声"></a>挑战2：蜂鸣器发出交替的报警声</h2><p>完成挑战 1，我们已经基本理解蜂鸣器和 <code>tone()</code> 函数如何工作了。</p><p>在修改代码之前，建议在官方文档中查看 <code>tone()</code> 和 <code>noTone()</code> 的详细说明。</p><p>Syntax</p><blockquote><p>tone(pin, frequency)<br>tone(pin, frequency, duration)</p></blockquote><p>Parameters</p><blockquote><p>pin: the pin on which to generate the tone<br>frequency: the frequency of the tone in hertz - unsigned int<br>duration: the duration of the tone in milliseconds (optional) - unsigned long</p></blockquote><p>这个挑战只需要在代码上做一些调整，就可以实现双音高交替的报警器效果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> buzzerPin = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(buzzerPin, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  tone(buzzerPin, <span class="number">440</span>, <span class="number">500</span>);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  tone(buzzerPin, <span class="number">880</span>, <span class="number">500</span>);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tone() 的第二个参数是音高的频率，我们把第一个音高设为 440，第二个音高设为 880，它们各持续 500 毫秒，中间有 1 秒的间隔。这样就形成了双音高的警报声。</p><h2 id="挑战3：用按键触发声音"><a href="#挑战3：用按键触发声音" class="headerlink" title="挑战3：用按键触发声音"></a>挑战3：用按键触发声音</h2><p>现在我们有了可以发出不同音高的蜂鸣器。接着我们做一个按钮控制发声的小应用。</p><p>接线中使用的元件包括：蜂鸣器，按钮，220Ω 和 10kΩ 电阻。</p><p><img src="http://img.viz.mobi/w7-buttonBuzzer.jpg" alt=""></p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> button_pin = A0;</span><br><span class="line"><span class="keyword">int</span> buzzer_pin = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  pinMode(button_pin, INPUT);</span><br><span class="line">  pinMode(buzzer_pin, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> buttonState = digitalRead(button_pin);</span><br><span class="line">  Serial.println(buttonState);</span><br><span class="line">  <span class="keyword">if</span> (buttonState == HIGH) &#123;</span><br><span class="line">    tone(<span class="number">8</span>, <span class="number">440</span>, <span class="number">200</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  delay(<span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的练习中，建议大家一定要动手画电路图、从 0 开始写代码，并且对代码加上必要的注释。这些训练能帮助我们更快熟悉和应用所学的知识。越早练习，才可以越早简化一些步骤。</p><p>在练习中一定会越到这样那样的错误，比如元件正负极一不小心就接反了，比如 Arduino 上传程序时总是出错，甚至有时候不正确的接线烧坏了元件。</p><p>错误是学习中最宝贵的机会，它提醒我们「此处有知识薄弱点」或者「步骤可完善的地方」。详细记录步骤，本身就是发现和解决问题很好的方法。把错误们储蓄起来，时不时拿出来复习，就能减少错误发生，提高熟练程度和准确度。</p><p>所以，多动手，早犯错，乐于在错误中寻找成长的路径，是可以伴随我们一路的好方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/week7title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Sound" scheme="http://uegeek.com/tags/Sound/"/>
    
      <category term="声音" scheme="http://uegeek.com/tags/%E5%A3%B0%E9%9F%B3/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="制造" scheme="http://uegeek.com/tags/%E5%88%B6%E9%80%A0/"/>
    
      <category term="Maker" scheme="http://uegeek.com/tags/Maker/"/>
    
      <category term="Digital Fabrication" scheme="http://uegeek.com/tags/Digital-Fabrication/"/>
    
      <category term="Fab" scheme="http://uegeek.com/tags/Fab/"/>
    
      <category term="Arduino" scheme="http://uegeek.com/tags/Arduino/"/>
    
  </entry>
  
  <entry>
    <title>三维制图讲义06 - 基础几何体练习</title>
    <link href="http://uegeek.com/190411-3d06-geometry-practice.html"/>
    <id>http://uegeek.com/190411-3d06-geometry-practice.html</id>
    <published>2019-04-11T03:40:11.000Z</published>
    <updated>2019-04-18T14:27:01.158Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/3d_course_title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190306-3d01-welcome-to-the-3d-world.html" target="_blank" rel="noopener">三维制图讲义01 - 欢迎来到三维世界</a></p><p><a href="https://www.uegeek.com/190314-3d02-workflow.html" target="_blank" rel="noopener">三维制图讲义02 - 三维制作流程</a></p><p><a href="https://www.uegeek.com/190320-3d03-blender-intro.html" target="_blank" rel="noopener">三维制图讲义03 - 三维软件和Blender介绍</a></p><p><a href="https://www.uegeek.com/190327-3d04-basic-geometry.html" target="_blank" rel="noopener">三维制图讲义04 - 基础几何体</a></p><p><a href="https://www.uegeek.com/190403-3d05-basic-geometry-edit.html" target="_blank" rel="noopener">三维制图讲义05 - 几何体编辑：拉伸和环切</a></p><h2 id="快速回顾"><a href="#快速回顾" class="headerlink" title="快速回顾"></a>快速回顾</h2><p>上一节课我们讲解了编辑模式下两个基本的操作：拉伸(Extrude)和环切(Loop Cut)。</p><p>什么是拉伸？就是拉着一个点/边/面走：</p><p><img src="https://thumbs.gfycat.com/ThunderousHandyBeagle-size_restricted.gif" alt=""></p><p>操作顺序是：<strong>选中物体，tab 键进入编辑模式，然后按 e 进入拉伸状态</strong>。</p><p><img src="https://raw.githubusercontent.com/a1studmuffin/SpaceshipGenerator/master/screenshots/step-by-step-animation.gif" alt=""></p><p>环切/Loop Cut 则帮助我们快速切分连续的边和面，获得更多的调节节点。使用快捷键的操作步骤：</p><ul><li>选择物体，按 tab 进入编辑模式</li><li>按快捷键 ctrl+r，将鼠标移到物体上，会出现环状的指示线(如果想退出环切状态，可以鼠标右键或者按 esc 键)</li><li>移动鼠标到想要的面(指示线只会出现在中点连接线)</li><li>按下鼠标左键，确定 Loop Cut</li></ul><p><img src="https://blenderartists.org/uploads/default/original/4X/8/c/7/8c70cbda30e9fc2a6d84539be6508614756f8e12.gif" alt=""></p><h2 id="细分曲面"><a href="#细分曲面" class="headerlink" title="细分曲面"></a>细分曲面</h2><p>随着对 Blender 操作的熟悉，我们会开始塑造更加复杂的形状。</p><p>形状复杂意味着什么？意味着我们需要对一个平面切分为多个子平面，然后调整这些子平面来获得更精确的控制。这就是细分曲面(sub-division)的概念。</p><p>下面我们连着看三个 Pixar in a Box 的视频，形象地理解一下什么是细分曲面。</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=e0527y4lxf3" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/e0527y4lxf3.html" target="_blank" rel="noopener">Introduction to subdivision surfaces</a></p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=x0527k1vsqf" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/x0527k1vsqf.html" target="_blank" rel="noopener">第三课 Split vs. average_腾讯视频</a></p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=u0859bf0qse" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/u0859bf0qse.html" target="_blank" rel="noopener">Subdivision in 3D_腾讯视频</a></p><p>下面进入练习时间。通过 3 个练习，我们进一步巩固之前学过的操作，并且学习一些新的技能。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="内插面"><a href="#内插面" class="headerlink" title="内插面"></a>内插面</h3><p>这个练习我们会学习一个新的操作：内插面（insect faces）。</p><p>内插面就是在一个面里面切一块按比例缩小的面：</p><p><img src="https://i.stack.imgur.com/ccGXJ.gif" alt=""></p><p>内插面的快捷键是 i。</p><p><img src="http://img.viz.mobi/w6-shape1.jpg" alt=""></p><p>上面的几何体的操作顺序是：</p><ul><li>新建立方体</li><li>按 tab 键进入编辑模式，按 3 键进入面选择模式，选中顶部的面</li><li>按 i 然后移动鼠标，调整内插面的大小，然后点鼠标左键确定</li><li>按 e 沿 z 轴拉伸刚才新建的内插面</li><li>按 i 再建一个内插面</li><li>按 e 沿 z 轴反方向拉伸，做出内凹的形状</li></ul><h3 id="拉伸-缩放-vs-缩放-拉伸"><a href="#拉伸-缩放-vs-缩放-拉伸" class="headerlink" title="拉伸+缩放 vs 缩放+拉伸"></a>拉伸+缩放 vs 缩放+拉伸</h3><p><img src="http://img.viz.mobi/w6-shape2.jpg" alt=""></p><p>这个练习帮助我们理解 <code>先拉伸后缩放</code> 和 <code>先缩放后拉伸</code> 的区别。</p><p>操作顺序是：</p><ul><li>新建立方体</li><li>按 tab 键进入编辑模式，选中顶部的面，按 g 然后沿 z 轴压扁 (也可以不进入编辑模式，直接缩放立方体）</li><li>选中顶部的面，按 i 建一个内插面</li><li>按 e 拉伸内插面，拉伸完毕后，按 s 缩小内插面</li></ul><p><img src="http://img.viz.mobi/2019-04-11%2010.25.56.gif" alt=""></p><ul><li>按 i 再建一个内插面，然后按 e 拉伸出中间长长的柱体</li><li>顶部的面按 e 然后 s，放大</li><li>按 e 拉伸，然后按 s 放大这个面，最后再按 e 拉伸，完成柱体</li></ul><p><img src="http://img.viz.mobi/2019-04-11%2010.28.05.gif" alt=""></p><ul><li>在四个侧面，选中面然后做内插面，向内拉伸内插面</li></ul><h3 id="使用-Subdivision-Surfaces-修改器"><a href="#使用-Subdivision-Surfaces-修改器" class="headerlink" title="使用 Subdivision Surfaces 修改器"></a>使用 Subdivision Surfaces 修改器</h3><p><img src="http://img.viz.mobi/w6-shape3.jpg" alt=""></p><ul><li>新建圆柱体，按 tab 键进入编辑模式，选中顶部的面</li><li>按 e 沿 z 轴拉伸，然后按 s 缩小口径</li><li>再按 e 向上拉伸，然后 e → s 放大，拉出瓶口的底部</li><li>再按 e 向上拉伸出瓶口，然后建内插面，再把内插面向内拉伸形成瓶口的凹陷</li></ul><p><img src="http://img.viz.mobi/2019-04-11%2010.31.46.gif" alt=""></p><p>添加 Subdivision Surfaces 的操作如下：</p><p>首先添加修改器(Modifier) 表面细分 / Subdivision Surface，将视图的细分值改为 2。</p><p><img src="http://img.viz.mobi/blender-subSurface.jpg" alt=""></p><p>然后添加环切，平整细分表面的边缘：</p><p><img src="http://img.viz.mobi/2019-04-11%2010.45.38.gif" alt=""></p><p>仔细调整各边缘的弧度，并且调整瓶颈的形状(添加、选中环切线并缩放)，最后得到瓶子。</p><p><img src="http://img.viz.mobi/w6-shape3.jpg" alt=""></p><p>最后，可以选择 物体-光滑着色，把几何体的表面变得更光滑一些。</p><p><img src="http://img.viz.mobi/blender-smoothshading.jpg" alt=""></p><p>快去练习吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/3d_course_title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="3D" scheme="http://uegeek.com/tags/3D/"/>
    
      <category term="Modeling" scheme="http://uegeek.com/tags/Modeling/"/>
    
      <category term="Blender" scheme="http://uegeek.com/tags/Blender/"/>
    
      <category term="Geometry" scheme="http://uegeek.com/tags/Geometry/"/>
    
      <category term="Subdivision" scheme="http://uegeek.com/tags/Subdivision/"/>
    
  </entry>
  
  <entry>
    <title>数字制造讲义06-MIDI 和 OSC 数据传输练习</title>
    <link href="http://uegeek.com/190409-df06-midi-osc-practice.html"/>
    <id>http://uegeek.com/190409-df06-midi-osc-practice.html</id>
    <published>2019-04-09T13:58:47.000Z</published>
    <updated>2019-04-09T14:00:19.246Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/week7title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190305-df01-digital-fabrication.html" target="_blank" rel="noopener">数字制造讲义01-成为数字世界的建造者</a><br><a href="https://www.uegeek.com/190313-df02-arduino-intro.html" target="_blank" rel="noopener">数字制造讲义02-Arduino入门</a><br><a href="https://www.uegeek.com/190319-df03-electronics-basic.html" target="_blank" rel="noopener">数字制造讲义03-电路基础</a><br><a href="https://www.uegeek.com/190326-df04-input-and-output.html" target="_blank" rel="noopener">数字制造讲义04-负责输入和输出的智能元件</a><br><a href="https://www.uegeek.com/190402-df05-communication.html" target="_blank" rel="noopener">数字制造讲义05-软硬件数据通信</a></p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>上一节课，我们学习了有哪些方式把不同的软硬件连接在一起，让它们之间可以传递数据，完成一定的功能。</p><p>有线的方式主要使用数据线进行串口通信。在远距离传输的场景下，则常使用互联网（广域网/局域网）。基于无线的连接主要包括 Wifi 和蓝牙。</p><p>传输音乐数据最常用的协议包括 MIDI 和 OSC。OSC 的分辨率更高、可传递的参数更丰富，它使用 UDP / IP 和以太网通过 Internet和局域网传输。</p><p><img src="http://img.viz.mobi/MIDIvsOSC.jpg" alt=""></p><p>OSC 已广泛应用于音乐表演、机器人、视频性能接口、分布式音乐系统和进程间通信等领域，在实验音乐控制器中更是必不可少。</p><p>下面我们就来实际操作几个例子。</p><h2 id="Mobile-MIDI-2-Max"><a href="#Mobile-MIDI-2-Max" class="headerlink" title="Mobile MIDI 2 Max"></a>Mobile MIDI 2 Max</h2><p>从移动端发送 MIDI 数据给其他设备，可以使用类似 KnobLab 的 APP，它支持多种传输方式：</p><p><img src="http://img.viz.mobi/KnobLab.jpg" alt=""></p><p>首先下载 KnobLab App。</p><p>然后我们在 Max 里面建一个简单的 patch，接收 KnobLab 发过来的 midi 数据，然后传给键盘并且 makenote：</p><p><img src="http://img.viz.mobi/KnobLab2Max.jpg" alt=""></p><p>打开 Setting 里面 MaxOS 的 Wifi 连接说明：</p><p><img src="http://img.viz.mobi/KnobLabWifiConnection.jpg" alt=""></p><p>打开电脑里的 Audio MIDI Setup，打开 MIDI Studio，点工具栏上的网络图标:</p><p><img src="http://img.viz.mobi/MIDIStudio.jpg" alt=""></p><p>打开网络设置窗口，在 My Sessions 下面勾选 Session 1，然后在 Directory 里面可以看到自己的手机(电脑和手机需要在同一个 Wifi 网络下)。然后点 Connect。</p><p><img src="http://img.viz.mobi/MIDINetworkSetup.jpg" alt=""></p><p>这时候已经可以用 KnobLab 操作，向 Max 发送 MIDI 数据了。在 Max 里面，要注意选择 midiin 的来源，双击对象就可以看到 Session 1 的选项，选择后，Max 才开始接收数据。</p><p>在 KnobLab 的主界面上转动旋钮，Max 就会发出对应的 MIDI 音高。</p><h2 id="Mobile-OSC-2-Max"><a href="#Mobile-OSC-2-Max" class="headerlink" title="Mobile OSC 2 Max"></a>Mobile OSC 2 Max</h2><p>在触摸设备如 iOS 上，用 <a href="https://hexler.net/software/touchosc" target="_blank" rel="noopener">TouchOSC</a> 操作复杂的 MIDI Controller 非常方便。</p><p><img src="https://hexler.net/gfx/_software/touchosc-11.png" alt=""></p><p>首先，在移动端下载 TouchOSC，在桌面端<a href="https://hexler.net/software/touchosc" target="_blank" rel="noopener">下载编辑器</a>。</p><p>在编辑器里面可以创建自定义的操作面板。我们也可以直接使用 TouchOSC 里面预设的面板。在设置页面的 Layout 项，点击进去即可选择面板。</p><p>连接的关键是设置 TouchOSC 的 IP 地址和输入输出端口。</p><p>确保电脑和手机处于同一个 Wifi 网络。然后我们查询电脑的 IP 地址。打开 Terminal，Windows 系统使用命令 ipconfig，MacOS 系统使用命令 ifconfig，回车后可以看到一长串的数据，仔细找到其中以 192.168 开头的局域网 IP 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">en1: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">ether 24:f6:77:08:87:04</span><br><span class="line">inet6 fe80::81c:2c9b:50cf:8e39%en1 prefixlen 64 secured scopeid 0x7</span><br><span class="line">inet 192.168.xx.xxx netmask 0xffffff00 broadcast 192.168.xxx.xxx</span><br><span class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">media: autoselect</span><br><span class="line">status: active</span><br></pre></td></tr></table></figure><p>broadcast 后面的 192.168.xxx.xxx 就是需要填入 TouchOSC 设置中的 IP 地址。</p><p>打开手机 APP 进入设置页面，在 Host 里面填入上面的的 IP地址。</p><p><img src="https://guide.lightform.com/hc/article_attachments/360018787213/IMG_8577.png" alt=""></p><p>设置输入端口 Port(outgoing) 为某个数值，如 8800。</p><p>接下来就可以在 Max/MSP 里面接收和发送 OSC 数据了。因为 OSC 通过 UDP 协议传输，所以使用 <code>udpsend</code> 和 <code>udpreceive</code> 对象：</p><p><img src="http://img.viz.mobi/touchOSC2Max.jpg" alt=""></p><p><code>udpreceive</code> 的 port 参数应该跟 TouchOSC 设置的输出端口一致，如上图的 8800。</p><p>Max 接收到数据后，可以看到 OSC 的数据格式类似文件路径 URI：<code>/{序号}/{参数名} {参数值}</code>。</p><p>这样我们就把手机和电脑连接起来。只要将 TouchOSC 里面所有的 controller 都映射到 Max 中，就可以在手机上实现效果丰富的个性化控制。</p><h2 id="Arduino-2-Max"><a href="#Arduino-2-Max" class="headerlink" title="Arduino 2 Max"></a>Arduino 2 Max</h2><p>Arduino 和 Max 也可以方便地勾搭上。我们试着做一个旋钮控制音高的小应用。</p><p>首先搭出最简单的电位计电路。电位计正极接 5V 端口，负极接 GND，数据脚接 A0 端口：</p><p><img src="http://img.viz.mobi/potentiometer2midi.jpg" alt=""></p><p>Arduino 中的代码也非常简单：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sensor_pin = A0;</span><br><span class="line"><span class="keyword">int</span> knobValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>); <span class="comment">// open the arduino serial port</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  knobValue = analogRead(sensor_pin);</span><br><span class="line">  Serial.println(knobValue);</span><br><span class="line">  delay(<span class="number">500</span>); <span class="comment">// pause</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>电路和 Arduino 发送数据已经准备好。接着我们处理 Max 接收数据的逻辑。</p><p><img src="http://img.viz.mobi/Serial2Max.png" alt=""></p><p>咦？为什么这么多接线？</p><p>其实并没有看上去复杂。</p><p>我们转动电位计，打开 Arduino 的串口监视器查看是否可以正常读数。然后再观察 Max 中有哪些数据进来。</p><p>Max 中使用 <code>serial</code> 对象读取串口数据，不过它输出的是未经处理的原始格式。如果用 print 对象打印出来，会看到接收的数据会是以下格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">13</span><br><span class="line">54</span><br><span class="line">10</span><br><span class="line">35</span><br></pre></td></tr></table></figure><p>第一行的 13 和第三行的 10 都是标记，第二行和第四行才是串口数据，但是它是 ASCII 码，而不是直接可以使用的数字。所以还需要用 <code>itoa</code> 和 <code>fromsymbol</code> 对象将 ASCII 码转换为数字。因为电位计发送的模拟数据范围是 0~1023，所以接着我们用一个 <code>scale</code> 把数据映射到 MIDI 的数据范围 0~127，这样就可以发出音高了。</p><h2 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h2><p>Arduino 能不能直接跟 Ableton 连接呢？当然是可以的。</p><p>Ableton 已经提供了 Package，跟 Arduino 连接后，可以做好多脑洞大开的酷炫应用：</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=h0190wbyt6w" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/h0190wbyt6w.html" target="_blank" rel="noopener">Max for Live Connection Kit_腾讯视频</a></p><p>具体教程，请查看：<a href="https://www.uegeek.com/190408-Ableton-Arduino.html" target="_blank" rel="noopener">Ableton Live 连接 Arduino 教程</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/week7title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Ableton Live" scheme="http://uegeek.com/tags/Ableton-Live/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="制造" scheme="http://uegeek.com/tags/%E5%88%B6%E9%80%A0/"/>
    
      <category term="Maker" scheme="http://uegeek.com/tags/Maker/"/>
    
      <category term="Digital Fabrication" scheme="http://uegeek.com/tags/Digital-Fabrication/"/>
    
      <category term="Fab" scheme="http://uegeek.com/tags/Fab/"/>
    
      <category term="Arduino" scheme="http://uegeek.com/tags/Arduino/"/>
    
      <category term="通信" scheme="http://uegeek.com/tags/%E9%80%9A%E4%BF%A1/"/>
    
      <category term="MIDI" scheme="http://uegeek.com/tags/MIDI/"/>
    
      <category term="OSC" scheme="http://uegeek.com/tags/OSC/"/>
    
      <category term="Max" scheme="http://uegeek.com/tags/Max/"/>
    
  </entry>
  
  <entry>
    <title>Ableton Live 连接 Arduino 教程</title>
    <link href="http://uegeek.com/190408-Ableton-Arduino.html"/>
    <id>http://uegeek.com/190408-Ableton-Arduino.html</id>
    <published>2019-04-08T11:14:46.000Z</published>
    <updated>2019-04-08T11:16:20.557Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn-resources.ableton.com/resources/filer_thumbnails/fd/d4/fdd4707d-fbcb-441a-a07d-f6e58c9e717d/connkit_artwork_1000x1000.jpg__600x600_q85_crop_subsampling-2_upscale.jpg" alt=""></p><a id="more"></a><p>你有没有想过，用 Arduino 做一个简单的 MIDI controller，控制 Ableton Live 中的参数？</p><p>如果想实现两者的连接，以前的解决方案比较复杂，需要基于 Max/MSP，用 <a href="http://www.maxuino.org/" target="_blank" rel="noopener">Maxuino</a> 实现，还需要在 Arduino 上安装对应的固件。</p><p>有没有更简单的方法呢？</p><h2 id="Connection-Kit"><a href="#Connection-Kit" class="headerlink" title="Connection Kit"></a>Connection Kit</h2><p>好消息是，Ableton 已经提供了官方的 <a href="https://www.ableton.com/en/packs/connection-kit/" target="_blank" rel="noopener">Connection Kit</a>，其中包含了与流行的外接设备的连接工具如 Arduino、OSC、LEGO Mindstorms 等。</p><p>介绍视频真是帅炸了~</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=h0190wbyt6w" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/h0190wbyt6w.html" target="_blank" rel="noopener">Max for Live Connection Kit_腾讯视频</a></p><p>如果你已经购买了 Ableton Live 10 Suit，可以在<a href="https://www.ableton.com/en/packs/connection-kit/" target="_blank" rel="noopener">官网直接下载这个 Pack</a>。如果不能直接下载，这个 Pack 的源文件也可以在 github 找到：<a href="https://github.com/Ableton/m4l-connection-kit" target="_blank" rel="noopener">Ableton/m4l-connection-kit: Max for Live Connection Kit</a>。下载后，将文件夹复制到 Documents-Ableton-Third-Party Packs。打开软件后，就可以在左侧找到 Arduino.amxd：</p><p><img src="http://img.viz.mobi/Ableton-connection-kit-pack.jpg" alt=""></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>开始连接之前，让我们看看<a href="https://github.com/Ableton/m4l-connection-kit/tree/master/Arduino" target="_blank" rel="noopener">使用说明</a>。</p><blockquote><p>The Arduino Max4Live device connects an Arduino Uno to Live using its serial port via USB and allows access to its analog inputs as well as its digital GPIOs. The device enables you to receive sensor data like switches, potentiometers or light-dependent resistors as well as sending Live parameter values to LEDs or servo motors. So far you may only connect sensors and other periphals to it directly as we do not yet support I2Cs and other periphals via the Serial Periphal Interface (SPI).</p></blockquote><p>目前应该只支持 Uno 板，由 USB 串口连接。</p><p>因为 Max4Live 需要特定的固件支持，所以我们先上传程序到 Arduino 板。上传的程序在 Arduino IDE 里面就有：File-&gt;Examples-&gt;Firmata-&gt;StandardFirmata。打开文件后(至少是 2.5 版本)，上传到板子。</p><p>接着我们可以在 Ableton 里面编辑一段 clip，双击 Arduino.amxd 加入到 device viewer 里。</p><p><img src="http://img.viz.mobi/addArduino2Ableton.jpg" alt=""></p><h2 id="连接测试电路"><a href="#连接测试电路" class="headerlink" title="连接测试电路"></a>连接测试电路</h2><p>回到 Arduino，接一个最简单的电路。找一个电位计，正极接 Uno 板的 5V 口，负极接 GND，中间的信号接 A0 模拟端口。</p><p><img src="http://img.viz.mobi/potentiometer2arduino.png" alt=""></p><p>上传以下程序，然后打开串口监视器，查看是否可以正常读取旋钮的值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// initialize serial communication at 9600 bits per second:</span></span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the loop routine runs over and over again forever:</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// read the input on analog pin 0:</span></span><br><span class="line">  <span class="keyword">int</span> sensorValue = analogRead(A0);</span><br><span class="line">  <span class="comment">// print out the value you read:</span></span><br><span class="line">  Serial.println(sensorValue);</span><br><span class="line">  delay(<span class="number">20</span>);        <span class="comment">// delay in between reads for stability</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功后，关闭串口监视器。</p><h2 id="Ableton-Mapping"><a href="#Ableton-Mapping" class="headerlink" title="Ableton Mapping"></a>Ableton Mapping</h2><p>然后到 Ableton 中，选择 port 为 usbmodemxxxx。切换到 Analog tab，点 A0 右侧的 Map 按钮，选择已经编辑的那个 track 的 Track Volume。</p><p>做好这一步映射后，可以看到 A0 旁边小小的蓝色指示条已经开始跳动。旋转电位计，会看到 Track 的音量产生了变化。</p><p>可是，这里的变化不太符合我们的预期：扭动旋钮停止后，音量还是会变化，甚至产生随机的爆音。</p><p>这是因为电位计产生了抖动。再打开 Arduino 串口监视器，可以观察到 A0 端口接收到的不是平滑的值，而是夹杂着很多不稳定的波动值。</p><p><img src="http://img.viz.mobi/ArduinoSerialMonitor.png" alt=""></p><h3 id="消抖处理"><a href="#消抖处理" class="headerlink" title="消抖处理"></a>消抖处理</h3><p>最简单的办法是在 kit 里面设置 Smooth 的值：</p><p><img src="http://img.viz.mobi/ableton-arduino-smooth.png" alt=""></p><p>但是这样做，误差会较大。我们可以进一步尝试在代码里消抖，或者在电路中加入电容消抖。可以参考这篇文章 <a href="https://www.instructables.com/id/Smooth-Potentiometer-Input/" target="_blank" rel="noopener">Smooth Potentiometer Input</a>。</p><p>进一步的消抖还需要参考一些资料继续研究。</p><ul><li><a href="http://forum.arduino.cc/index.php?topic=216582.0" target="_blank" rel="noopener">Debouncing a potentiometer</a></li><li><a href="https://forum.arduino.cc/index.php?topic=210348.0" target="_blank" rel="noopener">Writing an analog pot debounce as a function</a></li><li><a href="https://forum.arduino.cc/index.php?topic=75946.0" target="_blank" rel="noopener">Debounce a Potentiometer?</a></li><li><a href="https://www.jianshu.com/p/99d861de03e0" target="_blank" rel="noopener">arduino按钮传感器常见的几种消抖方法 - 简书</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn-resources.ableton.com/resources/filer_thumbnails/fd/d4/fdd4707d-fbcb-441a-a07d-f6e58c9e717d/connkit_artwork_1000x1000.jpg__600x600_q85_crop_subsampling-2_upscale.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Music" scheme="http://uegeek.com/tags/Music/"/>
    
      <category term="Ableton Live" scheme="http://uegeek.com/tags/Ableton-Live/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="Maker" scheme="http://uegeek.com/tags/Maker/"/>
    
      <category term="Arduino" scheme="http://uegeek.com/tags/Arduino/"/>
    
      <category term="MIDI" scheme="http://uegeek.com/tags/MIDI/"/>
    
  </entry>
  
  <entry>
    <title>三维制图讲义05 - 几何体编辑：拉伸和环切</title>
    <link href="http://uegeek.com/190403-3d05-basic-geometry-edit.html"/>
    <id>http://uegeek.com/190403-3d05-basic-geometry-edit.html</id>
    <published>2019-04-03T11:20:46.000Z</published>
    <updated>2019-04-03T11:22:24.063Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/3d_course_title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190306-3d01-welcome-to-the-3d-world.html" target="_blank" rel="noopener">三维制图讲义01 - 欢迎来到三维世界</a></p><p><a href="https://www.uegeek.com/190314-3d02-workflow.html" target="_blank" rel="noopener">三维制图讲义02 - 三维制作流程</a></p><p><a href="https://www.uegeek.com/190320-3d03-blender-intro.html" target="_blank" rel="noopener">三维制图讲义03 - 三维软件和Blender介绍</a></p><p><a href="https://www.uegeek.com/190327-3d04-basic-geometry.html" target="_blank" rel="noopener">三维制图讲义04 - 基础几何体</a></p><h2 id="快速回顾"><a href="#快速回顾" class="headerlink" title="快速回顾"></a>快速回顾</h2><p>上一节课我们练习了编辑模式下，点线面的切换和移动、旋转、缩放。</p><p>选中几何体后，按快捷键 Tab 进入编辑模式。这时候按键盘 1、2、3 键（或者点界面中模式选择右边的三个图标），可以切换为 点选择、边选择、面选择状态。</p><p>将点、线、面选择，跟位移、旋转、缩放结合起来练习：</p><ul><li>切换到点选择模式（编辑模式下按 1 键），选中点，进行移动（G）(包括沿轴的操作)</li><li>切换到边选择模式（编辑模式下按 2 键），选中多条边，进行旋转（R）(包括沿轴的操作)</li><li>切换到面选择模式（编辑模式下按 3 键），选中多个面，进行缩放（S）(包括沿轴的操作)</li></ul><p><img src="http://img.viz.mobi/Blender_edit.jpg" alt=""></p><h2 id="拉伸-Extrude"><a href="#拉伸-Extrude" class="headerlink" title="拉伸 Extrude"></a>拉伸 Extrude</h2><p>拉伸(Extrude)是重要的基本操作，也是这一节课的练习重点。</p><p>什么是拉伸？就是拉着一个点/边/面走：</p><p><img src="https://thumbs.gfycat.com/ThunderousHandyBeagle-size_restricted.gif" alt=""></p><p>拉伸操作需要在编辑模式下进行。</p><p>操作顺序是：<strong>选中物体，tab 键进入编辑模式，然后按 e 进入拉伸状态</strong>。</p><p>你可能会问，拉伸 (e) 跟移动 (g) 有什么不同呢？</p><p>注意观察上面的动画，在拉伸时，是在原有面的基础上，增加了一个面，然后沿着这个面的四条边移动。而单纯的移动（选中点线面后按 g），则不会增加面。</p><p>拉伸为什么重要？</p><p>它是三维物体成型最基本的方式之一。甚至只用 extrude 这个基本操作加上点/边/面的 TRS，就可以建出复杂的模型：</p><p><img src="https://raw.githubusercontent.com/a1studmuffin/SpaceshipGenerator/master/screenshots/step-by-step-animation.gif" alt=""></p><h2 id="环切-Loop-Cut"><a href="#环切-Loop-Cut" class="headerlink" title="环切 Loop Cut"></a>环切 Loop Cut</h2><p>环切/Loop Cut 功能可以说是金手指级的作弊型基础功能。它帮助我们快速切分连续的边和面，获得更多的调节节点。</p><p>比如，把一个圆柱体修改成复杂一点的造型，借助环切可以秒完成：</p><p><img src="https://www.plejadium.de/wp-content/uploads/2015/05/blender-loop-cut-and-slide.gif" alt=""></p><p>环切也需要在编辑模式中使用。可以在左侧工具栏中找到：</p><p><img src="http://img.viz.mobi/blander-loopcup-menu.jpg" alt=""></p><p>使用快捷键的操作步骤：</p><ul><li>选择物体，按 tab 进入编辑模式</li><li>按快捷键 ctrl+r，将鼠标移到物体上，会出现环状的指示线(如果想退出环切状态，可以鼠标右键或者按 esc 键)</li><li>移动鼠标到想要的面(指示线只会出现在中点连接线)</li><li>按下鼠标左键，确定 Loop Cut</li></ul><p><img src="https://blenderartists.org/uploads/default/original/4X/8/c/7/8c70cbda30e9fc2a6d84539be6508614756f8e12.gif" alt=""></p><p>然后问题来了：</p><blockquote><p>如果移动环的时候，没有移到对的位置，就不小心点了鼠标左键，环就不动了，怎么办？</p></blockquote><p>没事，毕竟是作弊级别的常用功能，就算已经切了，也还是可以调整位置。</p><ul><li>先选中要调整的 Loop Cut：按住 alt 键点左键，可以选中连续的边或者面</li><li>然后按 g，进行移动</li></ul><p>咦？这时候的移动没有限制轴线，一动 Loop Cut 就歪了……</p><p><img src="http://img.viz.mobi/2019-04-02%2011.47.39.gif" alt=""></p><blockquote><p>如果想沿原来的边缘移动 Loop cut，怎么办？</p></blockquote><p>可以在选择 loop 以后，按两次 g，然后移动到合适的位置。</p><p><img src="http://img.viz.mobi/blender-loopcut-gg.gif" alt=""></p><blockquote><p>问题2：如果想一次性添加多个环切怎么办？</p></blockquote><p>Easy Peasy</p><p>在按 ctrl+r 后，移动到合适的面上，然后<strong>滚动鼠标中键或者按对应的数字键</strong>，就可以指定切割的数量了。</p><h2 id="组合练习"><a href="#组合练习" class="headerlink" title="组合练习"></a>组合练习</h2><p>好了，目前为止，Blender 的基础大招你都已经学过了：</p><ul><li>调整视图和切换正/侧/顶视图</li><li>进入编辑模式</li><li>移动（g）/旋转（r）/缩放（s）物体或者点/线/面</li><li>拉伸(e)</li><li>环切(ctrl+r)</li></ul><p>可以说，你已经可以造出 90% 的基础造型。下面就进入探索和练习时间吧！</p><p><img src="https://blenderartists.org/uploads/default/original/4X/6/9/e/69ec27d84baf0f5f30d46aa956887320da4d182f.gif" alt=""></p><p><img src="https://polygoniq.com/sites/default/files/2018-10/03C_d.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/3d_course_title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="3D" scheme="http://uegeek.com/tags/3D/"/>
    
      <category term="Modeling" scheme="http://uegeek.com/tags/Modeling/"/>
    
      <category term="Blender" scheme="http://uegeek.com/tags/Blender/"/>
    
      <category term="Geometry" scheme="http://uegeek.com/tags/Geometry/"/>
    
      <category term="Loop Cut" scheme="http://uegeek.com/tags/Loop-Cut/"/>
    
  </entry>
  
  <entry>
    <title>数字制造讲义05-软硬件数据通信</title>
    <link href="http://uegeek.com/190402-df05-communication.html"/>
    <id>http://uegeek.com/190402-df05-communication.html</id>
    <published>2019-04-02T14:20:20.000Z</published>
    <updated>2019-04-02T15:24:40.466Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/week7title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190305-df01-digital-fabrication.html" target="_blank" rel="noopener">数字制造讲义01-成为数字世界的建造者</a></p><p><a href="https://www.uegeek.com/190313-df02-arduino-intro.html" target="_blank" rel="noopener">数字制造讲义02-Arduino入门</a></p><p><a href="https://www.uegeek.com/190319-df03-electronics-basic.html" target="_blank" rel="noopener">数字制造讲义03-电路基础</a></p><p><a href="https://www.uegeek.com/190326-df04-input-and-output.html" target="_blank" rel="noopener">数字制造讲义04-负责输入和输出的智能元件</a></p><h2 id="Connect-Everything"><a href="#Connect-Everything" class="headerlink" title="Connect Everything"></a>Connect Everything</h2><p><img src="https://target.scene7.com/is/image/Target/GUEST_35ece802-7780-4243-b78a-c94cc6f7f682?wid=488&amp;hei=488&amp;fmt=pjpeg" alt=""></p><p>玩过乐高的同学都知道，乐高积木非常容易上手，只需要把积木拼在一起——它们总是能拼在一起，不管是什么大小和形状，所以它成为了经典的儿童益智玩具。</p><p>在我们制造东西的时候，目标也是把不同的物体和元件拼接成一个完整的、具有一定功能的物品。但是我们会面对一个比乐高困难得多的问题：不同的元件出身和禀赋可能天差地别，想要把它们连接到一起，得想出各种办法。</p><p>比如，我想做一个薯片罐头打击乐器，敲击罐头，就可以让 iPad 里面的乐器发出对应的声响。</p><p><img src="https://cdn.instructables.com/FO1/LDW4/IUSLP51T/FO1LDW4IUSLP51T.LARGE.jpg?auto=webp&amp;width=700" alt=""></p><p>想想看，我们要把哪些东西连接起来？</p><p>我们要连接敲击的平面和 iPad 中的 APP。可是并不存在这样的接口。怎么办？</p><p>一段电线连不起来，那我们用两段。可以先用 Arduino 帮我们收集敲击的信号，然后作为中转，再传给 APP。</p><p>可是， Arduino 怎么连接 iPad 呢？</p><p>你可能会说，可以用数据线呀！没错，不过，要用什么样的数据线呢？这取决于我们要传输什么样的数据。我们想要控制 APP 中的乐器，就需要包含 MIDI 信息的数据，于是要用 MIDI 数据线来传递。</p><p>所以，我们的问题拆分成了好几个：</p><ul><li>如何连接敲击面和 Arduino (电路)</li><li>如何连接 Arduino 和 iPad(一头必需是 iPad 支持的端口，如 type-c)</li><li>如何从 Arduino 传输 MIDI 数据到 APP(一头必需是 MIDI 数据线)</li></ul><h2 id="条条小路通骡马"><a href="#条条小路通骡马" class="headerlink" title="条条小路通骡马"></a>条条小路通骡马</h2><p>这节课我们学习有哪些方式把不同的东西连接在一起，让它们之间可以传递数据，完成一定的功能。</p><p>硬件和硬件、软件和硬件、软件和软件的数据通信，主要可以分为两大类型：有线和无线。</p><p>想要跟硬件沟通，需要用某种它能听懂的「语言」。但是这种语言在人类看来简直像天书，它是机器专用的代码——汇编语言（assembly language），是一种用于电子计算机、微处理器、微控制器，或其他可编程器件的低级语言。</p><h3 id="有线"><a href="#有线" class="headerlink" title="有线"></a>有线</h3><p>串口通信(Serial Communication)， 是最常见的通信方式。它是指外接设备和计算机之间，通过数据信号线、地线、控制线等，按位进行传输数据的一种通讯方式。 这种通信方式使用的数据线少，在远距离通信中可以节约通信成本，但其传输速度比并行传输低。</p><p>串口的概念跟并口相对应：</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/a/a6/Parallel_and_Serial_Transmission.gif" alt=""></p><p>因为要跟机器直接打交道的语言（低级别的语言）比较难掌握，所以有许多更高级别的语言(近似人类语言)的库可以帮助我们通过串口跟机器沟通，例如 Python 语言的 <a href="https://github.com/pyserial/pyserial" target="_blank" rel="noopener">pySerial</a>。</p><p>Arduino 也是靠串口跟计算机通信。</p><p><img src="https://cdn.sparkfun.com/assets/learn_tutorials/1/8/1/Arduino_IDE_serial_port.png" alt=""></p><p>在我们上传程序到板子之前，就需要选择用哪个串口通信。在 Port 选项上方，还有 Serial Monitor 工具（IDE右上角放大镜图标也可以），我们常常在调试程序时，打开串口监视器并查看里面的数据。</p><p>那么，Arduino 用什么数据线跟电脑的串口连接呢？</p><p>最常见就是 USB 数据线了。USB 是 Universal Serial BUS 的缩写，从名字可见其野心(不过讲真，数据接口类型太多，真的让人头疼死……)</p><p>来认认 USB 接口们，哪些是平常经常会见到的：</p><p><img src="http://www.l-com.com/images/usb-tutorial_connectors.gif" alt=""></p><p>备受关注的 USB 4.0 就要来了，但是现实比较骨干，我们仍然需要跟各种各样的数据接口和数据线打交道，尤其是音频和视频的数据线，还远未到 USB 一统天下的时候。</p><p>这张图汇总了大部分音视频数据接口的长相，总有一款适合你：</p><p><img src="http://www.conceptdraw.com/How-To-Guide/picture/Vector-stencils--Audio-video-connectors.png" alt=""></p><p>USB 没有办法替代这么多的数据接口和数据线，其中很重要的一个原因是连接距离。音视频的连接长度常常跨越几米甚至上百米，这时候 USB 就傻眼了。</p><p>在远距离传输的场景下，互联网（广域网/局域网）就可以大显身手。在有线互联网中，我们通过 IP 地址访问和联通计算机。</p><p>IPv4地址分为 A、B、C、D、E 五类，出去特殊作用的 D、E 两类，剩下的 A、B、C 三类地址是常见的 IP 地址段。A 类地址的容量最大，可以容纳 16,777,214 个主机，B 类地址可以容纳 65,534 个主机，C 类地址可以容纳 254 个主机。</p><ul><li>A类地址：10.0.0.0–10.255.255.255</li><li>B类地址：172.16.0.0–172.31.255.255</li><li>C类地址：192.168.0.0–192.168.255.255</li></ul><h3 id="无线"><a href="#无线" class="headerlink" title="无线"></a>无线</h3><p>基于无线的连接越来越普遍，也越来越重要了。</p><p>为啥？</p><p><img src="http://debangw.com/img/aHR0cDovL2ltZzIuaW1ndG4uYmRpbWcuY29tL2l0L3U9Mzg3NDAzNjc4OSwxODk1NTY0MjI1JmZtPTI2JmdwPTAuanBn.jpg" alt=""></p><p>尤其在制作互动装置时，我们不希望被太多连线所缠绕和局限活动范围，所以需要借助无线连接的方式。</p><p>而且，多种多样的无线数据传输，也是 IOT(Internet of Things 物联网)的基础设施。</p><p><img src="https://taazaa.com/wp-content/uploads/2017/05/IoT-3.3.png" alt=""></p><p>那么蓝牙呢？蓝牙的应用也越来越普遍了。</p><p>蓝牙是一种点对点的通信方式，主要目的是服务移动设备。蓝牙的功耗以及成本比 wifi 低一些，但是传输距离很短，一般用于近距离设备的通信，例如耳机和手机。</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=a05428d2mlx" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/a05428d2mlx.html" target="_blank" rel="noopener">科技情报局：NFC、蓝牙和 WiFi 有什么区别？_腾讯视频</a></p><p>除了 wifi 和蓝牙，还有 ZigBee、RF、WiMax 等等传输方式，我们不太会接触到，这里就略过了。</p><h2 id="传输音乐数据"><a href="#传输音乐数据" class="headerlink" title="传输音乐数据"></a>传输音乐数据</h2><p>音乐和乐器是我们不变的主题。那么我们要深入了解一下如何传输音乐相关的数据。</p><h3 id="MIDI"><a href="#MIDI" class="headerlink" title="MIDI"></a>MIDI</h3><p>音乐数字接口（Musical Instrument Digital Interface，简称 MIDI ）是一个工业标准的电子通讯协议，为电子乐器等演奏装置（如合成器）定义各种音符或弹奏码，让电子乐器、电脑、手机或其它的舞台演出配备彼此连接，调整和同步，可以即时交换音乐数据。  MIDI 不传送声音，只传送包括音调和音乐强度的数据、音量、颤音和相位等参数，还有设定节奏的时钟信号。在不同的电脑上，输出的声音也因音源器不同而有差异。</p><p>回顾 MIDI 的历史，简直就像回顾数字时代的陈年往事：</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=n08561s7vij" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/n08561s7vij.html" target="_blank" rel="noopener">WHAT IS MIDI 什么是 MIDI_腾讯视频</a></p><p>MIDI 1.0 于 1983 年 8 月发布。35 年过去了，MIDI 终于在今年 1 月迎来了 2.0 版本。</p><p><img src="https://static.bhphotovideo.com/explora/sites/default/files/4_112.jpg" alt=""></p><p>当然，现阶段我们常用的还是 5 脚的 MIDI 数据线，和 0~127 的整数型数字：</p><p><img src="https://cdn.sparkfun.com/r/600-600/assets/learn_tutorials/4/0/8/midi-cable.jpg" alt=""></p><table><thead><tr><th><strong>MIDI Cable Wiring</strong></th><th></th><th></th></tr></thead><tbody><tr><td><strong>First Connector</strong></td><td><strong>Cable</strong></td><td><strong>Second Connector</strong></td></tr><tr><td>Pin 1</td><td>No Connection</td><td>Pin 1</td></tr><tr><td>Pin 2</td><td>Shield</td><td>Pin 2</td></tr><tr><td>Pin 3</td><td>No Connection</td><td>Pin 3</td></tr><tr><td>Pin 4</td><td>Voltage Reference Line</td><td>Pin 4</td></tr><tr><td>Pin 5</td><td>Data Line</td><td>Pin 5</td></tr></tbody></table><p>课上演示的从 MAX 发送 MIDI 数据给 Ableton，记得自己动手试一试哦！</p><p>从移动端发送 MIDI 数据给其他设备，可以使用类似 KnobLab 的 APP，它支持多种传输方式：</p><p><img src="http://img.viz.mobi/KnobLab.jpg" alt=""></p><h3 id="OSC"><a href="#OSC" class="headerlink" title="OSC"></a>OSC</h3><p><a href="http://opensoundcontrol.org/" target="_blank" rel="noopener">OSC</a>（Open Sound Control）是用于连接声音合成器、计算机和其他多媒体设备的协议，用于辅助音乐表演或节目控制之类（共享音乐表现数据如手势、参数和音符序列）的目的。OSC 的优势包括互动性，准确性，灵活性等。</p><p>来听听看 OSC 的作者之一 Matt Wright 是如何介绍它的：</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=f08563i3n66" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/f08563i3n66.html" target="_blank" rel="noopener">Open Sound Control OSC intro_腾讯视频</a></p><p>OSC 常常用来替代 MIDI，因为它的分辨率更高、可传递的参数更丰富。OSC 消息使用 UDP / IP 和以太网通过 Internet和局域网传输。</p><p><img src="http://img.viz.mobi/MIDIvsOSC.jpg" alt=""></p><p>OSC 已广泛应用于音乐表演、机器人、视频性能接口、分布式音乐系统和进程间通信等领域，在实验音乐控制器中更是必不可少。</p><p>那么怎么使用 OSC 传输数据呢？</p><p>在触摸设备如 iOS 上，用 <a href="https://hexler.net/software/touchosc" target="_blank" rel="noopener">TouchOSC</a> 最方便不过了(不过要收费)。</p><p><img src="https://hexler.net/gfx/_software/touchosc-11.png" alt=""></p><p>在移动端下载 TouchOSC，在桌面端下载编辑器，在编辑器里面可以创建自定义的操作面板。然后在移动端设置输入和输出端口。接下来就可以在 Max/MSP 里面接收和发送 OSC 数据了。因为 OSC 通过 UDP 协议传输，所以使用 <code>udpsend</code> 和 <code>udpreceive</code> 对象：</p><p><img src="http://img.viz.mobi/touchOSC2Max.jpg" alt=""></p><p>Max 接收到数据后，可以看到 OSC 的数据格式类似文件路径 URI：<code>/{序号}/{参数名} {参数值}</code>。</p><p>这样我们就把手机和电脑连接起来，并且在手机上实现个性化的控制。</p><p>除了移动端的 TouchOSC，<a href="https://osculator.net/" target="_blank" rel="noopener">OSCulator</a> 也是一款好用的 OSC 控制器，感兴趣的同学可以自行研究一下。</p><p>当然，Arduino 和 Max 也是可以方便地勾搭上的：</p><p><img src="http://img.viz.mobi/ardumax-demo.jpg" alt=""></p><p>本周的作业，是研究 Arduino 如何触发 Ableton 或 Max 里面的声音采样，以及<a href="https://github.com/CNMAT/OSC" target="_blank" rel="noopener">如何使用 OSC 跟 Arduino 通信</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/week7title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="制造" scheme="http://uegeek.com/tags/%E5%88%B6%E9%80%A0/"/>
    
      <category term="Maker" scheme="http://uegeek.com/tags/Maker/"/>
    
      <category term="Digital Fabrication" scheme="http://uegeek.com/tags/Digital-Fabrication/"/>
    
      <category term="Fab" scheme="http://uegeek.com/tags/Fab/"/>
    
      <category term="Arduino" scheme="http://uegeek.com/tags/Arduino/"/>
    
      <category term="电路" scheme="http://uegeek.com/tags/%E7%94%B5%E8%B7%AF/"/>
    
      <category term="通信" scheme="http://uegeek.com/tags/%E9%80%9A%E4%BF%A1/"/>
    
      <category term="MIDI" scheme="http://uegeek.com/tags/MIDI/"/>
    
      <category term="OSC" scheme="http://uegeek.com/tags/OSC/"/>
    
      <category term="Max" scheme="http://uegeek.com/tags/Max/"/>
    
  </entry>
  
  <entry>
    <title>三维制图讲义04 - 基础几何体</title>
    <link href="http://uegeek.com/190327-3d04-basic-geometry.html"/>
    <id>http://uegeek.com/190327-3d04-basic-geometry.html</id>
    <published>2019-03-27T06:54:02.000Z</published>
    <updated>2019-03-27T06:55:10.907Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/3d_course_title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190306-3d01-welcome-to-the-3d-world.html" target="_blank" rel="noopener">三维制图讲义01 - 欢迎来到三维世界</a></p><p><a href="https://www.uegeek.com/190314-3d02-workflow.html" target="_blank" rel="noopener">三维制图讲义02 - 三维制作流程</a></p><p><a href="https://www.uegeek.com/190320-3d03-blender-intro.html" target="_blank" rel="noopener">三维制图讲义03 - 三维软件和Blender介绍</a></p><h2 id="快速回顾"><a href="#快速回顾" class="headerlink" title="快速回顾"></a>快速回顾</h2><p>上一节课，我们介绍了 Blender 软件的下载、安装、设置和基本界面组成。</p><p>接着练习了视图的变换：</p><ul><li>围绕着兴趣点旋转视图：按下鼠标中键并移动</li><li>缩放视图：滚轮鼠标中键</li><li>平移视图：Shift+按下鼠标中键</li><li>正/右/顶视图切换：如果没有小键盘，需要先在设置中修改快捷键，比如我一般设置 Alt 1 / Alt3 / Alt7 为正/右/顶视图</li></ul><p>然后练习了最基本的几何体操作：位移、旋转和缩放（TRS）。</p><p><img src="http://img.viz.mobi/Blender_move.jpg" alt=""></p><p>特别需要练习的是，沿着某个轴做以上操作。当我们熟练使用界面中的辅助手柄来移动、旋转和缩放以后，还可以进一步使用鼠标来加速操作，毕竟这是最常使用的操作：</p><ul><li>按一下 G/R/S 键后，再按一下需要沿着哪个轴移动，比如沿着 x 轴就按下 x 键，然后移动物体；</li><li>或者配合鼠标中键使用：按下 G 键后，按住鼠标中键，沿着坐标轴参考线移动，物体就会只沿着这条坐标轴移动</li></ul><p>在这个基础上，我们加入<strong>复制并移动的练习</strong>：</p><ul><li>选中几何体(非编辑状态)</li><li>按 shift+D 复制一个一模一样的几何体</li><li>沿坐标轴移动到某处(配合鼠标中键使用)</li><li>需要对齐多个几何体时，需要切换为正/侧/顶视图查看</li><li>将几何体 translate 到合适的地方</li></ul><h2 id="几何体"><a href="#几何体" class="headerlink" title="几何体"></a>几何体</h2><p>当我们第一次打开 Blender 软件的时候，会看到编辑视图中央有一个立方体。如果我们按下 shift+A，会弹出添加菜单，在 mesh 选项里面，会有一系列选项，它们就是最最基本的几何体：平面、立方体、圆形、球体、圆柱体、圆锥体、圆环。</p><p><img src="http://jayanam.com/wp-content/uploads/2015/05/add_torus.jpg" alt=""></p><p>万丈高楼平地起。基础几何体就是万丈高楼的基本模块。</p><p>观察下面的几何体，想想在日常生活中，能见到哪些物品拥有类似的形状：</p><p><img src="http://img.viz.mobi/85715889-set-of-basic-3d-geometric-shapes-geometric-solids-vector-isolated-on-a-white-background-.jpg" alt=""></p><p>用不同的基础几何体组合，几乎可以搭出任意的形状。乐高就是最好的例子：</p><p><img src="http://img.viz.mobi/lego_bricks_pieces_02.jpg" alt=""></p><p>乐器？没问题啊~</p><p><img src="https://aintbaroque.files.wordpress.com/2012/11/nanoblocks.jpg" alt=""></p><p>练习观察几何体的构成，可以从方方正正的物体开始。比如上面的乐高钢琴，是由哪几部分组成的？不规则的形状可以由哪些比较规则的形状拼接而成？</p><p>除了观察，还可以通过游戏来训练三维的想象力和直觉！比如，三维俄罗斯方块，二维玩得再溜，刚接触三维版本也会觉得自己手残：</p><p><img src="https://www.androidsis.com/wp-content/uploads/2016/12/kubik-juego.jpg" alt=""></p><p>以后再玩跳一跳、纪念碑谷游戏，尤其是后者，记得仔细观察精美场景中的三维构造哦！</p><p><img src="http://n.sinaimg.cn/tech/crawl/w550h488/20180102/xZKm-fyqefvx0379699.jpg" alt=""></p><p><img src="http://www.domarketing.cn/uploadfile/2017/1120/20171120113509137.jpg" alt=""></p><p>而且，在现实世界中看到好玩有趣的物品，要留意它的不同侧面都长什么样子：</p><p><img src="http://img.viz.mobi/b23af8da78874d7d920823b86e2cb1f3.jpg" alt=""></p><h2 id="Blender-练习"><a href="#Blender-练习" class="headerlink" title="Blender 练习"></a>Blender 练习</h2><p>编辑模式点线面选择切换。</p><p>选中几何体后，按快捷键 Tab 进入编辑模式。这时候会看到物体变为橙色，顶点、边和面都跟物体状态时不太一样。</p><p>在编辑状态下，按键盘 1、2、3 键（或者点界面中模式选择右边的三个图标），可以切换为 点选择、边选择、面选择状态。</p><p>点选择（编辑模式下按1键）：</p><p><img src="http://img.viz.mobi/Blender_point_select.jpg" alt=""></p><p>面选择（编辑模式下按3键）：</p><p><img src="http://img.viz.mobi/Blender_face_select.jpg" alt=""></p><p>接下来，我们可以将点、线、面选择，跟位移、旋转、缩放结合起来练习：</p><ul><li>切换到点选择模式（编辑模式下按 1 键），选中点，进行移动（G）(包括沿轴的操作)</li><li>切换到边选择模式（编辑模式下按 2 键），选中多条边，进行旋转（R）(包括沿轴的操作)</li><li>切换到面选择模式（编辑模式下按 3 键），选中多个面，进行缩放（S）(包括沿轴的操作)</li></ul><p><img src="http://img.viz.mobi/Blender_edit.jpg" alt=""></p><p>完成了立方体的修改以后，再结合上一节的知识，用三个形状不一样的几何体，做成 3X3X3 的几何体矩阵，并且截下正/侧/斜面三张图，记录过程中的心得。</p><p>你已经开始创造属于自己的作品了 😀，加油~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/3d_course_title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="3D" scheme="http://uegeek.com/tags/3D/"/>
    
      <category term="Modeling" scheme="http://uegeek.com/tags/Modeling/"/>
    
      <category term="Blender" scheme="http://uegeek.com/tags/Blender/"/>
    
      <category term="Geometry" scheme="http://uegeek.com/tags/Geometry/"/>
    
  </entry>
  
  <entry>
    <title>数字制造讲义04-负责输入和输出的智能元件</title>
    <link href="http://uegeek.com/190326-df04-input-and-output.html"/>
    <id>http://uegeek.com/190326-df04-input-and-output.html</id>
    <published>2019-03-26T14:32:56.000Z</published>
    <updated>2019-03-26T14:35:06.137Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/week7title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190305-df01-digital-fabrication.html" target="_blank" rel="noopener">数字制造讲义01-成为数字世界的建造者</a><br><a href="https://www.uegeek.com/190313-df02-arduino-intro.html" target="_blank" rel="noopener">数字制造讲义02-Arduino入门</a><br><a href="https://www.uegeek.com/190319-df03-electronics-basic.html" target="_blank" rel="noopener">数字制造讲义03-电路基础</a></p><h2 id="快速回顾"><a href="#快速回顾" class="headerlink" title="快速回顾"></a>快速回顾</h2><p>让我们先回顾<a href="https://www.uegeek.com/190319-df03-electronics-basic.html" target="_blank" rel="noopener">上节课的内容</a>。</p><p>电路是由导体和元件组成的回路，电流可以在其中流动。电路有三种状态：通路，开路（某处断开）和短路。</p><p><img src="http://img.viz.mobi/3typesofCircuits.png" alt=""></p><p>闭合回路在同一点开始和结束，形成一个完整的循环，允许电力不间断地从（+）电源流到（ - ）地。短路是指，电路中有很大电流流过，但不流过负载，负载不起作用。</p><p><img src="https://i0.wp.com/www.makerspaces.com/wp-content/uploads/2017/05/led-switch-schematic-diagram.jpg?zoom=2&amp;resize=563%2C477&amp;ssl=1" alt=""></p><p>电路图通过符号表示电子元件及其位置。</p><p>电阻器通常用于限流，我们用欧姆定律计算电路中所需电阻阻值。更复杂的电路则需要用基尔霍夫定律。</p><h2 id="电路类型"><a href="#电路类型" class="headerlink" title="电路类型"></a>电路类型</h2><p>有了基本的电路元件，我们可以构建出不同类型的电路。除了通路、开路和短路，电路还有其他的分类方法。</p><p>比如，从构成来分，可以分为电气电路和电子电路两大类。电气电路由电阻、线圈、电容组成。电子电路除了电阻、线圈和电容之外，还包括晶体管和二极管等半导体元件。</p><p>按照功能来分，又分为以下类型的电路：</p><p><strong>放大电路</strong>：用于增大输入信号并且输出，例如常见的 Amplifier/功放</p><p><strong>振荡电路</strong>：使电路在没有输入信号时也能产生交流信号</p><p><strong>调制电路</strong>：可以调制振幅大小(AM)或频率(FM)的电路</p><p><img src="https://www.saysyou.net/wp-content/uploads/2017/06/AM-FM-gif.gif" alt=""></p><p><strong>检波电路</strong>：从信号中提取声音等（调幅波解调）</p><p><img src="https://www.st-andrews.ac.uk/~www_pa/Scots_Guide/RadCom/part9/fig2.gif" alt=""></p><p><strong>滤波器</strong>：提取指定频段的信号</p><p><img src="http://designer.mech.yzu.edu.tw/articlesystem/article/compressedfile/(2003-01-05" alt="">%20%E6%BF%BE%E6%B3%A2%E6%8A%80%E8%A1%93%E7%B0%A1%E4%BB%8B.files/image005.gif)</p><p><strong><a href="https://www.wikiwand.com/zh/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8" target="_blank" rel="noopener">运算放大器</a></strong>：能产生一个比输入端电势差大数十万倍的输出电势（对地而言）。集成电路的一种，输入输出互不影响。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/97/Op-amp_symbol.svg/400px-Op-amp_symbol.svg.png" alt=""></p><p><strong>逻辑电路</strong>：计算加法、乘法、记忆数字/文字</p><p><img src="http://wiki.jikexueyuan.com/project/mcu-tutorial-one/images/59.png" alt=""></p><p><strong>电源电路</strong>：交流直流电转换</p><h2 id="我有千里眼，你有顺风耳吗？"><a href="#我有千里眼，你有顺风耳吗？" class="headerlink" title="我有千里眼，你有顺风耳吗？"></a>我有千里眼，你有顺风耳吗？</h2><p>在初学电子电路知识时，很容易被种类繁多的电子元件搞晕。想要一种一种元件学习，不是不可能，但是没必要。我们需要提醒自己，学习电路的目标是做出自己需要的东西，带有功能和互动的装置。</p><p>电子元件虽然名目繁多，但是从用途来分，除了上节课介绍过的基本元件，接下来就是这节课要学习的两大类：输入类和输出类。</p><p><strong>输入类元件帮助我们感知和获取环境中的信息/状态，输出类元件负责向环境施加影响</strong>，例如展示数字/图像、移动物体等等。</p><p><img src="http://www.teachhub.com/sites/default/files/field/image/technology-in-the-classroom-human-body-websites.jpg" alt=""></p><p>想象一下人体，可以类比为装备着强大输入输出设备的智能体。输入设备包括眼睛、鼻子、耳朵、皮肤等，可以感知并接收图像、运动物体、声音、气味、压力等等复杂多样的信息。而输出设备包括嘴巴、身体关节和肌肉等，可以发出声音、做动作、移动物体等等。</p><p>当然，电子元件能够做的事情就更多了，比如，测量土壤湿度、测量脉搏、获取蓝牙信号等等。这些由各显神通的元器件来实现。</p><h2 id="输入设备"><a href="#输入设备" class="headerlink" title="输入设备"></a>输入设备</h2><p>我们借助输入设备，实时获取环境中的各种信息。</p><h3 id="开关"><a href="#开关" class="headerlink" title="开关"></a>开关</h3><p>开关也是一种设备？没错，电路本身就是一个小环境，这个小环境最重要的状态之一，就是电路是否形成通路。(聪明的你应该意识到，开关同时也是一种输出设备)</p><p>不要小看了开关，它有多种类型，可以控制多种状态。比如有按钮类型的，toggle 类型的，还有开关组：</p><p><img src="http://img.viz.mobi/8-parts-switch.jpg" alt=""></p><h3 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h3><p>检测环境中声音大小的元件(更高级一些的可以提取声音包络，或者做语音识别)。猜猜看，这类元件价格是多少？</p><p><img src="http://img.viz.mobi/9-15219.jpg" alt=""></p><h3 id="距离"><a href="#距离" class="headerlink" title="距离"></a>距离</h3><p>超声波传感器的本领，是不断发出探测距离的超声波，计算并报告元件距离目标物体(障碍)的距离：</p><p><img src="https://www.allelectronics.com/mas_assets/cache/image/3/b/5/5/480x480-15189.Jpg" alt=""></p><h3 id="温度"><a href="#温度" class="headerlink" title="温度"></a>温度</h3><p>测量温度的元件大多数都是热敏电阻，也就是阻值随着温度发生变化。</p><p><img src="http://img.viz.mobi/11-parts-Thermistors.jpg" alt=""></p><h3 id="光照"><a href="#光照" class="headerlink" title="光照"></a>光照</h3><p>测量光照亮度的元件大多数都是光敏电阻，也就是阻值随着亮度发生变化。</p><p><img src="http://img.viz.mobi/12-parts-Photoresistors.jpg" alt=""></p><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><p>想要识别物体，首先要获取图像。摄像头就是最常见的设备。现在的摄像头已经做到体积微小、成像高清。</p><p><img src="https://www.circuitspecialists.com/content/448097/CAMERA-MICRO-0.jpg" alt=""></p><p>另外一种传感器可以专门检测 RGB 的颜色值：</p><p><img src="https://www.circuitspecialists.com/content/172210/color-01-1.jpg" alt=""></p><h3 id="压力"><a href="#压力" class="headerlink" title="压力"></a>压力</h3><p>压电传感器用来检测振动或敲击。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/c/c4/SchemaPiezo.gif" alt=""></p><p><img src="http://img.viz.mobi/16-16808.jpg" alt=""></p><h3 id="磁场"><a href="#磁场" class="headerlink" title="磁场"></a>磁场</h3><p>我们常见的磁铁也是一种电子元件哦~</p><p><img src="http://img.viz.mobi/17-NEODYMIUM_MAGNET.jpg" alt=""></p><p>霍尔效应传感器也称霍尔传感器，是一个换能器，将变化的磁场转化为输出电压的变化。</p><p><img src="https://www.allelectronics.com/mas_assets/cache/image/4/1/e/8/480x480-16872.Jpg" alt=""></p><h3 id="红外"><a href="#红外" class="headerlink" title="红外"></a>红外</h3><p>互动装置总是少不了人的参与，其中经常会用到的一个元件，是检测某个距离内是否有人出现的红外传感器。</p><p><img src="https://www.allelectronics.com/mas_assets/cache/image/3/b/8/a/480x480-15242.Jpg" alt=""></p><h3 id="应变计"><a href="#应变计" class="headerlink" title="应变计"></a>应变计</h3><p>应变计是电阻随作用力变化的传感器；它将力、压力、张力、重量等物理量转化为电阻的变化，从而测量这些物理量。当外力作用于固定物体时，就会产生应力和应变。物体内部产生的（对外力的）反作用力即为应力，产生的位移和形变即为应变。</p><p><img src="http://img.viz.mobi/20-StrainGage.jpg" alt=""></p><p>例如基于应变计的称重传感器，将力转换为可测量的电信号输出的传感器。</p><h3 id="加速计"><a href="#加速计" class="headerlink" title="加速计"></a>加速计</h3><p>加速计（accelerometer）也叫重力感应器，是测量加速度的装置。相对于远距感测的装置，它测量的是自身组件在某个轴向的受力情况，表现形式为轴向的加速度大小和方向（XYZ）。这有点类似于陀螺仪，但陀螺仪的更多关注自身旋转情况，加速计则主要是测量受力情况，也就是三轴运动情况，更适合用于空间运动判断。</p><p><img src="http://img.viz.mobi/21-part-ACCELEROMETER.jpg" alt=""></p><p>陀螺仪（gyroscope）是一种基于角动量守恒理论感测与维持方向的装置。三轴陀螺仪的工作原理，是通过测量三维坐标系内陀螺转子的垂直轴与设备之间的夹角，并计算角速度，通过夹角和角速度来判别物体在三维空间的运动状态。三轴陀螺仪可以同时测定上、下、左、右、前、后等6个方向，最终可判断出设备的移动轨迹和加速度。</p><p>常见的体感游戏机、手机里都有这种元件。</p><p><img src="http://img.viz.mobi/22-pry-wiimote.gif" alt=""></p><h3 id="机器视觉"><a href="#机器视觉" class="headerlink" title="机器视觉"></a>机器视觉</h3><p>前面提到了获取图像的元件，也就是常见的摄像头。不过我们更常见的需求是用摄像头识别某些东西，比如人脸、比如让机器人拥有视力。所以，机器视觉相关的硬件和软件也是我们可能会用到的工具。</p><p>机器视觉是人工智能中一个重要的研究领域，相关的算法一直在改进。<a href="https://opencv.org/" target="_blank" rel="noopener">OpenCV</a> 就是使用最为广泛的机器视觉开源库，它提供了实时识别形状和物体的能力，许多机器视觉的应用都是在它的基础上改进实现的。</p><p>当然，也有一些硬件已经集成了特定的视觉能力。</p><p>比如 <a href="https://openmv.io/" target="_blank" rel="noopener">OpenMV</a> 项目提供低成本、可扩展、支持 Python 的机器视觉模块，成为「机器视觉的 Arduino」：</p><p><img src="https://cdn.shopify.com/s/files/1/0803/9211/products/web-new-cam-v2-angle_grande.jpg?v=1479601839" alt=""></p><p>又比如 Pixy2 摄像头，能通过简单的训练快速识别物体：</p><p><img src="![](https://pixycam.com/wp-content/uploads/2018/05/IMG_5269_result.jpg" alt="">)</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=s0753ulknzo" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/s0753ulknzo.html" target="_blank" rel="noopener">Pixy2摄像头图像识别</a></p><h2 id="输出设备"><a href="#输出设备" class="headerlink" title="输出设备"></a>输出设备</h2><p>看了这么多输入元件，是不是觉得人对环境的感知能力得到极大的扩展？这样我们可以收集无数来自环境的实时信息。接着，我们处理这些信息，或者设定一些规则，达到某些条件的时候，就自动去做某些事情。这就是智能硬件的基本原理。并不难，对吧？</p><p>接下来我们就了解一下输出设备，看看如果要对环境施加影响，我们都有哪些能力可以使用。</p><h3 id="LED"><a href="#LED" class="headerlink" title="LED"></a>LED</h3><p>严格来说，单个 LED 不算一类输出设备。但是它实在太常用了，而且多个 LED 组合起来，就可以成为可能性无穷的输出显示屏。</p><p><img src="http://img.viz.mobi/25-part-LEDdisplay.jpg" alt=""></p><h3 id="LCD"><a href="#LCD" class="headerlink" title="LCD"></a>LCD</h3><p>跟 LED 对应的还有另外一种专门用于显示的屏幕——LCD (Liquid Crystal Displays)。</p><p><img src="http://img.viz.mobi/26-part-LCD.jpg" alt=""></p><h3 id="扬声器"><a href="#扬声器" class="headerlink" title="扬声器"></a>扬声器</h3><p>视觉的输出设备有了，接下来是听觉。那就是各种扬声器，也就是喇叭了。</p><p><img src="http://img.viz.mobi/27-part-speaker.jpg" alt=""></p><h3 id="电机-马达"><a href="#电机-马达" class="headerlink" title="电机/马达"></a>电机/马达</h3><p>听和看都有了，那么接下来就是运动了。运动涉及到物理位移，我们需要借助电机来完成。</p><p>电机有非常多种，分类也各不相同，比如<a href="https://www.zhihu.com/question/24086069" target="_blank" rel="noopener">直流电机（DC Moter）和交流电机</a>。</p><p>在 DIY 装置中，常用到伺服电机、步进电机和舵机这几种。</p><p><strong>伺服电机</strong>：闭环控制，即通过传感器实时反馈电机的运行状态，由控制芯片进行实时调节。</p><p><img src="http://www.tedmotors.com/Archive/_cn/products/G0228/1607185816.jpg" alt=""></p><p><strong>步进电机</strong>：开环控制，接收的是电脉冲信号，根据信号数量转过相应的步距角（角位移）。</p><p><img src="https://www.allelectronics.com/mas_assets/cache/image/4/2/5/5/480x480-16981.Jpg" alt=""></p><p><strong>舵机</strong>：是伺服电机在航模、小型机器人等领域下常用的一个特殊版本</p><p><img src="https://www.allelectronics.com/mas_assets/cache/image/4/5/b/1/480x480-17841.Jpg" alt=""></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>今天我们认识了很多新伙伴。你可能眼有点花，头有点昏。不要紧，在动手实践过程中会慢慢加深了解的。</p><p>现在，你已经踏上了自己折腾的旅程——有那么多好玩的东西等着你去搭建呢！</p><p><code>输入+Arduino+输出</code> 可以实现无数的组合，只要你愿意细心查看元件的说明，按照电路的原理去设计接线，使用 tinkercad 等工具来模拟和检查电路，并且编写一些 Arduino 代码，理论上就可以做出许许多多好玩的东西。</p><p><img src="http://blog.codebender.cc/wp-content/uploads/2014/03/intro__zps2d47d1b6.png" alt=""></p><p>嗯，理论只是理论。在实际动手的过程中，我们还会遇到这样那样的问题，可能是搞不懂某个元件的工作原理，可能电路总是出问题，可能是编程很吃力。这些都是成为 Maker 的过程中必不可少的锻炼。别忘记，我们还有 instructables、Arduino 等网站和社区，上面有海量的例子、项目和资料，是我们折腾路上很好的陪伴。</p><p>接下来就开始扑腾吧！享受淹没在新知中的缺氧感，享受遇到问题解决问题的痛苦，享受打完大小 boss 通关后的成就感。不要忘记跟大家分享你的点滴心得~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/week7title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="制造" scheme="http://uegeek.com/tags/%E5%88%B6%E9%80%A0/"/>
    
      <category term="Maker" scheme="http://uegeek.com/tags/Maker/"/>
    
      <category term="Digital Fabrication" scheme="http://uegeek.com/tags/Digital-Fabrication/"/>
    
      <category term="Fab" scheme="http://uegeek.com/tags/Fab/"/>
    
      <category term="Arduino" scheme="http://uegeek.com/tags/Arduino/"/>
    
      <category term="电路" scheme="http://uegeek.com/tags/%E7%94%B5%E8%B7%AF/"/>
    
      <category term="传感器" scheme="http://uegeek.com/tags/%E4%BC%A0%E6%84%9F%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>三维制图讲义03 - 三维软件和Blender介绍</title>
    <link href="http://uegeek.com/190320-3d03-blender-intro.html"/>
    <id>http://uegeek.com/190320-3d03-blender-intro.html</id>
    <published>2019-03-20T15:11:06.000Z</published>
    <updated>2019-03-20T16:14:27.040Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/3d_course_title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190306-3d01-welcome-to-the-3d-world.html" target="_blank" rel="noopener">三维制图讲义01 - 欢迎来到三维世界</a></p><p><a href="https://www.uegeek.com/190314-3d02-workflow.html" target="_blank" rel="noopener">三维制图讲义02 - 三维制作流程</a></p><p>三维软件实在太多了，到底该选哪一个？</p><p><img src="http://img.viz.mobi/3D_softwares.jpg" alt=""></p><p>我并不是资深从业者，用过的三维软件并不多。我只从个人需求出发：</p><ul><li>不贵，安装和维护简单</li><li>功能足够强大(不特别偏向工程制图/动画/三维雕塑)</li><li>软件还在持续改进中</li></ul><p>Blender 是比较理想的选择。开源、功能完善，安装和使用都比较轻巧，关键是，免费用正版啊：</p><p><img src="http://img.viz.mobi/3D_software_price.jpg" alt=""></p><p>如果是专业人士请直接忽略本文。或者移步 all3dp.com 在年初发布的一篇文章，介绍和比较了 30 款软件，其中 15 款为免费软件：</p><p><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#solidworks" target="_blank" rel="noopener">Best 3D Design/3D Modeling Software 2019 (15 of 30 are Free) | All3DP</a></p><table><thead><tr><th style="text-align:left">Name</th><th style="text-align:left">Level</th><th style="text-align:left">OS</th><th style="text-align:left">Price</th><th style="text-align:left">Formats</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#3d-slash" target="_blank" rel="noopener">3D Slash</a></td><td style="text-align:left">Beginner</td><td style="text-align:left">Windows, Mac, Linux, Raspberry Pi or Browser</td><td style="text-align:left">Free, 24$/year Premium</td><td style="text-align:left">3dslash, obj, stl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#librecad" target="_blank" rel="noopener">LibreCAD</a></td><td style="text-align:left">Beginner</td><td style="text-align:left">Windows, macOS and Linux</td><td style="text-align:left">Free</td><td style="text-align:left">dxf, dwg</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#photoshop-cc" target="_blank" rel="noopener">Photoshop CC</a></td><td style="text-align:left">Beginner</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">142€/year</td><td style="text-align:left">3ds, dae, kmz, obj, psd, stl, u3d</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#sculptgl" target="_blank" rel="noopener">SculptGL</a></td><td style="text-align:left">Beginner</td><td style="text-align:left">Browser</td><td style="text-align:left">Free</td><td style="text-align:left">obj, ply, sgl, stl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#selfcad" target="_blank" rel="noopener">SelfCAD</a></td><td style="text-align:left">Beginner</td><td style="text-align:left">Browser</td><td style="text-align:left">Free 30-day trial, 9.99$/month</td><td style="text-align:left">stl, mtl, ply, dae, svg</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#tinkercad" target="_blank" rel="noopener">TinkerCAD</a></td><td style="text-align:left">Beginner</td><td style="text-align:left">Browser</td><td style="text-align:left">Free</td><td style="text-align:left">123dx, 3ds, c4d, mb, obj, svg, stl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#clara-io" target="_blank" rel="noopener">Clara.io</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Browser</td><td style="text-align:left">Free, Premium features from 100$/year</td><td style="text-align:left">3dm, 3ds, cd, dae, dgn, dwg, emf, fbx, gf, gdf, gts, igs, kmz, lwo, rws, obj, off, ply, pm, sat, scn, skp, slc, sldprt, stp, stl, x3dv, xaml, vda, vrml, x_t, x, xgl, zpr</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#designspark" target="_blank" rel="noopener">DesignSpark</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows</td><td style="text-align:left">Freemium, 835$ (All Addons)</td><td style="text-align:left">rsdoc, dxf, ecad, idf, idb, emn, obj, skp, STL, iges, step</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#freecad" target="_blank" rel="noopener">FreeCAD</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows, Mac and Linux</td><td style="text-align:left">Free</td><td style="text-align:left">step, iges, obj, stl, dxf, svg, dae, ifc, off, nastran, Fcstd</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#makehuman" target="_blank" rel="noopener">MakeHuman</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows, Mac, Linux</td><td style="text-align:left">Free</td><td style="text-align:left">dae, fbx, obj, STL</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#meshmixer" target="_blank" rel="noopener">Meshmixer</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows, Mac and Linux</td><td style="text-align:left">Free</td><td style="text-align:left">amf, mix, obj, off, stl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#moment-of-inspiration-moi" target="_blank" rel="noopener">Moment of Inspiration (MoI)</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">266€</td><td style="text-align:left">3ds, 3dm, dxf, fbx, igs, lwo, obj, skp, stl, stp and sat</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#nanocad" target="_blank" rel="noopener">nanoCAD</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows</td><td style="text-align:left">Freemium, 180$/year</td><td style="text-align:left">sat, step, igs, iges, sldprt, STL, 3dm, dae, dfx, dwg, dwt, pdf, x_t, x_b, xxm_txt, ssm_bin</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#openscad" target="_blank" rel="noopener">OpenSCAD</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows, Mac and Linux</td><td style="text-align:left">Free</td><td style="text-align:left">dxf, off, stl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#sculptris" target="_blank" rel="noopener">Sculptris</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">Free</td><td style="text-align:left">obj, goz</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#sketchup" target="_blank" rel="noopener">SketchUp</a></td><td style="text-align:left">Intermediate</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">Free, 240$ Pro</td><td style="text-align:left">dwg, dxf, 3ds, dae, dem, def, ifc, kmz, stl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#3ds-max" target="_blank" rel="noopener">3ds Max</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows</td><td style="text-align:left">1505$/year, Educational licenses available</td><td style="text-align:left">stl, 3ds, ai, abc, ase, asm, catproduct, catpart, dem, dwg, dxf, dwf, flt, iges, ipt, jt, nx, obj, prj, prt, rvt, sat, skp, sldprt, sldasm, stp, vrml, w3d xml</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#autocad" target="_blank" rel="noopener">AutoCAD</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">1575$/year</td><td style="text-align:left">dwg, dxf, pdf</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#blender" target="_blank" rel="noopener">Blender</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows, Mac and Linux</td><td style="text-align:left">Free</td><td style="text-align:left">3ds, dae, fbx, dxf, obj, x, lwo, svg, ply, stl, vrml, vrml97, x3d</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#cinema-4d" target="_blank" rel="noopener">Cinema 4D</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows, macOS</td><td style="text-align:left">3695$</td><td style="text-align:left">3ds, dae, dem, dxf, dwg, x, fbx, iges, lwf, rib, skp, stl, wrl, obj</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#modo" target="_blank" rel="noopener">modo</a></td><td style="text-align:left">Professionals</td><td style="text-align:left">Windows, macOS, Linux</td><td style="text-align:left">1799$</td><td style="text-align:left">lwo, abc, obj, pdb, 3dm, dae, fbx, dxf, x3d, geo, stl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#mudbox" target="_blank" rel="noopener">Mudbox</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">85€/year</td><td style="text-align:left">fbx, mud, obj</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#onshape" target="_blank" rel="noopener">Onshape</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows, Mac, Linux, iOS, Android</td><td style="text-align:left">2400€/year, free and price reduced business version available</td><td style="text-align:left">sat, step, igs, iges, sldprt, stl, 3dm, dae, dfx, dwg, dwt, pdf, x_t, x_b, xxm_txt, ssm_bin</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#poser" target="_blank" rel="noopener">Poser</a></td><td style="text-align:left">Professionals</td><td style="text-align:left">Windows, Mac</td><td style="text-align:left">Standard 129.99$, Pro 349.99$</td><td style="text-align:left">cr2, obj, pz2</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#rhino3d" target="_blank" rel="noopener">Rhino3D</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">495€ Educational, 995€ Commercial</td><td style="text-align:left">3dm, 3ds, cd, dae, dgn, dwg, emf, fbx, gf, gdf, gts, igs, kmz, lwo, rws, obj, off, ply, pm, sat, scn, skp, slc, sldprt, stp, stl, x3dv, xaml, vda, vrml, x_t, x, xgl, zpr</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#zbrush" target="_blank" rel="noopener">ZBrush</a></td><td style="text-align:left">Professional</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">400€ Educational License, 720€ Single User License</td><td style="text-align:left">dxf, goz, ma, obj, stl, vrml, x3d</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#catia" target="_blank" rel="noopener">CATIA</a></td><td style="text-align:left">Industrial</td><td style="text-align:left">Windows</td><td style="text-align:left">7180€; Educational licenses available</td><td style="text-align:left">3dxml, catpart, igs, pdf, stp, stl, vrml</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#fusion-360" target="_blank" rel="noopener">Fusion 360</a></td><td style="text-align:left">Industrial</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">499.80€/year, Educational licenses available</td><td style="text-align:left">catpart, dwg, dxf, f3d, igs, obj, pdf, sat, sldprt, stp</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#inventor" target="_blank" rel="noopener">Inventor</a></td><td style="text-align:left">Industrial</td><td style="text-align:left">Windows and Mac</td><td style="text-align:left">1935$/year</td><td style="text-align:left">3dm, igs, ipt, nx, obj, prt, rvt, sldprt, stl, stp, x_b, xgl</td></tr><tr><td style="text-align:left"><a href="https://all3dp.com/1/best-free-3d-modeling-software-3d-cad-3d-design-software/#solidworks" target="_blank" rel="noopener">Solidworks</a></td><td style="text-align:left">Industrial</td><td style="text-align:left">Windows</td><td style="text-align:left">9950€, Educational licenses available</td><td style="text-align:left">3dxml, 3dm, 3ds, 3mf, amf, dwg, dxf, idf, ifc, obj, pdf, sldprt, stp, stl, vrml</td></tr></tbody></table><p>下载 Blender 请到官网 blender.org 选择 2.80 版本。不推荐之前的版本，是因为 2.8 版本的调整实在太大了，几乎对整个软件各方面都做了一些重构。尤其是加入了实时渲染的 eevee 引擎，用上就已经回不去之前的版本了……</p><p>Blender 官网每天会发布新的测试版(迭代速度真的飞快)。下载后找到应用程序直接打开就可以使用。</p><p>打开软件后，可以先按需做一些设置，比如显示中文菜单、修改小键盘相关的快捷键：</p><ul><li>语言选择：顶部菜单-Edit-Preferences-Interface-Translation</li><li>鼠标/键盘快捷键设置：顶部菜单-Edit-Preferences-Keymap</li></ul><p><img src="http://img.viz.mobi/Blender_language.png" alt=""></p><p>学习 Blender，最重要的是反复练习。在这个系列课程讲义中，我不会详细讲解怎么使用软件，网上已经有相当多很棒的视频教程了。</p><p>我会尝试提供一些基本的练习清单，也就是帮助大家去拆解需要训练的技能。</p><p>这一周涉及的技能模块是最基础也是最重要的，因为它们的组合构成了 Blender (包括在其他三维软件里) 大部分的操作。</p><h3 id="视图浏览"><a href="#视图浏览" class="headerlink" title="视图浏览"></a>视图浏览</h3><p>围绕着兴趣点旋转视图：按下鼠标中键并移动</p><p>缩放视图：滚轮鼠标中键</p><p>平移视图：Shift+按下鼠标中键</p><p>正/右/顶视图切换：如果没有小键盘，需要先在设置中修改快捷键，比如我一般设置 Alt 1 / Alt3 / Alt7 为正/右/顶视图</p><h3 id="物体移动-旋转-缩放"><a href="#物体移动-旋转-缩放" class="headerlink" title="物体移动+旋转+缩放"></a>物体移动+旋转+缩放</h3><p>非快捷键操作：先选中物体，然后在左侧工具栏选择 移动/选择/缩放 工具，然后操作</p><p><img src="http://img.viz.mobi/Blender_move.jpg" alt=""></p><p>快捷键操作：先选中物体，然后按一下 G 键，移动鼠标就会看到物体会跟随移动。移到目标位置后，点鼠标左键，物体就确认移动。</p><p>但是在移动时，我们经常需要只沿着某个轴(x轴辅助线为红色，y轴辅助线为绿色，z轴辅助线为蓝色)移动。</p><p>这个操作又有两种做法</p><ul><li>按一下 G/R/S 键后，再按一下需要沿着哪个轴移动，比如沿着 x 轴就按下 x 键，然后移动物体；</li><li>或者配合鼠标中键使用：按下 G 键后，按住鼠标中键，沿着坐标轴参考线移动，物体就会只沿着这条坐标轴移动</li></ul><p>确认移动都是点击鼠标左键。</p><p>沿着某个轴旋转和缩放也是类似的操作。</p><ul><li>比如，沿 x 轴旋转：r - x - 移动鼠标 - 按鼠标左键确认</li><li>比如，沿 z 轴缩放：s - z - 移动鼠标 - 按鼠标左键确认</li></ul><p>以上就是这节课的主要练习：用不同的视图查看物体，移动/旋转/缩放物体。</p><p>记得多练习几次哦，下周见~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/3d_course_title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="3D" scheme="http://uegeek.com/tags/3D/"/>
    
      <category term="Modeling" scheme="http://uegeek.com/tags/Modeling/"/>
    
      <category term="Blender" scheme="http://uegeek.com/tags/Blender/"/>
    
  </entry>
  
  <entry>
    <title>数字制造讲义03-电路基础</title>
    <link href="http://uegeek.com/190319-df03-electronics-basic.html"/>
    <id>http://uegeek.com/190319-df03-electronics-basic.html</id>
    <published>2019-03-19T14:47:16.000Z</published>
    <updated>2019-03-19T15:11:34.114Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/week7title.jpg" alt=""></p><a id="more"></a><p><a href="https://www.uegeek.com/190305-df01-digital-fabrication.html" target="_blank" rel="noopener">数字制造讲义01-成为数字世界的建造者</a></p><p><a href="https://www.uegeek.com/190313-df02-arduino-intro.html" target="_blank" rel="noopener">数字制造讲义02-Arduino入门</a></p><p>上一节课，我们学习了时下最普及的单片机开发软硬件工具 Arduino。今天我们来了解 Arduino 开发板，以及其他电子元器件背后的基础——电路。</p><p>上次我们用 Arduino 和面包板搭了第一个简单的电路，了解到电路就是电流的通路，电流给电路中的负载输送能量，负载将电能转化为其他能量，比如💡亮起来。</p><p><img src="http://img.viz.mobi/circuitMetaphor.jpg" alt=""></p><h2 id="电路101"><a href="#电路101" class="headerlink" title="电路101"></a>电路101</h2><p>如果把电流比作水流，那么电路就有点像为水流提供通路的水渠。在没有人为干预的情况下，水从高处向地处流。如果想给不同高度的地方提供用水，就需要建造水塔，或者用水泵把水从 A 处运送到 B 处。</p><p>电流也是类似。电源是电位/电压的高点，接地点是电位的零基准点，电流由两点之间的电压差形成，从电压高的地方流量电压低的地方。</p><p><img src="http://img.viz.mobi/currentIllustration.jpg" alt=""></p><p>在流动的过程中，河床或水渠不可能绝对平整，而是会坑坑洼洼高低起伏，这样就对水流产生了一些阻碍作用。在电路中也是类似，电阻对电路产生阻力 (通过将电能转化为热能)。</p><p>简单来说，电路有三种状态：通路，开路（某处断开）和短路。</p><p><img src="http://img.viz.mobi/3typesofCircuits.png" alt=""></p><p>其中短路是指，电路中有很大电流流过，但不流过负载，负载不起作用。咳咳，也就是说，在电路中走捷径是有代价的（🤦‍♀️）。</p><p>下面这个视频，可以帮助我们形成对电路更直观的印象：</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=b0850foexnn" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/b0850foexnn.html" target="_blank" rel="noopener">Electric Circuits_腾讯视频</a></p><p>从电流/水流的类比中，我们总结出电路中几个基本的规律：</p><ul><li>电流趋向于电阻小的路径 (最小阻力原则)</li><li>电路始终要接地 (有始有终原则)</li><li>要防止短路 (有钱也不能任性原则)</li></ul><h2 id="电路102"><a href="#电路102" class="headerlink" title="电路102"></a>电路102</h2><h3 id="串联和并联"><a href="#串联和并联" class="headerlink" title="串联和并联"></a>串联和并联</h3><p>电路有两种基本类型：串联和并联。</p><p>为什么要学这个？因为它们是计算电路中电阻、电流等数值的基础知识。比如，要点亮多个 LED，需要多少伏的电源？</p><p>当多个元件串联（下图图二）时，会平均「瓜分」掉整段串联电路两端的电压，也就是起到分压作用。当多个元件并联时(下图图三)，「复制」了原本只有 1 个元件时的电压。</p><p><img src="http://img.viz.mobi/Series%20and%20Parallell%20Circuits.png" alt=""></p><p>via tinkercad.com</p><p>再仔细观察一下，对比图一，为什么图二中的 LED 几乎没有亮？图三的 LED 为什么稍微暗一点？(图中的电阻都是 60Ω)</p><p>在图一中，我们测到点亮 LED 所需的电压约为 2V。如果要在串联电路中点亮两个 LED，那么根据「瓜分」原理，就需要提供 4V 的电压。但是图二的电池只有 3V，所以灯就点不亮啦。</p><p>在图三中，如果用万用表测量 LED 两端的电压，会发现电压只稍微下降到 1.9x V，LED 只是稍微变暗一点，接入很多 LED 也可以点亮。</p><h3 id="欧姆定律"><a href="#欧姆定律" class="headerlink" title="欧姆定律"></a>欧姆定律</h3><blockquote><p>V = I * R</p><p>流过电阻的电流 I 与电阻两端电压 U 成正比，与电阻 R 成反比</p></blockquote><p>大家对欧姆定律都不陌生。那么知道欧姆定律在这门课中，最直接的应用是什么？它帮助我们计算电路中需要用多少阻值的电阻。</p><p>在前面一部分，我们讲过要防止短路。短路的本质就是电路中有很大的电流通过，这样会烧坏电路元件。电阻的作用是限制电流的大小，保护元件，保持电路正常运作。</p><p>比如一个 LED 的额定电流是 20 mA，我们手头只有一个 9V 电池。</p><p><img src="http://img.viz.mobi/shortCircuit.png" alt=""></p><p>如果要保证 LED 安全，电路的阻值应该为 <code>9V / 0.02A=450Ω</code> 。这样我们就知道应该选择多少阻值的电阻加入到电路中了。</p><h3 id="基尔霍夫定律"><a href="#基尔霍夫定律" class="headerlink" title="基尔霍夫定律"></a>基尔霍夫定律</h3><p>基尔霍夫定律？有什么用？</p><p>我们已经有欧姆定律了，为什么还需要多一个定律？因为电路也是会变得很复杂的嗯，比如有多个电池并联，比如要在电阻电路中加入电容(下一节会介绍)，那该怎么计算其中的电流与电压？</p><p>19世纪，德国物理学家基尔霍夫扩展了欧姆定律，提出基尔霍夫定律：</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=g0359uuom6b" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/g0359uuom6b.html" target="_blank" rel="noopener">Crash Course Physics 31_腾讯视频</a></p><p>基尔霍夫第一定律(电流定律) </p><blockquote><p>在任何一个节点电路，流入该节点的总和电流，等于流出该节点的电流的总和，或：所有进入某节点的电流总和,等于所有离开这节点的电流总和。</p><p>power: P = I<sup>2</sup> , R = I V</p></blockquote><p>基尔霍夫第二定律(电压定律)</p><blockquote><p>沿着闭合回路所有元件两端的电势差（电压）的代数和等于零。或者，所有电动势的代数和，等于所有电压降的代数和。</p></blockquote><h2 id="基本电路元件"><a href="#基本电路元件" class="headerlink" title="基本电路元件"></a>基本电路元件</h2><p><img src="http://img.viz.mobi/basicElectronicParts.jpg" alt=""></p><p>它们在电路图中的表示方法：</p><p><img src="https://i1.wp.com/www.makerspaces.com/wp-content/uploads/2017/05/electronic-symbols2.jpg?resize=673%2C800&amp;ssl=1" alt=""></p><h3 id="电阻"><a href="#电阻" class="headerlink" title="电阻"></a>电阻</h3><p>电阻的主要作用是限制电流。</p><p>不同的电路需要选择不同形态的电阻：DIP，SIP，SMD。</p><p>DIP（dual in-line package），两头都有引脚的电阻，是入门时使用的常见电阻。</p><p><img src="https://ae01.alicdn.com/kf/HTB1iEAaj1uSBuNjy1Xcq6AYjFXa5/Free-ship-with-track-brand-new-200pcs-2R-2W-DIP-Resistors-carbon-Resisters-2W-2ohm-5.jpg" alt=""></p><p>这种电阻的阻值一般通过彩色的色环识别。有 4 环和 5 环两种标记方法，一般是记不住的，手头备一张色环卡比较实在：</p><p><img src="https://www.digikey.com/-/media/Images/Marketing/Resources/Calculators/resistor-color-chart.png?ts=e802ab48-1ea0-4745-babf-9a21accec5c2&amp;la=en-US" alt=""></p><p>第一、二环是读数，第三环(五环的话是第四环)是乘数，比如 红-红-棕 表示 220 V。</p><p>SIP (single in-line package)，一头有引脚的电阻：</p><p><img src="https://images-na.ssl-images-amazon.com/images/I/310RCcbsdbL._SX342_.jpg" alt=""></p><p>SMD (Surface Mounted Device)，贴片电阻，用于常见的 PCB 电路板：</p><p><img src="https://leetechbd.com/wp-content/uploads/2017/12/SMD-Resistor.jpg" alt=""></p><h3 id="电容"><a href="#电容" class="headerlink" title="电容"></a>电容</h3><p>电容又是什么？</p><p>顾名思义，可以作为电荷容器的一种元件。</p><ul><li>充放电特性：电容将电路中的电荷收集起来，然后在电压变化时放电。</li><li>阻直通交特性：阻止直流电流通过，允许交流电流通过(像个交警)</li></ul><p>电容试图抵抗电路内的电压变化。因此，电容通常连接在电源和地之间，以保持稳定的电源并滤除间歇性的电压尖峰和下降。</p><p><img src="https://cdn.instructables.com/FIA/1QHW/IQU11IWI/FIA1QHWIQU11IWI.LARGE.jpg?auto=webp" alt=""></p><p>其他元件就不继续一一介绍了。元件外型可以到 <a href="https://library.io/explore/3dmodels" target="_blank" rel="noopener">Explore/3DModels | library.io</a> 查看，元件的参数可以找到对应的 datasheet 查看。</p><h2 id="电路图"><a href="#电路图" class="headerlink" title="电路图"></a>电路图</h2><p>电路图就是将各种元件连接起来组成完整电路的图示。</p><p>运用前面学过的知识，我们可以开始搭建电路图。在实际接线之前，建议先用工具画出接线图，可以帮助我们理清电路的功能和部件。推荐使用 Tinkercad 的 circuit 模块，网站上提供了一些常用的电路元件，方便快速搭建出虚拟电路。</p><p><img src="https://csg.tinkercad.com/things/gw3hgGtVAdR/t725.png?rev=1517977820936000000&amp;s=ff528d92add92115be11517f8d5f191d&amp;v=1&amp;type=circuits" alt=""></p><p>更棒的是，它还提供了电路模拟运行的功能，分析电路中可能出现的问题，尤其是存在短路时会明确提示。这样就再也不用担心电路接不好会频繁烧坏元件了！✌️</p><p><img src="https://cdn.instructables.com/F4A/OTSY/J1CEMMNL/F4AOTSYJ1CEMMNL.ANIMATED.SMALL.gif" alt=""></p><p>更让人开心的是，还集成了 Arduino 的模块功能，让没有编程基础的使用者，也能快速上手编写简易程序：</p><p><img src="https://www.tinkercad.com/img/electronics/circuits-editor.gif" alt=""></p><p>去试试看吧~ 👀</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/week7title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="制造" scheme="http://uegeek.com/tags/%E5%88%B6%E9%80%A0/"/>
    
      <category term="Maker" scheme="http://uegeek.com/tags/Maker/"/>
    
      <category term="Digital Fabrication" scheme="http://uegeek.com/tags/Digital-Fabrication/"/>
    
      <category term="Fab" scheme="http://uegeek.com/tags/Fab/"/>
    
      <category term="Arduino" scheme="http://uegeek.com/tags/Arduino/"/>
    
      <category term="电路" scheme="http://uegeek.com/tags/%E7%94%B5%E8%B7%AF/"/>
    
      <category term="基尔霍夫定律" scheme="http://uegeek.com/tags/%E5%9F%BA%E5%B0%94%E9%9C%8D%E5%A4%AB%E5%AE%9A%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>三维制图讲义02 - 三维制作流程</title>
    <link href="http://uegeek.com/190314-3d02-workflow.html"/>
    <id>http://uegeek.com/190314-3d02-workflow.html</id>
    <published>2019-03-14T11:25:06.000Z</published>
    <updated>2019-03-14T11:35:35.349Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/3d_course_title.jpg" alt=""></p><a id="more"></a><p>在进入三维软件的学习之前，我们先来了解一下在这方面应用最为成熟的产业之一：三维动画影视制作。</p><p>下面是 3D Production Pipeline 的流程图，很好地总结了一部完整的动画影片的制作过程。</p><p><img src="http://img.viz.mobi/3d_production_timelines.jpg" alt=""></p><p>我们在这个学期从零基础学起，主要涉及到的是 Modeling 建模和 Texturing 材质贴图部分，也会简单应用一些 Lighting 灯光和 Rendering 渲染的知识。</p><p>在整个制作流程中，会涉及很多工具。下面是以 Blender 为例的 workflow（<a href="http://www.bgteach.com/article/9" target="_blank" rel="noopener">来源</a>）：</p><p><img src="http://www.bgteach.com/files/default/2017/10-17/17124088c083968322.png" alt=""></p><p>在新年期间上映的「流浪地球」，已经充分展示出国内影视技术的实力。<a href="https://mp.weixin.qq.com/s/O8Zp7ok0JpPuFkofnQ7UaQ" target="_blank" rel="noopener">这篇访谈</a>介绍了大量的前期概念设计，涉及人物、场景、装备等等，推荐感兴趣的同学看一看。</p><p>相信绝大部分同学都看过皮克斯出品的动画：玩具总动员、海底总动员、超人总动员、机器人总动员、飞屋环游记、头脑特工队……每一部都是传奇般的经典。皮克斯不但连续制作出高水准的作品，而且为行业积累了大量实践经验，推动着影视动画制作向前发展。而且，皮克斯还推出了一套非常系统的动画制作入门课程，包括故事、角色、场景、材质、动效、灯光等等制作环节，制作精良，墙裂推荐大家观看。</p><p>下面的视频会对整个课程做一个导览：</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=w0527u1xhcs" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/w0527u1xhcs.html" target="_blank" rel="noopener">Pixar in Box_腾讯视频</a></p><h2 id="三维制作-3-1"><a href="#三维制作-3-1" class="headerlink" title="三维制作 3+1"></a>三维制作 3+1</h2><p>通过皮克斯的介绍视频，大家对整个制作过程有了一定了解。</p><p>在这么复杂的过程中，有三样东西是必不可少的。这三样东西也是我们打开 Blender 软件后，在视图区看到的东西：</p><p><img src="http://img.viz.mobi/blenderDefault.jpg" alt=""></p><p>那么 3+1 的 1 又是什么呢？有了几何体、灯光和镜头，我们还需要渲染，才能生成最终的图像。下面对 3+1 分别做简单的介绍。</p><h3 id="几何体"><a href="#几何体" class="headerlink" title="几何体"></a>几何体</h3><p>点线面是最基本的造型单位。在三维建模中，点线面有另外的名字：</p><ul><li>顶点-vertices：在几何体角落上的点</li><li>边-edges：连接顶点的线</li><li>面-faces：由若干条边围成的填充区域</li></ul><p><img src="http://img.viz.mobi/720px-Mesh_overview.svg.png" alt=""></p><p>任何的几何体，再复杂的模型，无非都是反复增删、调整顶点、边和面而形成的。</p><p>如果说点、线、面是基本的操作对象，那么平移（translation）、缩放（scale）、旋转（rotation）就是基本的操作方式。这些是我们在三维设计建模过程中主要的工作。</p><h3 id="材质-灯光"><a href="#材质-灯光" class="headerlink" title="材质/灯光"></a>材质/灯光</h3><p>材质和灯光决定了一个物体看起来是什么样的。</p><p>材质涉及到纹理、粗糙度、反射率、亮度等等复杂的参数。</p><p><img src="https://cdnb.artstation.com/p/assets/images/images/001/809/163/large/ania-przybylko-kostki.jpg?1453072206" alt=""></p><p>而灯光需要根据物体在真实光照环境下，对光线的反射规律来计算并呈现。在一个模型的表面，有许多多边形，每一个多边形接收和反射的光并不一样，这与人眼识别立体物体的原理有关。</p><p><img src="http://img.viz.mobi/$flatshading.png" alt=""></p><p>材质结合光照，组成了千变万化的组合，也给三维世界带来了无数的可能性。</p><p><img src="http://img.viz.mobi/materialWithLights.jpg" alt=""></p><h2 id="镜头"><a href="#镜头" class="headerlink" title="镜头"></a>镜头</h2><p>镜头是大家相对陌生的领域。因为我们天然就有着两个镜头——眼睛。看向哪里、怎么看，几乎不需要经过思考和反应，所以我们感觉不到自己身上这个「镜头」的存在。</p><p>但是在虚拟的三维世界中，镜头决定了场景的呈现。</p><p><a href="https://www.khanacademy.org/partner-content/pixar/sets/sets1/v/sets-overview" target="_blank" rel="noopener">Introduction to geometric transformations (video) | Khan Academy</a></p><p>在影视动画中，镜头是叙事的关键要素之一。如何设置镜头相关的参数，获得我们想要的渲染结果，会在后续的课程中涉及到。</p><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p>可以说，渲染是一个令人头疼的词。它意味着费时费力（主要是费计算机的算力）。</p><p>为什么需要渲染？相比手绘图像，三维图像其实不是被「画」出来的，而是由很多参数计算并自动绘制出来的成果。渲染就是计算机根据参数计算最终展示结果的过程。</p><p>计算机成像有不同的渲染方式。光栅化和光线追踪是常见的两种。</p><ul><li>光栅化（Rasterization）是把顶点转换为片元的过程，也就是将图转化为一个个栅格组成的图象，特点是每个元素对应帧缓冲区中的一个像素。  </li><li>光线追踪（Ray tracing）是三维计算机图形学中的特殊渲染算法，跟踪从眼睛发出的光线而不是光源发出的光线，生成编排好的场景的数学模型显现出来。</li></ul><p><img src="http://img.viz.mobi/HybridRendering.jpg" alt=""></p><p>在后续的课程中我们还会来讲解。</p><h2 id="补充知识：三维投影"><a href="#补充知识：三维投影" class="headerlink" title="补充知识：三维投影"></a>补充知识：三维投影</h2><p>计算机是二维屏幕，如何表示三维的物体和世界呢？</p><p>这里要借助三维投影的概念。</p><p><img src="http://img.viz.mobi/wireframeRendering.jpg" alt=""></p><p>从字面理解，投影就是物体被光照后投射到一个平面上的影像。计算机图形学里有大量关于光线和投影的研究。</p><p>在三维设计中，会经常接触到两种投影：透视投影（Perspective Projection）和正射投影（Orthographic Projection）。</p><p>下图可以帮助我们理解两者的区别：</p><p><img src="http://img.viz.mobi/projection_example.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/3d_course_title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="3D" scheme="http://uegeek.com/tags/3D/"/>
    
      <category term="Animation" scheme="http://uegeek.com/tags/Animation/"/>
    
      <category term="Modeling" scheme="http://uegeek.com/tags/Modeling/"/>
    
      <category term="Texture" scheme="http://uegeek.com/tags/Texture/"/>
    
      <category term="Camera" scheme="http://uegeek.com/tags/Camera/"/>
    
      <category term="Lighting" scheme="http://uegeek.com/tags/Lighting/"/>
    
  </entry>
  
  <entry>
    <title>数字制造讲义02-Arduino入门</title>
    <link href="http://uegeek.com/190313-df02-arduino-intro.html"/>
    <id>http://uegeek.com/190313-df02-arduino-intro.html</id>
    <published>2019-03-13T11:02:31.000Z</published>
    <updated>2019-03-13T11:16:52.392Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/week7title.jpg" alt=""></p><a id="more"></a><p>在这个学期，我们会学习数字制造中主要的环节和技术，包括 Build 和 Code 两部分。</p><p><img src="http://img.viz.mobi/Build&amp;Code.001.JPEG" alt=""></p><p>上半学期我们主要学习 Code 部分，它赋予物品「灵魂」，让一件物品能完成我们期望的功能和互动。</p><p>怎样让物品拥有一定的「智力」呢？</p><p>给它加上芯片嘛。</p><p>可是芯片、电路、元件、硬件啊，都涉及到很专业的知识，对一般人来说门槛太高了。所以今天我们来介绍通往硬件世界的捷径——Arduino。</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=m0823vlpahu" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/m0823vlpahu.html" target="_blank" rel="noopener">Arduino创始人TED演讲：开启开源想象力</a></p><p>Arduino 的初衷，是为了让没有电子相关专业背景的人，能够在很短的时间内上手。这个小小的板子，撬开了很多人的想象力，让动手做东西的门槛降低，让无数好玩的想法得以试验和实现。</p><h2 id="为什么要用-Arduino？"><a href="#为什么要用-Arduino？" class="headerlink" title="为什么要用 Arduino？"></a>为什么要用 Arduino？</h2><p>它可以帮助我们用很小的成本，快速地搭建智能物件的原型。也就是</p><blockquote><p>Prototype &amp; Digitize for the Real World</p></blockquote><p>很多时候，我们有一个想法，比如：有一个自动给花浇水的装置。「自动」意味着我们会设定一些规则，在某些条件下自动触发浇花这个动作。要实现自动，就会需要一个类似电脑一样的带有一定「理解能力」的执行者。如果每一个想法，都需要一台电脑来实现，那我们早就破产了。</p><p>这时候只需要一个电脑的极度简化版本——我们一般叫做单片机（Microcontrollers）。它是一种集成电路芯片，把具有数据处理能力的中央处理器CPU、随机存储器RAM、只读存储器ROM、多种I/O口和中断系统、定时器/计数器等功能集成到一块硅片上，构成的一个小而完善的微型计算机系统，在工业控制领域广泛应用。</p><p>单片机的大小确实可以只有薄薄的一片，方便我们放置到各种各样的物体内部，赋予它计算的能力。</p><p>Arduino 就是一种单片机。</p><p><img src="https://cdn.arduino.cc/homepage/static/media/arduino-UNO.bcc69bde.png" alt=""></p><p>类似的工具还有树莓派（不算单片机了，是基于 Linux 的低配电脑）等等，它比 Arduino 要强大，因为芯片不止 8 位，可以运行操作系统。</p><p><img src="https://shawzt.github.io/assets/images/raspberry_pi.png" alt=""></p><h2 id="模拟信号和数字信号"><a href="#模拟信号和数字信号" class="headerlink" title="模拟信号和数字信号"></a>模拟信号和数字信号</h2><p>当我们想要对实体环境施加影响，经常需要将模拟信号转化为数字信号——因为我们能操纵数字信号（编程就是一种强大的操纵），但是不能任意改变模拟信号。</p><p>那么什么是模拟信号和数字信号呢？</p><p>简单来说，模拟信号在时间上和取值上都是连续不间断的（可无限微分）。自然界常见的信号都是模拟信号，比如温度、声音等等。而数字信号在时间上和取值上，不完全连续，存在很多「档位」，档位越多，意味着信号的分辨率越高。</p><p>更详细的讲解，我们可以看看下面这个视频：</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=z06602duiv9" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/z06602duiv9.html" target="_blank" rel="noopener">什么是模拟信号？数字信号？区别是什么？它们又是如何完成转换的？</a></p><p>Arduino 的主要作用之一，就是帮助我们实现模数转换，完成对物理世界数据的采集，以及处理信号后反馈到物理世界中。</p><h2 id="Arduino-开发板"><a href="#Arduino-开发板" class="headerlink" title="Arduino 开发板"></a>Arduino 开发板</h2><p>Arduino 有许多不同型号、功能各异的开发板。</p><p><img src="https://assets.t3n.sc/news/wp-content/uploads/2016/07/Arduino-Boards-595x680.jpg" alt=""></p><p>其中一些体积更小，或是芯片的能力更强，又或者搭载了 wifi 或蓝牙模块。这样我们可以根据自己项目的需要，使用不同的板子。每一块板子的具体信息，可以在官网上查看。</p><p>Arduino 的开发板，本质上都是单片机应用开发板，使用的芯片大都是 AVR 芯片。开发板封装和简化了最常用的软硬件模块。硬件主要是提供基本的芯片、数字信号端口、模拟信号端口、电源和其他一些接口。软件主要提供了简单的函数和应用库，不用直接去操作寄存器，使得没有太多单片机基础的人也可以使用。</p><p><img src="http://img.viz.mobi/arduino-illustration.jpg" alt=""></p><h2 id="用-Arduino-搭建简易电路"><a href="#用-Arduino-搭建简易电路" class="headerlink" title="用 Arduino 搭建简易电路"></a>用 Arduino 搭建简易电路</h2><p>电路是什么玩意儿？</p><p>作为一种路，它其实跟公路、地铁线路有点类似，只不过它运送的不是车辆和人，而是电荷。人和车会选择最短路径或者换乘最少的路线，电荷也会沿着阻碍最小的路径移动。</p><p>在最简单的电路中，有三个必不可少的部分：电源、中间环节、负载。</p><p>负载是指将电能转化为其他形式能量的部分，例如灯泡、电机等。电路的使命，是为了让负载能够正常工作。</p><p><img src="http://img.viz.mobi/circuitMetaphor.jpg" alt=""></p><p>（雾）</p><p>下面就是一个最简单的电路，电流从电源正极流经 LED，返回到电源负极。</p><p><img src="http://img.viz.mobi/breadboardCircuit.jpg" alt=""></p><p>上图右侧是一块面包板，它的作用是提供电路连接，帮助我们快速搭建电路。</p><p>在面包板中，Terminal Strips 都是连通的，而两侧的 Power Rails 也是连通的。</p><p><img src="http://img.viz.mobi/breadboardEX.jpg" alt=""></p><p>关于电路板的使用，可以看看这个讲解得很仔细的视频：<a href="https://www.youtube.com/watch?v=6WReFkfrUIk" target="_blank" rel="noopener">https://www.youtube.com/watch?v=6WReFkfrUIk</a> （备好梯子）</p><p>Arduino 提供了电源和接地的端口，这样我们可以快速连成一个完整的电路：</p><p><img src="http://img.viz.mobi/veryBasicCircuit.png" alt=""></p><h2 id="Arduino-编程环境"><a href="#Arduino-编程环境" class="headerlink" title="Arduino 编程环境"></a>Arduino 编程环境</h2><p>Arduino 开发板是硬件部分。接下来我们了解软件部分。从 Arduino 官网下载 Arduino 软件并安装，打开后就看到 Arduino 的编程环境。</p><p>现在不但可以在软件中编程，还可以访问在线编程工具：<a href="https://create.arduino.cc/" target="_blank" rel="noopener">https://create.arduino.cc/</a></p><p><img src="https://hackster.imgix.net/uploads/attachments/256423/screenshot_2017-01-31_16_Jb6CmduoC2.png?auto=compress%2Cformat&amp;w=680&amp;h=510&amp;fit=max" alt=""></p><p>具体的界面功能就不详细介绍了。</p><p>同学们最开始上传程序到板子时容易遇到一个错误，大都是因为没有选择传输端口导致的。需要注意在 <code>Tools</code> 菜单中选择对应的端口再上传。如果使用 USB 连接板子和电脑，就选择包含 <code>USB</code> 的端口。</p><p><img src="https://i.stack.imgur.com/MOvDD.png" alt=""></p><p>下节课我们介绍一些电路基本知识。C U</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/week7title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="制造" scheme="http://uegeek.com/tags/%E5%88%B6%E9%80%A0/"/>
    
      <category term="Maker" scheme="http://uegeek.com/tags/Maker/"/>
    
      <category term="Digital Fabrication" scheme="http://uegeek.com/tags/Digital-Fabrication/"/>
    
      <category term="Fab" scheme="http://uegeek.com/tags/Fab/"/>
    
      <category term="Arduino" scheme="http://uegeek.com/tags/Arduino/"/>
    
      <category term="单片机" scheme="http://uegeek.com/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
      <category term="电路" scheme="http://uegeek.com/tags/%E7%94%B5%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>三维制图讲义01 - 欢迎来到三维世界</title>
    <link href="http://uegeek.com/190306-3d01-welcome-to-the-3d-world.html"/>
    <id>http://uegeek.com/190306-3d01-welcome-to-the-3d-world.html</id>
    <published>2019-03-06T11:02:11.000Z</published>
    <updated>2019-03-13T11:16:43.183Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/3d_course_title.jpg" alt=""></p><a id="more"></a><h2 id="一个价值数百小时的问题"><a href="#一个价值数百小时的问题" class="headerlink" title="一个价值数百小时的问题"></a>一个价值数百小时的问题</h2><blockquote><p>与我何干？</p></blockquote><p>为什么要学习三维制图？</p><p>有点诡异的是，还没有学的人，很难回答上来。但是，如果不<strong>自发</strong>地问自己这个问题，学不好的可能性会挺大——如果我都不知道为什么学，我又为什么要去学呢？</p><p>那到底这应该是学生问自己的问题，还是老师提出的问题？</p><p>双方都应该<strong>主动</strong>提出。</p><p>如果学生不在老师提出前就问问自己，学习动力就不会很强，「不就是一门必修课嘛」。如果老师不在课程之初提出来，大概也是借「这就是一门必修课」让自己省点力……如果不回答这个问题，这门课大概也就没必要继续上了——双方都不知道为了什么呀。</p><p>在 <a href="https://www.uegeek.com/180106-the-learning-myth.html" target="_blank" rel="noopener">大哉问05 - 什么是学习中最大的误区？</a> 中，我们讨论过学习中最大的误区：</p><p><img src="http://img.viz.mobi/mythOfStudy.png" alt=""></p><p>回顾自己这么多年的学习经历，但凡学了等于白学的东西，基本上都有一个共同特点：我不清楚为什么而学。</p><p>也就是，没有花十分钟时间去思考一下：到底跟我有什么关系？然后就浪费了数十、上百小时在上面。</p><p>学习是一件难受的事情，因为需要在某种程度上改变自己。比如这门课，对没有美术和绘画基础的同学来说，会进入一个不舒适的技能区域；它也会比想象要精（gui）密（mao），而且还有一些数学知识……当我不知道为何而战的时候，为什么要去承受一些折磨？我们费力是为了讨什么好？</p><p>这是我希望每一门课开始时，老师能告诉我的。更好的是，老师不只是告诉我，他还用他在其中获得的经验、快乐、热情来 fire 我——在旅途的起点就加上油，而不是一辆没有动力的车，需要人推着走。</p><h2 id="Why-3D"><a href="#Why-3D" class="headerlink" title="Why 3D?"></a>Why 3D?</h2><blockquote><p>重新认识我们的世界；如果有可能，去创造新世界</p></blockquote><p>这是我给自己定制的通用学习目标，适用于大部分知识和技能的学习。</p><h3 id="重新认识世界"><a href="#重新认识世界" class="headerlink" title="重新认识世界"></a>重新认识世界</h3><blockquote><p>世界上本来到处是神迹。神迹出现得多了，也就没有了神迹。——00</p></blockquote><p>我们生活在三维世界中。但是我们对「三维」的理解，大都是直觉，而不是精细编码过的知识。</p><p>「看」是每个人的本能，所以我们不需要去思考它，更不需要去理解它是如何运作的。但是，如果有一天，我们了解到其中的一些奥妙，从此看待世界的视角和眼光会发生改变——你不再会用以往的眼光，去看待那些看似平凡的神奇事物。人因此而习得了带有个性的审美和偏好，能够欣赏光影的变幻、赞叹生命的神奇，并且在探索谜题中获得乐趣。</p><p>我们不仅生活在三维世界中，我们还在编织、建造虚拟的三维世界：</p><p>比如说动画</p><p><img src="https://m.media-amazon.com/images/I/71+8hkKvieL._SS500_.jpg" alt=""></p><p>比如说电影</p><p><img src="http://img.viz.mobi/liulangdiqiu-poster.jpg" alt=""></p><p>VR</p><p><img src="https://sportsilab-cms.imgix.net/39qybULeGQWiAGGu642cA2/8f3c29e61c9a08d87380c633b9079948/The_International_2015__Key_Arena__Seattle__Washington_D.C..jpg?ixlib=rb-1.2.2&amp;fit=crop&amp;auto=fm%2Ccompress&amp;w=1280&amp;h=800&amp;s=685daf5f7c0beb8a433e80a764a866db" alt=""></p><p>游戏</p><p><img src="http://img.viz.mobi/zelda.jpg" alt=""></p><p>有些东西，知道以后，就再也回不去了。就像塞尔达的这张经典场景。新的世界就在眼前。</p><h3 id="创造新世界"><a href="#创造新世界" class="headerlink" title="创造新世界"></a>创造新世界</h3><p>更激动人心的是，我们可以亲手参与创造这些世界。也就是，为自己或他人造梦。</p><p>比如，现在的乐器，我们可以绘制和生产出来：</p><p><img src="https://d1ag85ptixulvl.cloudfront.net/k28kmvrzx80m/415FaERZHyIkOicEgiK2Is/3608caa87773424f67328628e6300f7b/family_seaboard_top.jpg?w=1200&amp;h=630" alt=""></p><p>那么，未来人们和音乐的关系可能是什么样的？未来的乐器可能是什么样的？</p><p><img src="http://hyperallergic.com/wp-content/uploads/2015/02/jsparksnomis.jpg" alt=""></p><p>以及，未来的音乐世界是什么样的？</p><p>过去已经有人探讨过，并且这种探索永远不会停止：</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=e0520x0cdpa" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/e0520x0cdpa.html" target="_blank" rel="noopener">Pipe Dream - Animusic</a></p><p>而且，这些梦境最终可以变成现实。因为真实世界也是三维的，我们可以将设想数字化，然后将它制造出来。</p><p><img src="https://digital.hammacher.com/Items/13068/13068_1000x1000.jpg" alt=""></p><h2 id="从蠢问题开始"><a href="#从蠢问题开始" class="headerlink" title="从蠢问题开始"></a>从蠢问题开始</h2><p>学习的起点在哪里？想法？课本？社群？</p><p>都可以。</p><p>我更喜欢从问一个「蠢问题」开始，比如：</p><blockquote><p>人怎么可以看见东西？</p></blockquote><p>对声音和音乐知识比较了解的同学知道，<a href="https://www.uegeek.com/180623-make-noise-02.html" target="_blank" rel="noopener">不同频率和振幅的声波，形成了不同音高和响度的声音</a>。</p><p><img src="http://img.viz.mobi/soundwave-f&amp;a.png" alt=""></p><p>听觉和视觉的原理有一些类似。跟声音类似，光也是一种波动，是能量的一种形式。人能看见东西，是因为有一种类似声波的波，它的频率决定了光的颜色，它的强度决定了光的亮度：</p><p><img src="http://img.viz.mobi/lightwave-f&amp;a.png" alt=""></p><p>人能看见的光，波长有一定的范围：</p><p><img src="http://sci.esa.int/science-e-media/img/cb/Figure_4_spectrum_High-energy_highlight.jpg" alt=""></p><p>正是环境中各种类型的光源，照射在物体上，产生了光的反射、漫射，让我们眼睛中的视网膜的感光细胞可以感知到，并且通过视神经传递到视觉皮层，由大脑「计算」出一幅关于真实世界的「投影」。</p><h2 id="神奇之处在哪里？"><a href="#神奇之处在哪里？" class="headerlink" title="神奇之处在哪里？"></a>神奇之处在哪里？</h2><p>先不说大脑到底是怎么把乱七八糟的感光强度变成一幅图像，那太硬核了。我们先来问另外一个蠢问题：</p><blockquote><p>三维世界是怎么被「拍扁」成二维图像的？</p></blockquote><p>这件事其实有人老早就在做，而且做得更专业，那就是照相机。</p><p>世界是三维的，照片是二维的，但是我们看到二维的照片，会觉得它「就是」三维的。</p><p>（此处省略摄影成像原理……）</p><p>跟照片有点类似，计算机屏幕的成像，也是二维的，也就是用 M 行 N 列的矩阵，来表示屏幕上每一个像素点。每个像素点填充不同的颜色，最终构成了整个屏幕的图像。</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=b0845ngqa6l" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/b0845ngqa6l.html" target="_blank" rel="noopener">scanline rendering</a></p><p>另一个更神奇的蠢问题：</p><blockquote><p>为什么二维平面可以模拟三维世界？</p></blockquote><p>我们去电影院看 3D 电影时，会用一副 3D 眼镜。这副眼镜帮助我们把原本二维的画面，变成三维。</p><p><img src="https://media.techeblog.com/images/3d_technology.jpg" alt=""></p><p>这一门课要学习的，其实都是关于怎么在二维的平面/屏幕上呈现三维的世界。</p><h2 id="What-is-Rio"><a href="#What-is-Rio" class="headerlink" title="What is Rio"></a>What is Rio</h2><p>将二维的麻瓜平面变成三维的巫师场景，最大的目标或者敌人就是：</p><blockquote><p>怎么让物体看起来真实？</p></blockquote><p><img src="http://www.ykwjlg.com/images/201704/source_img/3630_G_1491353910155.jpg" alt=""></p><h3 id="形状·比例"><a href="#形状·比例" class="headerlink" title="形状·比例"></a>形状·比例</h3><p>人天生对人体各种部位的比例敏感，对物体的形状也有远超计算机的辨认能力。「真」的第一要义，是形状和比例要接近我们对真实人事物的印象。</p><p><img src="https://cdn3-www.comingsoon.net/assets/uploads/2017/07/Westworld.jpg" alt=""></p><p>（当然，虚拟场景尤其是游戏、动画另当别论）</p><p><img src="http://img.viz.mobi/Vitruvian%20lego.jpg" alt=""></p><h3 id="颜·皮·光"><a href="#颜·皮·光" class="headerlink" title="颜·皮·光"></a>颜·皮·光</h3><p>一个方块只是一个方块，在还没有给它披上皮之前：</p><p><img src="https://cdnb.artstation.com/p/assets/images/images/001/809/163/large/ania-przybylko-kostki.jpg?1453072206" alt=""></p><blockquote><p>要有光。——God</p></blockquote><p>一个人只是一个人，在没有让他进入不同的光照环境之前：</p><p><img src="http://img.viz.mobi/Different-Light-and-shadow-prmote-original.jpg" alt=""></p><p>预警：学习了光照的知识后，容易开启发呆状态。一个光影可以让人盯着出神好久……因为光中有影中有光中有光有影中有光~</p><h2 id="上路之前"><a href="#上路之前" class="headerlink" title="上路之前"></a>上路之前</h2><p>新世界的大门（坑）马上就要开启了。在上路之前，还有几点对同学们、也是对自己的寄望。除了上面提到的对世界新的视角和理解、拥有建造新世界的能力，希望通过这个学期的学习，我们还能一起收获：</p><p><strong>创造者心态</strong></p><p>消费陷阱千万个，通往创造的小路只有两三条。围绕消费的生活终究没有尽头。为自己创造点什么，为他人创造点什么，这两个简单的目标，可以帮助我们躲开一些无聊、迷茫、寂寞、心理疾病甚至厄运。在这门课上，我们有很多机会站在设计和创造者的角度来观察世界、思考问题，从而习得一种创造的心态。</p><p><strong>改进过的学习习惯</strong></p><p>学习方法不对，往往是对低效学习方式的痛感不够强。我经历过许多学习的痛苦，相信学习本身就是一种迭代过程。学什么其实不太重要，重要的是<a href="https://www.uegeek.com/learning-guide-v1.html" target="_blank" rel="noopener">用什么姿势去学，以及这种姿势适用于什么情境，是否可以迁移到任意一种知识的学习</a>。</p><p><img src="http://img.viz.mobi/LearningGuide-s.png" alt=""></p><p>(如需完整版高清大图，请关注公众号 HackYourself，回复“指南”)</p><p><strong>眼界和审美</strong></p><p>学习完课程，能独立完成简单的乐器设计当然重要。但更重要的是，看到更大的世界，看到各行各业的苦与乐，看到这个世界中迷人的部分，开始分辨什么是美、怎样是更美，并且挑选吸引自己的谜题去深入探索。</p><p><strong>以终为始的旅程</strong></p><p><a href="https://www.uegeek.com/180106-the-learning-myth.html" target="_blank" rel="noopener">学习不是学习行为本身</a>，<a href="https://www.uegeek.com/learning-about-learn.html" target="_blank" rel="noopener">学习是一种改变</a>。如果能清晰地描述自己当前所处的 A 点是什么样子，想去到的 B 点又是什么样子，这段学习的旅程会更富有挑战、意义和乐趣。现在就去立 🚩吧~ </p><p>更有效的做法，是找到一个标杆（作品），提醒自己走到 B 点时，要拿出什么样的旗子插在上面。</p><p><img src="http://img.viz.mobi/rethinkingLearning.png" alt=""></p><p>希望这是一个有点不一样的开始。</p><p>希望陪伴你们度过一个痛苦又有趣的学期~</p><p>00</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/3d_course_title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="3D" scheme="http://uegeek.com/tags/3D/"/>
    
      <category term="Animation" scheme="http://uegeek.com/tags/Animation/"/>
    
      <category term="Modeling" scheme="http://uegeek.com/tags/Modeling/"/>
    
  </entry>
  
  <entry>
    <title>数字制造讲义01-成为数字世界的建造者</title>
    <link href="http://uegeek.com/190305-df01-digital-fabrication.html"/>
    <id>http://uegeek.com/190305-df01-digital-fabrication.html</id>
    <published>2019-03-05T11:01:46.000Z</published>
    <updated>2019-03-13T11:16:48.695Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/week7title.jpg" alt=""></p><a id="more"></a><h2 id="开始的开始"><a href="#开始的开始" class="headerlink" title="开始的开始"></a>开始的开始</h2><p>并没有想过自己有机会在大学里讲这门课——一门自己永远觉得学不够（会）的课。</p><p>三年前的今天，我正在痛苦的上一门叫做 Digital Fabrication 的课。它由 MIT 原子与比特中心 FabAcademy 开设，前身是一门叫做 How to Make Allmost Anything 的课程。</p><p><img src="http://img.viz.mobi/FabAcademy%20Website.png" alt=""></p><p>关于课程学习什么，我写了<a href="https://www.uegeek.com/tags/Fab/" target="_blank" rel="noopener">一系列的笔记</a>，这里就不多介绍了。</p><p><img src="http://img.viz.mobi/Fab18topics.jpg" alt=""></p><p>How to make almost anything:</p><p><img src="http://img.viz.mobi/Fabacademy13.11.projects.jpg" alt=""></p><p>伴随 FabAcademy 的发展，Fab Lab 已经遍布全球：</p><p><img src="https://www.fablabconnect.com/wp-content/uploads/2017/07/Map-3-world.jpg" alt=""></p><p>今年我有机会把这门课的体验带给你们，把这门课改进得更本土化、可操作，以及尝试如何在小成本的实验室里进行基本的实践。这门课不仅仅是为了帮助你们学习制作乐器的一些基本知识和技能，更重要的是，我们有机会一起探索人与音乐互动的历史、边界和可能性，一起体会动手做东西的痛苦和快乐、挫败和成就感，从而形成对一个全新身份的理解和认同——创客，或者更具体点，音乐创客。</p><h2 id="数字制造的浪潮"><a href="#数字制造的浪潮" class="headerlink" title="数字制造的浪潮"></a>数字制造的浪潮</h2><p>什么是数字制造？</p><p>简单说就是将制造流程数字化、自动化、智能化。我把它划分为三个部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CAD + Programming + CAM</span><br><span class="line"></span><br><span class="line">数字化设计 + 编程 + 数控生产</span><br></pre></td></tr></table></figure><p>数字化浪潮已经翻滚很多年了，一些领域早已完成数字化，而一些领域还处在变革当中，包括制造业。</p><p>数字制造浪潮的背后有两大基础：工业 4.0 和创客运动。</p><p><img src="https://www.sanofi.com/-/media/Project/One-Sanofi-Web/Websites/Global/Sanofi-COM/Home/en/about-us/img/Infographie_RevolutionIndustrielle_1940x960_EN-5.JPG?la=en&amp;hash=547E56AAEB6EC72BBE213128E2D59FA671F59A65" alt=""></p><p>工业 4.0 在机械化、自动化生产的基础上，进一步把生产流程相关的所有数据整合进来，形成物联网、全流程数据化、数据智能驱动物理计算和执行。过去是机器排好队，人来引导。现在则是构建一套数据自动流转的网络，人不参与的情况下也能由各种系统自动完成。</p><p>另外一个是更偏文化影响的基础：创客文化。</p><p>创客文化根植于欧美国家的 DIY 传统，大家喜欢自己动手做东西。为什么喜欢动手做东西呢？因为人工很贵啊！而且房子大，家里面一般都有车库，可以用做工作室或者是创业的办公室。很多东西就是这样在车库里面捣鼓出来了。（所以高房价和廉价劳动力真是创客文化的敌人 😒）</p><p><img src="http://makerfaire.wpengine.com/wp-content/uploads/2014/05/unknown.jpeg" alt=""></p><p>Maker 杂志每年举办的 Maker Faire 已经成为全球创客盛大的节日，还一度开到了白宫里面。（真·网红）</p><p>制造，曾经是一个离一般人很遥远的行业。在我们的印象中，制造业干的都是一些有技术含量的体力活。女生？不可能的~</p><p>但世界的变化比我们想象得要快。</p><p>随着数字化浪潮席卷各行各业，随着制造工具变得更强大、更小、更便宜，随着包括电子、编程在内的通识教育的普及，随着项目的积累和开源，我们不知不觉已经站在了 Personal Digital Fabrication 的门口。配备一个设备齐全的 lab，也不再是那么遥远的念想。</p><p><img src="http://img.viz.mobi/18.01.fablab.jpg" alt=""></p><h2 id="数字制造基本流程"><a href="#数字制造基本流程" class="headerlink" title="数字制造基本流程"></a>数字制造基本流程</h2><p>我们先来看一个不那么数字化的制造流程：</p><p><a href="https://v.qq.com/x/page/i0569cc1q2r.html" target="_blank" rel="noopener">匠心工艺 小提琴精湛工艺的制作</a></p><p>然后是一个 Fab lab 中的制造流程：</p><p><a href="https://v.qq.com/x/page/u0845zxy0vl.html" target="_blank" rel="noopener">Making an Electric Violin</a></p><p>然后看看制造业里面经常用到的 CNC 制造过程：</p><p><a href="https://v.qq.com/x/page/i08458jou2c.html" target="_blank" rel="noopener">CNC machining a Fender body</a></p><p>在这个学期里，我们会学习数字制造中主要的环节和技术，包括 Build 和 Code 两部分。Build 部分主要负责物品的造型和外观，以及如何把它从设计变成实物。Code 的部分赋予物品「灵魂」，让一件物品能完成我们期望的功能和互动。</p><p><img src="http://img.viz.mobi/Build&amp;Code.001.JPEG" alt=""></p><p>颜值和智商，都不可以偏废。</p><p>一个音箱表面看起来是这样的：</p><p><img src="https://www.apple.com/v/homepod/h/images/overview/homepod_side_dark_large_2x.jpg" alt=""></p><p>为了不只是胸大无脑，它里面是这样的：</p><p><img src="https://www.apple.com/v/homepod/h/images/overview/guts_4_large_2x.jpg" alt=""></p><p>从数字制造的三个模块来看，一个合成器的制造可以分成几个部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CAD + Programming + CAM</span><br><span class="line"></span><br><span class="line">数字化设计 + 编程 + 数控生产</span><br></pre></td></tr></table></figure><p>首先是合成什么样的音色？以前只能通过物理的方式，用不同的电路电压获得波形，然后做各种调制的效果。而现在我们可以用软件编程的方式来实现</p><p><img src="http://1cyjknyddcx62agyb002-c74projects.s3.amazonaws.com/files/2015/01/godel2c.jpg" alt=""></p><p>其次是合成器的外观造型部分，如何设计：</p><p><img src="http://cdn.shopify.com/s/files/1/0244/6325/products/Korg-MS-10-Mono-Synthesizer-Cover-1_grande.jpg?v=1510921210" alt=""></p><p>然后如何把每一个部件制造出来并组装：</p><p><img src="http://static1.squarespace.com/static/583893b7d2b857c44d3569de/587e1f701b631be781cc42ba/59a8787f6f4ca391ad4004c6/1548105972274/VC-10-.jpg?format=1500w" alt=""></p><h2 id="挖宝和立🚩"><a href="#挖宝和立🚩" class="headerlink" title="挖宝和立🚩"></a>挖宝和立🚩</h2><p>这门课程的学习，将会是一个混乱的过程——因为有太多陌生的名词、知识和领域。但也意味着一旦入了门，就拥有了一件无价之宝：可能性。</p><p>结合同学们的专业，这里有两个建议的方向，选择一个作为自己期末项目的目标，整个学习过程会更有针对性。</p><h3 id="专业乐器方向"><a href="#专业乐器方向" class="headerlink" title="专业乐器方向"></a>专业乐器方向</h3><p>主要尝试制作通用的、已经商业化的专业乐器。例如：</p><p>音序器</p><p><img src="https://mixmag.net/assets/uploads/images/_full/SEQ_2.jpg" alt=""></p><p>模块化的 MIDI controller</p><p><img src="https://macprovid.vo.llnwd.net/o43/hub/media/1001/12979/headline-specialwaves-Mine-modular-MIDI-Controller.jpg" alt=""></p><h3 id="实验乐器方向"><a href="#实验乐器方向" class="headerlink" title="实验乐器方向"></a>实验乐器方向</h3><p>这个方向简直就没有边界了……</p><p><img src="https://catherineodson.files.wordpress.com/2017/01/15994547_10104285061140089_7978028209646499382_o.jpg?w=825" alt=""></p><p><img src="https://www.bareconductive.com/wp-content/uploads/2016/03/FR9ZLIXIGQW6BSJ.LARGE_1000x667-720x415.jpg" alt=""></p><p>做点东西并不容易，要做出真实世界中存在的、能正常运转、甚至有点好玩的东西，就更困难了。</p><p>好消息是，你不是一个人。已经有无数的前人探索过，玩得不亦乐乎，还留下了许多…文档和源文件！我建议在学期之初，就去寻找一些让自己脑洞大开、心痒手痒的项目，作为标杆。如果能在一个学期内，逼近这些标杆，那么成就感将是巨大的。</p><p>挖宝地址：</p><ul><li><a href="http://www.nime.org/archives/" target="_blank" rel="noopener">NIME | Archive of NIME Proceedings</a></li><li><a href="https://www.dezeen.com/tag/musical-instruments/" target="_blank" rel="noopener">Musical instrument design</a></li><li><a href="https://www.instructables.com/" target="_blank" rel="noopener">Instructables - How to make anything</a></li><li><a href="http://mc.dfrobot.com.cn/portal.php" target="_blank" rel="noopener">DF创客社区</a></li></ul><p>希望陪伴你们度过一个痛苦又有趣的学期~</p><p>LET’S MAKE!</p><p><img src="https://res.cloudinary.com/www-virgin-com/virgin-com-prod/sites/virgin.com/files/Articles/Music/Ototo_in_use.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/week7title.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="制造" scheme="http://uegeek.com/tags/%E5%88%B6%E9%80%A0/"/>
    
      <category term="Maker" scheme="http://uegeek.com/tags/Maker/"/>
    
      <category term="Digital Fabrication" scheme="http://uegeek.com/tags/Digital-Fabrication/"/>
    
      <category term="Fab" scheme="http://uegeek.com/tags/Fab/"/>
    
  </entry>
  
  <entry>
    <title>2018，敬自由和迷失</title>
    <link href="http://uegeek.com/181230-freedom-and-lost-2018.html"/>
    <id>http://uegeek.com/181230-freedom-and-lost-2018.html</id>
    <published>2018-12-30T14:44:15.000Z</published>
    <updated>2019-01-05T14:53:59.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>今年是特别的一年，特别到在写年终总结的时候，如此不情愿为它画上句点。</p><p>整整一年，在远未实现财务自由的时候，就贸然送给自己一个长假。嗯，是奢侈的，是幸运的。</p><p>回顾这其实挺丧的一年，也还是收获不少：</p><ul><li>自由职业状态存活 1 年，完成设计项目若干，开了工作室</li><li>规划职业逃跑路线，努力更新知识体系和技术栈</li><li>做了 Max/MSP, Ableton Live, Arduino, TouchDesigner, Unreal Engine 等五门课的助教</li><li>HackYourself 和 ArtxCode 共发原创 72 篇约 17 万字；第一次做 TEDx speaker，外加线下分享会 3 次</li><li>继续单身，继续喜欢着一个人</li><li>读书 68 本，出游 3 次，看展和 Live 若干，没有宅出病</li><li>P2P 收益平稳，股市和币圈资产严重缩水……</li></ul><p>如果说去年的主题大概是认识自己、理解人心，那么今年的主题就更明确了：</p><blockquote><p>自由和迷失</p></blockquote><p>谁不向往自由呀，可是只有跟自由狭路相逢短兵相接时，才有机会近距离领教它的无情和凛冽。如果你对「生命中不能承受之轻」是怎样一种状态，感到好奇和困惑，那么给自己一年的自由，你会深刻理解它。</p><p>自由的代价很高昂。这几乎是一场甜蜜的、没有硝烟的战斗。</p><h2 id="自由即无序"><a href="#自由即无序" class="headerlink" title="自由即无序"></a>自由即无序</h2><p>产生这个想法的那一刻，大概是今年最佳的 「Aha moment」。</p><p>如果你愿意，现在就可以开始设想，如果自己自由了，接下来会发生什么。试着问自己，在每个周一早上醒来的时候，能否明确告诉自己，接下来要做什么。</p><p>“做什么不好呢？吃饭睡觉打豆豆，看剧发呆卖个萌。”</p><blockquote><p>然后呢？</p></blockquote><p>如果足够诚实，试着连续问自己 10 个「然后呢？」，就会看到我们在这简单的三个字面前，其实不堪一击。</p><blockquote><p>个人在新制度中发挥积极独立的作用，获得了积极意义上的自由。但他同时摆脱了曾给他安全感和归属感的纽带。由于人失去他在封闭社会里的固定位置，所以也找不到生活的意义所在。</p></blockquote><p>弗洛姆在「逃避自由」中写道。人为了逃避真正的自由，是什么事都干得出的。</p><p>自由意味着可以往任何方向去。没有既定的目的地，没有雀跃的欲求，没有明确的路径，甚至不再有对错、爱恨、意义、仪式、惯例和默契。一切坚固的东西都烟消云散了。</p><p>生命大概是一种反热力学第二定律的存在，是在万事万物趋于无序、死寂的洪流中，一个孤独的分支。布朗运动多自由啊！可是生命没有止步于无意义的死寂，生命就是生命所追求的终极秩序。</p><p>自由的代价，是要承受生命趋于无序时的惊慌失措。这可是一种跟死亡同源的恐慌啊！</p><p>人难以忍受自由之轻，因为它太重了。</p><h2 id="自由即责任"><a href="#自由即责任" class="headerlink" title="自由即责任"></a>自由即责任</h2><p>一个生命的基本意图，是维持生存状态，也就是维持对生命而言有序和有意义的状态。</p><p>如果我们获得了自由，同时也就不得不面对生命趋于耗散这个事实，于是就需要投入更多资源去维系生命的秩序。</p><p>自由好像确实只能以更大的自律来成就。这种自律，不是用命令、坚持、毅力堆砌成的行为规范，而是身处注意力摄魂怪无处不在的信息社会，如何葆有一种自觉、自洽又开放的知行准则，用这套准则推动个人的成长。</p><p>在不自由时，我们还可以轻而易举地遁逃到假想的自由空间。可是一旦身处自由的腹地，却发现无处可逃。这里是目标的真空，是自我的无限投射。从此不能再怨公司怨老板怨大环境，也不能再找没时间没力气没必要之类的借口。</p><p>不过，自由首先不是要负起责任，而是区分责任。</p><p>反思过去的诸多苦恼，发现很多困局都源于对自我责任缺乏清晰的界定，要么没有承担自己应付的责任，要么默许甚至期望别人担负属于自己的责任，要么去干涉、争抢原本属于他人的责任。这条界限的把握，是自我关系和人际关系的永恒难题。好在，在自由的议题下，我们有机会回归责任的本质，有两条准则会慢慢浮现：</p><blockquote><p>我不需要为任何一个人负责</p><p>我要对自己负起全部的责任</p></blockquote><p>什么？不需要为任何人负责？那工作怎么办？家庭怎么办？</p><p>只对自己负责。完不完成工作，怎样完成工作，怎样算负责，这个责任牵涉到哪些需要考虑的因素等等，界定这些本身就是自己责任的一部分。我们为自己定义的「负责」而负责，如果这种定义适应不良，造成了后果，那就由自己去承担这些后果，去决定要不要调整观念和行动。</p><p>不再为了老板负责、为了工资负责、为了所爱的人负责、为了事情本身负责、为了他人或社会文化强加在身的权利义务以及「应该不应该」负责，而是为自己那一整套为人处事的理念和行为结果负责。</p><p>去承担该承担的，去挣得应有的自由。</p><h2 id="自由即重建"><a href="#自由即重建" class="headerlink" title="自由即重建"></a>自由即重建</h2><p>自由的光鲜之下，逃不过一场可弱可强的自我崩塌。</p><p>自由带来了真空，而它吸引来的都是一些送命题：</p><blockquote><p>我想干什么？为什么要干这个？</p><p>我想成为什么样的人？</p><p>我存在的价值是什么？</p><p>当拿掉一个人的职位，抹去他的职业经历，他会是怎样一个人？</p><p>我要如何认识自己？别人会如何认识我？</p></blockquote><p>真空渴望被填补。</p><p>如果没有自发自觉的欲求，又没有主动探索和实现这些欲求的勇气，就需要别人来教导我们怎样去生活，怎么去行动和选择，要跟同事朋友交流什么，甚至是在朋友圈展示什么，根据运势今天又该穿什么。</p><p>我们所有的迷茫、不满、委屈，看似都来自于某个混乱的困局或气场不合的人，但是夜深人静扪心自问，问题的泉眼最终还是会指向自己：我到底想过一种什么样的生活，想获得什么样的成果，想成为什么样的人？</p><p>如果不去寻找这条串起人生意义的线索，而且每天反复提醒自己为何而战、开始去动手建设，那么真空一下子就会被千奇百怪的模因、价值观、媒体内容、口号、论战、广告、行动召唤、账单等等所填满。</p><p>坍塌不全是坏事。灾后总是要重建的。我们也终于有机会在碎成一片一片的瓦砾中，清除残余，重新建起带有自己印记的一砖一瓦。</p><p>这不是一件容易的事，我们可能已经把这个责任/权利让渡出去太久了。</p><p>还好，我还有需要挣的钱，有想探索的领域，有愿意珍惜和守护的人。慢慢的，它们汇聚成理想生活的图景，而我要做的，是放开与过去的纠缠，全身心地投入到这幅图景的建设当中。</p><h2 id="无关紧要是幸福的起点"><a href="#无关紧要是幸福的起点" class="headerlink" title="无关紧要是幸福的起点"></a>无关紧要是幸福的起点</h2><p>今年在自由里面迷失得太久了。这种迷失似乎是过去多年种种困惑的一个缩影，也是我始终难以交出答卷的人生课题。</p><p>我们早已生活在一个道理远比行动多的时代，卖道理已经成为产业，蔚为壮观。每当我们遇到难题，总是忍不住想去抓住一些「道理」来帮自己化险为夷。可是，道听途说的道理跟段子没有太大区别。想过一种富有意义的生活，靠的是从万千道理中，提炼出一种关于「我何以成为我」的信仰，并且亲测、调整再亲测，看看这种信仰能否经受行动和时间洪流的重重考验。</p><p>在与自由日夜斗争的这一年，有更多的机会、时间和耐心，来跟自己的自卑、自恋、幻想、贪欲、嫉妒、无助们对谈。出乎意料地，最大的收获不是进入一种向往的生活状态，而是慢慢习得一种「与我无关」的心态。这种心态，帮助我提高关于「自我」的分辨率，逐渐回撤那些投入在既与我无关、我也无法影响的人事物上的资源，重新投放在我可以也应该掌控的事情上面。</p><p>到底什么与我有关，到底什么真正要紧。</p><p>我相信，「与我无关」是专注的开始，是幸福的起点，也恰好就是人与人之间相互尊重的本源。</p><p>愿你我在来年，都能珍惜对的人，好好经营对的事情，将自己生命的印记，印刻在那些值得浪费的当下。</p><p>新年快乐。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;今年是特别的一年，特别到在写年终总结的时候，如此不情愿为它画上句点。&lt;/p&gt;
&lt;p&gt;整整一年，在远未实现财务自由的时候，就贸然送给自己一个长假。嗯，是奢侈的，是幸运的。&lt;/p&gt;
&lt;p&gt;回顾这其实挺丧的一年，也还是收获不少：&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
      <category term="HackYourself" scheme="http://uegeek.com/categories/HackYourself/"/>
    
    
      <category term="HackYourself" scheme="http://uegeek.com/tags/HackYourself/"/>
    
      <category term="2018" scheme="http://uegeek.com/tags/2018/"/>
    
      <category term="自由职业" scheme="http://uegeek.com/tags/%E8%87%AA%E7%94%B1%E8%81%8C%E4%B8%9A/"/>
    
      <category term="自由" scheme="http://uegeek.com/tags/%E8%87%AA%E7%94%B1/"/>
    
      <category term="幸福" scheme="http://uegeek.com/tags/%E5%B9%B8%E7%A6%8F/"/>
    
      <category term="成长" scheme="http://uegeek.com/tags/%E6%88%90%E9%95%BF/"/>
    
  </entry>
  
  <entry>
    <title>生成式艺术和算法创作10-响应式智能体和智能架构</title>
    <link href="http://uegeek.com/181213-generative-art-creativity-10.html"/>
    <id>http://uegeek.com/181213-generative-art-creativity-10.html</id>
    <published>2018-12-13T11:45:46.000Z</published>
    <updated>2018-12-13T11:51:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/CC-blogtitle.png" alt=""></p><a id="more"></a><ul><li><a href="https://www.uegeek.com/181009-generative-art-creativity-01.html" target="_blank" rel="noopener">生成式艺术和算法创作01-概述</a></li><li><a href="https://www.uegeek.com/181014-generative-art-creativity-02.html" target="_blank" rel="noopener">生成式艺术和算法创作02-随机和噪声</a></li><li><a href="https://www.uegeek.com/181021-generative-art-creativity-03.html" target="_blank" rel="noopener">生成式艺术和算法创作03-混沌和分形</a></li><li><a href="https://www.uegeek.com/181023-generative-art-creativity-04.html" target="_blank" rel="noopener">生成式艺术和算法创作04-规则系统</a></li><li><a href="https://www.uegeek.com/181107-generative-art-creativity-05.html" target="_blank" rel="noopener">生成式艺术和算法创作05-Tessellation</a></li><li><a href="https://www.uegeek.com/181120-generative-art-creativity-06.html" target="_blank" rel="noopener">生成式艺术和算法创作06-形状语法</a></li><li><a href="https://www.uegeek.com/181123-generative-art-creativity-07.html" target="_blank" rel="noopener">生成式艺术和算法创作07-向自然致敬的 L-system</a></li><li><a href="https://www.uegeek.com/181130-generative-art-creativity-08.html" target="_blank" rel="noopener">生成式艺术和算法创作08-马尔可夫模型</a></li><li><a href="https://www.uegeek.com/181208-generative-art-creativity-09.html" target="_blank" rel="noopener">生成式艺术和算法创作09-人工智能体</a></li></ul><p>上一篇我们了解了<a href="https://www.uegeek.com/181208-generative-art-creativity-09.html" target="_blank" rel="noopener">人工智能体的概念和在创作领域的应用</a>。今天我们来看看其中一种重要的智能体：响应式智能体。</p><h2 id="Langton’s-ant"><a href="#Langton’s-ant" class="headerlink" title="Langton’s ant"></a>Langton’s ant</h2><p>兰顿蚂蚁（Langton’s ant）是元胞自动机的例子。它由 Christopher Langton 在 1986 年提出，它由黑白格子和一只「蚂蚁」构成，是一个二维图灵机。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/0/09/LangtonsAntAnimated.gif" alt=""></p><p>Animation of first 200 steps of Langton’s ant</p><p>兰顿蚂蚁的算法:</p><ul><li>第1步：向前迈出一步</li><li>步骤2：如果当前单元格为白色，将其变为黑色并向右旋转 90°</li><li>步骤3：如果当前单元格为黑色，则将其变为白色并向左转 90°</li></ul><p>兰顿蚂蚁拥有非常简单的逻辑和复杂的表现。在 2000 年，兰顿蚂蚁的图灵完备性被证明。兰顿蚂蚁的想法后来被推广，比如使用多种颜色。</p><p><img src="https://ai2-s2-public.s3.amazonaws.com/figures/2017-08-08/1bd77e59d60852dd135b541fa41b4492713c461b/3-Figure6-1.png" alt=""></p><p>兰顿蚂蚁其实就是一种响应式的架构。它有以下优点：</p><ul><li>简单</li><li>计算易处理</li><li>稳健性</li><li>模型优雅</li></ul><p>而缺点则包括：</p><ul><li>仅使用局部知识推动行动，无法将非局部或长期信息考虑在内</li><li>缺乏清晰的工程设计方法，难以调试</li><li>丧失透明度和可读性，与人类的互动很困难</li></ul><h2 id="智能体架构"><a href="#智能体架构" class="headerlink" title="智能体架构"></a>智能体架构</h2><p>典型的认知智能体由一系列过程组成。</p><p><img src="http://img.viz.mobi/robot%20layered%20control%20system.png" alt="cognitive agent arch"></p><p>智能体通过感应器感知世界。由一个感知模块提供信息给建模模块，更新世界的表征。然后由一个向智能体提供目标和关于世界的信念的规划模块，决定执行什么动作。最后，有一个马达控制模块执行动作，向促动器发送命令。</p><p>Rodney Brooks 提出的这个架构是任务完成行为的层次结构，较低层代表更原始的行为。 每种行为都是一种相当简单的规则结构，每种行为都与其他行为竞争，以控制智能体 。</p><p>Rodney Brooks 也提出过另外一种架构——不是基于一系列链接在一起的模块，而是在行为层次上彼此平行放置：</p><p><img src="http://img.viz.mobi/robot%20layered%20control%20system2.png" alt="reactive agents"></p><p>在子层级中，可以使用更灵活的结构：</p><p><img src="http://img.viz.mobi/subsumption%20architecture-modified.png" alt="subsumption arch"></p><p>Rodney Brooks 根据这些架构设计了机器人 Ghengis：</p><p><img src="http://www.ai.mit.edu/projects/genghis/genghis.jpg" alt=""></p><h2 id="混合架构"><a href="#混合架构" class="headerlink" title="混合架构"></a>混合架构</h2><p>混合架构设计中的关键问题，是各个子组件（响应组件和协商组件）之间交互的元控制。</p><p>多层架构：</p><p><img src="/Users/kidult00/Downloads/Courses/Kadenze/generative-art-and-computational-creativity-i/5-reactive-agents-and-multiagent-systems/layered%20hybrid%20arch.png" alt="layered hybrid arch"></p><p>水平结构的例子：</p><p><img src="/Users/kidult00/Downloads/Courses/Kadenze/generative-art-and-computational-creativity-i/5-reactive-agents-and-multiagent-systems/layering%20arch.png" alt="layering arch"></p><p>Touring Machines: Autonomous Agents with Attitudes (book, by Innes A. Ferguson, Publisher: IEEE Computer Society Press, Published Date: 01/10/2017)</p><p>垂直架构的例子：</p><p><img src="/Users/kidult00/Downloads/Courses/Kadenze/generative-art-and-computational-creativity-i/5-reactive-agents-and-multiagent-systems/InteRRaP.png" alt="InteRRaP"></p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://www.wikiwand.com/en/Intelligent_agent" target="_blank" rel="noopener">Intelligent agent - Wikiwand</a></li><li>Rodney Brooks, A Robust Layered Control System for a Mobile Robot, AI Memo report, 1985</li><li><a href="https://www.wikiwand.com/en/Langton%27s_ant" target="_blank" rel="noopener">Langton’s ant - Wikiwand</a></li><li><a href="https://www.kadenze.com/courses/generative-art-and-computational-creativity-i" target="_blank" rel="noopener">Generative Art and Computational Creativity | Kadenze</a></li><li><a href="https://www.kadenze.com/courses/generative-art-and-computational-creativity-i/sessions/cognitive-agents-and-multiagent-systems" target="_blank" rel="noopener">Cognitive Agents And Multiagent Systems | Kadenze</a></li></ul><p>Robot art</p><p>CYSP1, Nicolas Schoffer, 1953</p><p><img src="https://www.olats.org/schoffer/archives/img/cysprd1.jpg" alt=""></p><p>Nenage, Norman White, 1974, multi-robot</p><p><img src="http://dada.compart-bremen.de/imageUploads/medium/11WhiteMenage74.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/CC-blogtitle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="AI" scheme="http://uegeek.com/tags/AI/"/>
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="艺术" scheme="http://uegeek.com/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="Generative Art" scheme="http://uegeek.com/tags/Generative-Art/"/>
    
      <category term="Computational Creativity" scheme="http://uegeek.com/tags/Computational-Creativity/"/>
    
      <category term="创意" scheme="http://uegeek.com/tags/%E5%88%9B%E6%84%8F/"/>
    
      <category term="创造力" scheme="http://uegeek.com/tags/%E5%88%9B%E9%80%A0%E5%8A%9B/"/>
    
      <category term="Agent" scheme="http://uegeek.com/tags/Agent/"/>
    
      <category term="智能体" scheme="http://uegeek.com/tags/%E6%99%BA%E8%83%BD%E4%BD%93/"/>
    
      <category term="认知智能体" scheme="http://uegeek.com/tags/%E8%AE%A4%E7%9F%A5%E6%99%BA%E8%83%BD%E4%BD%93/"/>
    
      <category term="BDI" scheme="http://uegeek.com/tags/BDI/"/>
    
  </entry>
  
  <entry>
    <title>生成式艺术和算法创作09-人工智能体</title>
    <link href="http://uegeek.com/181208-generative-art-creativity-09.html"/>
    <id>http://uegeek.com/181208-generative-art-creativity-09.html</id>
    <published>2018-12-08T11:43:54.000Z</published>
    <updated>2018-12-08T11:55:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/CC-blogtitle.png" alt=""></p><a id="more"></a><ul><li><a href="https://www.uegeek.com/181009-generative-art-creativity-01.html" target="_blank" rel="noopener">生成式艺术和算法创作01-概述</a></li><li><a href="https://www.uegeek.com/181014-generative-art-creativity-02.html" target="_blank" rel="noopener">生成式艺术和算法创作02-随机和噪声</a></li><li><a href="https://www.uegeek.com/181021-generative-art-creativity-03.html" target="_blank" rel="noopener">生成式艺术和算法创作03-混沌和分形</a></li><li><a href="https://www.uegeek.com/181023-generative-art-creativity-04.html" target="_blank" rel="noopener">生成式艺术和算法创作04-规则系统</a></li><li><a href="https://www.uegeek.com/181107-generative-art-creativity-05.html" target="_blank" rel="noopener">生成式艺术和算法创作05-Tessellation</a></li><li><a href="https://www.uegeek.com/181120-generative-art-creativity-06.html" target="_blank" rel="noopener">生成式艺术和算法创作06-形状语法</a></li><li><a href="https://www.uegeek.com/181123-generative-art-creativity-07.html" target="_blank" rel="noopener">生成式艺术和算法创作07-向自然致敬的 L-system</a></li><li><a href="https://www.uegeek.com/181130-generative-art-creativity-08.html" target="_blank" rel="noopener">生成式艺术和算法创作08-马尔可夫模型</a></li></ul><h2 id="人工智能体"><a href="#人工智能体" class="headerlink" title="人工智能体"></a>人工智能体</h2><p>我们常看到 OOP - 面向对象的编程，对象是 Object。这篇文章则是关于智能体（agent）的综述。智能体和对象有什么区别呢？智能体是主动的，对象则不是。</p><p>智能体的概念是计算机科学的核心，在认知科学中也很重要。因为它可以研究真实的主体，建模和在现实世界中模拟并观察智能群体。</p><p>人工智能体是一个计算机系统，能够代表使用者或设计者自主运行。<strong>智能体可以形式化表达为从感知到行动的函数</strong>，它将每个可能的感知序列，映射到智能体可以执行的操作，或映射到影响最终操作的系数、反馈元素、函数或常量。软件和机器人都可视为智能体。</p><p>人工智能体有以下特征：</p><ul><li>情境性（situatedness）：通过传感器感知环境，能够通过行动效果器（effectors）影响环境 </li><li>自主和积极主动（Autonomy and pro-activity）: 行动没有外部干预，自己控制内部状态</li><li>灵活性<ul><li>可响应: 及时响应环境的变化</li><li>社交性：与其他智能体或人类互动</li></ul></li></ul><p><img src="https://www.doc.ic.ac.uk/project/examples/2005/163/g0516334/images/sensorseniv.png" alt=""></p><p>智能体的结构</p><ul><li>认知（Cognitive）：维持内部符号表征（一般会有记忆），可能包含推理和规划的评估结构（deliberative architectures）</li><li>反应（Reactive）：没有明确的环境表征，专注于行为规则<ul><li>反射：没有内部状态（只是将输入映射到输出）</li><li>反应：有内部状态（但不是认知）</li></ul></li><li>混合（Hybrid）：混合反应和认知成分，以平衡反应性（reactiveness）和审慎性（deliberativeness）</li></ul><blockquote><p>A first-order intentional system has beliefs and desires but no beliefs and desires about beliefs and desires.</p><p>A second -order intentioal system has beliefs and desires about beliefs and desires both those of others and its own.</p></blockquote><p>一阶意向系统和二阶意向系统。</p><h2 id="Belief–Desire–Intention-BDI-模型"><a href="#Belief–Desire–Intention-BDI-模型" class="headerlink" title="Belief–Desire–Intention BDI 模型"></a>Belief–Desire–Intention BDI 模型</h2><p>信念 - 愿望 - 意图模型（BDI）是智能体编程的软件模型。从表面看，它以智能体的信念、愿望和意图的实现为特征，使用这些概念来解决智能体编程中的特定问题。 实质上它提供了一种机制，将选择计划的活动与当前活动计划的执行分开。 因此，BDI 智能体能够平衡计划（选择做什么）和执行这些计划所花费的时间。</p><p><img src="http://www.inf.ufrgs.br/prosoft/bdi4jade/wp-content/uploads/bdiArch.jpg" alt=""></p><ul><li>Beliefs：信息态度，表示状态和智能体的 know-how，可能是错误的，由 perception 和 reasoning 更新</li><li>Desires：动机态度，评估是对欲望的过滤，决定哪个愿望可以提升为真正的意图</li><li>Intertions：智能体致力于发生的愿望，它是一致的、不冲突的、可能达成的，比 Desires 要强</li></ul><p>确定性行动由以下元素表示：</p><ul><li>可能包含参数的名称</li><li>前置条件列表：必须为真的要执行操作的事实列表</li><li>删除列表：执行操作后不再为真的事实列表</li><li>添加列表：通过执行操作使事实为真的列表</li></ul><p><img src="http://img.viz.mobi/3-BDI%20agent.png" alt="BDI agent"></p><p>Interpreter 主要做两个操作：</p><ul><li>根据当前的信念选择需要追求的意图</li><li>Mean-end 推理生成或选择要执行的计划，以实现意图</li></ul><p>BDI 算法可以表达如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(B,D,I): = Initialize-state();</span><br><span class="line"></span><br><span class="line">While(true):</span><br><span class="line"></span><br><span class="line">    update(B,D,I); //according to internal and external perceptions</span><br><span class="line"></span><br><span class="line">    Options: = option-generator(B,D,I)</span><br><span class="line"></span><br><span class="line">    Selected-options: = deliberate(B,D,I)</span><br><span class="line"></span><br><span class="line">    Update-intentions(selected-options, I)</span><br><span class="line"></span><br><span class="line">    Plan: = planning(I,B)</span><br><span class="line"></span><br><span class="line">    execute(plan);</span><br><span class="line"></span><br><span class="line">    Get-new-perceptions()</span><br><span class="line"></span><br><span class="line">end while</span><br></pre></td></tr></table></figure><p>可以对基础 BDI 算法做很多调整，比如重新规划或意图再考虑。问题是，如果经常重新考虑，会花费太多时间来评估而没有足够时间采取行动；如果使用两种策略，不经常重新考虑，那么盲目执行可能会做出不相关的行动。</p><p>真是经典的 exploration vs. exploitation (deliberation and action) tension 呢！</p><h2 id="智能体在多个创作领域的应用"><a href="#智能体在多个创作领域的应用" class="headerlink" title="智能体在多个创作领域的应用"></a>智能体在多个创作领域的应用</h2><h3 id="UNMAKEABLE-LOVE"><a href="#UNMAKEABLE-LOVE" class="headerlink" title="UNMAKEABLE LOVE"></a>UNMAKEABLE LOVE</h3><p>UNMAKEABLE LOVE 是一个互动多媒体装置作品。此作品由多人操控，但观众无法操控 3D 动画影像，只能透过手电筒感应器的虚拟光束投射到背投式影幕，聚光探索 3D 人物动画的行为与影像。</p><p><img src="http://unmakeablelove.org/images/UML_main.png" alt=""></p><p><a href="http://unmakeablelove.org/" target="_blank" rel="noopener">UNMAKEABLELOVE</a></p><p>作品中的六角形立体柱有六面背投式影幕，可由六个人同时操控手电筒聚光探索 3D 人物活动状况。当观众在操控手电筒投射屏幕观看时，会看到对面的观用者也在用手电筒投射，观看到的对方是真实人物经由红外线摄取影像呈现在屏幕，让观看者仿佛看到真实的另一观看者，让观看者之间在虚拟 3D人物动画的氛围情境内互动。</p><p>这个作品通过算法智能体，人工生命，虚拟社区，人机交互，增强虚拟，混合现实和多媒体表现的实践，以「参与身体的原始铭文」。它将 Beckett 的 “lost ones” 定位在一个虚拟空间中，这个虚拟空间代表着一种严重的身体限制状态，可能会唤起监狱，庇护，拘留营，甚至是「现实」的电视节目。</p><h3 id="The-Painting-Fool"><a href="#The-Painting-Fool" class="headerlink" title="The Painting Fool"></a>The Painting Fool</h3><p>2013 年 7 月，一名崭露头角的艺术家在巴黎 Galerie Oberkampf 举办了展览会。</p><p>展览会持续了一周时间，民众前来观看，新闻媒体广泛报道，一些作品花了多年时间创作，还有一些直接画在画廊上。无论怎么看，这都是一场典型的艺术展。唯一不同的是，这名艺术家不是真人，而是一个名叫 The Painting Fool 的电脑程序。</p><p><img src="http://www.thepaintingfool.com/commercial/tree.png" alt=""></p><p>The painting fool  是一个模块化的架构，包括：</p><ul><li>视觉系统</li><li>内存模块</li><li>一些自我评价系统</li><li>感知系统</li><li>情绪系统</li><li>一些渲染模块，例如 肖像模块</li><li>解释系统</li><li>概念生成模块</li></ul><p>The Painting Fool 是 Simon Colton 的作品。Colton 是伦敦大学金史密斯学院的计算机创作学教授，他认为要让程序创作，先要跨过一些与图灵测试不同的测试。图灵测试要求机器按人类的方式进行可以信服的交谈，Colton 却认为 AI 艺术家要让自己的行为变得「富有技巧」、「可以欣赏」、「富有想像力」才行。</p><p>到目前为止，Painting Fool 已经在这三个方面取得了进步。所谓的欣赏性，按 Colton 的意思就是对情绪作出反应。Painting Fool 的早期作品由图片拼成。程序先要扫描英国卫报一篇关于阿富汗战争的文章，从中提取关键字，比如“军队”和“英国人”，然后寻找与之相关的图片。找到之后程序用图片制作合成图，以反映报纸文章的内容和情绪。</p><h3 id="音乐智能体"><a href="#音乐智能体" class="headerlink" title="音乐智能体"></a>音乐智能体</h3><p>在音乐智能智能体方面，George E. Lewis 在 1983 完成了一个即兴的爵士演奏，是早期有智能智能体参与的例子：</p><div class="video-container"><iframe src="//www.youtube.com/embed/hO47LiHsFtc" frameborder="0" allowfullscreen></iframe></div><p><a href="https://www.youtube.com/watch?v=hO47LiHsFtc&amp;list=RDhO47LiHsFtc#t=12" target="_blank" rel="noopener">George E. Lewis – Voyager Duo 4 - YouTube</a></p><p>Arne Eigenfeldt 是加拿大作曲家，他创作互动和生成音乐系统。 Eigenfeldt 为当代舞蹈做了大量工作，特别是与编舞家Serge Bennathan合作。他的电子音乐主要用 Max/MSP 编写的软件中实时生成。 他最近的研究重点是将知识编码到智能性能系统中。 </p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Arne_eigenfeldt_04_jpg.jpg/1200px-Arne_eigenfeldt_04_jpg.jpg" alt=""></p><div class="video-container"><iframe src="//www.youtube.com/embed/i7IP9d_KBzA" frameborder="0" allowfullscreen></iframe></div><p><a href="https://www.youtube.com/watch?v=i7IP9d_KBzA" target="_blank" rel="noopener">Moments: Time and Space - YouTube</a></p><p><a href="https://aeigenfeldt.wordpress.com/works/music-by-agents/" target="_blank" rel="noopener">Music by agents</a> 是 Arne Eigenfeldt 创建的实时作曲系统，由一组 BDI 智能体组成。智能体们协商各种参数，实现和谐的实时作曲。</p><p><a href="http://metacreation.net/?page_id=443" target="_blank" rel="noopener">James Maxwell</a>, <a href="http://metacreation.net/?page_id=479" target="_blank" rel="noopener">Arne Eigenfeldt</a>, <a href="http://metacreation.net/?page_id=482" target="_blank" rel="noopener">Philippe Pasquier</a>开发的 <a href="http://metacreation.net/musicogmanuscore/" target="_blank" rel="noopener">MusiCOG</a> 是一个用于单声道音乐信息的识别，生成，延续和模式编辑的系统模型。</p><blockquote><p>Music composition is an intellectually demanding human activity that engages a wide range of cognitive faculties. In designing MusiCOG, we wanted to bring forward ideas from our previous work, and combine these with principles from the fields of music perception and cognition and ICA design, in an initial attempt at an integrated model. </p></blockquote><p>为音乐理解和分类设计的 MusiCog 是认知智能体中，处理领域特定知识的智能体。音乐认知智能体一般会参与以下活动：</p><ul><li>自己演奏</li><li>与人类一起演奏</li><li>帮助人类创作新材料</li></ul><p>MUME 是一个汇集了对开发系统感兴趣的艺术家、从业者和研究人员的组织，研究可以自主地识别、学习、表现、编写、完成、陪伴或解释音乐的系统。Metacreation 涉及使用人工智能，人工生命和机器学习的工具和技术，它们本身通常受到认知和生命科学的启发。其中有一个项目叫做 Musebot。</p><p><img src="http://img.viz.mobi/mume_logo-e1544125760113.png" alt=""></p><p>Musebot 项目的目标是建立一个有趣和实验性的研究，教育和制作平台。它是一个协作性的创造性实验：共同制作自主软件智能体，共同制作原创音乐。这些软件智能体将在一个计算机网络上运行。每个软件智能体大致对应于一段音乐中的单个乐器部分，如贝斯或鼓点。</p><p>Musebot 可以与其他 Musebot 一起自动生成音乐。Musebot 协议传递实时数据，但不是具体数据，而是更高层次的音乐概念。</p><h3 id="会话智能体，虚拟智能体，游戏智能体"><a href="#会话智能体，虚拟智能体，游戏智能体" class="headerlink" title="会话智能体，虚拟智能体，游戏智能体"></a>会话智能体，虚拟智能体，游戏智能体</h3><p>会话智能体是相对成熟的智能智能体研究领域，一些典型的智能体包括：</p><ul><li><p>ELIZA, Joseph Weizenbaum, 1964</p></li><li><p>PARRY, Kenneth Colby, 1972</p></li><li><p>SmarterChild, ActiveBuddy, 2001</p></li><li><p>Eugene Goostman, 2001</p></li></ul><p>虚拟智能体</p><p><a href="http://stelarc.org/?catID=20241" target="_blank" rel="noopener">STELARC | PROSTHETIC HEAD</a> (Stelarc, 2003) 是基于认知智能体体系结构的互动作品。智能体可以感知环境，通过检测颜色的超声波传感器来感知观众的服装颜色和基本的运动及行为：<br><img src="http://stelarc.org/media/img/pro-head/head-animation-on-white.gif" alt=""></p><p>游戏中存在许多认知智能体，它们通常不是游戏玩家，而是执行一些需要自动化的任务。这些互动叙事中的智能体行为，可能是预先编写好的，也可能是由程序自动生成的（比如 intelligent drama/story/manager 或 procedural simulation）。</p><h2 id="智能体通信"><a href="#智能体通信" class="headerlink" title="智能体通信"></a>智能体通信</h2><p>认知智能体通过智能体消息和智能体通信协议进行交流，也可能使用 Agent communication language(ACL) 交流，常用的 ACL 有 KQML，FIPA ACL。</p><p>言语行为类型：</p><ul><li>自信：speaker 表达世界表现（告知，断言，……）</li><li>指令：speaker 要求其他人（订单，问题，请求……）</li><li>承诺：speaker 承诺（承诺）</li><li>表达：speaker 表达感受（爱情宣言，…）</li><li>陈述：speaker 根据情境行事（开除，祝福，结婚……）</li></ul><p>消息类型语义：言语行为，前提条件，后置条件。</p><p>智能体之间的通讯过程也涉及到复杂的感知、解释、推理、评估、行动等过程：</p><p><img src="http://img.viz.mobi/9-conversational%20agents.png" alt="conversational agents"></p><p>智能体通讯协议帮助结构化智能体之间的对话，提高通讯效率：</p><p><img src="http://img.viz.mobi/10-agent%20communication%20protocals.png" alt="agent communication protocals"></p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://www.wikiwand.com/en/Intelligent_agent" target="_blank" rel="noopener">Intelligent agent - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Belief%E2%80%93desire%E2%80%93intention_software_model" target="_blank" rel="noopener">Belief–desire–intention software model - Wikiwand</a></li><li><a href="https://www.kadenze.com/courses/generative-art-and-computational-creativity-i/sessions/cognitive-agents-and-multiagent-systems" target="_blank" rel="noopener">Cognitive Agents And Multiagent Systems | Kadenze</a></li><li><a href="http://musicalmetacreation.org/musebots/musebot-getting-started/" target="_blank" rel="noopener">Musebot Getting Started | Musical Metacreation</a></li><li><a href="https://www.doc.ic.ac.uk/project/examples/2005/163/g0516334/" target="_blank" rel="noopener">Topics in AI : AGENTS</a></li><li><a href="http://www.thepaintingfool.com/index.html" target="_blank" rel="noopener">The Painting Fool - A Computer Artist</a></li><li><a href="https://www.researchgate.net/profile/Philippe_Pasquier/publication/220982337_Shadow_agent_a_new_type_of_virtual_agent/links/0912f510ac2bea76ef000000.pdf" target="_blank" rel="noopener">Shadow agent: a new type of virtual agent</a></li><li><a href="https://aeigenfeldt.wordpress.com/works/music-by-agents/" target="_blank" rel="noopener">music by agents – arne eigenfeldt</a></li><li><a href="http://metacreation.net/musicogmanuscore/" target="_blank" rel="noopener">MusiCOG &amp; ManuScore |</a></li><li><a href="https://www.jiqizhixin.com/articles/2016-10-28-4" target="_blank" rel="noopener">40年认知架构研究概览：实现通用人工智能的道路上我们已走了多远？ | 机器之心</a></li><li><a href="https://www.leiphone.com/news/201602/W3R5gl8rWGCV7xDL.html" target="_blank" rel="noopener">机器学徒：AI有可能变成画家吗？ | 雷锋网</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/CC-blogtitle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="AI" scheme="http://uegeek.com/tags/AI/"/>
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="艺术" scheme="http://uegeek.com/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="Generative Art" scheme="http://uegeek.com/tags/Generative-Art/"/>
    
      <category term="Computational Creativity" scheme="http://uegeek.com/tags/Computational-Creativity/"/>
    
      <category term="创意" scheme="http://uegeek.com/tags/%E5%88%9B%E6%84%8F/"/>
    
      <category term="创造力" scheme="http://uegeek.com/tags/%E5%88%9B%E9%80%A0%E5%8A%9B/"/>
    
      <category term="Agent" scheme="http://uegeek.com/tags/Agent/"/>
    
      <category term="智能体" scheme="http://uegeek.com/tags/%E6%99%BA%E8%83%BD%E4%BD%93/"/>
    
      <category term="认知智能体" scheme="http://uegeek.com/tags/%E8%AE%A4%E7%9F%A5%E6%99%BA%E8%83%BD%E4%BD%93/"/>
    
      <category term="BDI" scheme="http://uegeek.com/tags/BDI/"/>
    
  </entry>
  
  <entry>
    <title>生成式艺术和算法创作08-马尔可夫模型</title>
    <link href="http://uegeek.com/181130-generative-art-creativity-08.html"/>
    <id>http://uegeek.com/181130-generative-art-creativity-08.html</id>
    <published>2018-11-30T14:16:40.000Z</published>
    <updated>2018-11-30T14:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.viz.mobi/CC-blogtitle.png" alt=""></p><a id="more"></a><ul><li><a href="https://www.uegeek.com/181009-generative-art-creativity-01.html" target="_blank" rel="noopener">生成式艺术和算法创作01-概述</a></li><li><a href="https://www.uegeek.com/181014-generative-art-creativity-02.html" target="_blank" rel="noopener">生成式艺术和算法创作02-随机和噪声</a></li><li><a href="https://www.uegeek.com/181021-generative-art-creativity-03.html" target="_blank" rel="noopener">生成式艺术和算法创作03-混沌和分形</a></li><li><a href="https://www.uegeek.com/181023-generative-art-creativity-04.html" target="_blank" rel="noopener">生成式艺术和算法创作04-规则系统</a></li><li><a href="https://www.uegeek.com/181107-generative-art-creativity-05.html" target="_blank" rel="noopener">生成式艺术和算法创作05-Tessellation</a></li><li><a href="https://www.uegeek.com/181120-generative-art-creativity-06.html" target="_blank" rel="noopener">生成式艺术和算法创作06-形状语法</a></li><li><a href="https://www.uegeek.com/181123-generative-art-creativity-07.html" target="_blank" rel="noopener">生成式艺术和算法创作07-向自然致敬的 L-system</a></li></ul><h2 id="马尔可夫模型-Markov-Model"><a href="#马尔可夫模型-Markov-Model" class="headerlink" title="马尔可夫模型 Markov Model"></a>马尔可夫模型 Markov Model</h2><p>开始的开始，有必要来认识一下主人公，俄国数学家安德雷·安德耶维齐·马尔可夫。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/70/AAMarkov.jpg/640px-AAMarkov.jpg" alt=""></p><p>1874 年，18 岁的马尔可夫考入圣彼得堡大学，师从切比雪夫（著名的切比雪夫定理提出者）。他是物理-数学博士，圣彼得堡大学教授，圣彼得堡科学院院士。在概率论、数论、函数逼近论和微分方程等方面卓有成就。</p><p>总的来说，马尔可夫模型是一种<strong>统计模型</strong>，可以用于计算条件概率分布，为一系列的离散事件建模。这就应用很广泛了，哪些是「离散事件」呢？句子中的词汇，音乐中的音符，通过交通灯的车辆数，女票每个月购物的次数……</p><p>以「马尔可夫」开头的术语有很多，先来熟悉一下最重要的几个：</p><ul><li>马尔可夫性质：当一个随机过程在给定现在状态及所有过去状态情况下，其未来状态的条件概率分布仅依赖于当前状态。</li><li>马尔可夫过程：是一个具备了马可夫性质的随机过程，不具备记忆特质（memorylessness）。换言之，马可夫过程的条件概率仅仅与系统的当前状态相关，而与过去历史或未来状态，都是独立、不相关的。</li><li>马尔可夫链：具备离散状态的马可夫过程，通常使用离散的时间集合定义。</li><li>马尔可夫模型：用马尔科夫过程生成序列的算法模型</li></ul><p>它们之间的关系大概可以这样划分：</p><table><thead><tr><th></th><th>系统状态是完全可观察的</th><th>系统状态是部分可观察的</th></tr></thead><tbody><tr><td>系统是自治的</td><td><a href="https://www.wikiwand.com/en/Markov_chain" target="_blank" rel="noopener">马尔可夫链</a></td><td><a href="https://www.wikiwand.com/en/Hidden_Markov_model" target="_blank" rel="noopener">隐马尔可夫模型</a></td></tr><tr><td>系统受到控制</td><td><a href="https://www.wikiwand.com/en/Markov_decision_process" target="_blank" rel="noopener">马尔可夫决策过程</a></td><td><a href="https://www.wikiwand.com/en/Partially_observable_Markov_decision_process" target="_blank" rel="noopener">部分可观察的马尔可夫决策过程</a></td></tr></tbody></table><p>在马尔可夫模型中</p><ul><li>$X_t$ 是时间 t 时表示音符的随机变量</li><li>$P(X_t)$ 是随机事件 $X_t$ 的概率分布</li></ul><p><img src="http://img.viz.mobi/cc-markov-model.png" alt=""></p><p>马尔可夫模型可以基于「上文」做出判断和预测，未来状态只取决于当前状态或者限定范围的过去状态。</p><p>实现马尔可夫模型的学习算法有几个步骤：</p><ul><li>构建一个 transition count table (state transition matrix)，计算每一种可能的上下文的频率分布</li><li>用每一种组合的 count 除以所有的组合总数，即下表中每一行加起来为 1</li><li>随机选择一个起始值，根据概率表格选择下一个序列值</li></ul><p>马尔可夫模型生成算法其实也是一种 <a href="https://www.uegeek.com/181014-generative-art-creativity-02.html" target="_blank" rel="noopener">random walk</a> ，根据转换概率分布，基于目前已经生成的序列，随机选择下一个序列值。</p><p>以一段乐曲为例，它由音符 B2,C4#,D4,E4,F4#,G4,G4#,A4,B4,C5#,D5,E5 组成。计算每一个音符后面紧跟着的音符的出现概率。例如，最后一个音符 E5，出现在它后面的音符只有 A4 和 C5#，出现概率分别是 6/16 和 10/16。当生成新的序列时，如果当前音符是 E5，那么根据表格，下一个音符只可能是 A4 或 C5#。</p><p><img src="http://img.viz.mobi/2-song%20corpus.png" alt="song corpus"></p><p>再来看一个三节点的马尔可夫链：</p><p><img src="http://codehop.com/wp-content/uploads/2010/07/3_node_markov_chain.gif" alt=""></p><p>这首马尔可夫旋律以 state_0 开始，播放一个八分音符 Eb。然后选择一个新的状态。选择 state_0，state_1 或 state_2 的概率相等，都是 1/3。假设选择了 state_2，则播放下加二间的十六分音符 G。从 state_2 开始，state_0 被选择的概率是 1/10，state_1 是 2/10，state_2 是 7/10。</p><p>因为马尔可夫模型状态是离散的，可以用有限状态的自动机 (automata) 来表示。</p><p><img src="http://img.viz.mobi/4-markov%20models%20automata%20representation.png" alt="markov models automata representation"></p><h2 id="变量马尔可夫模型"><a href="#变量马尔可夫模型" class="headerlink" title="变量马尔可夫模型"></a>变量马尔可夫模型</h2><p>在随机过程中，变量马尔可夫（Variable order Markov Models/VOM/VMM/VOMM）模型是一类重要的模型，它扩展了马尔可夫模型。</p><p>马尔可夫模型中，具有马尔可夫性质的序列中的每个随机变量，取决于固定数量的随机变量；在 VOM 模型中，该数量的调节随机变量可以基于观察到的特定实现而变化。</p><p>这个实现序列通常被称为上下文 ; 因此 VOM 模型也称为上下文树。调节随机变量数量的灵活性对于许多应用来说是非常有利的，例如统计分析、分类和预测。</p><p>变量马尔可夫模型一般由三部分组成：</p><ul><li>Counting：建立转换表，这是预测的来源</li><li>Smoothing：处理未见过的事件/序列</li><li>Variable length modeling:<ul><li>A transition matrix</li><li>Probabilistic suffix tree</li><li>Factor Oracle, and Context Tree Weighting method (CTW)</li><li>Lempel-Ziv 78 and its improvement LZ-MS</li><li>Prediction by partial match</li></ul></li></ul><p>它的缺点之一是难以产生语料之外的内容。</p><h2 id="隐马尔科夫模型-Hidden-Markov-Model"><a href="#隐马尔科夫模型-Hidden-Markov-Model" class="headerlink" title="隐马尔科夫模型 Hidden Markov Model"></a>隐马尔科夫模型 Hidden Markov Model</h2><p>隐马尔可夫模型（Hidden Markov Model，HMM）是统计模型，它用来描述一个<strong>含有隐含未知参数的马尔可夫过程</strong>。其难点是<strong>从可观察的参数中确定该过程的隐含参数</strong>，然后利用这些参数来作进一步的分析，例如模式识别。</p><p>在一般的马尔可夫模型中，状态对于观察者来说是直接可见的。这样状态的转换概率便是全部的参数。</p><p>而在隐马尔可夫模型中，状态并不是直接可见的，<strong>但受状态影响的某些变量是可见的</strong>。每一个状态在可能输出的符号上，都有一定的概率分布。因此输出符号的序列能够透露出状态序列的一些信息。</p><p><img src="http://www.davidsbatista.net/assets/images/2017-11-11-HMM.png" alt=""></p><p>也就是说，HMM 系统的实际状态是隐藏的，只能观察到 emission probilities。</p><p>HMM 常用来学习两个耦合的内容语料。例如，在语音识别中，可见的信息是音频信号，隐藏的信息是语音词汇。又例如，旋律是可见信息，伴奏/ 和声 是隐藏的信息。</p><p>最常见的三种 Hidden Markov Model 算法：</p><ul><li>the forward algorithm: 计算特定序列的概率，假设已知 transitions and observation 概率和初始状态</li><li>the Baum-Welch algorithm：找出被观测序列中最常见的参数</li><li>the Viterbi algorithm：维特比算法，基于观测序列计算隐藏状态最可能的序列（viterbi path）</li></ul><p>隐马尔科夫模型的优势：</p><ul><li>是学习和生成离散序列最有效和使用广泛的算法</li><li>可以对横轴和纵轴的相关性都建模，HMM 是随机耦合过程</li><li>比马尔可夫模型更好保留原始的数据结构</li></ul><p>劣势：</p><ul><li>需要有很好的领域知识来调整模型结构和参数</li><li>需要相对大的训练数据集</li></ul><h2 id="马尔可夫模型在音乐中的应用"><a href="#马尔可夫模型在音乐中的应用" class="headerlink" title="马尔可夫模型在音乐中的应用"></a>马尔可夫模型在音乐中的应用</h2><p>Lejaren Hiller 在 1957 年完成了算法生成的弦乐四重奏「依利亚克组曲」（Illiac Suite），这也是历史上第一支完全由计算机生成的音乐作品。首先使用马尔可夫链模型来产生有限控制的随机音符，之后利用和声与复调的规则测试这些音符，最后选择符合规则的材料，修改、组合成传统音乐记谱的弦乐四重奏。</p><p><img src="https://pbs.twimg.com/media/DfAdXfHV4AA0Bxb.jpg" alt="ILLIAC Suite "></p><div class="video-container"><iframe src="//www.youtube.com/embed/QyqiSbbwHIs" frameborder="0" allowfullscreen></iframe></div><p><a href="https://www.youtube.com/watch?v=QyqiSbbwHIs" target="_blank" rel="noopener">Lejaren Hiller - Illiac Suite for String Quartet [4/4] - YouTube</a></p><p><a href="http://www.musicainformatica.org/topics/illiac-suite.php" target="_blank" rel="noopener">该作品分为四个乐章</a>：</p><ul><li>第一乐章：计算机生成的不同长度的固定主题旋律</li><li>第二乐章：使用变奏的规则生成的四声部音乐</li><li>第三乐章：通过计算机对节奏、动态和演奏法的不同处理生成的音乐</li><li>第四乐章：通过衍生算法和马尔可夫链的不同模型及概率生成的音乐（pitch, intervals and textures）</li></ul><p>Iannis Xenakis在他 1958 年的专辑 Analogique 中就使用了马尔可夫链来作曲。</p><p><img src="http://img.viz.mobi/xenakis.jpg" alt=""></p><p>在他的著作 Formalized Music: Thought and Mathematics in Composition 里详细描述了使用马尔可夫模型的算法。</p><p><img src="https://discourse-cdn-sjc2.com/standard17/uploads/critterandguitari/original/2X/a/aede09d8452c1b3d4273a4515dfa6c941c62e21e.jpg" alt=""></p><p><img src="http://img.viz.mobi/markovian%20stochastic%20music.png" style="zoom:50%"></p><p>用马尔可夫模型生成音乐的优势，包括符合直觉、容易理解，以及计算量小。但也存在一些问题。例如，输出相当随机、缺乏整体结构；抽象层级有限，容易重复语料库中的片段；限于一维符号序列；限于风格模仿等等。</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://www.wikiwand.com/en/Markov_model" target="_blank" rel="noopener">Markov model - Wikiwand</a></li><li><a href="https://www.wikiwand.com/zh-hans/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%80%A7%E8%B4%A8" target="_blank" rel="noopener">马尔可夫性质 - Wikiwand</a></li><li><a href="https://www.wikiwand.com/zh-hans/%E9%A6%AC%E5%8F%AF%E5%A4%AB%E9%81%8E%E7%A8%8B" target="_blank" rel="noopener">马可夫过程 - Wikiwand</a></li><li><a href="https://www.wikiwand.com/zh-hans/%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">隐马尔可夫模型 - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Variable-order_Markov_model" target="_blank" rel="noopener">Variable-order Markov model - Wikiwand</a></li><li><a href="http://setosa.io/ev/markov-chains/" target="_blank" rel="noopener">Markov Chains explained visually</a></li><li><a href="http://codehop.com/three-node-markov-chain/" target="_blank" rel="noopener">Three Node Markov Chain</a></li><li><a href="https://www.uegeek.com/170713-algorithmic-composition-1.html" target="_blank" rel="noopener">算法作曲历险记01-简史 | 00’s Adventure</a></li><li><a href="https://www.wikiwand.com/en/Iannis_Xenakis" target="_blank" rel="noopener">Iannis Xenakis - Wikiwand</a></li><li><a href="http://metacreation.net/project_1/" target="_blank" rel="noopener">Harmonic Progression</a></li><li><a href="http://www.sfu.ca/~eigenfel/ControlledMarkovSelection.pdf" target="_blank" rel="noopener">Realtime Generation of Harmonic Progressions Using Controlled Markov Selection | PDF</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.viz.mobi/CC-blogtitle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://uegeek.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="艺术" scheme="http://uegeek.com/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="Creative Coding" scheme="http://uegeek.com/tags/Creative-Coding/"/>
    
      <category term="Generative Art" scheme="http://uegeek.com/tags/Generative-Art/"/>
    
      <category term="Computational Creativity" scheme="http://uegeek.com/tags/Computational-Creativity/"/>
    
      <category term="创意" scheme="http://uegeek.com/tags/%E5%88%9B%E6%84%8F/"/>
    
      <category term="创造力" scheme="http://uegeek.com/tags/%E5%88%9B%E9%80%A0%E5%8A%9B/"/>
    
      <category term="Markov" scheme="http://uegeek.com/tags/Markov/"/>
    
      <category term="马尔可夫" scheme="http://uegeek.com/tags/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB/"/>
    
      <category term="马尔可夫模型" scheme="http://uegeek.com/tags/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
</feed>
