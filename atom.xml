<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>00&#39;s Adventure</title>
  
  <subtitle>Why join the navy if you can be a pirate</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://uegeek.com/"/>
  <updated>2018-08-21T16:13:58.000Z</updated>
  <id>http://uegeek.com/</id>
  
  <author>
    <name>kidult00</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Max/MSP/Jitter 教程 - 什么是矩阵？</title>
    <link href="http://uegeek.com/180821-jitter-01.html"/>
    <id>http://uegeek.com/180821-jitter-01.html</id>
    <published>2018-08-21T15:57:01.000Z</published>
    <updated>2018-08-21T16:13:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/Max-title1.jpg" alt=""></p><a id="more"></a><p>00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档： <a href="https://docs.cycling74.com/max7/tutorials/jitterchapter00a_whatisamatrix" target="_blank" rel="noopener">What is a Matrix?</a></p><p>矩阵即网格，网格的每个格子都包含一些信息。例如，棋盘是一个矩阵，每个方格包含特定的信息：有某个棋子，或没有棋子。</p><p><img src="https://docs.cycling74.com/max7/tutorials/images/jittermatrix_a.png" alt=""></p><p>方便起见，假设矩阵中每个格子的「信息」都是数字。</p><p><img src="https://docs.cycling74.com/max7/tutorials/images/jittermatrix_b.png" alt=""><br>电子表格是二维矩阵</p><p>水平的数据组称为<code>行</code>，垂直的数据组称为<code>列</code>。在路线图、棋盘或电子表格中，通常会使用字母和数字标记行和列，这样就可以表示任意一个单元格的位置。在上面例子中，单元格 C3 的数值为 0.319。</p><p>上面的矩阵例子是二维的——宽度和高度。在 Jitter 中，矩阵维度范围在 1~32 维之间。（一维矩阵对应编程中的数组 array。Max 中有一些对象用于存储数组，例如 <code>table</code> 和 <code>multislider</code>。不过有时候 Jitter 中的一维矩阵更适用）虽然在纸上描绘起来有点困难，但我们仍然可以想象一个有宽度/高度/深度的立方体三维矩阵。（例如，矩阵宽/高/深 分别有 3 个单元，总共 3x3x3 = 27个单元）</p><p><img src="https://docs.cycling74.com/max7/tutorials/images/jittermatrix_c.png" alt=""></p><p>一个 3x3x3 维矩阵共有 27 个单元</p><p>四维或更高维度的矩阵，相当挑战我们的视觉想象力和描述能力，但它们确实存在。</p><h3 id="视频屏幕作为矩阵"><a href="#视频屏幕作为矩阵" class="headerlink" title="视频屏幕作为矩阵"></a>视频屏幕作为矩阵</h3><p>视频屏幕由微小的单个像素组成，每个像素都显示特定的颜色。在计算机显示器上，屏幕的分辨率通常是 1024 像素宽，768 像素高，也可能是800x600 或 640x480。在电视监视器中，分辨率大约为 640×480。上述屏幕的宽高比为 4:3。</p><p>在较宽的 DV 格式中，宽高比为3:2，图像通常为 720x480 像素。高清晰度电视（HDTV）指定了另一种宽高比 16:9。在教程中通常使用 4:3 的宽高比，最常见的尺寸小于 320x240 甚至 160x120，这样可以节省 Max patch 的大小。</p><p><img src="https://docs.cycling74.com/max7/tutorials/images/jittermatrix_d.png" alt=""></p><p>常见的像素尺寸</p><p>单帧标准视频由 640×480 = 307,200 个像素组成。每个像素显示一种颜色。为了用数字表示眼睛可分辨的像素的颜色，我们需要范围非常大的颜色值。</p><p>用数字表示颜色值有许多方式。描述计算机中每个像素颜色的标准方法，是将颜色分解为红色、绿色和蓝色（也称为RGB），以及透明度（称为Alpha通道）。因此，大多数计算机程序将单个像素的颜色，存储为四个单独的数字，分别表示 α，红色，绿色和蓝色。这种四通道颜色表示方案通常称为 ARGB 或 RGBA。</p><p>Jitter 也遵循这个惯例。为了使矩阵的每个单元表示一个颜色像素，每个单元都包含四个数值（α/红/绿/蓝）。因此存储视频帧数据的矩阵，实际上在每个单元格中包含四个数值。</p><p><img src="https://docs.cycling74.com/max7/tutorials/images/jittermatrix_e.png" alt=""><br>矩阵的每个单元格包含多个数字</p><p>因此，视频帧在 Jitter 中是二维矩阵，每个单元表示帧的像素，并且每个单元包含 α/红/绿/蓝 四个值，范围从 0 到 255。为了区分多单元格与矩阵维度的概念，Jitter 引入了平面(plane)的概念。</p><h3 id="什么是-plane？"><a href="#什么是-plane？" class="headerlink" title="什么是 plane？"></a>什么是 plane？</h3><p>为矩阵中的数字分配内存时，Jitter 需要知道每个维度的范围 - 例如，320x240 - 以及每个单元格中要保存的值的数量。为了跟踪单元格中的不同值，Jitter 把<strong>单元格看做位于某个单独平面上，因此我们将视频帧视为四个数据平面的二维矩阵</strong>。</p><p><img src="https://docs.cycling74.com/max7/tutorials/images/jittermatrix_f.png" alt=""></p><p>矩阵每个单元中的值存在于四个虚拟平面上</p><p>使用这个概念框架，我们可以在需要时单独处理每个平面（以及颜色信息的每个通道）。例如，想要增加图像的红色，只需增加矩阵红色平面中的所有值，保持其他值不变。</p><p>一般在 Jitter 中用四个矩阵的数据-α/红/绿/蓝的 表示视频。这些平面的编号从 0 到 3，因此 Alpha 通道位于平面 0 中，RGB 通道位于平面 1,2 和 3 中。</p><h3 id="矩阵中的数据"><a href="#矩阵中的数据" class="headerlink" title="矩阵中的数据"></a>矩阵中的数据</h3><p>计算机用不同格式来存储数字。如果知道想要存储的数字类型，就可以仅为每个数字分配真正需要的空间来节省内存。例如，用 ASCII 0~255 存储字母字符，只需要 8 位（2 的 8 次方）的空间来存储每个字符。如果想要存储更大范围的数字，可能会使用 32 位（包含的整数范围从 -2,147,483,648 到 2,147,483,647）。为了表示带小数部分的数字，例如 3.1416，我们使用浮点数二进制系统，32 位或 64 位数字的某些位表示值的尾数，其他位表示指数。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/main-qimg-0c6f60196dbaaaa7a2f9178fff29d64d-c.jpg" alt=""></p><p>用 Max 编程的大多数情况下，不需要知道 Max 如何存储数字。但是用 MSP 处理数字音频时，最好了解 MSP 什么情况下使用浮点数（如果不小心用整数替代了浮点数，程序可能会报错）。在 Jitter 中，了解计算机的存储类型非常有帮助。</p><p>Jitter 矩阵可以将数字存储为 64 位浮点（也称为双精度浮点或双精度），32 位浮点（简称浮点数），32 位整数（称为long int，或者只是int）和 8 位字符（称为char）。某些 Jitter 对象仅以一种格式存储，因此不必指定存储类型。但是其他 Jitter 对象允许多种方式存储，因此必须指定数据类型为 char / long / float32 / float64 等。</p><blockquote><p>重要概念：在使用 Jitter 操作视频时，需要了解矩阵中数据存储的知识。矩阵默认以 ARGB 格式保存视频数据，每个单元的数值范围是 0~255 （一般在四个平面中）。最常见的数据存储类型是 char，并不是因为存储的是字符。最常存储的值通常是数字，只需要 256 个不同的可能值来表示，因此 8 位的 char 就足够了。视频数据量一般较大，所以 Jitter 中大多数矩阵对象默认使用 char 存储类型，以减少存储空间。对于单色（灰度）图像或视频，单个 char 数据平面就足够了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/Max-title1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Max/MSP" scheme="http://uegeek.com/tags/Max-MSP/"/>
    
      <category term="Jitter" scheme="http://uegeek.com/tags/Jitter/"/>
    
      <category term="视频" scheme="http://uegeek.com/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="矩阵" scheme="http://uegeek.com/tags/%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>破解 AI 时代的焦虑 —— 从人机交互到人机协同创作</title>
    <link href="http://uegeek.com/180717-human-computer-symbiosis.html"/>
    <id>http://uegeek.com/180717-human-computer-symbiosis.html</id>
    <published>2018-07-17T15:11:58.000Z</published>
    <updated>2018-07-17T15:14:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/AI-co-keynote_imges.001.jpeg" alt=""></p><a id="more"></a> <p>这是 4 月做的一次分享。大概是我做过的分享中，现场讨论气氛最热烈的一次了。</p><p>最近抽空整理成文章，希望大家可以继续讨论这个有趣、有争议的话题。</p><p>为什么分享这个话题呢？</p><p>我做了好多年交互设计的工作，所以学习和工作一直有一个离不开的主题——人机交互（Human-Computer Interaction）。</p><h2 id="人机关系的演进"><a href="#人机关系的演进" class="headerlink" title="人机关系的演进"></a>人机关系的演进</h2><p>什么是人机交互？我把它简单理解为：</p><blockquote><p>人如何与机器或是某个复杂系统的沟通和互动过程。</p></blockquote><p>更为完整的版本，请看我在知乎上的回答 <a href="https://www.zhihu.com/question/19788122/answer/119319267" target="_blank" rel="noopener">什么是交互设计？</a></p><p>比如，鼠标就是一个解决人和机器互动问题的经典产品。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/AI-co-keynote_imges.003.jpeg" alt=""></p><p>现在大家都觉得鼠标再平常不过了，但是在当年，Douglas Engelbart 的这一项发明，极好地解决了人们在图形化计算机界面操纵屏幕元素的问题。为了表彰这项发明以及在人机交互领域的开拓式贡献，Douglas Engelbart 在 1997 年获得了「计算机界的诺贝尔奖」——图灵奖。</p><blockquote><p>For an inspiring vision of the future of interactive computing and the invention of key technologies to help realize this vision. – Turing Award Citation</p></blockquote><p>人和机器的对话、交互一直在演进。这也从一个侧面反映了人创造工具的历史：</p><p><img src="http://killerinfographics.com/wp-content/uploads/2014/12/DickiesIGjess.edits12-211.jpg" alt=""></p><p>人创造的工具越来越多样、复杂、强大。想想看，今天我们在手机上能完成多少事情。</p><p>于是，有人慢慢感到这种发展速度似乎不大对劲……奇点要来了，AlphaGo 也出现了。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/human-progress.png" alt=""></p><p>随着深度学习热潮的演进，大家发现，以前为了让机器智能化而不得不做的很多工作，比如，符号化、标准化、模块化、输入大量专家知识、需要庞大的训练数据集、要做苦脏累的特征工程等等，现在都简化了。基本上，只要目标足够清晰、可操作，训练数据和计算资源足够，机器学习产生的结果就可以满足要求。</p><p>我个人也经历了一次切身的体验。</p><p>今年年初在上 Udacity 的 <a href="https://github.com/kidult00/deep_learning_nanodegree_projects" target="_blank" rel="noopener">Deep Learning Nano Degree 课程</a>的时候，最后一个实践项目，是基于人脸图像库，用生成对抗网络（GAN）算法自动生成人脸。</p><p>虽然在学习过程中，早已对算法能实现的结果有所预期。但是当我把程序放到 AWS 的 GPU 上面跑了不到二十分钟，看到结果时还是忍不住隐隐感到机器的强大和压迫。</p><p>这是最开始几个训练迭代生成的模糊不清的轮廓：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/face-gen-before.png" alt=""></p><p>这是十几分钟训练结束后生成的人脸：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/face-gen-after.png" alt=""></p><p>说一点儿都不焦虑是假的。</p><p>何况各种媒体还铺天盖地强化这种焦虑，今天是一百零八种会被机器取代的工作，明天是哪个比赛机器又战胜了人……</p><p>于是大家经不住会问：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/AI-co-keynote_imges.010.jpeg" alt=""></p><p>似乎只有像诗词、小说、爵士乐、即兴表演这些领域，机器看起来就是不太擅长。</p><p>但，也不好说。</p><p>Paul 是一个专门给人画肖像画的机器。从 2011 年至今已经创做了非常多的作品。看起来非常有艺术感，不是吗？</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/AI-co-keynote_imges.011.jpeg" alt=""></p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/emoji-desperate.png" alt=""></p><p>有时候在焦虑之余，又忍不住会想：这种焦虑到底从何而来？</p><p>如果看过莱考夫「我们赖以生存的隐喻」的同学都知道，隐喻 Metaphor 对我们的影响有多么大。仔细想想，感到机器的威胁，是不是也源于人机关系的一些基本隐喻？</p><p>我们基本上都是以一种对立或一分为二的方式来看待这些基本词汇：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/AI-co-keynote_imges.014.jpeg" alt=""></p><p>看到这些词汇，我们会下意识地觉得它们是对立关系。逻辑、精确、冰冷的工程思维，怎么跟想象、感性、个性、创作融为一炉呢？</p><p>这大概就是问题所在了。</p><h2 id="隐喻和可能"><a href="#隐喻和可能" class="headerlink" title="隐喻和可能"></a>隐喻和可能</h2><p>语言有边界。这是语言能高效传递信息的代价之一。</p><p>所以，打破语言或者说概念的界限，也许就是找到新出路的起点。</p><p>（PS. 在心理咨询中，咨询师很重要的一部分工作，是帮助来访者呈现问题、reframe 问题，而不是直接插手去替他解决问题。）</p><p>其实早在 50 多年前，就有人探讨过人机关系的「未来简史」。</p><p>美国心理学家和计算机科学家 Licklider 在 Man-Computer Symbiosis 这篇论文中，讨论人跟机器的关系存在什么样的可能性，提出「人机共生」的概念。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/AI-co-keynote_imges.016.jpeg" alt=""></p><p>快 60 年过去了，技术的发展让「蠢机器」第一次有可能成为人类的「好基友」，我们为什么首先感到的是焦虑而不是兴奋呢？</p><p>还记得 2016 年，在 AlphaGo 战胜李世石后，跟安猪老师在大理有过一次讨论。当时我的感慨是，为 AlphaGo 的胜利感到挺开心的，但并不是因为我是技术的脑残粉，而是因为我觉得到了这个时候，人不得不去面对这样一个问题：</p><blockquote><p>人到底擅长什么？</p></blockquote><p>也就是说，当接受生物智能无法跟上非生物智能的发展时：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/AI-co-keynote_imges.018.jpeg" alt=""></p><p>人到底有哪些可以让机器「羡慕」（当然，机器不会有这种情绪）的天赋呢？</p><p>至今我还没有答案，但我想，大概会包括：直觉、洞察力、探索和意外的创造。人欣赏「意外」的审美、运用「意外」的创造力，应该会长期秒杀机器。</p><blockquote><p>人跟机器最大的区别到底是什么？</p></blockquote><p>我一直在问自己这个问题。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/AI-co-keynote_imges.021.jpeg" alt=""></p><p>意图，可能是现阶段人跟机器最大的差别。</p><p>人因为时间、空间、认知方面的三大局限，因为生命时长极其有限、可触达的空间极其有限、工作记忆（内存）极其有限，决定了人类的一些基本 drive 和价值观。人的美妙与荒谬，可能都来自于两行二选一的核心代码：</p><blockquote><p>Be numb/sober and Duplicate</p><p>Be insane/self-distroying and Love</p></blockquote><p>所以我（naive地）认为，突破时间、空间、认知限制，渴望无限，是人类物种永恒的追求，换一个词来概括，那就是——意图。</p><p>我们在基本意图上发展出复杂的能力，会体会微妙的情感，会追求意义，会审美、表达、共情，会讲故事和构建社会关系……</p><p>而机器，无所不能，但就是没有意图！</p><p><strong>这样看来，现在难道不是人类最好的时代吗？有一个毫无私心、任劳任怨、潜力无限的助手，为什么我们担心的是被助手取代，而不是兴高采烈地放开手脚去创造呢？</strong></p><h2 id="人机关系的新阶段"><a href="#人机关系的新阶段" class="headerlink" title="人机关系的新阶段"></a>人机关系的新阶段</h2><p>无论技术如何发展，人类从来没有停止过创造。</p><p>这是用 Google DeepDream 算法生成的作品：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/DeepDream2.jpg" alt=""></p><p>DeepDream 网站的首页，已经为人机关系的新时代做了注脚：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/Human-ai-collaboration.png" alt=""></p><p>艺术家们一直在尝试探索人机关系，可能是这样的：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/Alex%20Kiessling.jpg" alt=""></p><p>也可能是这样的：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/di_2016_ars_11-1024x684.jpg" alt=""></p><p>上图是一位叫做 Dragan iLiC 艺术家的项目，人充当机器的笔刷，由机械臂控制着人去作画。</p><p>在分享的现场，这张图引发了热烈的讨论。有的小伙伴表示，这样做的目的到底是什么，她看不出任何意义。有的小伙伴认为这是对人机关系一种悲观的表达。有的小伙伴的态度则更为中立而开放……</p><p>我想，这恰恰就是艺术家的目的吧：激发人们的反思与讨论。并不存在对与错，只是 raise questions，这也许就是最大的善意。</p><h2 id="音乐，人机协同即将爆发的领域？"><a href="#音乐，人机协同即将爆发的领域？" class="headerlink" title="音乐，人机协同即将爆发的领域？"></a>音乐，人机协同即将爆发的领域？</h2><p>最近关注音乐和技术结合的领域比较多，越来越觉得音乐也许会迎来人机共创的繁荣时期。</p><p>音乐本身是符号化、形式化非常强的「语言」。音乐的规律经过数百年的研究和沉淀，几乎已经没有太多规律上的「未知和秘密」，更多的变化会来自文化思潮影响下的风格探索。</p><p>算法作曲早已不是什么新鲜事，基于 AI 自动生成音乐已经有很多成熟的应用。甚至是在对即兴表演要求相当高的爵士乐，也已经有人机共同即兴表演的尝试。比如 Al Biles 教授的 GenJam 项目，从 2005 年至今，已经演出过数十场。</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=z0712pdmu7n&tiny=0&auto=0" allowfullscreen></iframe><p><a href="https://v.qq.com/x/page/z0712pdmu7n.html" target="_blank" rel="noopener">GenJam’s Journey_腾讯视频</a></p><p>而去年的 Qosmo AI DJ 项目也展示了人类 DJ 和 AI DJ 一起 Jam 的效果~</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=t0602v8uxp2&tiny=0&auto=0" allowfullscreen></iframe><p><a href="https://v.qq.com/x/page/t0602v8uxp2.html" target="_blank" rel="noopener">AI DJ Project 人工智能 DJ 与人类合作打碟_腾讯视频</a></p><h2 id="何以解忧？"><a href="#何以解忧？" class="headerlink" title="何以解忧？"></a>何以解忧？</h2><blockquote><p>这是最坏的时代</p><p>也是最好的时代</p></blockquote><p>这取决于我们现在每做的一个决定、每投入的分分秒秒。</p><p>回到主题，如何破解 AI 时代的焦虑呢？</p><p>以下是 00 给（自己）的解药：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/AI-co-keynote_imges.031.jpeg" alt=""></p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/AI-co-keynote_imges.032.jpeg" alt=""></p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/AI-co-keynote_imges.033.jpeg" alt=""></p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/AI-co-keynote_imges.035.jpeg" alt=""></p><p>回归创造者的使命，装备上创造所需要的心、眼、脑、手，去看去爱去体验。知识可以学习，但智慧更多是一种体验。把技术当成伙伴和切磋的对手，去行动，去试验，去创造。</p><p>最后</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/AI-co-keynote_imges.037.jpeg" alt=""></p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://web.stanford.edu/dept/SUL/library/extra4/sloan/MouseSite/1968Demo.html" target="_blank" rel="noopener">Doug Engelbart 1968 Demo</a></li><li><a href="http://patricktresset.com/new/" target="_blank" rel="noopener">PATRICK TRESSET |</a></li><li><a href="http://worrydream.com/refs/Licklider%20-%20Man-Computer%20Symbiosis.pdf" target="_blank" rel="noopener">Licklider - Man-Computer Symbiosis.pdf</a></li><li><a href="http://www.draganilic.org/" target="_blank" rel="noopener">www.draganilic.org</a></li><li><a href="http://igm.rit.edu/~jabics/GenJam.html" target="_blank" rel="noopener">GenJam</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/AI-co-keynote_imges.001.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="交互设计" scheme="http://uegeek.com/tags/%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="AI" scheme="http://uegeek.com/tags/AI/"/>
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="人工智能" scheme="http://uegeek.com/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="Deisgn" scheme="http://uegeek.com/tags/Deisgn/"/>
    
      <category term="HCI" scheme="http://uegeek.com/tags/HCI/"/>
    
      <category term="人机交互" scheme="http://uegeek.com/tags/%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92/"/>
    
      <category term="人机共生" scheme="http://uegeek.com/tags/%E4%BA%BA%E6%9C%BA%E5%85%B1%E7%94%9F/"/>
    
      <category term="艺术" scheme="http://uegeek.com/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="跨界" scheme="http://uegeek.com/tags/%E8%B7%A8%E7%95%8C/"/>
    
      <category term="创新" scheme="http://uegeek.com/tags/%E5%88%9B%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>MakeNoise10 - 延时和混响 Delay &amp; Reverb</title>
    <link href="http://uegeek.com/180708-make-noise-10.html"/>
    <id>http://uegeek.com/180708-make-noise-10.html</id>
    <published>2018-07-08T04:50:44.000Z</published>
    <updated>2018-07-08T05:04:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png" alt=""></p><a id="more"></a> <ul><li><a href="https://www.uegeek.com/180621-make-noise-01.html" target="_blank" rel="noopener">MakeNoise01 - 声音是什么？</a></li><li><a href="https://www.uegeek.com/180623-make-noise-02.html" target="_blank" rel="noopener">MakeNoise02 - 频率和音高</a></li><li><a href="https://www.uegeek.com/180624-make-noise-03.html" target="_blank" rel="noopener">MakeNoise03 - 振幅/响度/音量/增益 大乱斗</a></li><li><a href="https://www.uegeek.com/180626-make-noise-04.html" target="_blank" rel="noopener">MakeNoise04 - 波形和相位</a></li><li><a href="https://www.uegeek.com/180628-make-noise-05.html" target="_blank" rel="noopener">MakeNoise05 - Envelope 包络（ADSR）</a></li><li><a href="https://www.uegeek.com/180629-make-noise-06.html" target="_blank" rel="noopener">MakeNoise06 - 音色和均衡器(EQ)</a></li><li><a href="https://www.uegeek.com/180701-make-noise-07.html" target="_blank" rel="noopener">MakeNoise07 - 音频的分辨率 Sample rate/Bit depth</a></li><li><a href="https://www.uegeek.com/180703-make-noise-08.html" target="_blank" rel="noopener">MakeNoise08 - 振荡器和滤波器</a></li><li><a href="https://www.uegeek.com/180706-make-noise-09.html" target="_blank" rel="noopener">MakeNoise09 - 压缩 Compression</a></li></ul><p>音乐是时间的艺术。</p><p><strong>时间也是信号的天然属性。而声音设计，同时还是空间的艺术。</strong></p><p>声音必定产生在某个空间当中，人对声音的印象和记忆，多少都包含了对空间线索的直觉和感受。比如，密友之间的低语声，比较可能发生在一个小房间里；而轮船驶过的汽笛声，大概是在一个临海、开阔的码头，夹杂着繁忙的机械马达声和喧闹的人声。如果是清晨的港湾，大概又是不同的景象了。</p><embed src="http://www.xiami.com/widget/58846_1770984629,_300_146_cccccc_dddddd_0/multiPlayer.swf" type="application/x-shockwave-flash" width="300" height="146" wmode="opaque"><p>调整声音信号的方式有很多，延迟（delay）是必不可少的一种。混响（reverb）是塑造声音的空间感的秘密。今天我们就来一探究竟吧。</p><h2 id="Delay-延时"><a href="#Delay-延时" class="headerlink" title="Delay 延时"></a>Delay 延时</h2><blockquote><p>Delay is an audio effect and an effects unit which records an input signal to an audio storage medium, and then plays it back after a period of time. — Wiki￼</p></blockquote><p>延时可以在时间上平移一个信号。延迟效果器储存并保留音频信号一段时间后再将其释放。</p><p><img src="https://wiki.audacityteam.org/w/images/5/53/Delay.png" alt=""></p><p>延时是很多音效的核心，比如混响 Reverb、滤波 Filters 、和唱 Chorusing、Flanger（镶边，利用原音叠上稍微延迟的音，产生出金属感的回旋声）。</p><p>通过控制多条延迟的声音，可以产生回声效果。以一定顺序衰减并释放每条延迟声音，可以模拟出真实的回声效果。</p><p>延迟效果有很多种形式。比如在 Pink Floyd 的 <a href="https://open.spotify.com/track/5HNCy40Ni5BZJFw1TKzRsC" target="_blank" rel="noopener">Comfortably Numb</a> 里面，第一句歌词「Hello…Hello…Hello」是一个长延迟的效果。</p><iframe width="100%" height="166" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/4126197&color=%23ff5500&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true"></iframe><p><img src="https://is4-ssl.mzstatic.com/image/thumb/Music49/v4/0f/f8/be/0ff8be03-465c-c0ce-4fe1-2db52ea50753/886445635850.jpg/1200x630bb.jpg" alt=""></p><p>Delay 的参数：</p><ul><li>Time/tap: the amount of time between the dry, unprocessed signal and the wet, processed signal.</li><li>Repeat/feedback: controls how many repeats of a delayed sound</li></ul><h2 id="Reverb-混响"><a href="#Reverb-混响" class="headerlink" title="Reverb 混响"></a>Reverb 混响</h2><p>混响可以帮助我们营造合适的空间「场所感」。</p><blockquote><p>混响(reverberation)是声源发音停止后，声音继续存在的声学现象。—wiki</p></blockquote><p>声音在空间中传播，会遇到不同的物体，发生反射（reflection）、吸收（absorption）和扩散（diffusion）。混响产生于声波的传播被墙壁或周围障碍物反射而滞后于发声。<br>￼<br><img src="http://www.prestigeacoustics.com.au/wp-content/uploads/2015/01/About-Sound5-copy3.png" alt=""></p><p>不同的材料对声音的吸收效果不同，常常需要精密的计算和搭配，才能营造出理想的声音效果。</p><p><img src="https://www.acousticpanelsreview.com/wp-content/uploads/2014/09/Sound-Absorption-Coefficient.png" alt=""></p><p>混响时间是指从其最初的反射声强度衰落 60 dB (降低到 -60dB)所花费的时间。<br>￼<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6e/Reverberation_time_diagram.svg/440px-Reverberation_time_diagram.svg.png" alt=""></p><p>延时时间的最小值，应该至少为混响时间的四分之一，而且延时的长度应为质数（或各延时时长是互质的）。合理的混响效果建议每秒有 1000 个回声。</p><p>室内环境的声学效果涉及非常复杂的声学知识，尤其是录音棚和音乐厅。</p><p><img src="http://www.constructioncanada.net/wp-content/uploads/2016/02/Fig-4.jpg" alt=""></p><p>下图是 00 所拍摄的上海交响乐团音乐厅的一角，舞台上方使用了很多木质材料，来获得最佳的混响和其他声音效果。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/SSO.jpg" alt=""></p><h3 id="在-Ableton-Live-里处理混响"><a href="#在-Ableton-Live-里处理混响" class="headerlink" title="在 Ableton Live 里处理混响"></a>在 Ableton Live 里处理混响</h3><p>下面来看看 Ableton Live 里面是如何调整音频的混响的。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BAbleton%5Dreverb.png" alt=""></p><p>混响的参数：</p><ul><li>Dry/Wet: 没有混响/最大混响</li><li>Input: 控制对多少原始信号做混响处理</li><li>Reflect: 混响初期（early reflection），对混响感知影响更大</li><li>Diffuse: 混响末期（late reflection）</li><li>Size: 模拟不同大小的空间的混响 (对 Reflect 的影响大于 Diffuse)</li><li>Decay time: 混响消失所需时间</li><li>Predelay: 原始信号做混响处理之前的等待时间</li></ul><p>以下视频详细讲解了 Reverb 效果器的使用：</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=a0714gvoo1l&tiny=0&auto=0" allowfullscreen></iframe><p><a href="https://v.qq.com/x/page/a0714gvoo1l.html" target="_blank" rel="noopener">Reverb in Ableton Live_腾讯视频</a></p><h2 id="Max-MSP-里的延时和混响"><a href="#Max-MSP-里的延时和混响" class="headerlink" title="Max/MSP 里的延时和混响"></a>Max/MSP 里的延时和混响</h2><p>Max/MSP 有丰富的控制延时的方法和对象。</p><p><code>delay~</code></p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Ddelay~.png" alt=""></p><p><code>tapin/tapout</code></p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Dtapin-tapout.png" alt=""></p><p><code>teeth~</code></p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Dteeth~.png" alt=""></p><p>还有处理非信号的延时器：<code>pipe</code></p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Dpipe.png" alt=""></p><p>如果对如何从信号层面实现混响有兴趣，可以到 Max/MSP 里面拆开 BEAP 组件里面的 Reverb2，看看到底是怎么实现的。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Dreverb2.png" alt=""></p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Dreverb2-patch.png" alt=""></p><p>(小编 0 已晕…… 后会有期)</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://book.douban.com/subject/7069885/" target="_blank" rel="noopener">Audio Engineering 101 - A Beginner’s Guide to Music Production</a></li><li><a href="https://www.wikiwand.com/en/Reverberation" target="_blank" rel="noopener">Reverberation - Wikiwand</a></li><li><a href="https://www.acousticpanelsreview.com/acoustic-sound-absorption/" target="_blank" rel="noopener">Acoustic Sound Absorption - Acoustic Panels Review</a></li><li><a href="https://www.wikiwand.com/en/Delay_(audio_effect" target="_blank" rel="noopener">Delay (audio effect) - Wikiwand</a>)</li><li><a href="https://www.wikiwand.com/en/Comb_filter" target="_blank" rel="noopener">Comb filter - Wikiwand</a></li><li><a href="http://aquoibon.li/mixing_guide/" target="_blank" rel="noopener">混音指南（2016） | À quoi bon</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Music" scheme="http://uegeek.com/tags/Music/"/>
    
      <category term="Sound" scheme="http://uegeek.com/tags/Sound/"/>
    
      <category term="声音" scheme="http://uegeek.com/tags/%E5%A3%B0%E9%9F%B3/"/>
    
      <category term="Ableton Live" scheme="http://uegeek.com/tags/Ableton-Live/"/>
    
      <category term="Max/MSP" scheme="http://uegeek.com/tags/Max-MSP/"/>
    
      <category term="Delay" scheme="http://uegeek.com/tags/Delay/"/>
    
      <category term="Reverb" scheme="http://uegeek.com/tags/Reverb/"/>
    
      <category term="混响" scheme="http://uegeek.com/tags/%E6%B7%B7%E5%93%8D/"/>
    
      <category term="延迟" scheme="http://uegeek.com/tags/%E5%BB%B6%E8%BF%9F/"/>
    
      <category term="音效" scheme="http://uegeek.com/tags/%E9%9F%B3%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>MakeNoise09 - 压缩 Compression</title>
    <link href="http://uegeek.com/180706-make-noise-09.html"/>
    <id>http://uegeek.com/180706-make-noise-09.html</id>
    <published>2018-07-06T03:31:22.000Z</published>
    <updated>2018-07-06T03:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png" alt=""></p><a id="more"></a> <ul><li><a href="https://www.uegeek.com/180621-make-noise-01.html" target="_blank" rel="noopener">MakeNoise01 - 声音是什么？</a></li><li><a href="https://www.uegeek.com/180623-make-noise-02.html" target="_blank" rel="noopener">MakeNoise02 - 频率和音高</a></li><li><a href="https://www.uegeek.com/180624-make-noise-03.html" target="_blank" rel="noopener">MakeNoise03 - 振幅/响度/音量/增益 大乱斗</a></li><li><a href="https://www.uegeek.com/180626-make-noise-04.html" target="_blank" rel="noopener">MakeNoise04 - 波形和相位</a></li><li><a href="https://www.uegeek.com/180628-make-noise-05.html" target="_blank" rel="noopener">MakeNoise05 - Envelope 包络（ADSR）</a></li><li><a href="https://www.uegeek.com/180629-make-noise-06.html" target="_blank" rel="noopener">MakeNoise06 - 音色和均衡器(EQ)</a></li><li><a href="https://www.uegeek.com/180701-make-noise-07.html" target="_blank" rel="noopener">MakeNoise07 - 音频的分辨率 Sample rate/Bit depth</a></li><li><a href="https://www.uegeek.com/180703-make-noise-08.html" target="_blank" rel="noopener">MakeNoise08 - 振荡器和滤波器</a></li></ul><p>在音频处理中，压缩可以指数据压缩格式（如 mp3 格式），如何压缩可以减少文件大小。本文学习的则是动态范围（Dynamic range）的压缩。<br>￼<br><img src="http://artsites.ucsc.edu/ems/music/equipment/signal_processors/processors_intro/comp.gif" alt=""></p><p>EQ（均衡器） 和 Compressor（压缩器）是 Sound engineering 里面最基础最常用的效果器。压缩器是动态处理器的一种。动态处理器最简单的形式就像一个<strong>自动的音量控制器</strong>（gain control），当音量太大时减低音量，当音量太小时调高音量。</p><p>想象一下，你家的电视有两个不同的频道。一个频道总是很小声，需要用遥控器调整到 20 才听得清楚。另外一个频道却很大声，必需用遥控器调到 12 才不会吵到邻居。</p><p>Compressor 的作用，就相当于每次切换这两个频道的时候，自动帮你调整声音大小，使之保持在合适的范围。<br>￼<br><img src="http://www.yamahaproaudio.com/global/en/Images/pa_beginners_comp12_2.jpg" alt=""></p><p>在音频处理中，<strong>压缩的目的是让乐器、人声或录音的动态范围保持在我们想要的范围</strong>：</p><ul><li>控制动态性能</li><li>填补漏洞</li><li>声音包络控制/塑形</li><li>调控音色</li><li>调整峰值和失真</li><li>Sidechain compression(ducking/dipping/pumping)</li></ul><p>￼<img src="https://www.howtogeek.com/wp-content/uploads/2011/04/clipping_compared_to_limiting.png" alt=""></p><p>更直观来说，压缩处理可以：</p><ul><li>使音频的动态范围更平整（even out）</li><li>融合两种乐器的声音（如bass 和底鼓），听起来更为整体</li><li>提亮音量比较小的声音</li><li>控制太响的声音</li><li>使声音获得特定的音色效果</li><li>创造特别的声音</li></ul><p>所有的动态处理器基本上都是指定一个开始工作的信号电平，然后对信号做出某种形式动态变化。</p><p><img src="https://www.residentadvisor.net/images/features/2012/tech-compress-dynamic-range.jpg" alt=""></p><p>不同压缩方法对 dynamic range 的影响：<br>￼<br><img src="https://dt7v1i9vyp3mf.cloudfront.net/styles/header/s3/imagelibrary/P/Pcomp-02-scales-5vGDFjBDltP2gtc.qx_VD3N2xWxwZHMy.jpg" alt=""></p><p>在 <a href="https://www.uegeek.com/180629-make-noise-06.html" target="_blank" rel="noopener">MakeNoise 06 中我们学习了均衡器(EQ)</a>。那么在处理音频时，应该是先调 EQ 还是先调 Compressor 呢？</p><blockquote><p>Placing an EQ before a compressor can have the effect of  exaggerating the applied EQ. Placing an EQ after a compressor you can often attain more audible results with less EQ, producing results that often do not “sound EQ’s EQ” – Chuck Zwicky</p></blockquote><p>一般来说，EQ 在 Compressor 之前，主要为了调整 Compressor 的反应；EQ 在 Compressor 之后，是为了调整波形达到更好的混音效果。当然也要<a href="http://a85115230.pixnet.net/blog/post/313698829-%E5%85%88eq%EF%BC%9F%E9%82%84%E6%98%AF%E5%85%88compressor%EF%BC%9F" target="_blank" rel="noopener">取决于声音素材和想要的效果</a>。</p><h2 id="在-Ableton-Live-里压缩不同的音轨"><a href="#在-Ableton-Live-里压缩不同的音轨" class="headerlink" title="在 Ableton Live 里压缩不同的音轨"></a>在 Ableton Live 里压缩不同的音轨</h2><p>进入 Ableton Live，在效果库里面找到 Compressor，拖到音轨上，就看到 Compressor 面板中调整压缩的参数：</p><p>￼<img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BAbleton%5Dcompressor.jpg" alt=""></p><ul><li>Threshold/Input：控制何时触发压缩</li><li>Gain reduction (GR)：有多少 dynamic range 被去掉</li><li>Output/Makeup gain：补偿因压缩导致的音量减小，设定输出的最高电平</li><li>Attack：当信号达到阈值时，压缩器在多少时间内开始处理。Fast attcak 0.01~10 ms, slow attack &gt; 50 ms</li><li>Release：当压缩时，原始信号被保留多久。通常以音频的 tempo 为基准</li><li>Ratio：以输入为基础，按比例设定输出值</li><li>Link：连接双声道/单声道压缩器到另外一个单声道，形成立体效果</li><li>Side chain：使用信号而不是主输入来控制压缩</li><li>Bypass：压缩过滤</li></ul><p>如何调整不同乐器音轨的压缩器，请看下面视频里的详细讲解：</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=d0711gj2yf2&tiny=0&auto=0" allowfullscreen></iframe><p><a href="https://v.qq.com/x/page/d0711gj2yf2.html" target="_blank" rel="noopener">Compressor in Ableton Live_腾讯视频</a></p><h2 id="用-Max-MSP-实现-Compressor"><a href="#用-Max-MSP-实现-Compressor" class="headerlink" title="用 Max/MSP 实现 Compressor"></a>用 Max/MSP 实现 Compressor</h2><p>更进一步，我们到 MSP 里拆解 Compressor 是如何实现的。</p><p>官方文档里提供了详细的说明和例子。00 调整和补充了一些注释：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Dcompression.png" alt=""></p><p>压缩器主要有三部分构成：参数、压缩流程和处理算法。下面分别看看每一部分的实现。</p><p>可控制的参数主要有 Input gain, Threshold, Ratio, Attack time, Release time，之前我们在 Ableton Live 的 Compressor 面板里都看到了：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Dcompression-para.png" alt=""></p><p>压缩处理的主流程：先实时监测 input level，把信号从 amplitude 转换为 dB，然后跟阈值参数比较，判断是否进行压缩：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Dcompression-compressor.png" alt=""></p><p>如果达到阈值后开始压缩，需要降低的 gain 由以下部分计算。公式是 <code>(Threshold - Level) * (1 -  1/ratio)</code>：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Dcompression-math.png" alt=""></p><p>然后将计算值再换算为 amplitude，输出到 compression 的主流程中，最后再加一道 <code>rampsmooth~</code> 来平滑 gain 的变化。</p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://book.douban.com/subject/7069885/" target="_blank" rel="noopener">Audio Engineering 101 - A Beginner’s Guide to Music Production</a></li><li><a href="https://zhuanlan.zhihu.com/p/32562033" target="_blank" rel="noopener">什么是动态处理器？</a></li><li><a href="https://docs.cycling74.com/max7/tutorials/17_msp_compress_00" target="_blank" rel="noopener">MSP Compression Introduction: What is Compression?</a></li><li><a href="https://www.soundonsound.com/techniques/parallel-compression" target="_blank" rel="noopener">Parallel Compression |</a></li><li><a href="https://www.residentadvisor.net/features/1595" target="_blank" rel="noopener">RA: Understanding compression</a></li><li><a href="http://a85115230.pixnet.net/blog/post/313698829-%E5%85%88eq%EF%BC%9F%E9%82%84%E6%98%AF%E5%85%88compressor%EF%BC%9F" target="_blank" rel="noopener">先EQ？還是先Compressor？ @ Balanced Audio Lab 平衡音訊實驗室 :: 痞客邦 ::</a></li><li><a href="https://www.kadenze.com/courses/sound-production-in-ableton-live-for-musicians-and-artists-v/sessions/compression-and-dynamics" target="_blank" rel="noopener">Session 6: Compression and Dynamics</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Music" scheme="http://uegeek.com/tags/Music/"/>
    
      <category term="Sound" scheme="http://uegeek.com/tags/Sound/"/>
    
      <category term="声音" scheme="http://uegeek.com/tags/%E5%A3%B0%E9%9F%B3/"/>
    
      <category term="Ableton Live" scheme="http://uegeek.com/tags/Ableton-Live/"/>
    
      <category term="Max/MSP" scheme="http://uegeek.com/tags/Max-MSP/"/>
    
      <category term="EQ" scheme="http://uegeek.com/tags/EQ/"/>
    
      <category term="Compressor" scheme="http://uegeek.com/tags/Compressor/"/>
    
      <category term="动态压缩" scheme="http://uegeek.com/tags/%E5%8A%A8%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>MakeNoise08 - 振荡器和滤波器</title>
    <link href="http://uegeek.com/180703-make-noise-08.html"/>
    <id>http://uegeek.com/180703-make-noise-08.html</id>
    <published>2018-07-03T10:35:56.000Z</published>
    <updated>2018-07-03T10:37:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png" alt=""></p><a id="more"></a> <ul><li><a href="https://www.uegeek.com/180621-make-noise-01.html" target="_blank" rel="noopener">MakeNoise01 - 声音是什么？</a></li><li><a href="https://www.uegeek.com/180623-make-noise-02.html" target="_blank" rel="noopener">MakeNoise02 - 频率和音高</a></li><li><a href="https://www.uegeek.com/180624-make-noise-03.html" target="_blank" rel="noopener">MakeNoise03 - 振幅/响度/音量/增益 大乱斗</a></li><li><a href="https://www.uegeek.com/180626-make-noise-04.html" target="_blank" rel="noopener">MakeNoise04 - 波形和相位</a></li><li><a href="https://www.uegeek.com/180628-make-noise-05.html" target="_blank" rel="noopener">MakeNoise05 - Envelope 包络（ADSR）</a></li><li><a href="https://www.uegeek.com/180629-make-noise-06.html" target="_blank" rel="noopener">MakeNoise06 - 音色和均衡器(EQ)</a></li><li><a href="https://www.uegeek.com/180701-make-noise-07.html" target="_blank" rel="noopener">MakeNoise07 - 音频的分辨率 Sample rate/Bit depth</a></li></ul><p>制造声音，总的来说有两种思路：加性和减性。加性的方法逐步叠加多个声源，减性的方法逐步剔除声音中不想要的部分。</p><p>所以，<strong>声音设计的过程，无外乎是发出声音，修剪、调整为想要的效果</strong>。</p><p>对应的，振荡器是最主要的发声对象，而滤波器是最主要的过滤修整对象。所以这一篇的内容比较多，也会需要回顾之前所讲的一些概念。</p><p><img src="https://is3-ssl.mzstatic.com/image/thumb/Purple5/v4/ce/b8/62/ceb862e4-b96e-912a-cca2-c4169002a0f7/pr_source.png/643x0w.jpg" alt=""></p><h2 id="振荡器和谐振器"><a href="#振荡器和谐振器" class="headerlink" title="振荡器和谐振器"></a>振荡器和谐振器</h2><p>在所有能够产生声音的东西（包括所有乐器）中，绝大部分都是振荡器 (Oscillators)、共振器 (Resonators) 或是两者的组合。</p><h3 id="OSC-振荡器"><a href="#OSC-振荡器" class="headerlink" title="OSC 振荡器"></a>OSC 振荡器</h3><p>电子振荡器是用来产生具有周期性的模拟信号（通常是正弦波或方波）的电子电路。音频振荡器产生频率约为 16 Hz~20 kHz。</p><p>振荡器（OSC）产生原始波形与音高，是所有合成器发声的源头。合成器一般由多个 OSC 或 Wavetable 的声音叠合而成一个音色。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/OSC_2.jpg" alt=""></p><p>如果没有 OSC 振动发出原始音高，其他元件也就没有存在的意义了。（还记得大明湖畔 440 Hz 的中央 A 音高吗？）</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=l0699omxbcq&tiny=0&auto=0" allowfullscreen></iframe><p><a href="http://v.qq.com/x/page/l0699omxbcq.html" target="_blank" rel="noopener">MakeNoise02-frequency_in_max</a></p><p>在 <a href="https://www.uegeek.com/180626-make-noise-04.html" target="_blank" rel="noopener">MakeNoise04 - 波形和相位</a> 中介绍过基础的波形，它们都产生于基础的振荡器：<br>￼<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Waveforms.svg/700px-Waveforms.svg.png" alt=""></p><h3 id="Resonator-共振器-谐振器"><a href="#Resonator-共振器-谐振器" class="headerlink" title="Resonator 共振器/谐振器"></a>Resonator 共振器/谐振器</h3><blockquote><p>In physics, resonance is a phenomenon in which a vibrating system or external force drives another system to oscillate with greater amplitude at specific frequencies. —Wiki</p></blockquote><p>振荡器和共振器的区别在于，它们出现在能量流动链的什么位置，<strong>是作为原初的波源还是作为被振动源驱动（受力）的系统</strong>。 </p><p>如果两个点有相同的固有频率，则相互冲突的力就变为零。即，由一个点提供给对方的阻抗变为 0 ，这被称为共振/谐振 (resonance)。共振通过在特定频率上施力，来增加震动的幅度 。</p><p>这么说真的好抽象哦……还是直接到 Ableton Live 里面体验一下吧。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5DResonators.png" alt=""></p><p>拖进一段 beats，然后对比开启和关闭 Resonators 的效果：</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=j0710ontjtv&tiny=0&auto=0" allowfullscreen></iframe><p><a href="https://v.qq.com/x/page/j0710ontjtv.html" target="_blank" rel="noopener">Resonator in Ableton Live_腾讯视频</a></p><h3 id="低频振荡器-LFO"><a href="#低频振荡器-LFO" class="headerlink" title="低频振荡器 LFO"></a>低频振荡器 LFO</h3><blockquote><p>Low-frequency oscillation (LFO) is an electronic signal which is usually below 20 Hz and creates a rhythmic pulse or sweep. – Wiki</p></blockquote><p>低频振荡器发出低于 20Hz 的信号，主要用来<strong>驱动其他参数、调制合成器/延迟等形成周期性响应</strong>，以此来制造出特定的音效，而不是作为主频发声振荡器。</p><p><img src="https://impmoocmath.files.wordpress.com/2013/04/lfo.png" alt=""></p><p>LFO 的主要参数：</p><ul><li>Shape：Sine、Square、Pulse、Triangle、Sawtooth 等波形</li><li>Rate：控制振动時間的快慢，可以调为预设的 BPM</li><li>Amount/Depth：控制振动的强度</li><li>Phase/Offset：波形起始位置</li></ul><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BAbleton%5DAuto_filter.png" alt=""></p><p>LFO的使用范围很广泛，当需要<strong>制造往复变化的周期性效果</strong>，如音高一高一低的 Vibrato，相位一左一右的 AutoPan，音量一强一弱的 Tremolo…等等，都可以利用 LFO 来生成。在一部强大的合成器上，方便且多功能的 LFO 是不可或缺的。</p><h2 id="滤波器-Filter"><a href="#滤波器-Filter" class="headerlink" title="滤波器 Filter"></a>滤波器 Filter</h2><p>声音由振荡器/谐振器产生以后，<strong>声音塑形的第二个关键，就是调整其频率分布</strong>。Filter 起到限制信号的频率范围的作用，它其实就是<a href="https://www.uegeek.com/180629-make-noise-06.html" target="_blank" rel="noopener">最简单的 EQ</a>。</p><p><img src="https://static.kvraudio.com/i/b/sanfordsuperfilter.jpg" alt=""></p><p>按过滤的频率来区分，滤波器可分为以下几类：</p><ul><li>Low Pass Filter 低通滤波（LP）：允许低于其中心频率的信号更多的通过（过滤掉高频信号）</li><li>High Pass Filter 高通滤波（HP）：允许高于其中心频率的信号更多的通过（过滤掉低频信号）</li><li>Band Pass Filter 带通滤波（BP）：允许指定频段的频率通过，过滤掉两侧的频率</li><li>Band Reject 带阻（陷波）（BR）：在频谱中过滤掉一部分频率，保留其他频段</li></ul><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/basic%20filters.jpg" alt=""></p><p>在 Ableton Live 的 EQ Eight 中，八个调节点都可以选择采用哪种滤波形式：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BAbleton%5DEQ8.png" alt=""></p><p>按响应方式来区分，滤波器有两类：</p><ul><li>FIR：输出仅取决于输入的过往数值，称为有限冲激响应 Finite Impulse Respons</li><li>IIR：输出取决于过往的输入值和过往的输出值，围绕延时元件有一个反馈环路，称为循环（recursive）或无限冲激响应（Infinite Impulse Response）滤波器。可用作累加器，如果反馈很高，当前输入会被加到所有先前输入值上。</li></ul><p>Filter 的主要参数包括 Cutoff / Freq 和 Resonance / Res。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BAbleton%5DAuto_filter.png" alt=""></p><p>选定 Filter 波形后，需要指定过滤的频率界点(Cutoff)。比如选择低通滤波，将 Cutoff freq 指定为 800Hz，那么高于 800Hz 的频率将被滤除。通过指定 Cutoff 的落点，达到调整音色的目的。Res 的作用则主要是为了凸显 Cutoff 所在的频率位置（放大 db）。</p><h2 id="Max-MSP-里的滤波器"><a href="#Max-MSP-里的滤波器" class="headerlink" title="Max/MSP 里的滤波器"></a>Max/MSP 里的滤波器</h2><p>Max/MSP 提供了一系列滤波器任君选择。</p><p><code>Onepole~</code>: 单系数滤波器，也是最简单的 IIR(Infinite Impulse Response) 低通滤波器，常用来减少刺耳的高频信号，或者用来平滑信号。</p><p>虽然<code>onepole~</code>的基础用法是低通滤波，不过只要做一个简单的信号减法操作，就可以起到高通滤波的效果：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Donepole.png" alt=""></p><p>单系数不够？那么 <code>Biquad~</code> 双系数过滤器 了解一下~</p><p>为什么叫双系数呢？因为滤波公式为：</p><blockquote><p>y[n] = a0 <em> x[n] + a1 </em> x[n-1] + a2 <em> x[n-2] - b1 </em> y[n-1] - b2 * y[n-2]</p></blockquote><p>其中 a0, a1, a2, b1, b2 都是可调参数。</p><p>双系数不够？那么了解一下：<code>cascade~</code> 级联滤波器（多个<code>biquad~</code>）</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Dcascade~.png" alt=""></p><p>级联可调性较差？那么 <code>filtergraph~</code> 了解一下：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Dfiltergraph~2.png" alt=""></p><p>如果还是无法满足需求，请尽情折腾更为灵活的<code>filterdesign</code>……</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Dfilterdesign.png" alt=""></p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://book.douban.com/subject/27057297/" target="_blank" rel="noopener">设计声音</a></li><li><a href="https://www.wikiwand.com/en/Resonance" target="_blank" rel="noopener">Resonance - Wikiwand</a></li><li><a href="https://www.coursera.org/lecture/technology-of-music-production/lfo-low-frequency-oscillator-zBCiz" target="_blank" rel="noopener">LFO (Low Frequency Oscillator) - Synthesis | Coursera</a></li><li><a href="https://www.zuirens.com/%E6%8E%A2%E7%B4%A2%E5%90%88%E6%88%90%E5%99%A8%E7%9A%84%E5%A5%A7%E5%A6%99/" target="_blank" rel="noopener">探索合成器的奧妙 | Zuirens 燧人氏</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Music" scheme="http://uegeek.com/tags/Music/"/>
    
      <category term="Sound" scheme="http://uegeek.com/tags/Sound/"/>
    
      <category term="声音" scheme="http://uegeek.com/tags/%E5%A3%B0%E9%9F%B3/"/>
    
      <category term="Ableton Live" scheme="http://uegeek.com/tags/Ableton-Live/"/>
    
      <category term="Max/MSP" scheme="http://uegeek.com/tags/Max-MSP/"/>
    
      <category term="EQ" scheme="http://uegeek.com/tags/EQ/"/>
    
      <category term="Oscilator" scheme="http://uegeek.com/tags/Oscilator/"/>
    
      <category term="Filter" scheme="http://uegeek.com/tags/Filter/"/>
    
      <category term="LFO" scheme="http://uegeek.com/tags/LFO/"/>
    
      <category term="过滤器" scheme="http://uegeek.com/tags/%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>MakeNoise07 - 音频的分辨率 Sample rate/Bit depth</title>
    <link href="http://uegeek.com/180701-make-noise-07.html"/>
    <id>http://uegeek.com/180701-make-noise-07.html</id>
    <published>2018-07-01T09:57:02.000Z</published>
    <updated>2018-07-01T10:22:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png" alt=""></p><a id="more"></a> <ul><li><a href="https://www.uegeek.com/180621-make-noise-01.html" target="_blank" rel="noopener">MakeNoise01 - 声音是什么？</a></li><li><a href="https://www.uegeek.com/180623-make-noise-02.html" target="_blank" rel="noopener">MakeNoise02 - 频率和音高</a></li><li><a href="https://www.uegeek.com/180624-make-noise-03.html" target="_blank" rel="noopener">MakeNoise03 - 振幅/响度/音量/增益 大乱斗</a></li><li><a href="https://www.uegeek.com/180626-make-noise-04.html" target="_blank" rel="noopener">MakeNoise04 - 波形和相位</a></li><li><a href="https://www.uegeek.com/180628-make-noise-05.html" target="_blank" rel="noopener">MakeNoise05 - Envelope 包络（ADSR）</a></li><li><a href="https://www.uegeek.com/180629-make-noise-06.html" target="_blank" rel="noopener">MakeNoise06 - 音色和均衡器(EQ)</a></li></ul><p>在 <a href="https://www.uegeek.com/180624-make-noise-03.html" target="_blank" rel="noopener">MakeNoise03</a> 中，我们区分了第一捆容易混淆的概念：振幅/响度/音量/增益。</p><p>今天来捋一捋第二捆概念们——Sample rate / Bit depth / Dynamic range / Bit rate，它们影响了声音的分辨率。</p><p>图像的分辨率是大家比较熟悉的概念。在一个固定尺寸的图像里包含多少像素，决定了图像的分辨率。</p><p><img src="http://www.andor.com/Portals/0/Intro_10_Small.jpg" alt=""></p><p>由此可以类比声音的「分辨率」。</p><p><strong>一个声音信号的质量由两个变量决定：采样速率 Sample rate 和 比特深度（位深度）Bit depth。</strong></p><p>图像分辨率由横纵坐标的像素数量所决定。对应到声音，Sample rate 设定了能够捕捉音频信号的最高频率，可以看做横坐标；Bit depth 决定了每一个 sample 的精度，可以看做纵坐标。两者在两个维度上共同决定了音频的分辨率。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/bit-depth-low.png" alt=""><br>￼<br><img src="http://7xjpra.com1.z0.glb.clouddn.com/bit-depth-high.png" alt=""></p><h2 id="采样率-Sample-rate"><a href="#采样率-Sample-rate" class="headerlink" title="采样率 Sample rate"></a>采样率 Sample rate</h2><blockquote><p>The sampling frequency or sampling rate, fs, is the average number of samples obtained in one second (samples per second) — wiki</p></blockquote><p>采样率决定了每一秒内会从音频信号中采集多少样本。</p><p>在现实世界中的音频采样，是不连续或离散的信号，每个梯级值都是一个数值，表示一个单一时间点上的幅度。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/50/Signal_Sampling.png/600px-Signal_Sampling.png" alt=""></p><p>多少采样点算是足够多，能够精确编码一个声音信号呢？这就要提到 The Nyquist Theorem （尼奎斯特定理）了：</p><blockquote><p>States that the signal’s sample rate must be at least two times greater than the highest desired frequency. </p></blockquote><p>采样率/2是一个特殊数字，被称为奈奎斯特点 Nyquist point，它是在任何声音中能够被一个给定采样率所编码的最高频率。 也就是说，每秒的采样至少是信号中的最高频率的 2 倍，就可以完美地还原声音信号。</p><p>所以，为了覆盖<a href="https://www.uegeek.com/180623-make-noise-02.html" target="_blank" rel="noopener">人类的听觉范围（20Hz~20kHz）</a>，每秒需要 40000 个采样点。</p><p>那么问题来了，既然 40 kHz 就够了，为什么现在音频 CD 的标准采样率是 44.1 kHz 呢？</p><p>一方面原因是工程的需要。</p><p>现实中，麦克风所能接收、采集到的空气振动的频率范围非常大，远远超过人耳听力。如果直接采样会出现混叠。所以要先使用一个低通滤波器，把高于阈值的信号过滤掉。超过 40 kHz 的频段，给低通滤波器留出空间，使得那一段不怎么完美的下降曲线落在 20KHz 之外，不影响音频效果。</p><p>另一方面是技术历史问题。</p><p>在数字存储媒介被发明之前，早期的数字音频录制在模拟录像带上。当时世界上的录像机主要有二大制式：欧洲的 PAL 和美国日本的 NTSC。当时的 CD 是 SONY（美日制式）与 PHILIPS（欧洲制式）合作的。适用于 PAL 制式录像机的编码器采样频率是 44.1kHz。适用于 NTSC 制式录像机的编码器采样频率是 44.056。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/cd.png" alt=""></p><p>那么 44.1 和 44.056kHz 这两个数字是怎么来的呢？</p><blockquote><p>44,100=294 x 50 x 3</p><p>44,056=245 x 59.94 x 3</p></blockquote><p>50Hz 和 59.94Hz 分别是 PAL 和 NTSC 的场频， PAL 制式下可用扫描线数是 294 线，而 NTSC 则是 245 线。至于x3，则是在一条视频扫描线的磁迹中，纪录三个数码音频数据块。44.056KHz 标准并不能很好地被 NTSC 系统兼容，有一定的误差，所以没有被市场接受。索尼提出了以  44.1KHz/16bit 的方式录制，在数字信号和模拟信号的过渡期，大获全胜。哪怕最后出现了数字CD，也没有敌得过用户的使用惯性。</p><p>更多这个话题的讨论，可以参考知乎问题：<a href="https://www.zhihu.com/question/27644914" target="_blank" rel="noopener">人耳 20kHz 封顶，为什么数字音频都要记录和解析到更高的频率上去？</a></p><p>那该用什么样的采样率呢？</p><blockquote><p>The Audio Engineering Society recommends 48 kHz sampling rate for most applications but gives recognition to 44.1 kHz for CD and other consumer uses, 32 kHz for transmission-related applications, and 96 kHz for higher bandwidth or relaxed anti-aliasing filtering. — wiki</p></blockquote><h2 id="比特深度-Bit-Depth"><a href="#比特深度-Bit-Depth" class="headerlink" title="比特深度 Bit Depth"></a>比特深度 Bit Depth</h2><blockquote><p>In digital audio using pulse-code modulation (PCM), bit depth is the number of bits of information in each sample, and it directly corresponds to the resolution of each sample.  — Wiki</p></blockquote><p>在 CD 的采样标准中，44.1 kHz 的 Sample Rate 我们有所了解了。那么 16 Bit Depth 又是什么意思呢？</p><p>在音频采样中，每个采样的 amplitude 用二进制数字编码。这个编码的分辨率就是比特深度。</p><p>把数据存储成二进制，意味着如果用 n 个二进制位来存储每个幅度值，总共可以表示的数值数量为 2 的 n 次方-1。1 bit 代表采样的值: 0 或 1。如果是 2 bit，采样值范围就是 0, 1, 2, 3。2 的 16 次方是 65536，所以 16 bit 的采样深度分辨率是 -32768~32768。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/bit%20depth.png" alt=""></p><p>Bit depth 实际上决定的是 dynamic range 的分辨率。</p><h2 id="动态范围-Dynamic-Range"><a href="#动态范围-Dynamic-Range" class="headerlink" title="动态范围 Dynamic Range"></a>动态范围 Dynamic Range</h2><blockquote><p>Dynamic range is the ratio between the largest and smallest values that a certain quantity can assume. It is measured either as a ratio or as a base-10 (decibel) or base-2 (doublings, bits or stops) logarithmic value of the difference between the smallest and largest signal values.</p></blockquote><p>声音的 dynamic range 由信号的最大值和最小值所决定。</p><p>在音频处理中，dynamic range 与最大振幅和 noise floor 的比值有关：</p><p>￼<img src="http://7xjpra.com1.z0.glb.clouddn.com/calculate-dynamic_range.png" alt=""></p><p>假设 1 bit 表示听觉的门限，16 位 bit depth 可以给出 98 dB 的 dynamic range，32 位为 192 dB，64 位为 385 dB。现在很多数字音频系统都用 64 位。</p><h2 id="比特率-Bit-Rate"><a href="#比特率-Bit-Rate" class="headerlink" title="比特率 Bit Rate"></a>比特率 Bit Rate</h2><p>还有一个容易与采样率、比特深度混淆的概念，叫比特币，哦不对，比特率。</p><blockquote><p>在数字多媒体领域，比特率是单位时间播放连续的媒体(如压缩后的音频或视频)的比特数量，常用码流或码率表示，单位是kbps（千位每秒）。——wiki</p></blockquote><p>高音质 MP3 的 Bit rate 可达 256-320 kbps ，低音质的 MP3 大概在 100 kbps 。</p><p>音频数据的比特率文件大小计算公式如下：</p><blockquote><p>Bit rate = sample rate <em> bit depth </em> channels</p><p>Size in bits = sample rate <em> bit depth </em> channels * length of time</p></blockquote><p>所以，Sample rate 和 Bit depth 会影响 Bit rate 和文件大小。</p><p>一般原始的多媒体文件都比较大，为了便于使用需要对其进行压缩，而码流就对应了压缩时的取样率。单位时间内取样率越大，精度就越高，处理出来的文件就越接近原始文件，但是文件也会越大。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>今天我们又梳理了一捆容易混淆的概念们：</p><ul><li>Sample rate：每秒采集的音频信号样本</li><li>Bit depth：每个信号样本的幅度范围分辨率</li><li>Dynamic range：信号的范围极限值区间</li><li>Bit rate：单位时间传送的媒体信号量</li></ul><p>以后，看见 DAW 里面相关的选项，就心里有数啦：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BAbleton%5Dexport.png" alt=""></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>在数字音频领域，常用的采样率有：</p><table><thead><tr><th>Sample Rate</th><th>Use</th></tr></thead><tbody><tr><td>8,000 Hz</td><td>电话所用采样率，对于人的说话已经足够</td></tr><tr><td>22,050 Hz</td><td>无线电广播所用采样率</td></tr><tr><td>32,000 Hz</td><td>miniDV数码视频camcorder、DAT（LP mode）所用采样率</td></tr><tr><td>44,100 Hz</td><td>音频CD,也常用于MPEG-1音频（VCD, SVCD, MP3）所用采样率</td></tr><tr><td>47,250 Hz</td><td>Nippon Columbia（Denon）开发的世界上第一个商用PCM录音机所用采样率</td></tr><tr><td>48,000 Hz</td><td>miniDV、数字电视、DVD、DAT、电影和专业音频所用的数字声音所用采样率</td></tr><tr><td>50,000 Hz</td><td>二十世纪七十年代后期出现的3M和Soundstream开发的第一款商用数字录音机所用采样率</td></tr><tr><td>50,400 Hz</td><td>三菱X-80数字录音机所用所用采样率</td></tr><tr><td>96,000或者192,000 Hz</td><td>DVD-Audio、一些LPCM DVD音轨、Blu-ray Disc（蓝光碟）音轨、和HD-DVD（高清晰度DVD）音轨所用所用采样率</td></tr><tr><td>2.8224 MHz</td><td>SACD、索尼和飞利浦联合开发的称为Direct Stream Digital的1位sigma-delta modulation过程所用采样率。</td></tr></tbody></table><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://book.douban.com/subject/7069885/" target="_blank" rel="noopener">Audio Engineering 101 - A Beginner’s Guide to Music Production</a></li><li><a href="https://book.douban.com/subject/27057297/" target="_blank" rel="noopener">设计声音</a></li><li>Max_MSP<em>Jitter for music </em> a practical guide to developing interactive music systems for education and more</li><li><a href="https://www.wikiwand.com/en/Sampling_(signal_processing" target="_blank" rel="noopener">Sampling (signal processing) - Wikiwand</a>#/Sampling_rate)</li><li><a href="https://www.wikiwand.com/en/Audio_bit_depth" target="_blank" rel="noopener">Audio bit depth - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Dynamic_range" target="_blank" rel="noopener">Dynamic range - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Bit_rate" target="_blank" rel="noopener">Bit rate - Wikiwand</a></li><li><a href="https://www.wikiwand.com/en/Nyquist_rate" target="_blank" rel="noopener">Nyquist rate - Wikiwand</a></li><li><a href="https://www.wikiwand.com/zh-hans/%E9%87%87%E6%A0%B7%E7%8E%87" target="_blank" rel="noopener">采样率 - Wikiwand</a></li><li><a href="https://www.zhihu.com/question/27644914" target="_blank" rel="noopener">人耳 20kHz 封顶，为什么数字音频都要记录和解析到更高的频率上去？- 知乎</a></li><li><a href="https://www.zhihu.com/question/22027722/answer/119031221" target="_blank" rel="noopener">CD为什么采用44.1kHz采样频率? - 知乎</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Music" scheme="http://uegeek.com/tags/Music/"/>
    
      <category term="Sound" scheme="http://uegeek.com/tags/Sound/"/>
    
      <category term="声音" scheme="http://uegeek.com/tags/%E5%A3%B0%E9%9F%B3/"/>
    
      <category term="Ableton Live" scheme="http://uegeek.com/tags/Ableton-Live/"/>
    
      <category term="Max/MSP" scheme="http://uegeek.com/tags/Max-MSP/"/>
    
      <category term="Sample rate" scheme="http://uegeek.com/tags/Sample-rate/"/>
    
      <category term="采样率" scheme="http://uegeek.com/tags/%E9%87%87%E6%A0%B7%E7%8E%87/"/>
    
      <category term="Bit rate" scheme="http://uegeek.com/tags/Bit-rate/"/>
    
      <category term="Bit depth" scheme="http://uegeek.com/tags/Bit-depth/"/>
    
      <category term="Dynamic range" scheme="http://uegeek.com/tags/Dynamic-range/"/>
    
  </entry>
  
  <entry>
    <title>MakeNoise06 - 音色和均衡器(EQ)</title>
    <link href="http://uegeek.com/180629-make-noise-06.html"/>
    <id>http://uegeek.com/180629-make-noise-06.html</id>
    <published>2018-06-29T11:15:41.000Z</published>
    <updated>2018-06-29T11:19:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png" alt=""></p><a id="more"></a> <ul><li><a href="https://www.uegeek.com/180621-make-noise-01.html" target="_blank" rel="noopener">MakeNoise01 - 声音是什么？</a></li><li><a href="https://www.uegeek.com/180623-make-noise-02.html" target="_blank" rel="noopener">MakeNoise02 - 频率和音高</a></li><li><a href="https://www.uegeek.com/180624-make-noise-03.html" target="_blank" rel="noopener">MakeNoise03 - 振幅/响度/音量/增益 大乱斗</a></li><li><a href="https://www.uegeek.com/180626-make-noise-04.html" target="_blank" rel="noopener">MakeNoise04 - 波形和相位</a></li><li><a href="https://www.uegeek.com/180628-make-noise-05.html" target="_blank" rel="noopener">MakeNoise05 - Envelope 包络（ADSR）</a></li></ul><h2 id="音色-timbre-tone"><a href="#音色-timbre-tone" class="headerlink" title="音色 timbre/tone"></a>音色 timbre/tone</h2><blockquote><p>The character or quality (like attack, spectrum, spectral evolution) of a musical sound or voice as distinct from its pitch and intensity.</p></blockquote><p>音色对应一个静态的频谱，它带有基频和一系列泛音。</p><p>泛音其实就是物理学上的谐波，但次数的定义稍有不同，基波频率 2 倍的音频称为一次泛音，基波频率 3 倍的音频称为二次泛音，以此类推。谐波是指周期函数或周期性的波形中能用常数、与原函数的最小正周期相同的正弦函数和余弦函数的线性组合表达的部分。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Moodswingerscale.svg/500px-Moodswingerscale.svg.png" alt=""></p><p>音色跟<a href="https://www.uegeek.com/180626-make-noise-04.html" target="_blank" rel="noopener">频谱（spectrum）和波形（waveform）相关</a>。</p><p>明亮的声音比暗淡的声音包含更多的高频泛音。最好的度量是找到它的频谱重心或频谱质心（spectral centroid）。灰暗的音色频谱质心较低，或是在语音范围内没有确定的谐波结构。</p><p>一些对音色的「形容词」：<br>￼<br><img src="http://7xjpra.com1.z0.glb.clouddn.com/Describing%20sound.png" alt=""></p><h2 id="均衡器-EQ"><a href="#均衡器-EQ" class="headerlink" title="均衡器 EQ"></a>均衡器 EQ</h2><p>调整（Boost/cut/flat）EQ，即通过增高或降低<a href="https://www.uegeek.com/180623-make-noise-02.html" target="_blank" rel="noopener">声音在某个频率范围的频率，来影响整体的音色</a>。</p><p>现在不妨回到信号处理领域，从物理背景来理解 Equalizer。由于信号在传送路径到接收器接收的过程中，会受到多路径干扰、路径中遮蔽物阻挡造成遮蔽效应，这些码间干扰会导致接收讯号错误率上升。为了降低通讯系统传输的错误率，要作通道估测，根据结果对通道响应做补偿而降低传送错误率。</p><p>对声音处理而言，EQ 是一种可以<strong>分别调节各种频率成分电信号放大量</strong>的电子设备，通过调节不同频率的电信号，来补偿扬声器和声场的缺陷，补偿和修饰各种声源及其它特殊作用。</p><p>在各种软硬件和 DAW 里面，EQ 简直可以说是千人千面了。</p><p><img src="https://1mc51l3v9iyu3otpsg36nnvf-wpengine.netdna-ssl.com/wp-content/uploads/2017/01/fabfilter-pro-q_1.jpg" alt=""></p><p><img src="https://s3.amazonaws.com/izotopedownloads/docs/neutron2/images/equalizer/eq-softsaturation-module.png" alt=""></p><p>iTunes 里的 EQ：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/iTunes-eq-electronic.png" alt=""></p><p>调整声音的 EQ 可以：</p><ul><li>平衡混音中的各种声音</li><li>让声音分布在特定的频段</li><li>调出想要的音色</li><li>提升整体的听觉效果</li><li>补偿环境声场</li><li>减少回响</li><li>制作音效</li></ul><p>当我们调节 EQ 时，经常需要控制调节点所影响的频率范围，它可以由 Q（Slop / Bandwidth / Resonance）来控制。<br>￼<br><img src="http://7xjpra.com1.z0.glb.clouddn.com/Slope-Q.jpg" alt=""></p><h2 id="用-Max-MSP-制作-EQ"><a href="#用-Max-MSP-制作-EQ" class="headerlink" title="用 Max/MSP 制作 EQ"></a>用 Max/MSP 制作 EQ</h2><p>调整声音的均衡效果，实际上就是调整不同频段频率的高低。所以理论上可以用 Max/MSP 实现任意的 EQ 效果。</p><p>下面来看看 Max/MSP 里自带的 <code>buffir-eq</code> 的例子，实现了简单的高-中-低均衡器效果：</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=u070585zk2x&tiny=0&auto=0" allowfullscreen></iframe><p><a href="https://v.qq.com/x/page/u070585zk2x.html" target="_blank" rel="noopener">EQ in Max/MSP_腾讯视频</a></p><h2 id="在-Ableton-Live-里用-EQ-修饰声音"><a href="#在-Ableton-Live-里用-EQ-修饰声音" class="headerlink" title="在 Ableton Live 里用 EQ 修饰声音"></a>在 Ableton Live 里用 EQ 修饰声音</h2><p>Ableton Live 里面最常用的 EQ 是 EQ Three 和 EQ Eight。</p><p>Three 和 Eight 分别表示有 3 个和 8 个调节点。EQ Three 只能分成高、中、低频三个范围进行调节：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BAbleton%5DEQ3.png" alt=""></p><p>EQ Eight 则可以添加多达 8 个控制点，更为灵活：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BAbleton%5DEQ8.png" alt=""></p><p>在下面的视频中，尝试调节每一个控制点的滤波方式，并且移动到不同频率的位置，查看调节频段产生的均衡效果：</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=v0706uf6mil&tiny=0&auto=0" allowfullscreen></iframe><p><a href="https://v.qq.com/x/page/v0706uf6mil.html" target="_blank" rel="noopener">EQ Eight in Ableton Live_腾讯视频</a></p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="https://book.douban.com/subject/7069885/" target="_blank" rel="noopener">Audio Engineering 101 - A Beginner’s Guide to Music Production</a></li><li><a href="https://www.wikiwand.com/zh-hans/%E7%AD%89%E5%8C%96%E5%99%A8" target="_blank" rel="noopener">均衡器 - Wikiwand</a></li><li><a href="https://www.wikiwand.com/zh/%E8%B0%90%E6%B3%A2" target="_blank" rel="noopener">谐波 - Wikiwand</a></li><li><a href="https://www.kadenze.com/courses/sound-production-in-ableton-live-for-musicians-and-artists-v/sessions/sculpting-frequencies-equalization" target="_blank" rel="noopener">Session 4: Sculpting Frequencies: Equalization</a></li><li><a href="https://www.wikiwand.com/en/Harmonic" target="_blank" rel="noopener">Harmonic - Wikiwand</a></li><li><a href="https://www.youtube.com/watch?v=2oH4YcpyWSs" target="_blank" rel="noopener">EQ Tutorial: The Basics of How to EQ Properly - YouTube</a></li><li><a href="https://www.youtube.com/watch?v=LRQQxoG6rDY" target="_blank" rel="noopener">What Are Harmonics? I Full Spectrum Science I Exploratorium - YouTube</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="EQ-points-of-interest"><a href="#EQ-points-of-interest" class="headerlink" title="EQ points of interest"></a>EQ points of interest</h3><ul><li>Subs (&lt; 80 Hz), low freq</li><li>Big/fat(20~100 Hz), low freq</li><li>Muddy(100~300 Hz), low-low-mid freq: if a sound isn’t very clear, or muddy, try subtracting between 100 and 300 Hz.</li><li>Boxy/hollow(300~700 Hz), low-mid freq</li><li>In your face(1.5~4 kHz), Mid-mid-upper-mid freq: punk rock music accentuates this freq, too much here can cause ear fatigue, whereas not enough here can make a mix or sound appear dark and distant</li><li>Presence and clarity(4~10 kHz), upper-mid-high freq</li><li>Airy(&gt; 10 kHz), high freq</li></ul><p>via <a href="https://book.douban.com/subject/7069885/" target="_blank" rel="noopener">Audio Engineering 101 - A Beginner’s Guide to Music Production</a></p><h3 id="一些常用频点"><a href="#一些常用频点" class="headerlink" title="一些常用频点"></a>一些常用频点</h3><ul><li>50hz，常用的最低频段，是强劲的地鼓声的频段，也是能够让人为之起舞的频段。通过适当提升将得到令人振奋的地鼓声音。但是，一定要将人声里面所有的 50hz 左右的声音都切掉，那一定是喷麦的声音。 </li><li>70～100hz，获得浑厚有力的BASS的必要频点，也是需要将人声切除的频点。BASS和地鼓不要提升相同的频点，否则地鼓会被掩没掉的。 </li><li>200～400hz，主要用途，首先是军鼓的木质感声音频段；其次是消除人声脏的感觉的频段；第三，对于吉它，提升这个频段将会使声音变的温暖；第四，对于镲和 PERCUSSION，衰减这个频段可以增加清脆感。其中，在 250hz 这个频点，对地鼓作适当的增益，可以使地鼓听起来不那么沉重，很多清流行音乐中这样使用。 </li><li>400～800hz，获得更加清晰的BASS，并且可以使通鼓变得更加温暖。另外，通过增益或衰减这个频段内的某些频点，可以调整吉它音色的薄厚程度。</li><li>800～1khz，这个频段可以调整人声的“结实”程度，或者用于增强地鼓的敲击感，比较适用与舞曲的地鼓。 </li><li>1k～3khz，这是一个“坚硬”的频段。其中，1.5k~2.5k的提升可以增加吉它或BASS的“锋利”的感觉；在2～3k略作衰减，将会使人声变得更加平滑、流畅，否则，有些人的声音听起来唱歌象打架。反过来，在这个频段进行提升也会增加人声或者钢琴的锋利程度。总的来说，这个频段通常被成为噪声频段，太多的话，会使整个音乐乱成一团，但在某种乐器上适当的使用，会使这种乐器脱颖而出。 </li><li>3k～6khz，声音在3k的时候，还是坚硬的。至于6k，提升这个频点可以提升人声的清晰度，或者让吉它的声音更华丽。</li><li>6k～10khz，这个频段可以增加声音的“甜美”感觉。并且增加声音的空气感，呼吸感。并可增加吉它的清脆声音。PERCUSSION、军鼓和大镲都可以在这个频段里美化。并且，弦乐和某些的合成器综合音色，可以在这个频段得到声音的“刀刃”的感觉。</li><li>10k～16khz，提升这个频段会使人声更加华丽，并且能够提升大镲和PERCUSSION 的最尖的那个部分。但是，一定要首先确认这个频段内是有声音存在的，否则所增加的肯定是噪声。</li></ul><h3 id="各音源的频率范围"><a href="#各音源的频率范围" class="headerlink" title="各音源的频率范围"></a>各音源的频率范围</h3><table><thead><tr><th>乐器</th><th>音色丰满度</th><th>音色明亮度</th><th>音色力度</th><th>音色表现力</th><th>其他</th></tr></thead><tbody><tr><td>小提琴</td><td>200Hz~400Hz</td><td>6~10KHz</td><td></td><td></td><td>1~2KHz 是拨弦声频带 </td></tr><tr><td>中提琴</td><td></td><td></td><td>150Hz~300Hz</td><td>3~6KHz</td><td></td></tr><tr><td>大提琴</td><td>100Hz~250Hz</td><td>3KHz</td><td></td></tr><tr><td>贝斯提琴</td><td>50Hz~150Hz</td><td>1~2KHz</td><td></td></tr><tr><td>长笛</td><td>250Hz~1KHz</td><td>5~6KHz</td><td></td></tr><tr><td>黑管</td><td>150Hz~600Hz</td><td>3KHz</td><td></td></tr><tr><td>双簧管</td><td>300Hz~1KHz</td><td>5~6KHz</td><td></td><td></td><td>1~5KHz 提升使音色明亮华丽</td></tr><tr><td>大管</td><td>100Hz~200Hz 深沉感强</td><td>2~5KHz</td><td></td></tr><tr><td>小号</td><td>150Hz~250Hz</td><td></td><td></td><td>5~7.5KHz</td><td>是明亮清脆感频带</td></tr><tr><td>圆号</td><td></td><td></td><td></td><td></td><td>60Hz~600Hz 提升会使音色和谐自然；强吹音色光辉，1~2KHz 明显增强</td></tr><tr><td>长号</td><td>100Hz~240Hz</td><td></td><td></td><td></td><td>500Hz~2KHz 提升使音色变辉煌</td></tr><tr><td>大号</td><td>30Hz~200Hz</td><td></td><td></td><td></td><td>100Hz~500Hz 提升使音色深沉、厚实。</td></tr><tr><td>钢琴</td><td></td><td></td><td></td><td></td><td>27.5~4.86KHz 是音域频段。音色随频率增加而变的单薄；20Hz~50Hz 是共振峰频率。</td></tr><tr><td>竖琴</td><td></td><td></td><td></td><td></td><td>32.7Hz~3.136KHz 是音域频率。小力度拨弹音色柔和；大力度拨弹音色丰满。 </td></tr><tr><td>萨克斯管</td><td></td><td>600Hz~2KHz 提升此频率可使音色华彩清透</td><td></td><td></td></tr><tr><td>吉它</td><td>100Hz~300Hz</td><td></td><td></td><td>2~5KHz</td><td></td></tr><tr><td>低音吉它</td><td>60Hz~100Hz 低音丰满</td><td></td><td>60Hz~1KHz</td><td></td><td>2.5KHz 是拨弦声频</td></tr><tr><td>电吉它</td><td>240Hz</td><td>2.5KHz</td><td></td><td></td><td>3~4KHz 拨弹乐器的性格表现的更充分</td></tr><tr><td>电贝司</td><td>80Hz~240Hz</td><td></td><td>600Hz~1KHz</td><td></td><td>2.5KHz 是拨弦声频</td></tr><tr><td>手鼓</td><td></td><td></td><td></td><td></td><td>200Hz~240Hz 共鸣声频；5KHz 影响临场感</td></tr><tr><td>小军鼓</td><td>240Hz</td><td></td><td>2KHz</td><td></td><td>5KHz 是响弦音频（泛音区） </td></tr><tr><td>通通鼓</td><td>360Hz</td><td></td><td></td><td></td><td>8KHz 为硬度频率；泛音可达 10~15KHz </td></tr><tr><td>低音鼓</td><td></td><td></td><td></td><td></td><td>60Hz~100Hz 为低音力度频率；2.5KHz 是敲击声频率；8KHz 是鼓皮泛音声频。 </td></tr><tr><td>地鼓</td><td>60Hz~150Hz 是力度音频</td><td></td><td></td><td></td><td>5~6KHz 是泛音声频</td></tr><tr><td>镲</td><td></td><td></td><td></td><td></td><td>250Hz 强劲、坚韧、锐利；7.5~10KHz 音色尖利；1.2~15KHz 镲边泛音“金光四溅”。 </td></tr></tbody></table><table><thead><tr><th>人声</th><th>频段效果</th></tr></thead><tbody><tr><td>歌声（男）</td><td>150Hz~600Hz 影响歌声力度，提升此频段可以使歌声共鸣感强，增强力度。</td></tr><tr><td>歌声（女）</td><td>1.6~3.6KHz 影响音色的明亮度，提升此段频率可以使音色鲜明通透。</td></tr><tr><td>语音</td><td>800Hz 是“危险”频率，过于提升会使音色发“硬”、发“楞” </td></tr><tr><td>沙哑声</td><td>提升 64Hz~261Hz 会使音色得到改善</td></tr><tr><td>喉音重</td><td>衰减 600Hz~800Hz 会使音色得到改善 </td></tr><tr><td>鼻音重</td><td>衰减60Hz~260Hz，提升 1~2.4KHz 可以改善音色。</td></tr><tr><td>齿音重</td><td>6KHz 过高会产生严重齿音。 </td></tr><tr><td>咳音重</td><td>4KHz 过高会产生咳音严重现象</td></tr></tbody></table><p>via <a href="http://www.360doc.com/content/09/1109/13/421497_8668986.shtml" target="_blank" rel="noopener">均衡器的各个频段所增益的乐器和人声效果调节对照表</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Music" scheme="http://uegeek.com/tags/Music/"/>
    
      <category term="Sound" scheme="http://uegeek.com/tags/Sound/"/>
    
      <category term="声音" scheme="http://uegeek.com/tags/%E5%A3%B0%E9%9F%B3/"/>
    
      <category term="Ableton Live" scheme="http://uegeek.com/tags/Ableton-Live/"/>
    
      <category term="Max/MSP" scheme="http://uegeek.com/tags/Max-MSP/"/>
    
      <category term="EQ" scheme="http://uegeek.com/tags/EQ/"/>
    
      <category term="均衡器" scheme="http://uegeek.com/tags/%E5%9D%87%E8%A1%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>MakeNoise05 - Envelope 包络（ADSR）</title>
    <link href="http://uegeek.com/180628-make-noise-05.html"/>
    <id>http://uegeek.com/180628-make-noise-05.html</id>
    <published>2018-06-28T11:39:41.000Z</published>
    <updated>2018-06-28T11:43:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image.freepik.com/free-vector/set-of-vinyl-record-and-envelope-for-plate-retro-sound-carrier-mock-up-isometric-view-vector-illustration_7714-316.jpg" alt=""><br><a id="more"></a> </p><ul><li><a href="https://www.uegeek.com/180621-make-noise-01.html" target="_blank" rel="noopener">MakeNoise01 - 声音是什么？</a></li><li><a href="https://www.uegeek.com/180623-make-noise-02.html" target="_blank" rel="noopener">MakeNoise02 - 频率和音高</a></li><li><a href="https://www.uegeek.com/180624-make-noise-03.html" target="_blank" rel="noopener">MakeNoise03 - 振幅/响度/音量/增益 大乱斗</a></li><li><a href="https://www.uegeek.com/180626-make-noise-04.html" target="_blank" rel="noopener">MakeNoise04 - 波形和相位</a><br>￼</li></ul><p>Envelope 是什么？信封吗？</p><p>🤷‍♀️</p><blockquote><p>Envelope of an oscillating signal is a smooth curve outlining its extremes.<br>Via <a href="https://www.wikiwand.com/en/Envelope_(waves" target="_blank" rel="noopener">Envelope (waves) - Wikiwand</a>)</p><p>The envelope of a sound describes the way it’s amplitude varies over time.<br>Via <a href="https://www.youtube.com/watch?v=Q-ot9AaJx-Y" target="_blank" rel="noopener">What is the envelope of a sound? (ADSR explained) - YouTube</a></p></blockquote><p>在声学中，envelope 是非常重要的概念，它描述声音振幅（能量）的变化。一波一波的声音，就像互联网上面根据网络协议传送的数据包一样，不断被发送出去，用 envelope 来形容倒是很形象。</p><h2 id="ADSR"><a href="#ADSR" class="headerlink" title="ADSR"></a>ADSR</h2><p>在声音设计中通常用四个词来描述一个声音的 envlope (包络)：ADSR - Attack, Decay, Sustain, Release。</p><p><img src="https://blog.landr.com/wp-content/uploads/2016/10/ASDR-01.jpg" alt=""><br>￼</p><h3 id="Attack-起音"><a href="#Attack-起音" class="headerlink" title="Attack 起音"></a>Attack 起音</h3><blockquote><p>The area that rises from silence to its peak volume。</p></blockquote><p>声音从零开始上升到最大能量处，也可以理解为从产生这个声音开始到最响时，需要的时间。</p><p>敲击型声音的起音段非常短，比如钢琴（见下图）。而一根被温和拉响的琴弦，来自琴弦的恢复力和施加到琴弓上的立达到受摩擦限制是的最大动态平衡，这个过程可以长达几秒。另外，物体越小，初始能量就会被吸收的越快。</p><p>不同乐器的 ADSR 曲线大致可以简化如下：<br>￼<br><img src="http://www.muzines.co.uk/images_mag/articles/EMM_apr_1985_back_to_basi_6_large.jpg" alt=""></p><h3 id="Decay-衰减"><a href="#Decay-衰减" class="headerlink" title="Decay 衰减"></a>Decay 衰减</h3><blockquote><p>The area goes from the peak to a medium level of decline。</p></blockquote><p>衰减出现在那些瞬变阶段（transient）以后有能量持续供应的系统中，系统初始的输入能量超过后续延音阶段的电平。也就是说，在起音阶段后，音源还持续产生能量一段时间。</p><p>Decay 就是音量下降到稳定时需要的时间，对于钢琴而言，整个音符都处在 Decay 阶段。</p><h3 id="Sustain-延音"><a href="#Sustain-延音" class="headerlink" title="Sustain 延音"></a>Sustain 延音</h3><blockquote><p>The portion of the envelope that is constant in the declining stage。</p></blockquote><p>这个阶段，系统的输入能量等于输出能量，达到某种类型的稳定动态平衡，所以产生声音的这部分能量也维持稳定，结果通常是有一个稳定的声音输出。</p><p>Sustain 一般对于管乐器和弦乐器适用。钢琴没有稳定的 Sustain 阶段，因为按下琴键之后就没有更多机械能了，音量持续减小，可以说 decay 和 sustain 没有明显的区分。</p><h3 id="Release-释音"><a href="#Release-释音" class="headerlink" title="Release 释音"></a>Release 释音</h3><blockquote><p>Last point in the envelope where the sound returns back to silence</p></blockquote><p>当停止为系统提供能量，被保存的能量以一个恒定的速率被释放，继续产生一段时间的声音，这就进入释音阶段。</p><p>Release 是音源停止震动后仍然发声的阶段，钢琴在不踩踏板的时候 Release 非常短，踩踏板的时候 Release 非常长。释音始终趋向于 0，这是一个声音的最后阶段。</p><h3 id="ADSR-的作用"><a href="#ADSR-的作用" class="headerlink" title="ADSR 的作用"></a>ADSR 的作用</h3><p>ADSR 也可以叫做「声音的生老停死」…………<br>￼<br><img src="https://libremusicproduction.com/sites/default/files/answers/adsrenvelope.png" alt=""></p><p>再来感受一下不同乐器的 ADSR 形状：<br>￼<br><img src="http://7xjpra.com1.z0.glb.clouddn.com/different_adsr.png" alt=""></p><ul><li>Fast Attack + Fast Release = 吉他Pick、木琴、木鱼</li><li>Fast Attack + Slow Release = 钢琴、扬琴、竖琴</li><li>Slow Attack + Slow Release = 提琴、胡琴、Pad Synth</li></ul><p>为什么 ADSR 如此重要？<strong>因为影响声音的包络可以大大的改变声音特性</strong>。</p><p>当通过合成器来创作一个新的声音时，合成器需要控制 ADSR 的形状。组合包络形状比较类似的声音，可以优化混音效果。当 ADSR 差异非常大的声音结合在一起时，可以创作出结构非常丰富的音效。<br>￼<br><img src="https://c1.staticflickr.com/5/4524/24904416418_586ab94683_c.jpg" alt=""></p><h2 id="在-Ableton-Live-中调整-ADSR"><a href="#在-Ableton-Live-中调整-ADSR" class="headerlink" title="在 Ableton Live 中调整 ADSR"></a>在 Ableton Live 中调整 ADSR</h2><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BAbleton%5Dwavetable.png" alt=""></p><p>在 Ableton Live 里，很多音效都提供 ADSR 的控制，比如最常见的 operator。</p><p>下面的视频中，我们尝试调整各个参数，看看声音产生了怎样的变化。</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=b0705yxvme9&tiny=0&auto=0" allowfullscreen></iframe><p><a href="https://v.qq.com/x/page/b0705yxvme9.html" target="_blank" rel="noopener">Envelop &amp; ADSR in Ableton Live_腾讯视频</a></p><h2 id="Max-MSP-中-调整-ADSR"><a href="#Max-MSP-中-调整-ADSR" class="headerlink" title="Max/MSP 中 调整 ADSR"></a>Max/MSP 中 调整 ADSR</h2><p>Max 里面提供了专门的 ADSR 对象，于是对声音参数的调控灵活度很大。</p><p>我们先来生成周期波形，观察不同 ADSR 参数状况下声音波形的变化：</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=t0705h80ktu&tiny=0&auto=0" allowfullscreen></iframe><p><a href="https://v.qq.com/x/page/t0705h80ktu.html" target="_blank" rel="noopener">ADSR in Max/MSP_腾讯视频</a></p><p>在生成一个声音包络时，可以调整不同的参数改变声音的属性：</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=f0705uxmou1&tiny=0&auto=0" allowfullscreen></iframe><p><a href="https://v.qq.com/x/page/f0705uxmou1.html" target="_blank" rel="noopener">ADSR Noise in Max/MSP_腾讯视频</a></p><h3 id="￼Ref"><a href="#￼Ref" class="headerlink" title="￼Ref"></a>￼Ref</h3><ul><li><a href="https://book.douban.com/subject/7069885/" target="_blank" rel="noopener">Audio Engineering 101 - A Beginner’s Guide to Music Production</a></li><li><a href="https://book.douban.com/subject/27057297/" target="_blank" rel="noopener">设计声音</a></li><li><a href="https://www.wikiwand.com/en/Envelope_(waves" target="_blank" rel="noopener">Envelope (waves) - Wikiwand</a>)</li><li><a href="https://www.wikiwand.com/en/Synthesizer#/Attack_Decay_Sustain_Release_(ADSR" target="_blank" rel="noopener">Synthesizer - Wikiwand</a>_envelope)</li><li><a href="https://www.youtube.com/watch?v=Q-ot9AaJx-Y" target="_blank" rel="noopener">What is the envelope of a sound? (ADSR explained) - YouTube</a></li><li><a href="https://blog.landr.com/adsr-envelopes-infographic/" target="_blank" rel="noopener">ADSR Envelopes: How to Build The Perfect Sound [Infographic] | LANDR Blog</a></li><li><a href="http://www.muzines.co.uk/articles/back-to-basics/1882" target="_blank" rel="noopener">Back to Basics (EMM Apr 85)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://image.freepik.com/free-vector/set-of-vinyl-record-and-envelope-for-plate-retro-sound-carrier-mock-up-isometric-view-vector-illustration_7714-316.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Music" scheme="http://uegeek.com/tags/Music/"/>
    
      <category term="Sound" scheme="http://uegeek.com/tags/Sound/"/>
    
      <category term="声音" scheme="http://uegeek.com/tags/%E5%A3%B0%E9%9F%B3/"/>
    
      <category term="Ableton Live" scheme="http://uegeek.com/tags/Ableton-Live/"/>
    
      <category term="Max/MSP" scheme="http://uegeek.com/tags/Max-MSP/"/>
    
      <category term="Envelope" scheme="http://uegeek.com/tags/Envelope/"/>
    
      <category term="ADSR" scheme="http://uegeek.com/tags/ADSR/"/>
    
      <category term="包络" scheme="http://uegeek.com/tags/%E5%8C%85%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>MakeNoise04 - 波形和相位</title>
    <link href="http://uegeek.com/180626-make-noise-04.html"/>
    <id>http://uegeek.com/180626-make-noise-04.html</id>
    <published>2018-06-26T12:01:34.000Z</published>
    <updated>2018-06-26T12:06:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png" alt=""></p><a id="more"></a> <ul><li><a href="https://www.uegeek.com/180621-make-noise-01.html" target="_blank" rel="noopener">MakeNoise01 - 声音是什么？</a></li><li><a href="https://www.uegeek.com/180623-make-noise-02.html" target="_blank" rel="noopener">MakeNoise02 - 频率和音高</a></li><li><a href="https://www.uegeek.com/180624-make-noise-03.html" target="_blank" rel="noopener">MakeNoise03 - 振幅/响度/音量/增益 大乱斗</a></li></ul><h2 id="声音的速度和波长"><a href="#声音的速度和波长" class="headerlink" title="声音的速度和波长"></a>声音的速度和波长</h2><p>对于在同一种材质中出现的一个声音事件，波的速度通常是恒定的（主要取决于温度）。在 20°C 的空气中，声波的传播速度大概是 1130 ft/s  或 344 m/s 。</p><p>￼<img src="http://7xjpra.com1.z0.glb.clouddn.com/wavespeed_fomular.png" alt=""></p><p>通过测量具有相同位移、且运动方向一致的距离最近的两个质点的距离，就可以确定波长 wavelength。</p><p>因为声音在介质中的传播速度相对固定，所以频率低的声音，波长更长。</p><p>跟声音类似，光也是一种波动，是能量的一种形式。而波动传递的能量跟波长密切相关。下面是不同波长的波动类型（包括可见光在内）：</p><p>￼<img src="http://sci.esa.int/science-e-media/img/cb/Figure_4_spectrum_High-energy_highlight.jpg" alt=""></p><h2 id="波形"><a href="#波形" class="headerlink" title="波形"></a>波形</h2><p>波形（waveform）表示信号的形状、形式。波形可以千变万化，常见的基础波形包括正弦波，方波，三角波，锯齿波等：<br>￼<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Waveforms.svg/700px-Waveforms.svg.png" alt=""></p><p>在 Max/MSP 中，有一系列与之对应的生成周期信号的信号源对象：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Doscillators%20in%20max.png" alt=""></p><p>最常用的生成器对应的波形如下：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Ddifferent_waveform.png" alt=""><br>￼</p><p>其中 <code>cycle~</code> 生成正/余弦波，<code>phasor~</code> 和 <code>saw~</code> 生成锯齿波（两者的取值范围不同，<code>saw~</code>生成的波形更平滑一些），<code>rect~</code> 生成方波。</p><p>然后我们来听听看不同波形发出 440Hz 声音：</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=p070303e85g&tiny=0&auto=0" allowfullscreen></iframe><p><a href="http://v.qq.com/x/page/p070303e85g.html" target="_blank" rel="noopener">Different Waveform in Max/MSP</a></p><h2 id="相位"><a href="#相位" class="headerlink" title="相位"></a>相位</h2><p>了解过频率、波长、波形等概念，下面来啃一个相对复杂的概念——相位 Phase。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/wave&amp;phase.png" alt=""></p><p>相位是波形中一个参考点在某个时间点所处的位置，用来描述信号的波形变化（单位： degree）。</p><blockquote><p>Phase is the degree of progression in a cycle</p></blockquote><p>参考点的位置公式如下：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/phase_fomular-s.png" alt=""></p><p>不同相位的波形会相互干涉。当两个声波 in phase（相位相同），会增强振幅；</p><p>￼<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b4/Sine_waves_same_phase.svg/440px-Sine_waves_same_phase.svg.png" alt=""></p><p>当两个声波相位不同，会形成干涉。<br>￼<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Sine_waves_different_phase.svg/440px-Sine_waves_different_phase.svg.png" alt=""></p><p>当两个声波 180° out of phase（相位相反），会完全抵消。这一原理常运用在降噪耳机、消音器上。<br>￼<br><img src="https://www.mediacollege.com/audio/images/wave-interaction.gif" alt=""></p><h2 id="在-Max-MSP-中生成和改变波形"><a href="#在-Max-MSP-中生成和改变波形" class="headerlink" title="在 Max/MSP 中生成和改变波形"></a>在 Max/MSP 中生成和改变波形</h2><p>在前面我们已经用几个信号对象生成对应的波形：</p><p>￼<img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Ddifferent_waveform.png" alt=""></p><p>周期性信号从 0 开始上升，每一步递增的量就是这个信号的斜率，它决定了这个周期会持续多长时间(控制着频率)。其中 phasor~ 相位器是非对称的，取值不会低于 0.0，而是在 0.0~1.0 之间移动。通常使用相位器作为所有周期波形的时间基准或输入（基础源）。</p><p>在实现相位干涉之前，我们先试着修改波形：给波形做乘法会缩放，做加法会在 y 轴产生位移：</p><p>￼<img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5Dmodify_wave.png" alt=""></p><p>然后，我们用 <code>cycle~</code> 生成两个频率为 4 的正弦波。将其中一个乘以 -1 得到相反相位的波形。然后把两个波叠加起来，会看到结果是波形完全消失：</p><p>￼<img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BMax%5D180_out_of_phase.png" alt=""></p><h2 id="在-Ableton-Live-中实验相位干涉"><a href="#在-Ableton-Live-中实验相位干涉" class="headerlink" title="在 Ableton Live 中实验相位干涉"></a>在 Ableton Live 中实验相位干涉</h2><p>在 Ableton Live 中，波形的调制随处可见。比如 Operator 里面可选多种波形去调制声音：</p><p>￼<img src="http://7xjpra.com1.z0.glb.clouddn.com/%5BAbleton%5Doperator_waveform.png" alt=""></p><p>我们首先来实验两个相同的音频，同时播放时的增强效果。</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=o0703smlru3&tiny=0&auto=0" allowfullscreen></iframe><p><a href="http://v.qq.com/x/page/o0703smlru3.html" target="_blank" rel="noopener">In_phase</a></p><p>然后再来尝试将两个音频消音。</p><p>添加 Utility 音效器，在第二个音轨播放时，打开左右声道的相反相位开关。然后同时播放两个音频，会发现声音消失了，因为两个音频的相位正好相反，产生了完全抵消的效果。</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=t07031wi6nr&tiny=0&auto=0" allowfullscreen></iframe><p><a href="http://v.qq.com/x/page/t07031wi6nr.html" target="_blank" rel="noopener">Phase Interference in Ableton</a><br>￼  </p><h3 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h3><p>现在让我们回头看看在 Max/MSP 里听不同波形的这个视频：</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=p070303e85g&tiny=0&auto=0" allowfullscreen></iframe><p><a href="http://v.qq.com/x/page/p070303e85g.html" target="_blank" rel="noopener">Different Waveform in Max/MSP</a></p><p>有什么新发现吗? 😁</p><h3 id="￼Ref"><a href="#￼Ref" class="headerlink" title="￼Ref"></a>￼Ref</h3><ul><li>Audio Engineering 101 - A Beginner’s Guide to Music Production</li><li><a href="https://www.wikiwand.com/en/Waveform" target="_blank" rel="noopener">Waveform - Wikiwand</a></li><li><a href="https://www.youtube.com/watch?v=jjy-eqWM38g" target="_blank" rel="noopener">Light: Crash Course Astronomy #24 - YouTube</a></li><li><a href="https://www.youtube.com/watch?v=TfYCnOvNnFU" target="_blank" rel="noopener">Traveling Waves: Crash Course Physics #17 - YouTube</a></li><li><a href="https://www.youtube.com/watch?v=jxstE6A_CYQ" target="_blank" rel="noopener">Simple Harmonic Motion: Crash Course Physics #16 - YouTube</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Music" scheme="http://uegeek.com/tags/Music/"/>
    
      <category term="Sound" scheme="http://uegeek.com/tags/Sound/"/>
    
      <category term="声音" scheme="http://uegeek.com/tags/%E5%A3%B0%E9%9F%B3/"/>
    
      <category term="Ableton Live" scheme="http://uegeek.com/tags/Ableton-Live/"/>
    
      <category term="Max/MSP" scheme="http://uegeek.com/tags/Max-MSP/"/>
    
      <category term="Phase" scheme="http://uegeek.com/tags/Phase/"/>
    
      <category term="相位" scheme="http://uegeek.com/tags/%E7%9B%B8%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>MakeNoise03 - 振幅/响度/音量/增益 大乱斗</title>
    <link href="http://uegeek.com/180624-make-noise-03.html"/>
    <id>http://uegeek.com/180624-make-noise-03.html</id>
    <published>2018-06-24T10:02:47.000Z</published>
    <updated>2018-06-26T12:05:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png" alt=""></p><a id="more"></a> <ul><li><a href="https://www.uegeek.com/180621-make-noise-01.html" target="_blank" rel="noopener">MakeNoise01 - 声音是什么？</a></li><li><a href="https://www.uegeek.com/180623-make-noise-02.html" target="_blank" rel="noopener">MakeNoise02 - 频率和音高</a></li></ul><p>振幅/响度/音量/增益，这大概是 Sound engineering 入门的第一捆容易混淆的概念们。<em>(¦3」∠)</em></p><h2 id="振幅-Amplitude"><a href="#振幅-Amplitude" class="headerlink" title="振幅 Amplitude"></a>振幅 Amplitude</h2><p>振幅 Amplitude 是在波动或振动中，距离平衡位置或静止位置的最大位移。<br>￼<br><img src="http://mathworld.wolfram.com/images/eps-gif/Amplitude_1000.gif" alt=""></p><p>最大正位移与最大负位移之差，称为值域（range）或峰-峰幅度，是常规振幅的两倍。</p><p><strong>音源的振幅（物理量）</strong>与频率、频谱包络以及时域包络等其他因素一起，<strong>影响声音的响度（感知量）</strong>。顺便复习一下，频率是声源每分钟震动次数的物理量，音高是感知量。</p><h2 id="响度-Loudness"><a href="#响度-Loudness" class="headerlink" title="响度 Loudness"></a>响度 Loudness</h2><p>我们常用 Sound pressure level (SPL) 值来测量声音的响度，单位为 dB。</p><p>不过 dB 并不是可以测量的物理量，它只是一个单位。来看看以下几个概念，有助于我们理解响度到底是什么：</p><ul><li>声压/声强（acoustic pressure）：是指声波通过媒质时，由振动所产生的<strong>压强改变量</strong>。声压的数值很大，不便于计算和描述，于是人们取了一个人耳刚刚能听到 1kHz 声音时候的声压值作为标准。</li><li>声压等级（SPL）：是<strong>描述声音大小的物理量</strong>，用声压值除以上面提到的标准声压值，取了对数再乘以10，就得到 SPL，公式见下图。</li><li>分贝（decibels/dB）：是<strong>描述物理量比值的单位</strong>（分贝不仅用于声学，多用于衡量各种信号的强度、增益等）。</li></ul><p>￼<img src="http://7xjpra.com1.z0.glb.clouddn.com/SPL2dB.png" alt=""></p><p>从以上公式容易看到，<strong>响度和声压并不是线性关系</strong>。一个声波大概需要 10 倍的压强，才能让我们在听觉上感受到 2 倍的响度。</p><p>Fletcher-Munson 曲线总结了人耳对响度的敏感性。人耳对 3kHz~4kHz的声音最敏感，其他频率区域的声音往往都需要经过放大才能被听清。<br>￼<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/49/Lindos4.svg/800px-Lindos4.svg.png" alt=""></p><h2 id="常见的响度范围"><a href="#常见的响度范围" class="headerlink" title="常见的响度范围"></a>常见的响度范围</h2><p>大多数人能识别 3dB 的声音幅度变化。下图给出了常见的声音场景的响度：</p><p><img src="https://images-na.ssl-images-amazon.com/images/I/71Z0oKDowKL._SL1500_.jpg" alt=""></p><ul><li>0 dB: 几乎安静无声</li><li>40-50 dB: 室内环境音</li><li>50-60 dB: 低语声</li><li>60-75 dB: 谈话声</li><li>80-85 dB: 最佳声音响度区域，在混音时最高不应超过 85 dB</li><li>90 dB: 工厂噪声，长时间暴露在这种环境中会损伤听力</li><li>100 dB: 婴儿哭声 </li><li>110 dB: 汽车喇叭</li><li>120 dB: 会引起疼痛和听觉损伤的响度阈值</li><li>140 dB: 相当于连续猛烈敲击军鼓1分钟</li><li>150-160 dB: 飞机引擎声</li></ul><p>不同枪支发射时的 SPL：</p><p>￼<img src="https://cdn.shopify.com/s/files/1/1696/0313/files/SoundComparison-Silencer-Supressor.jpg?v=1500407959" alt=""></p><h2 id="Sound-engineering-里的音量-Volume-和-增益-Gain-的区别"><a href="#Sound-engineering-里的音量-Volume-和-增益-Gain-的区别" class="headerlink" title="Sound engineering 里的音量 Volume 和 增益 Gain 的区别"></a>Sound engineering 里的音量 Volume 和 增益 Gain 的区别</h2><p>Volume 和 Gain 是初学者常常容易混淆的两个概念（就像我现在……☁️☁️☁️），在各种教程和工具界面里会频繁出现这两个词，它们似乎都可以翻译为「音量」。但它们是两个不同的概念。</p><h3 id="Gain"><a href="#Gain" class="headerlink" title="Gain"></a>Gain</h3><p>Gain 用来表示信号的强度，是<strong>音频输入信号和输出信号差异的幅度</strong>。</p><blockquote><p>Gain is the parameter for the amount that some sort of amplifier circuit is going to increase the amplitude of an input signal. </p><p>via <a href="https://www.youtube.com/watch?v=33u60cYDZTM" target="_blank" rel="noopener">Gain vs Volume - Production Concepts</a></p></blockquote><p>可以说，gain 控制的是「进入」声音设备的信号。</p><p>在数字音频中，Gain 常用的单位是 dBFS。0 dBFS 是数字音频中的最大值，正常值都为负数。如果大于 0 呢？音频就会出现削波和失真。</p><h3 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h3><p>Volume 是声音大小（响度）的值，单位是 dBSPL(dB Sound Pressure Level)，测量的是声波在环境中的压强值。可以说，volume 控制的是从声音设备「输出」的声响大小。</p><p>在混音时，volume 值保持在 80 dB 左右最佳。增大响度叫 boost，减小响度叫 cut。</p><h3 id="在软件中的使用场景"><a href="#在软件中的使用场景" class="headerlink" title="在软件中的使用场景"></a>在软件中的使用场景</h3><p>现在，我们知道可以<strong>将 Gain 理解为对信号的调整，将 Volume 理解为处理完成后声音响度的听觉感受</strong>。</p><p>这正好可以对应到 Max/MSP 和 Ableton Live 的实现中。</p><p>Max/MSP 很擅长数字信号处理，主要在信号层面做底层的调控。所以在 Max/MSP 中只有控制 gain 的对象，而没有调控 volume 的对象。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/gain&amp;meter.png" alt=""><br>￼</p><p>而 Ableton Live 善于处理音频，叠加各种音效和编排音轨。控制每一个音轨的音量是最基本的功能之一。在界面功能中，它会把信号的 level 描述为 volume：</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=r0700unhufv&tiny=0&auto=0" allowfullscreen></iframe><p><a href="http://v.qq.com/x/page/r0700unhufv.html" target="_blank" rel="noopener">Volume in ableton live</a></p><p>从上面的视频中可以看到，这个音轨的 peak level 是 -14.9，不会超过 0 ，实际上它控制的还是信号的 gain。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>振幅：波动的最大位置，并不是响度的唯一影响因素</li><li>响度：用物理量声压级 SPL 来测量，一般用简化的单位 dB 来表示响度这一感知量</li><li>音量：在音频处理时表示响度的概念，更多是指音频输出时听觉感受到的声音大小</li><li>增益：在音频处理时表示信号强度的概念，更多是指音频输入与输出时信号强度的差别</li></ul><p>它们都是对声音「大小」的不同描述，现在是不是更清晰一些了？</p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li>Audio Engineering 101 - A Beginner’s Guide to Music Production</li><li><a href="https://www.youtube.com/watch?v=qV4lR9EWGlY" target="_blank" rel="noopener">Sound: Crash Course Physics #18 - YouTube</a></li><li><a href="https://www.wikiwand.com/en/Sound_pressure" target="_blank" rel="noopener">Sound pressure - Wikiwand</a></li><li><a href="https://www.zhihu.com/question/23047125" target="_blank" rel="noopener">响度与振幅与分贝的关系是什么？ - 知乎</a></li><li><a href="https://www.wikiwand.com/en/Fletcher%E2%80%93Munson_curves" target="_blank" rel="noopener">Fletcher–Munson curves - Wikiwand</a></li><li><a href="http://www.prsguitars.com/index.php/blog/post/tips_from_a_recording_engineerthe_critical_difference_between_gain_and_volu" target="_blank" rel="noopener">Tips from a Recording Engineer: The Critical Difference Between Gain and Volume</a></li><li><a href="https://www.youtube.com/watch?v=33u60cYDZTM" target="_blank" rel="noopener">Gain vs Volume - Production Concepts - YouTube</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Music" scheme="http://uegeek.com/tags/Music/"/>
    
      <category term="Sound" scheme="http://uegeek.com/tags/Sound/"/>
    
      <category term="声音" scheme="http://uegeek.com/tags/%E5%A3%B0%E9%9F%B3/"/>
    
      <category term="Ableton Live" scheme="http://uegeek.com/tags/Ableton-Live/"/>
    
      <category term="Max/MSP" scheme="http://uegeek.com/tags/Max-MSP/"/>
    
      <category term="Gain" scheme="http://uegeek.com/tags/Gain/"/>
    
      <category term="Volume" scheme="http://uegeek.com/tags/Volume/"/>
    
  </entry>
  
  <entry>
    <title>MakeNoise02 - 频率和音高</title>
    <link href="http://uegeek.com/180623-make-noise-02.html"/>
    <id>http://uegeek.com/180623-make-noise-02.html</id>
    <published>2018-06-23T09:47:45.000Z</published>
    <updated>2018-06-26T12:05:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png" alt=""></p><a id="more"></a> <p><a href="https://www.uegeek.com/180621-make-noise-01.html" target="_blank" rel="noopener">MakeNoise01 - 声音是什么？</a></p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/MN02-quote.png" alt=""></p><p>频率 Frequency 是周期运动在一秒内重复的次数。比如一根琴弦在一秒内震动 440 次（cycles per second - cps），它发出的就是 440 Hz 频率的声音。</p><p>频率是绝对量，在心理声学上对应的感知量是音高 Pitch。</p><p>一个声音听起来什么样，频率是最基本的决定要素之一。声源在每秒内振动次数的越多，频率就越大，产生的音高也就越高。</p><h2 id="常见声音频率范围"><a href="#常见声音频率范围" class="headerlink" title="常见声音频率范围"></a>常见声音频率范围</h2><p>下图展示了人和一些动物的听觉范围。<strong>人的听觉范围在 20 ~ 20000 Hz</strong>。低于 20 Hz 的属于次声波 infrasounds，高于 20 kHz 的属于超声波 ultrasounds。</p><p>￼<img src="http://7xjpra.com1.z0.glb.clouddn.com/diff_sound_freq.png" alt=""></p><p>所以市面上有一些号称 α、β 脑波的音乐，纯粹是耍流氓：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/brainwave_freq.png" alt=""></p><p>再来看看乐器的发声频率：</p><p><img src="http://www.heavyweightbass.net/wp-content/uploads/2015/12/digitalcopy.jpg" alt=""></p><p>小提琴的频率是 200Hz~1.25kHz，中提琴是 125Hz~1kHz，大提琴是 60Hz~500Hz。频率越高，音高越高，所以小提琴的音高&gt;中提琴&gt;大提琴。男声的频率在 100Hz~800Hz，女声的频率在 250Hz~1kHz，所以大多数女声比男声听起来更「高」更「尖」。</p><p>可听的频率范围可以进一步划分为：</p><ul><li>低音频率: 20~200 Hz</li><li>中音频率: 200~5k Hz, 在这个范围我们的听力最佳<ul><li>Low-mids: 200~700 Hz， 常用 darker, hollow 来形容</li><li>Mid-mids: 700~2k Hz，more aggressive “live” tones</li><li>High-mids: 2k~5kHz，常用 brighter, present 来形容</li></ul></li><li>高音频率: 5k~20kHz</li></ul><h2 id="查看小提琴和大提琴的频谱"><a href="#查看小提琴和大提琴的频谱" class="headerlink" title="查看小提琴和大提琴的频谱"></a>查看小提琴和大提琴的频谱</h2><p>接下来，我们到 Ableton Live 里试听小提琴和大提琴的声音和频率有什么不同。</p><p>在内容库里面找到 String1 Violin 和 Strings2 Cello，在 C3 拖出 2 个节拍。<br>￼<br><img src="http://7xjpra.com1.z0.glb.clouddn.com/violin_vs_cello.png" alt=""></p><p>再加入内容库里面 Audio Effects 里的 EQ eight。播放音频时，可以看到小提琴的频率范围：</p><p>￼<img src="http://7xjpra.com1.z0.glb.clouddn.com/EQ_violin.png" alt=""></p><p>大提琴的频率范围，更多会在低频率的部分。</p><p>￼<img src="http://7xjpra.com1.z0.glb.clouddn.com/EQ_cello.png" alt=""></p><h2 id="用-Max-制作不同频率的声音"><a href="#用-Max-制作不同频率的声音" class="headerlink" title="用 Max 制作不同频率的声音"></a>用 Max 制作不同频率的声音</h2><p>接下来用 Max/MSP/Jitter （系列教程另外单开）来实现并聆听不同频率的正弦声波。</p><p>Max 内置了强大的声音和信号处理机制。这次我们用最简单的方式—— cycle~ 对象来生成持续的正弦波信号。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/max_cycle~.png" alt=""></p><p>设定不同的频率 200Hz、440Hz、800Hz、1200Hz，切换频率，就能听到不同频率产生的音高不同。</p><p>￼<img src="http://7xjpra.com1.z0.glb.clouddn.com/frequency_in_max.png" alt=""></p><p>声音和频谱可以查看下面的视频：</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=l0699omxbcq&tiny=0&auto=0" allowfullscreen></iframe><p><a href="http://v.qq.com/x/page/l0699omxbcq.html" target="_blank" rel="noopener">MakeNoise02-frequency_in_max</a></p><h2 id="谐波频率"><a href="#谐波频率" class="headerlink" title="谐波频率"></a>谐波频率</h2><p>振动物体可以产生一个谐波频率（每个频率都与基频呈简单的整倍数关系），也可以产生非谐波频率。</p><p>谐波是一个数学或物理学概念，是指周期函数或周期性的波形中能用常数、与原函数的最小正周期相同的正弦函数和余弦函数的线性组合表达的部分。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c5/Harmonic_partials_on_strings.svg/500px-Harmonic_partials_on_strings.svg.png" alt=""></p><p>一个纯净音色并不需要各个谐波都完美的排列在完全整数值上，它需要这些谐波形成一个稳定的级数。例如，100Hz、199Hz、396.01Hz。每个泛音几乎都是一个频倍，是前一个频率的 1.99 倍。</p><p>除了正弦/余弦波以外，所有声音都由多个频率构成，形成一个频谱（在上面 Max 里面展示频率的图就是一种频谱）。</p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="https://www.uegeek.com/180621-make-noise-01.html" target="_blank" rel="noopener">MakeNoise01 - 声音是什么？</a></li><li>Audio Engineering 101 - A Beginner’s Guide to Music Production</li><li><a href="https://www.youtube.com/watch?v=qV4lR9EWGlY" target="_blank" rel="noopener">Sound: Crash Course Physics #18 - YouTube</a></li><li><a href="http://www.heavyweightbass.net/index.php/2014/08/29/2014827eq-tips/" target="_blank" rel="noopener">Balance is key – EQ’s magic frequencies | Heavyweightbass.net</a></li><li><a href="https://www.wikiwand.com/en/Harmonic_series_(music" target="_blank" rel="noopener">Harmonic series (music) - Wikiwand</a>)</li><li><a href="https://www.wikiwand.com/zh-hans/%E8%B0%90%E6%B3%A2" target="_blank" rel="noopener">谐波 - Wikiwand</a></li><li><a href="https://www.wikiwand.com/zh/%E8%85%A6%E6%B3%A2" target="_blank" rel="noopener">腦波 - Wikiwand</a></li></ul><p>￼</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Music" scheme="http://uegeek.com/tags/Music/"/>
    
      <category term="Sound" scheme="http://uegeek.com/tags/Sound/"/>
    
      <category term="声音" scheme="http://uegeek.com/tags/%E5%A3%B0%E9%9F%B3/"/>
    
      <category term="Ableton Live" scheme="http://uegeek.com/tags/Ableton-Live/"/>
    
      <category term="Max/MSP" scheme="http://uegeek.com/tags/Max-MSP/"/>
    
      <category term="Frequency" scheme="http://uegeek.com/tags/Frequency/"/>
    
  </entry>
  
  <entry>
    <title>MakeNoise01 - 声音是什么？</title>
    <link href="http://uegeek.com/180621-make-noise-01.html"/>
    <id>http://uegeek.com/180621-make-noise-01.html</id>
    <published>2018-06-21T11:14:43.000Z</published>
    <updated>2018-06-26T12:04:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png" alt=""></p><a id="more"></a> <p>这是个新开的系列，关于声音和制造声音，大概会持续更新（吧）：</p><ul><li>声音的一些物理原理</li><li>声音的属性</li><li>如何用 Max/MSP 构造和设计声音</li><li>如何用 Ableton Live 制作音效</li><li>声音可视化</li></ul><p>第一篇是绕不开的概念和原理。</p><p>为什么绕不开呢？（因为我尝试过……┓( ´o` )┏）如果不从波动的角度开始理解声音，在 Max 等工具里制造和修改声音真是抓瞎，更不要提有数量巨多的音效和合成器等着我们去调戏了。</p><p>声音无处不在，但是因为看不见摸不着，所以它是一种大部分时间存在感很弱的现象。</p><blockquote><p>声音的本质是波动，是在介质（如空气）中的一种震动传播现象。</p></blockquote><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/vlcsnap-2018-06-18-11h26m00s141.png" alt=""></p><p>震动方向和传播方向垂直的波，叫 Transverse wave；方向相同的波叫 Longitudinal wave。声波属于 longitudinal wave。</p><p><img src="http://users.sch.gr/mpolykarp/newsite/images/G_lyk_Kat/springwaves.gif" alt=""></p><p>声音是相当「物理」的一门学科，它属于动力学的一个分支。</p><p>声波在运动中传递能量，它全都是关于「变化」的——声音的波形、位置、能量等等随着时间而变化。</p><p>声源震动引起空气分子往复运动，不断挤压周围的空气而产生声波。我们熟悉的声音：音乐，人说话，猫叫，敲击键盘的声音，噪声……都由震动引起。</p><p>比如话筒，持续接收声源震动，转换为连续变化的电压，再转换为数字信号：<br>￼<br>￼<img src="http://7xjpra.com1.z0.glb.clouddn.com/Pasted%20Graphic%201.png" alt=""></p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/Screen%20Shot%202018-06-18%20at%2011.27.52%20AM.png" alt=""></p><p>耳朵也是这么接收声音哒！（鼓膜的英文 eardrum 是不是很形象？）<br>￼<br><img src="http://7xjpra.com1.z0.glb.clouddn.com/eardrum.png" alt=""></p><p>更多关于声音的原理，推荐这个视频：</p><iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=h0324fzgmr6&tiny=0&auto=0" allowfullscreen></iframe><p>下一篇关于声音最重要的属性——频率。</p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li>Audio Engineering 101 - A Beginner’s Guide to Music Production</li><li><a href="https://www.youtube.com/watch?v=qV4lR9EWGlY" target="_blank" rel="noopener">Sound: Crash Course Physics #18 - YouTube</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/MakeSound-title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="Sound" scheme="http://uegeek.com/tags/Sound/"/>
    
      <category term="声音" scheme="http://uegeek.com/tags/%E5%A3%B0%E9%9F%B3/"/>
    
  </entry>
  
  <entry>
    <title>Happy New Mac II - Mac 私人调教手册</title>
    <link href="http://uegeek.com/180402-happy-new-mac-ii.html"/>
    <id>http://uegeek.com/180402-happy-new-mac-ii.html</id>
    <published>2018-04-02T10:38:08.000Z</published>
    <updated>2018-04-02T12:19:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://store.storeimages.cdn-apple.com/4974/as-images.apple.com/is/image/AppleInc/aos/published/images/i/ma/imac/215/imac-215-retina-selection-hero-201706?wid=904&amp;hei=840&amp;fmt=jpeg&amp;qlt=80&amp;op_usm=0.5,0.5&amp;.v=1495846295922" alt=""></p><p>元宵节这天，迎娶了属于自己的第一台 iMac。</p><p>3 年前写了一篇 Happy New Year Happy New Mac，是时候更新一版，跟大家分享如何用最合理的顺序、最快的速度、最轻松的姿势，调教出一台高大威猛动静皆宜无所不能所向披靡的 Mac……</p><p>（如果你不是工程师，但是有一定的编程需要，比较经常使用命令行，是 Alfred 粉丝，那么本文就最适合你了~）</p><a id="more"></a> <h2 id="一、开箱"><a href="#一、开箱" class="headerlink" title="一、开箱"></a>一、开箱</h2><p>负责任地说一句：体积越大的苹果产品，开箱体验就越享受。</p><p>键盘和 Magic Mouse 都从以前的电池换成了充电式—— Magic Mouse 终于变轻了，好评！比较遗憾的是京东买的这款 21.5 高配还是没有配触控板 😔</p><p>拍照就不用说了，开箱后记得拍一张序列号备用。</p><h2 id="二、基本设置"><a href="#二、基本设置" class="headerlink" title="二、基本设置"></a>二、基本设置</h2><ul><li>开机后打开设置，到「Trackpad」里面设置习惯的触控板手势</li><li>更新系统至最新版本</li><li>有必要的话，在 App Store 里下载最新版本的 Xcode</li></ul><h2 id="三、Terminal"><a href="#三、Terminal" class="headerlink" title="三、Terminal"></a>三、Terminal</h2><h3 id="iTerm"><a href="#iTerm" class="headerlink" title="iTerm"></a>iTerm</h3><p>原配 terminal 比较简陋，先升级一下。用 safari 下载 <a href="http://www.iterm2.com/downloads.html" target="_blank" rel="noopener">iTerm2</a> 并安装。</p><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><p>在新电脑上一个一个下载各软件最新版本很麻烦吧？Homebrew 帮你搞定！用 safari 打开 <a href="http://brew.sh" target="_blank" rel="noopener">http://brew.sh</a>，按说明在 terminal 里安装 Homebrew：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>安装 brew-cask：<code>brew tap phinze/homebrew-cask</code> 或者 <code>brew install brew-cask</code>。以后更新只需要：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update &amp;&amp; brew upgrade</span><br></pre></td></tr></table></figure><p>按需安装各种包，比如 <code>brew install wget</code>。</p><h3 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h3><p>iTerm 虽好，还是缺了一些补全、alias、快速跳转等神奇功能，所以再套上 oh-my-zsh。GitHub 地址：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">robbyrussell/oh-my-zsh</a>. <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Installing-ZSH" target="_blank" rel="noopener">安装说明</a></p><p>如果已经安装 wget，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure><h3 id="Github-配置"><a href="#Github-配置" class="headerlink" title="Github 配置"></a>Github 配置</h3><p>按照 Github <a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="noopener">Generating a new SSH key and adding it to the ssh-agent</a> 说明，创建 SSH 秘钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.ssh</span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>此时，pdcopy 命令已经将 id_rsa.pub 内容复制到剪切板。</p><p>登录并进入 <a href="https://github.com/settings/ssh" target="_blank" rel="noopener">Github SSH and GPG keys 设置页面</a>，点击 <code>New SSH key</code>。Title 部分填写一个所用电脑的名称，然后在 Key 部分填写之前通过 pdcopy 命令复制的内容。<a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="noopener">生成 ssh key 的说明</a>。然后在全局设置中设置用户名和邮箱。</p><p><code>git config --global user.name &quot;yourusername</code><br><code>git config --global user.email &quot;youremail&quot;</code></p><p>如果有项目需要推送到 coding.net，也需要去 <a href="https://coding.net/user/account/setting/keys" target="_blank" rel="noopener">SSH公钥 - 设置</a> 做类似的设置。</p><h2 id="四、刚需：VPN、浏览器和输入法"><a href="#四、刚需：VPN、浏览器和输入法" class="headerlink" title="四、刚需：VPN、浏览器和输入法"></a>四、刚需：VPN、浏览器和输入法</h2><ul><li>安装 VPN 工具（<a href="http://twelveweb.com" target="_blank" rel="noopener">12vpn</a>已经用了五年，推荐）。需要先做好这一步，不然 Chrome 的帐户设置没法同步</li><li>安装浏览器 <code>brew cask install google-chrome</code>（可能需要开 vpn，如果不成功，需要手动下载安装），安装成功后，选择要同步的设置项</li><li>下载安装输入法</li></ul><h2 id="五、效率神器"><a href="#五、效率神器" class="headerlink" title="五、效率神器"></a>五、效率神器</h2><p>安装大管家 Alfred: <code>brew cask install alfred</code>，导入之前备份好的 workflows。严重推荐以下 workflow：</p><ul><li>Douban：直接搜索豆瓣书、影、音，方便得不像话</li><li>Youdao-Translate：快捷查词和翻译，学渣和学霸都必备</li><li>chrome-bookmarks：chrome 书签搜索并打开，简直救了收藏夹整理无能者一命</li><li>Copy-Path：快捷键复制当前文件夹路径，跟命令行绝配，尤其是 Git 重度患者</li><li>其余：百度云盘搜索、淘宝搜索、日历、下载链接分析、自定义搜索、生成短链接和二维码等等，绝对能让 mac 效率提升至少 200%</li></ul><p>如果购买了 Power Pack，可以在 <code>Preference - Advanced - Syncing</code> 里设置配置文件同步，快速导入常用配置。</p><h2 id="六、基础应用"><a href="#六、基础应用" class="headerlink" title="六、基础应用"></a>六、基础应用</h2><ul><li>安装文档同步工具，用 Airdrop 把原有文件传送到新电脑上（新开机有整体 transfer 的选项，但是试了一下要十几小时，太慢了，就放弃）</li><li>安装 Markdown 编辑器 <code>brew cask install macdown</code></li><li>安装笔记应用 <code>brew cask install evernote</code></li><li>安装文献管理工具 Zotero <code>brew cask install zotero</code>，然后设置已经从之前电脑传过来的库</li><li>安装视频播放器 <code>brew cask install vlc</code></li><li>如果有需要，装个虚拟机吧！</li></ul><h2 id="七、编程环境"><a href="#七、编程环境" class="headerlink" title="七、编程环境"></a>七、编程环境</h2><h3 id="Python-环境"><a href="#Python-环境" class="headerlink" title="Python 环境"></a>Python 环境</h3><p>安装 <a href="https://conda.io/miniconda.html" target="_blank" rel="noopener">Miniconda</a>：</p><ol><li><p><a href="https://conda.io/miniconda.html" target="_blank" rel="noopener">下载 sh 文件</a> 或者 <code>wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh</code></p></li><li><p>命令行进入下载的文件夹 <code>bash Miniconda3-latest-Linux-x86_64.sh</code>，按照提示操作。</p></li></ol><p>新建环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n pyp python=3 numpy pandas matplotlib jupyter</span><br></pre></td></tr></table></figure><p>激活环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> activate pyp</span><br></pre></td></tr></table></figure><h3 id="Node-js-和-npm"><a href="#Node-js-和-npm" class="headerlink" title="Node.js 和 npm"></a>Node.js 和 npm</h3><p>因为要用 hexo 更新博客，以及方便以后安装各种基于 js 的应用，下载 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 并安装。</p><p>然后用 npm 安装 hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="编辑器和-Dash"><a href="#编辑器和-Dash" class="headerlink" title="编辑器和 Dash"></a>编辑器和 Dash</h3><p>安装代码编辑器 <code>brew cask install atom</code>。然后是编程语言和各种库的文档大管家 Dash，具体操作略。</p><h2 id="八、创作者套件"><a href="#八、创作者套件" class="headerlink" title="八、创作者套件"></a>八、创作者套件</h2><ul><li>Sketch</li><li>Mindnode</li><li>图床 dropzone3 + qiniu bundle（最新版的 bundle 有 bug，需要用回 1.2 或更低版本）</li><li>图标库 Icons8，图片管理应用如 Inboard</li><li>3D 工具如 SketchUp/Fusion 360</li><li>Logic X pro</li></ul><hr><p>清单暂时更新到这里。欢迎亲们推荐相见恨晚的应用和奇技淫巧~</p><p>Happy New Year &amp; Happy New Macbook!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://store.storeimages.cdn-apple.com/4974/as-images.apple.com/is/image/AppleInc/aos/published/images/i/ma/imac/215/imac-215-retina-selection-hero-201706?wid=904&amp;amp;hei=840&amp;amp;fmt=jpeg&amp;amp;qlt=80&amp;amp;op_usm=0.5,0.5&amp;amp;.v=1495846295922&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;元宵节这天，迎娶了属于自己的第一台 iMac。&lt;/p&gt;
&lt;p&gt;3 年前写了一篇 Happy New Year Happy New Mac，是时候更新一版，跟大家分享如何用最合理的顺序、最快的速度、最轻松的姿势，调教出一台高大威猛动静皆宜无所不能所向披靡的 Mac……&lt;/p&gt;
&lt;p&gt;（如果你不是工程师，但是有一定的编程需要，比较经常使用命令行，是 Alfred 粉丝，那么本文就最适合你了~）&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>DeepLearning 笔记：如何评估神经网络的训练效果</title>
    <link href="http://uegeek.com/180327-DeepLearning12-model-evaluation.html"/>
    <id>http://uegeek.com/180327-DeepLearning12-model-evaluation.html</id>
    <published>2018-03-27T14:33:10.000Z</published>
    <updated>2018-03-27T16:34:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/Art_Code_Bro.png" alt=""></p><a id="more"></a> <p><code>阿扣</code>：阿特，我们已经学过怎样构建神经网络，得到预测结果了。不过到这里还没有完，还有重要的步骤。</p><p><code>阿特</code>：是什么呢？</p><p><code>阿扣</code>：检验效果，来判断模型是否靠谱。</p><p><code>阿特</code>：是不是根据错误率呀？错误率低就说明更靠谱。</p><p><code>阿扣</code>：没错，是这个思路。不过要怎样计算错误率呢？想想看，我们的模型是根据训练数据「拟合」出来的，也就是说，模型在这些数据中「学习」到了规律。但是这不代表模型在其他数据中也能预测得很好哦。</p><p><code>阿特</code>：是不是像有的专家，在某些领域有经验，但是换一个领域可能跟普通人没什么区别。</p><p><code>阿扣</code>：说得对。我们的训练模型也是这样，它有可能对给出的数据了如指掌，就像谈恋爱一样，成为某个姑娘的「专家」。但是换一个姑娘，人家喜欢吃什么、爱豆是谁、是不是颜控，它可能就抓瞎了。很多时候，不是模型复杂效果就好，因为那样可能是「过拟合」（over-fitting）了：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/DL-overfit.png" alt=""></p><h3 id="Cross-validation"><a href="#Cross-validation" class="headerlink" title="Cross validation"></a>Cross validation</h3><p>K-flld cross validation</p><p><code>阿特</code>：那怎么防止过拟合呢？</p><p><code>阿扣</code>：要学会评估训练效果。当模型遇到新的数据，看看这些数据它预测得咋样。一般的做法是，把训练数据分成 3 部分：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/crossValidation.png" alt=""></p><table><thead><tr><th>数据集</th><th>作用</th><th>参考比例</th></tr></thead><tbody><tr><td>训练集 Training Set</td><td>训练模型</td><td>70</td></tr><tr><td>验证集 Validation Set</td><td>调整模型</td><td>10</td></tr><tr><td>测试集 Testing Set</td><td>测试模型效果</td><td>20</td></tr></tbody></table><p><code>阿特</code>：就是把拿到的数据分三份，有一份要存起来，最后才拿出来用。</p><p><code>阿扣</code>：奏四这个节奏。记住啊，千万不要用测试数据来训练模型！不然就「监守自盗」了啊！切记切记！</p><h3 id="Confusion-matrices-混淆矩阵"><a href="#Confusion-matrices-混淆矩阵" class="headerlink" title="Confusion matrices 混淆矩阵"></a>Confusion matrices 混淆矩阵</h3><p><code>阿扣</code>：模型在做预测的时候，通常会犯两种错误。我们举个例子——要诊断某个人是不是得病。那么错误会有两种：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/confusionMatrix1.png" alt=""></p><ul><li>实际上得病，但是判断为没病 (False Negative)</li><li>实际上没病，但是判断为得病 (False Positive)</li></ul><p><code>阿特</code>：好惨哦……这种错范不得……</p><h3 id="Accuracy-准确率"><a href="#Accuracy-准确率" class="headerlink" title="Accuracy 准确率"></a>Accuracy 准确率</h3><p><code>阿扣</code>：有了混淆矩阵，我们就容易计算出模型的<strong>准确率</strong>：</p><p>Accuracy = (True positives + True Negatives) / Total</p><p><code>阿特</code>：把对的加起来，除以总数。</p><p><code>阿扣</code>：对呀对呀，来，给你留个小测试，看看是不是掌握了：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/DL-confusionMatrixTest1.png" alt=""></p><h3 id="补充：如何评估线性模型"><a href="#补充：如何评估线性模型" class="headerlink" title="补充：如何评估线性模型"></a>补充：如何评估线性模型</h3><p>Mean Absolute Error ：把每个数据点的误差 $(y-\hat y)$ 加起来</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/DL-meanAbsoluteError.png" alt=""></p><p>Mean Squared Error ：把每个数据点误差的平方项加起来</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/DL-meanSquaredError.png" alt=""></p><p>R2 Score ：比较训练模型和最简单的模型。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/DL-R2Score.png" alt=""></p><p>Model complexity graph</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/DL-modelComplexityGraph.png" alt=""></p><p>下图虚线表示验证集数据，实线表示训练数据。好的模型，在训练集和验证集上的准确率都比较高。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/modelComplexityGraph.png" alt=""></p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="https://www.udacity.com/course/deep-learning-nanodegree-foundation--nd101" target="_blank" rel="noopener">Deep Learning Nanodegree | Udacity</a></li><li><a href="https://www.wikiwand.com/en/Confusion_matrix" target="_blank" rel="noopener">Confusion matrix - Wikiwand</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/Art_Code_Bro.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="Python" scheme="http://uegeek.com/tags/Python/"/>
    
      <category term="深度学习" scheme="http://uegeek.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="AI" scheme="http://uegeek.com/tags/AI/"/>
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="DeepLearning" scheme="http://uegeek.com/tags/DeepLearning/"/>
    
      <category term="Coding" scheme="http://uegeek.com/tags/Coding/"/>
    
      <category term="编程" scheme="http://uegeek.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="神经网络" scheme="http://uegeek.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="Programming" scheme="http://uegeek.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>DeepLearning笔记：如何用亚马逊云服务 GPU 训练神经网络</title>
    <link href="http://uegeek.com/180322-DeepLearning11-aws-gpu-training.html"/>
    <id>http://uegeek.com/180322-DeepLearning11-aws-gpu-training.html</id>
    <published>2018-03-22T14:05:27.000Z</published>
    <updated>2018-03-22T14:30:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/p2_cool_gpus_1.png" alt=""></p><p>在 Udacity 的深度学习纳米学位课程中，5 个实战项目里至少有 3 个需要用到 GPU 来训练模型。课程附带了 100 刀的亚马逊云服务（AWS）credit，这篇笔记分享如何使用 AWS 完成模型的训练。</p><a id="more"></a> <h2 id="注册帐户"><a href="#注册帐户" class="headerlink" title="注册帐户"></a>注册帐户</h2><p>首先，注册亚马逊 AWS 的免费帐号：<a href="https://aws.amazon.com/free/" target="_blank" rel="noopener">Amazon Web Services Cloud</a>。</p><p>在项目中要用到 <a href="https://aws.amazon.com/ec2" target="_blank" rel="noopener">Elastic Compute Cloud (EC2)</a>，它可以启动 GPU 运行的虚拟服务，具体类型是 <code>p2.xlarge</code>。</p><p>我们会用到 <a href="https://aws.amazon.com/marketplace/pp/B01M0AXXQB#product-description" target="_blank" rel="noopener">this AMI (Amazon Machine Image)</a> 去定义所需要的环境。在使用之前，需要选择离你最近的 AWS 地区：</p><ul><li>EU (Ireland)</li><li>Asia Pacific (Seoul)</li><li>Asia Pacific (Tokyo)</li><li>Asia Pacific (Sydney)</li><li>US East (N. Virginia)</li><li>US East (Ohio)</li><li>US West (Oregon)</li></ul><p>选择好后，查看 <a href="https://console.aws.amazon.com/ec2/v2/home?#Limits" target="_blank" rel="noopener">EC2 Service Limit report</a>，找到 「正在按需运行的 p2.xlarge 实例」项目：</p><p><img src="https://d17h27t6h515a5.cloudfront.net/topher/2017/November/5a1c631b_p2xlarge-limit-request/p2xlarge-limit-request.png" alt=""></p><p>如果限制是 0，点击右侧「请求提高限制」链接。提高限值不会收费，运行 instance 才会收费。</p><p>提高限制的表单需要填写：</p><ul><li>Region: 选择前面步骤的 AWS 地区</li><li>Primary Instance Type: p2.xlarge</li><li>Limit: Instance Limit</li><li>New Limit Value: 1 (more if you like)</li><li>Use Case Description: I would like to use GPU instances for deep learning.</li></ul><p>如果之前没有启动过 AWS 服务，可能会收到确认邮件。</p><p>在 <a href="https://console.aws.amazon.com/billing/home?#/credits" target="_blank" rel="noopener">Billing Management Console</a> 页面输入 Udacity 提供的优惠代码。</p><h2 id="运行实例"><a href="#运行实例" class="headerlink" title="运行实例"></a>运行实例</h2><h3 id="Launch-an-Instance"><a href="#Launch-an-Instance" class="headerlink" title="Launch an Instance"></a>Launch an Instance</h3><p>访问 <a href="https://console.aws.amazon.com/ec2/v2/home" target="_blank" rel="noopener">EC2 Management Console</a>, 点击 “Launch Instance” 。</p><p>选择 AMI (Amazon Machine Image) </p><p>如下图，进入 AWS Marketplace，搜索 Deep Learning AMI with Source Code (CUDA 8, Ubuntu)。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/screen-shot-2017-11-26-at-9.38.24-am.png" alt=""></p><h3 id="Select-the-Instance-Type"><a href="#Select-the-Instance-Type" class="headerlink" title="Select the Instance Type"></a>Select the Instance Type</h3><p>在步骤 2: 选择一个实例类型中</p><ul><li>Filter the instance list to only show “GPU compute”</li><li>Select the p2.xlarge instance type</li><li>Review and Launch</li></ul><h3 id="Configure-the-Security-Group"><a href="#Configure-the-Security-Group" class="headerlink" title="Configure the Security Group"></a>Configure the Security Group</h3><p>在 步骤 7: 核查实例启动 中点击「编辑安全组」</p><p>On the “Configure Security Group” page:</p><ul><li>Select “Create a new security group”</li><li>Set the “Security group name” (i.e. “Jupyter”)</li><li>Click “Add Rule”</li><li>Set a “Custom TCP Rule”<ul><li>Set the “Port Range” to “8888”</li><li>Select “Anywhere” as the “Source”</li></ul></li><li>Click “Review and Launch” (again)</li></ul><h3 id="Create-an-Authentication-Key-Pair"><a href="#Create-an-Authentication-Key-Pair" class="headerlink" title="Create an Authentication Key Pair"></a>Create an Authentication Key Pair</h3><p>“Create a new key pair” and click the “Download Key Pair” button. 下载 .pem 文件并保存好，在启动时需要这个文件。</p><p>下载完成后，继续点击「启动实例」按钮。</p><h3 id="设置计费提醒"><a href="#设置计费提醒" class="headerlink" title="设置计费提醒"></a>设置计费提醒</h3><p>此刻开始，启动这个 EC2 instance，AWS 会开始计费。费用可以查看 <a href="https://aws.amazon.com/ec2/pricing/on-demand/" target="_blank" rel="noopener">EC2 On-Demand Pricing page</a></p><p>p2.xlarge: $0.9 每小时</p><blockquote><p>Most importantly, remember to “stop” (i.e. shutdown) your instances when you are not using them. Otherwise, your instances might run for a day, week, month, or longer without you remembering, and you’ll wind up with a large bill!</p></blockquote><h2 id="登录云服务器"><a href="#登录云服务器" class="headerlink" title="登录云服务器"></a>登录云服务器</h2><p>实例启动后，在命令行中进入 .pem 文件保存的目录，输入命令（IP 是控制台提供的 IP，每次都不同）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i DLND.pem ubuntu@13.115.162.209</span><br></pre></td></tr></table></figure><p>这时候看到错误提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">Permissions 0644 <span class="keyword">for</span> <span class="string">'DLND.pem'</span> are too open.</span><br><span class="line">It is required that your private key files are NOT accessible by others.</span><br><span class="line">This private key will be ignored.</span><br><span class="line">Load key <span class="string">"DLND.pem"</span>: bad permissions</span><br><span class="line">ubuntu@13.115.162.209: Permission denied (publickey).</span><br></pre></td></tr></table></figure><p>查找到 <a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html#troubleshoot-unprotected-key" target="_blank" rel="noopener">排查实例的连接问题 - Amazon Elastic Compute Cloud</a></p><blockquote><p>您的密钥必须不公开可见，SSH 才能工作。要修复此错误，请执行以下命令:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 DLND.pem</span><br></pre></td></tr></table></figure><h2 id="配置-Jupyter-notebook"><a href="#配置-Jupyter-notebook" class="headerlink" title="配置 Jupyter notebook"></a>配置 Jupyter notebook</h2><p>连接服务器后，输入以下命令创建 Jupyter notebook 的配置文件： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure><p>服务器返回：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Writing default config to: /home/ubuntu/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><p>然后，修改 notebook 的 IP 地址设置： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -ie <span class="string">"s/#c.NotebookApp.ip = 'localhost'/#c.NotebookApp.ip = '*'/g"</span> ~/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure><h2 id="测试实例"><a href="#测试实例" class="headerlink" title="测试实例"></a>测试实例</h2><p>On the EC2 instance</p><ul><li>Clone a GitHub repository<br>  <code>git clone https://github.com/udacity/aind2-cnn.git</code></li><li>Enter the repo directory<br>  <code>cd aind2-cnn</code></li><li>Install the requirements<br>  <code>sudo python3 -m pip install -r requirements/requirements-gpu.txt</code></li><li>Start Jupyter notebook<br>  <code>jupyter notebook --ip=0.0.0.0 --no-browser</code></li></ul><p>From your local machine</p><ul><li><p>You will need the token generated by your jupyter notebook to access it. On your instance terminal, there will be the following line: <code>Copy/paste this URL into your browser when you connect for the first time, to login with a token:</code>. Copy everything starting with the <code>:8888/?token=</code>.</p><ul><li><code>http://13.115.162.209:8888/?token=94e72e170ca3fdbe1cd7c58a3fd898e9533e740beb6070fa</code></li></ul></li><li><p>Access the Jupyter notebook index from your web browser by visiting: X.X.X.X:8888/?token=… (where X.X.X.X is the IP address of your EC2 instance and everything starting with :8888/?token= is what you just copied).</p></li><li>Click on “mnist_mlp” to enter the folder, and select the “mnist_mlp.ipynb” notebook.</li><li>Run each cell in the notebook.</li></ul><p>实验完，记得 stop instance。</p><h2 id="新建环境"><a href="#新建环境" class="headerlink" title="新建环境"></a>新建环境</h2><p>参考<a href="https://discussions.youdaxue.com/t/topic/44102" target="_blank" rel="noopener">深度学习学前须知及常见问题 - DLND: 深度学习纳米学位 - 优达学城论坛</a></p><p>安装 conda</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line"></span><br><span class="line">bash Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>新建环境: <code>conda create -n dlnd python=3</code></p><p>激活环境: <code>source activate dlnd</code></p><p>安装 tf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --ignore-installed https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.1.0-cp36-cp36m-linux_x86_64.whl</span><br></pre></td></tr></table></figure><h2 id="下次进入环境"><a href="#下次进入环境" class="headerlink" title="下次进入环境"></a>下次进入环境</h2><ul><li>从链接 <a href="https://ap-northeast-1.console.aws.amazon.com/ec2/v2/home?region=ap-northeast-1#Instances:sort=instanceId" target="_blank" rel="noopener">EC2 Management Console</a> 启动实例</li><li>本地输入命令 <code>ssh -i DLND.pem ubuntu@52.197.226.169</code></li><li>连接服务器后，激活环境 <code>source activate dlnd</code></li><li>启动 jupyter notebook <code>jupyter notebook --ip=0.0.0.0</code></li><li>在浏览器打开：<br>  <a href="http://52.197.226.169:8888/?token=a55e1cfbc162df6d3358e3553d220b4d269e2789df6e5ddd" target="_blank" rel="noopener">http://52.197.226.169:8888/?token=a55e1cfbc162df6d3358e3553d220b4d269e2789df6e5ddd</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/p2_cool_gpus_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 Udacity 的深度学习纳米学位课程中，5 个实战项目里至少有 3 个需要用到 GPU 来训练模型。课程附带了 100 刀的亚马逊云服务（AWS）credit，这篇笔记分享如何使用 AWS 完成模型的训练。&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="Python" scheme="http://uegeek.com/tags/Python/"/>
    
      <category term="深度学习" scheme="http://uegeek.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="AI" scheme="http://uegeek.com/tags/AI/"/>
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="DeepLearning" scheme="http://uegeek.com/tags/DeepLearning/"/>
    
      <category term="Coding" scheme="http://uegeek.com/tags/Coding/"/>
    
      <category term="编程" scheme="http://uegeek.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="神经网络" scheme="http://uegeek.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="Programming" scheme="http://uegeek.com/tags/Programming/"/>
    
      <category term="AWS" scheme="http://uegeek.com/tags/AWS/"/>
    
      <category term="GPU" scheme="http://uegeek.com/tags/GPU/"/>
    
  </entry>
  
  <entry>
    <title>00&#39;s Learning Log 180223</title>
    <link href="http://uegeek.com/180223-learning-log.html"/>
    <id>http://uegeek.com/180223-learning-log.html</id>
    <published>2018-02-23T14:38:28.000Z</published>
    <updated>2018-02-23T14:41:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>Summary</p><ul><li>整理文档系统结构，参考 <a href="http://www.yangzhiping.com/psy/yang-KnowledgeSystem.html" target="_blank" rel="noopener">构建优雅的知识创造系统 - 阳志平的网志</a> 采用域名方式命名。</li><li>整理 gitbook 文档理出 sound visualization 的思路</li><li>p5.sound 的 envelope 和 FFT 例子</li><li>Music Theory 101 的 <a href="https://prod-edxapp.edx-cdn.org/assets/courseware/v1/063c6ec50fc9d2b0f6c8624843bfaf24/asset-v1:JuilliardX+JX001x+3T2017+type@asset+block/Mod4_PS.pdf" target="_blank" rel="noopener">Model 4 练习</a></li><li>「乐理自学指南」第1-10课</li></ul><a id="more"></a> <h2 id="p5-sound"><a href="#p5-sound" class="headerlink" title="p5.sound"></a>p5.sound</h2><h3 id="phrase"><a href="#phrase" class="headerlink" title="phrase"></a>phrase</h3><p>乐句是一段时间内 musical events 的模式，比如一系列的音符和休止。Phrases 必需添加到 <code>p5.Part</code> 播放。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> p5.Phrase(name,callback,sequence)</span><br></pre></td></tr></table></figure><p><code>p5.Part</code> 播放一个或多个 <code>p5.Phrases</code>. 用 steps and tatums(Divisions of a beat) 初始化. 每个 step 默认为 1/16 音符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> p5.Part([steps],[tatums])</span><br></pre></td></tr></table></figure><p>例子中用函数控制声音播放/暂停时的显示，可以参考</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateDescription</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!soundFile.isPlaying()) &#123;</span><br><span class="line">    description = <span class="string">'Paused...'</span>;</span><br><span class="line">    p.html(description);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (soundFile.isPlaying())&#123;</span><br><span class="line">    description = <span class="string">'Playing!'</span>;</span><br><span class="line">    p.html(description);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; frameCount%<span class="number">3</span>; i++ ) &#123;</span><br><span class="line">      <span class="comment">// add periods to loading to create a fun loading bar effect</span></span><br><span class="line">      <span class="keyword">if</span> (frameCount%<span class="number">4</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        description += <span class="string">'.'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (frameCount%<span class="number">25</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        description = <span class="string">'loading'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p.html(description);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sampleRate"><a href="#sampleRate" class="headerlink" title="sampleRate"></a>sampleRate</h3><p>返回每一秒所有声音对象总体采样率数值。It is often 44100, or twice the range of human hearing.</p><ul><li><a href="https://p5js.org/reference/#/p5.Phrase" target="_blank" rel="noopener">p5.js | Phrase</a></li><li><a href="https://p5js.org/reference/#/p5.Part" target="_blank" rel="noopener">p5.js | Part</a></li><li><a href="https://p5js.org/reference/#/p5/sampleRate" target="_blank" rel="noopener">p5.js | sampleRate</a></li></ul><h2 id="Music-Theory-101-Model-4-练习"><a href="#Music-Theory-101-Model-4-练习" class="headerlink" title="Music Theory 101 Model 4 练习"></a>Music Theory 101 Model 4 练习</h2><p>在识别音级的这个练习中：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/Screen%20Shot%202018-02-23%20at%205.34.34%20PM.png" alt=""></p><p>在给定曲调的下方的音符，音程为 (8+1-间隔音程)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Summary&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整理文档系统结构，参考 &lt;a href=&quot;http://www.yangzhiping.com/psy/yang-KnowledgeSystem.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;构建优雅的知识创造系统 - 阳志平的网志&lt;/a&gt; 采用域名方式命名。&lt;/li&gt;
&lt;li&gt;整理 gitbook 文档理出 sound visualization 的思路&lt;/li&gt;
&lt;li&gt;p5.sound 的 envelope 和 FFT 例子&lt;/li&gt;
&lt;li&gt;Music Theory 101 的 &lt;a href=&quot;https://prod-edxapp.edx-cdn.org/assets/courseware/v1/063c6ec50fc9d2b0f6c8624843bfaf24/asset-v1:JuilliardX+JX001x+3T2017+type@asset+block/Mod4_PS.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Model 4 练习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;「乐理自学指南」第1-10课&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
      <category term="读书" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="Note" scheme="http://uegeek.com/tags/Note/"/>
    
      <category term="Coding" scheme="http://uegeek.com/tags/Coding/"/>
    
      <category term="编程" scheme="http://uegeek.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Learning" scheme="http://uegeek.com/tags/Learning/"/>
    
      <category term="Music" scheme="http://uegeek.com/tags/Music/"/>
    
  </entry>
  
  <entry>
    <title>00&#39;s Learning Log 180222</title>
    <link href="http://uegeek.com/180222-learning-log.html"/>
    <id>http://uegeek.com/180222-learning-log.html</id>
    <published>2018-02-22T12:35:53.000Z</published>
    <updated>2018-02-23T14:39:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Summary</p><ul><li>p5.sound 的例子</li><li>优化了情人节小动画</li><li>Treble + Bass clef 组合练习</li><li>Music Theory 101 Model 4</li><li>知识大融通 ch12</li></ul><a id="more"></a> <h2 id="p5-sound-对象和方法学习"><a href="#p5-sound-对象和方法学习" class="headerlink" title="p5.sound 对象和方法学习"></a>p5.sound 对象和方法学习</h2><p>补充昨天 SawOsc/TriOsc 的波形图像<br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Waveforms.svg/400px-Waveforms.svg.png" alt=""></p><p>昨天看了半天文档和例子，发现效率还是比较低。今早搜了一下 youtube，发现丹叔也有讲 p5.sound！<a href="https://www.youtube.com/watch?v=Pn1g1wjxl_0&amp;list=PLRqwX-V7Uu6aFcVjlDAkkGIixw70s7jpW" target="_blank" rel="noopener">17.1: Loading and Playing - p5.js Sound Tutorial</a> 开心地刷完了 11 个视频。</p><h3 id="Loading-and-Playing"><a href="#Loading-and-Playing" class="headerlink" title="Loading and Playing"></a>Loading and Playing</h3><p><a href="https://www.youtube.com/watch?v=Pn1g1wjxl_0&amp;list=PLRqwX-V7Uu6aFcVjlDAkkGIixw70s7jpW" target="_blank" rel="noopener">17.1: Loading and Playing - p5.js Sound Tutorial</a></p><p>加载声音：<code>loadSound()</code>，必需在 setup() 或 draw() 函数内使用。在 p5.js 里一般会用两种方式加载声音文件：</p><ul><li><code>preload()</code> : 用于在 <code>setup()</code> 之前加载文件，加载成功才开始运行其他部分</li><li><code>callback()</code> ：如果不想完全加载才运行程序，可以用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> song, slider, button;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">createCanvas(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">background(<span class="number">127</span>);</span><br><span class="line">  song = loadSound(<span class="string">'song.mp3'</span>, loaded);</span><br><span class="line">button = createButton(<span class="string">'play'</span>);</span><br><span class="line">button.mousePressed(togglePlaying);</span><br><span class="line">  slider = createSlider(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.5</span>, <span class="number">0.01</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loaded</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'loaded'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  song.setVolume(slider.value());</span><br><span class="line">  <span class="comment">// song.pan(slider.value()); //set right or left channel, -1~1</span></span><br><span class="line">  <span class="comment">// song.rate(slider.value()); //set play speed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">togglePlaying</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!song.isPlaying()) &#123;</span><br><span class="line">song.play(); <span class="comment">// or song.loop();</span></span><br><span class="line">button.html(<span class="string">'pause'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">song.pause();</span><br><span class="line">button.html(<span class="string">'play'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Add-cue"><a href="#Add-cue" class="headerlink" title="Add cue"></a>Add cue</h3><p><code>addCue(time,callback,[value])</code> ：在设定的时间点(a playback cue point)触发事件。 <a href="https://p5js.org/reference/#/p5.SoundFile/addCue" target="_blank" rel="noopener">p5.js | addCue</a></p><p>比如可以在游戏中加载音效：<a href="https://www.youtube.com/watch?v=40Me1-yAtTc&amp;index=5&amp;list=PLRqwX-V7Uu6aFcVjlDAkkGIixw70s7jpW" target="_blank" rel="noopener">17.5: Adding Sound Effects - p5.js Sound Tutorial</a></p><h3 id="Sound-Synthesis"><a href="#Sound-Synthesis" class="headerlink" title="Sound Synthesis"></a>Sound Synthesis</h3><p><a href="https://www.youtube.com/watch?v=Bk8rLzzSink&amp;index=6&amp;list=PLRqwX-V7Uu6aFcVjlDAkkGIixw70s7jpW" target="_blank" rel="noopener">17.6: Sound Synthesis - p5.js Sound Tutorial</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wave = <span class="keyword">new</span> p5.Oscillator();</span><br><span class="line"></span><br><span class="line">wave.setType(<span class="string">'sine'</span>);</span><br><span class="line">wave.start();</span><br><span class="line">wave.amp(<span class="number">0.5</span>);</span><br><span class="line">wave.freq(<span class="number">440</span>);</span><br></pre></td></tr></table></figure><h3 id="ADSR-Envelope"><a href="#ADSR-Envelope" class="headerlink" title="ADSR Envelope"></a>ADSR Envelope</h3><p>补充昨天的 env 对象。<a href="https://www.youtube.com/watch?v=wUSva_BnedA&amp;list=PLRqwX-V7Uu6aFcVjlDAkkGIixw70s7jpW&amp;index=7" target="_blank" rel="noopener">17.7: ADSR Envelope - p5.js Sound Tutorial</a></p><p><img src="https://blog.landr.com/wp-content/uploads/2016/10/ASDR-01.jpg" alt=""></p><p>A-Attack<br>D-Decay<br>S-Sustain<br>R-Release</p><h2 id="优化情人节小动画"><a href="#优化情人节小动画" class="headerlink" title="优化情人节小动画"></a>优化情人节小动画</h2><p><a href="http://www.uegeek.com/20180214.html" target="_blank" rel="noopener">查看</a></p><ul><li>裁剪音频</li><li>用 preload 函数预先加载音频</li><li>增加 play/pause 按钮控制播放</li><li>调整频谱视觉效果，尝试渐变</li></ul><h2 id="拾遗"><a href="#拾遗" class="headerlink" title="拾遗"></a>拾遗</h2><ul><li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="noopener">sindresorhus/awesome: Curated list of awesome lists</a>：Github 超全索引！</li><li><a href="https://www.electronics-tutorials.ws/" target="_blank" rel="noopener">Basic Electronics Tutorials and Revision</a>：电路电子教材</li><li><a href="https://arnofaure.github.io/free-sfx/" target="_blank" rel="noopener">Free SFX</a>：免费音效</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Summary&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;p5.sound 的例子&lt;/li&gt;
&lt;li&gt;优化了情人节小动画&lt;/li&gt;
&lt;li&gt;Treble + Bass clef 组合练习&lt;/li&gt;
&lt;li&gt;Music Theory 101 Model 4&lt;/li&gt;
&lt;li&gt;知识大融通 ch12&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
      <category term="读书" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="Note" scheme="http://uegeek.com/tags/Note/"/>
    
      <category term="Coding" scheme="http://uegeek.com/tags/Coding/"/>
    
      <category term="编程" scheme="http://uegeek.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Learning" scheme="http://uegeek.com/tags/Learning/"/>
    
      <category term="Music" scheme="http://uegeek.com/tags/Music/"/>
    
  </entry>
  
  <entry>
    <title>00&#39;s Learning Log 180221</title>
    <link href="http://uegeek.com/180221-learning-log.html"/>
    <id>http://uegeek.com/180221-learning-log.html</id>
    <published>2018-02-21T13:02:31.000Z</published>
    <updated>2018-02-22T08:58:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Summary</p><ul><li>基于例子学习 p5.sound 库的几类对象和方法</li><li>开始 Bass clef 低音谱号识谱练习(工具 Music Tutor App)</li><li>Music Theory 101 的 <a href="https://prod-edxapp.edx-cdn.org/assets/courseware/v1/063c6ec50fc9d2b0f6c8624843bfaf24/asset-v1:JuilliardX+JX001x+3T2017+type@asset+block/Mod3_PS.pdf" target="_blank" rel="noopener">Module 3 练习</a></li><li>开始使用 workflowy 写学习 log (工具 <a href="https://chrome.google.com/webstore/detail/workflowy-panel/nhmckiepjgggfmmdlklgalgphjaopidk" target="_blank" rel="noopener">WorkFlowy Panel</a>)</li><li>知识大融通 ch11</li></ul><a id="more"></a> <h2 id="p5-sound-对象和方法学习"><a href="#p5-sound-对象和方法学习" class="headerlink" title="p5.sound 对象和方法学习"></a>p5.sound 对象和方法学习</h2><h3 id="fft"><a href="#fft" class="headerlink" title="fft"></a>fft</h3><p>FFT (Fast Fourier Transform 快速傅里叶变换) 是一种分离声音频率波形的分析算法。p5 里面的 FFP 对象可以分析声音的频率，返回两种数组：</p><ul><li><p><code>FFT.waveform()</code> : 计算时间振幅。数组内每一个值代表取样时间内的波形振幅。返回值在 -1 到 1 之间。<strong>可用来绘制声音的波形</strong>。</p></li><li><p><code>FFT.analyze()</code> : 计算频率振幅。数组内每一个值代表频谱(frequency spectrum, i.e. pitches)振幅。用 <code>getEnergy()</code> 方法可以获取某个范围内的频率。</p></li></ul><p><a href="https://www.youtube.com/watch?v=2O3nm0Nvbi4&amp;list=PLRqwX-V7Uu6aFcVjlDAkkGIixw70s7jpW&amp;index=11" target="_blank" rel="noopener">17.11: Sound Visualization: Frequency Analysis with FFT - p5.js Sound Tutorial</a></p><h3 id="noise"><a href="#noise" class="headerlink" title="noise"></a>noise</h3><p>Noise 对象是生成随机 buffer 的振荡器(oscillator)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> p5.Noise(type) <span class="comment">//String: Type of noise can be 'white' (default), 'brown' or 'pink'.</span></span><br></pre></td></tr></table></figure><h3 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h3><p>Delay 生成回声效果. 参数包括 delay time, feedback, filter, and type. </p><h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><p>Envelopes (中文术语是什么？)是预先定义时间内的振幅分布，常用于控制输出音量和 a series of fades referred to as Attack, Decay, Sustain and Release (ADSR).<br><img src="https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg" alt="ADSR">  </p><h3 id="SawOsc-TriOsc"><a href="#SawOsc-TriOsc" class="headerlink" title="SawOsc/TriOsc"></a>SawOsc/TriOsc</h3><p>创建 SawTooth Wave Oscillator / Triangle Wave Oscillator (相当于 <code>new p5.Oscillator(&#39;sawtooth&#39;)</code>/ <code>p5.Oscillator(&#39;triangle&#39;)</code> 或者创建 <code>p5.Oscillator</code> 然后调用 <code>setType(&#39;sawtooth&#39;)</code> / <code>setType(&#39;triangle&#39;)</code> )</p><h3 id="distortion"><a href="#distortion" class="headerlink" title="distortion"></a>distortion</h3><p>生成 Waveshaper Node，是 p5.Effect 的子类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> p5.Distortion([amount=<span class="number">0.25</span>],[oversample=<span class="string">'none'</span>])</span><br></pre></td></tr></table></figure><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="https://p5js.org/reference/#/p5.FFT" target="_blank" rel="noopener">p5.js | FFT</a></li><li><a href="https://p5js.org/reference/#/p5.Noise" target="_blank" rel="noopener">p5.js | Noise</a></li><li><a href="https://p5js.org/reference/#/p5.Delay" target="_blank" rel="noopener">p5.js | Delay</a></li><li><a href="https://p5js.org/reference/#/p5.Env" target="_blank" rel="noopener">p5.js | Env</a></li><li><a href="https://p5js.org/reference/#/p5.Oscillator" target="_blank" rel="noopener">p5.js | Oscillator</a></li><li><a href="https://p5js.org/reference/#/p5.SawOsc" target="_blank" rel="noopener">p5.js | SawOsc</a></li><li><a href="https://p5js.org/reference/#/p5.TriOsc" target="_blank" rel="noopener">p5.js | TriOsc</a></li><li><a href="https://p5js.org/reference/#/p5.Distortion" target="_blank" rel="noopener">p5.js | Distortion</a></li></ul><h2 id="Bass-clef-识谱练习"><a href="#Bass-clef-识谱练习" class="headerlink" title="Bass clef 识谱练习"></a>Bass clef 识谱练习</h2><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Bass_and_Treble_clef.svg/400px-Bass_and_Treble_clef.svg.png" alt=""></p><p>经过一周练习，Treble clef 高音谱号的识谱练习准确率可达 95% 以上。熟练掌握 Treble clef 后，Bass clef 整体下移三度，另外加上快捷位置记忆：</p><ul><li>下加二线：C</li><li>0-3间：FACE 🙂</li><li>5线：A</li><li>上加一线：C</li></ul><p>继续用 Music Tutor 练习，吸取 Treble clef 的经验，开始时的练习可以设置为：</p><ul><li>练习时长 1 分钟（便于总结规律）</li><li>识别区间B1-E4 (强化记忆中间区域的 notes)</li><li>去掉升降号识别</li><li>熟悉自己的 base notes 以后，增加练习时长，并且加入升降号识别</li></ul><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/IMG_9C409B101E19-1.jpeg" alt=""></p><h2 id="Music-Theory-101-的-Module-3-练习"><a href="#Music-Theory-101-的-Module-3-练习" class="headerlink" title="Music Theory 101 的 Module 3 练习"></a>Music Theory 101 的 Module 3 练习</h2><p>Juilliard 的这门课 <a href="https://courses.edx.org/courses/course-v1:JuilliardX+JX001x+3T2017/course/" target="_blank" rel="noopener">Music Theory 101</a> 的练习都很走心。今天做到 <a href="https://prod-edxapp.edx-cdn.org/assets/courseware/v1/063c6ec50fc9d2b0f6c8624843bfaf24/asset-v1:JuilliardX+JX001x+3T2017+type@asset+block/Mod3_PS.pdf" target="_blank" rel="noopener">Module 3 练习</a>，主要针对音符/休止符和拍子。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/Mod3_AK_page_1.png" alt=""></p><p>为了在电脑上写作业，找了一款音乐符号的字体：<a href="http://www.fontspace.com/robert-allgeyer/musisync" target="_blank" rel="noopener">MusiSync font - FontSpace</a></p><p>Meter 的遗留问题：如何确定以什么音符为一拍？</p><h2 id="明日-To-do"><a href="#明日-To-do" class="headerlink" title="明日 To do"></a>明日 To do</h2><ul><li>p5.sound 的例子</li><li>Treble + Bass clef 组合练习</li><li>Music Theory 101 Module 4</li><li>知识大融通 ch12</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Summary&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于例子学习 p5.sound 库的几类对象和方法&lt;/li&gt;
&lt;li&gt;开始 Bass clef 低音谱号识谱练习(工具 Music Tutor App)&lt;/li&gt;
&lt;li&gt;Music Theory 101 的 &lt;a href=&quot;https://prod-edxapp.edx-cdn.org/assets/courseware/v1/063c6ec50fc9d2b0f6c8624843bfaf24/asset-v1:JuilliardX+JX001x+3T2017+type@asset+block/Mod3_PS.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Module 3 练习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开始使用 workflowy 写学习 log (工具 &lt;a href=&quot;https://chrome.google.com/webstore/detail/workflowy-panel/nhmckiepjgggfmmdlklgalgphjaopidk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WorkFlowy Panel&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;知识大融通 ch11&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
      <category term="读书" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="Note" scheme="http://uegeek.com/tags/Note/"/>
    
      <category term="Coding" scheme="http://uegeek.com/tags/Coding/"/>
    
      <category term="编程" scheme="http://uegeek.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Learning" scheme="http://uegeek.com/tags/Learning/"/>
    
      <category term="Music" scheme="http://uegeek.com/tags/Music/"/>
    
  </entry>
  
  <entry>
    <title>DeepLearning 笔记：用 Python 实现反向传播算法</title>
    <link href="http://uegeek.com/180208-DeepLearning10-backpropagation-python.html"/>
    <id>http://uegeek.com/180208-DeepLearning10-backpropagation-python.html</id>
    <published>2018-02-08T14:37:55.000Z</published>
    <updated>2018-02-08T16:41:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/Art_Code_Bro.png" alt=""></p><a id="more"></a> <p>用反向传播算法更新权重的算法如下：</p><ul><li>给每一层的权重赋值为 0<ul><li>输入层→隐层的权重 $\Delta w_{ij}=0$</li><li>隐层→输出层的权重 $\Delta W_j=0$<br>​</li></ul></li><li>对训练集里的每一个数据：<ul><li>使用 forward pass，计算输出节点的值 $\hat y$</li><li>计算输出节点的误差梯度 $\delta^o=(y-\hat y)f’(z)$，  这里的 $z=\sum_jW_ja_j$</li><li>将误差反向传递到隐层 $\delta^h_j=\delta^oW_jf’(h_j)$</li><li>更新权重步长<ul><li>$\Delta W_j = \Delta W_j + \delta^oa_j$</li><li>$\Delta w<em>{ij} = \Delta w</em>{ij} + \delta^h_ja_i$</li></ul></li></ul></li><li>更新权重（η 为学习率，m 为输入节点的个数):<ul><li>$W_j = W_j + \eta \Delta W_j /m$</li><li>$w<em>{ij} = w</em>{ij} + \eta \Delta w_{ij} /m$</li></ul></li><li>重复 e 次训练步骤 (epochs)</li></ul><p>在 python 中实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> data_prep <span class="keyword">import</span> features, targets, features_test, targets_test</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Calculate sigmoid</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hyperparameters</span></span><br><span class="line">n_hidden = <span class="number">2</span>  <span class="comment"># number of hidden units</span></span><br><span class="line">epochs = <span class="number">900</span></span><br><span class="line">learnrate = <span class="number">0.005</span></span><br><span class="line"></span><br><span class="line">n_records, n_features = features.shape</span><br><span class="line">last_loss = <span class="keyword">None</span></span><br><span class="line"><span class="comment"># Initialize weights</span></span><br><span class="line">weights_input_hidden = np.random.normal(scale=<span class="number">1</span> / n_features ** <span class="number">.5</span>,</span><br><span class="line">                                        size=(n_features, n_hidden))</span><br><span class="line">weights_hidden_output = np.random.normal(scale=<span class="number">1</span> / n_features ** <span class="number">.5</span>,</span><br><span class="line">                                         size=n_hidden)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> range(epochs):</span><br><span class="line">    del_w_input_hidden = np.zeros(weights_input_hidden.shape)</span><br><span class="line">    del_w_hidden_output = np.zeros(weights_hidden_output.shape)</span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(features.values, targets):</span><br><span class="line"></span><br><span class="line">      <span class="comment">## Forward pass ##</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Calculate the output</span></span><br><span class="line">        hidden_input = np.dot(x, weights_input_hidden) <span class="comment"># x·w</span></span><br><span class="line">        hidden_output = sigmoid(hidden_input)</span><br><span class="line">        output = sigmoid(np.dot(hidden_output, weights_hidden_output))</span><br><span class="line"></span><br><span class="line">      <span class="comment">## Backward pass ##</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Calculate the network's prediction error</span></span><br><span class="line">        error = y - output</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Calculate error term for the output unit</span></span><br><span class="line">        output_error_term = error * output * (<span class="number">1</span> - output)</span><br><span class="line"></span><br><span class="line">        <span class="comment">## propagate errors to hidden layer</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Calculate the hidden layer's contribution to the error</span></span><br><span class="line">        hidden_error = np.dot(output_error_term, weights_hidden_output)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Calculate the error term for the hidden layer</span></span><br><span class="line">        hidden_error_term = hidden_error * hidden_output * (<span class="number">1</span> - hidden_output)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Update the change in weights</span></span><br><span class="line">        del_w_hidden_output += output_error_term * hidden_output</span><br><span class="line">        del_w_input_hidden += hidden_error_term * x[:,<span class="keyword">None</span>] <span class="comment"># x.T</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Update weights</span></span><br><span class="line">    weights_input_hidden += learnrate * del_w_input_hidden / n_records</span><br><span class="line">    weights_hidden_output += learnrate * del_w_hidden_output / n_records</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Printing out the mean square error on the training set</span></span><br><span class="line">    <span class="keyword">if</span> e % (epochs / <span class="number">10</span>) == <span class="number">0</span>:</span><br><span class="line">        hidden_output = sigmoid(np.dot(x, weights_input_hidden))</span><br><span class="line">        out = sigmoid(np.dot(hidden_output,</span><br><span class="line">                             weights_hidden_output))</span><br><span class="line">        loss = np.mean((out - targets) ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> last_loss <span class="keyword">and</span> last_loss &lt; loss:</span><br><span class="line">            print(<span class="string">"Train loss: "</span>, loss, <span class="string">"  WARNING - Loss Increasing"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"Train loss: "</span>, loss)</span><br><span class="line">        last_loss = loss</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate accuracy on test data</span></span><br><span class="line">hidden = sigmoid(np.dot(features_test, weights_input_hidden))</span><br><span class="line">out = sigmoid(np.dot(hidden, weights_hidden_output))</span><br><span class="line">predictions = out &gt; <span class="number">0.5</span></span><br><span class="line">accuracy = np.mean(predictions == targets_test)</span><br><span class="line">print(<span class="string">"Prediction accuracy: &#123;:.3f&#125;"</span>.format(accuracy))</span><br></pre></td></tr></table></figure><p>你可能会感兴趣：</p><ul><li><a href="http://www.uegeek.com/180125-DeepLearning9-backpropagation.html" target="_blank" rel="noopener">DeepLearning笔记：Backpropagation 反向传播算法</a></li><li><a href="http://www.uegeek.com/180104DeepLearning8-MultiLayer-Perceptrons.html" target="_blank" rel="noopener">DeepLearning笔记：多节点神经网络</a></li><li><a href="http://www.uegeek.com/171226DLN7-GradientDescentinPython.html" target="_blank" rel="noopener">DL笔记：用 python 实现梯度下降的算法</a></li><li><a href="http://www.uegeek.com/171222DLN6-GradientDescent.html" target="_blank" rel="noopener">DL笔记：梯度下降 Gradient Descent</a></li><li><a href="http://www.uegeek.com/171220DLN5-CostFunction.html" target="_blank" rel="noopener">DL笔记：Cost function 损失函数</a></li><li><a href="http://www.uegeek.com/171218DLN4-ActivationFunction.html" target="_blank" rel="noopener">DL笔记：Activation Function 激活函数</a></li><li><a href="http://www.uegeek.com/171213DLN3-LinearRegression.html" target="_blank" rel="noopener">DL笔记：Linear regression 线性回归</a></li><li><a href="http://www.uegeek.com/171209DLN2-NeuralNetworks.html" target="_blank" rel="noopener">DL笔记：Neural Networks 神经网络</a></li><li><a href="http://www.uegeek.com/171206DLNote1-ML-DL-Basic.html" target="_blank" rel="noopener">DL笔记：机器学习和深度学习的区别</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/Art_Code_Bro.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="Python" scheme="http://uegeek.com/tags/Python/"/>
    
      <category term="深度学习" scheme="http://uegeek.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="AI" scheme="http://uegeek.com/tags/AI/"/>
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="DeepLearning" scheme="http://uegeek.com/tags/DeepLearning/"/>
    
      <category term="Coding" scheme="http://uegeek.com/tags/Coding/"/>
    
      <category term="编程" scheme="http://uegeek.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="神经网络" scheme="http://uegeek.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="Backpro" scheme="http://uegeek.com/tags/Backpro/"/>
    
      <category term="反向传播" scheme="http://uegeek.com/tags/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/"/>
    
      <category term="Programming" scheme="http://uegeek.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>DeepLearning笔记：Backpropagation 反向传播算法</title>
    <link href="http://uegeek.com/180125-DeepLearning9-backpropagation.html"/>
    <id>http://uegeek.com/180125-DeepLearning9-backpropagation.html</id>
    <published>2018-01-25T08:00:02.000Z</published>
    <updated>2018-01-25T08:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xjpra.com1.z0.glb.clouddn.com/Art_Code_Bro.png" alt=""></p><a id="more"></a> <p><code>阿扣</code>：今天我们来学习反向传播算法。</p><p><code>阿特</code>：为什么你一脸严肃哦？</p><p><code>阿扣</code>：咳咳，有吗……可能因为当初被 Backpropagation 这个词吓得不轻吧…… 反向传播算法是深度学习的核心之一，不过也没有很难，放轻松~</p><p><code>阿特</code>：你是说你还是说我 😄</p><p><code>阿扣</code>：来，我们先回忆一下，对多层神经网络，我们用梯度下降法去训练。之前已经学过如何计算输出节点的误差项 $\delta =(y-\hat y)f’(h)$，借助梯度下降算法，用误差项训练<strong>隐层到输出层的权重</strong>。</p><p><code>阿特</code>：隐层到输出层。我记得最简单的神经网络应该有 3 层——是不是还有输入层到隐层？</p><p><code>阿扣</code>：没错。</p><p><code>阿特</code>：那该怎么求隐层节点对应的误差项呢？</p><p><code>阿扣</code>：在神经网络里，输出节点的误差项，跟隐层的权重是成比例的。</p><p><code>阿特</code>：意思是误差项越大，隐层节点的权重也越大？</p><p><code>阿扣</code>：可以这么理解。既然我们知道输出的误差项，就可以用它来「反向传播」，求出隐层的误差项，再用于求输入节点的权重。</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/vlcsnap-2017-12-19-15h02m16s033.png" alt=""></p><p><code>阿特</code>：咦，那不是反过来了？先知道输出结果，再反推输入权重？</p><p><code>阿扣</code>：对的，所以叫做「反向」呀。</p><p>比如，输出层 k 个节点对应的误差项是 $\delta^o_k$ 。隐层有 j 个节点，那么隐层节点到输出节点的 j 个误差项是：</p><p>$\delta^h<em>j=\sum W</em>{jk} \delta^o_k f’(h_j)$</p><p><code>阿特</code>：等等！先让我复习一下误差项是什么……</p><p><code>阿扣</code>：嗯！误差项 δ 表示 <code>误差 * 激活函数的导数</code>，$\delta_j=(y-\hat y)f’(h_j)$。对比一下 $\delta^h<em>j=\sum W</em>{jk} \delta^o_k f’(h_j)$，看看有什么不同？</p><p><code>阿特</code>：隐层到输出层的误差 (y-y^) 变成了 $\sum W_{jk} \delta^o_k$</p><p><code>阿扣</code>：很棒！你发现了吧，$\delta_k$ 成为了 wx + b 中的变量 x：</p><p><img src="http://7xjpra.com1.z0.glb.clouddn.com/vlcsnap-2017-12-19-15h06m32s756.png" alt=""></p><p><code>阿特</code>：啊，又要来算这个了……</p><p><code>阿扣</code>：没关系，虽然看上去麻烦一些，但是跟正向传播的做法很类似，权重的更新为 $\Delta w_{ij}=\eta \delta^h_jx_i$ 。</p><p><code>阿特</code>：每次都要来一遍，要死不少脑细胞啊……</p><p><code>阿扣</code>：那我给你列个清单吧，每次照着做就好。</p><p>假设我们考虑最简单的神经网络：只有一个隐层节点，只有一个输出节点。用反向传播算法更新权重的算法如下：</p><ul><li>给每一层的权重赋值为 0<ul><li>输入层→隐层的权重 $\Delta w_{ij}=0$</li><li>隐层→输出层的权重 $\Delta W_j=0$<br>​</li></ul></li><li>对训练集里的每一个数据：<ul><li>使用 forward pass，计算输出节点的值 $\hat y$</li><li>计算输出节点的误差梯度 $\delta^o=(y-\hat y)f’(z)$，  这里的 $z=\sum_jW_ja_j$</li><li>将误差反向传递到隐层 $\delta^h_j=\delta^oW_jf’(h_j)$</li><li>更新权重步长<ul><li>$\Delta W_j = \Delta W_j + \delta^oa_j$</li><li>$\Delta w<em>{ij} = \Delta w</em>{ij} + \delta^h_ja_i$</li></ul></li></ul></li><li>更新权重（η 为学习率，m 为输入节点的个数):<ul><li>$W_j = W_j + \eta \Delta W_j /m$</li><li>$w<em>{ij} = w</em>{ij} + \eta \Delta w_{ij} /m$</li></ul></li><li>重复 e 次训练步骤 (epochs)</li></ul><p><code>阿特</code>：天！看上去好复杂。</p><p><code>阿扣</code>：练习两次就能熟悉起来了，别担心。下一次我带你用 Python 实现反向传播算法。</p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="https://www.udacity.com/course/deep-learning-nanodegree-foundation--nd101" target="_blank" rel="noopener">Deep Learning Nanodegree | Udacity</a></li><li><a href="https://medium.com/@karpathy/yes-you-should-understand-backprop-e2f06eab496b" target="_blank" rel="noopener">Yes you should understand backprop – Medium</a></li><li><a href="https://www.youtube.com/watch?v=59Hbtz7XgjM" target="_blank" rel="noopener">CS231n Winter 2016 Lecture 4 Backpropagation, Neural Networks 1-Q_UWHTY_TEQ.mp4 - YouTube</a></li></ul><h3 id="00-的-DeepLearning-笔记"><a href="#00-的-DeepLearning-笔记" class="headerlink" title="00 的 DeepLearning 笔记"></a>00 的 DeepLearning 笔记</h3><ul><li><a href="http://www.uegeek.com/171206DLNote1-ML-DL-Basic.html" target="_blank" rel="noopener">DeepLearning笔记：机器学习和深度学习的区别</a></li><li><a href="http://www.uegeek.com/171209DLN2-NeuralNetworks.html" target="_blank" rel="noopener">DeepLearning笔记：Neural Networks 神经网络</a></li><li><a href="http://www.uegeek.com/171213DLN3-LinearRegression.html" target="_blank" rel="noopener">DeepLearning笔记：Linear regression 线性回归</a></li><li><a href="http://www.uegeek.com/171218DLN4-ActivationFunction.html" target="_blank" rel="noopener">DeepLearning笔记：Activation Function 激活函数</a></li><li><a href="http://www.uegeek.com/171220DLN5-CostFunction.html" target="_blank" rel="noopener">DeepLearning笔记：Cost function 损失函数</a></li><li><a href="http://www.uegeek.com/171222DLN6-GradientDescent.html" target="_blank" rel="noopener">DeepLearning笔记：梯度下降 Gradient Descent</a></li><li><a href="http://www.uegeek.com/171226DLN7-GradientDescentinPython.html" target="_blank" rel="noopener">DeepLearning笔记：用 python 实现梯度下降的算法</a></li><li><a href="http://www.uegeek.com/180104DeepLearning8-MultiLayer-Perceptrons.html" target="_blank" rel="noopener">DeepLearning笔记：多节点神经网络</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xjpra.com1.z0.glb.clouddn.com/Art_Code_Bro.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="动手" scheme="http://uegeek.com/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="深度学习" scheme="http://uegeek.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="AI" scheme="http://uegeek.com/tags/AI/"/>
    
      <category term="ArtxCode" scheme="http://uegeek.com/tags/ArtxCode/"/>
    
      <category term="DeepLearning" scheme="http://uegeek.com/tags/DeepLearning/"/>
    
      <category term="Coding" scheme="http://uegeek.com/tags/Coding/"/>
    
      <category term="神经网络" scheme="http://uegeek.com/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="Backpro" scheme="http://uegeek.com/tags/Backpro/"/>
    
      <category term="反向传播" scheme="http://uegeek.com/tags/%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/"/>
    
  </entry>
  
</feed>
