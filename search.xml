<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[生成式艺术和算法创作08-马尔可夫模型]]></title>
    <url>%2F181130-generative-art-creativity-08.html</url>
    <content type="text"><![CDATA[生成式艺术和算法创作01-概述 生成式艺术和算法创作02-随机和噪声 生成式艺术和算法创作03-混沌和分形 生成式艺术和算法创作04-规则系统 生成式艺术和算法创作05-Tessellation 生成式艺术和算法创作06-形状语法 生成式艺术和算法创作07-向自然致敬的 L-system 马尔可夫模型 Markov Model开始的开始，有必要来认识一下主人公，俄国数学家安德雷·安德耶维齐·马尔可夫。 1874 年，18 岁的马尔可夫考入圣彼得堡大学，师从切比雪夫（著名的切比雪夫定理提出者）。他是物理-数学博士，圣彼得堡大学教授，圣彼得堡科学院院士。在概率论、数论、函数逼近论和微分方程等方面卓有成就。 总的来说，马尔可夫模型是一种统计模型，可以用于计算条件概率分布，为一系列的离散事件建模。这就应用很广泛了，哪些是「离散事件」呢？句子中的词汇，音乐中的音符，通过交通灯的车辆数，女票每个月购物的次数…… 以「马尔可夫」开头的术语有很多，先来熟悉一下最重要的几个： 马尔可夫性质：当一个随机过程在给定现在状态及所有过去状态情况下，其未来状态的条件概率分布仅依赖于当前状态。 马尔可夫过程：是一个具备了马可夫性质的随机过程，不具备记忆特质（memorylessness）。换言之，马可夫过程的条件概率仅仅与系统的当前状态相关，而与过去历史或未来状态，都是独立、不相关的。 马尔可夫链：具备离散状态的马可夫过程，通常使用离散的时间集合定义。 马尔可夫模型：用马尔科夫过程生成序列的算法模型 它们之间的关系大概可以这样划分： 系统状态是完全可观察的 系统状态是部分可观察的 系统是自治的 马尔可夫链 隐马尔可夫模型 系统受到控制 马尔可夫决策过程 部分可观察的马尔可夫决策过程 在马尔可夫模型中 $X_t$ 是时间 t 时表示音符的随机变量 $P(X_t)$ 是随机事件 $X_t$ 的概率分布 马尔可夫模型可以基于「上文」做出判断和预测，未来状态只取决于当前状态或者限定范围的过去状态。 实现马尔可夫模型的学习算法有几个步骤： 构建一个 transition count table (state transition matrix)，计算每一种可能的上下文的频率分布 用每一种组合的 count 除以所有的组合总数，即下表中每一行加起来为 1 随机选择一个起始值，根据概率表格选择下一个序列值 马尔可夫模型生成算法其实也是一种 random walk ，根据转换概率分布，基于目前已经生成的序列，随机选择下一个序列值。 以一段乐曲为例，它由音符 B2,C4#,D4,E4,F4#,G4,G4#,A4,B4,C5#,D5,E5 组成。计算每一个音符后面紧跟着的音符的出现概率。例如，最后一个音符 E5，出现在它后面的音符只有 A4 和 C5#，出现概率分别是 6/16 和 10/16。当生成新的序列时，如果当前音符是 E5，那么根据表格，下一个音符只可能是 A4 或 C5#。 再来看一个三节点的马尔可夫链： 这首马尔可夫旋律以 state_0 开始，播放一个八分音符 Eb。然后选择一个新的状态。选择 state_0，state_1 或 state_2 的概率相等，都是 1/3。假设选择了 state_2，则播放下加二间的十六分音符 G。从 state_2 开始，state_0 被选择的概率是 1/10，state_1 是 2/10，state_2 是 7/10。 因为马尔可夫模型状态是离散的，可以用有限状态的自动机 (automata) 来表示。 变量马尔可夫模型在随机过程中，变量马尔可夫（Variable order Markov Models/VOM/VMM/VOMM）模型是一类重要的模型，它扩展了马尔可夫模型。 马尔可夫模型中，具有马尔可夫性质的序列中的每个随机变量，取决于固定数量的随机变量；在 VOM 模型中，该数量的调节随机变量可以基于观察到的特定实现而变化。 这个实现序列通常被称为上下文 ; 因此 VOM 模型也称为上下文树。调节随机变量数量的灵活性对于许多应用来说是非常有利的，例如统计分析、分类和预测。 变量马尔可夫模型一般由三部分组成： Counting：建立转换表，这是预测的来源 Smoothing：处理未见过的事件/序列 Variable length modeling: A transition matrix Probabilistic suffix tree Factor Oracle, and Context Tree Weighting method (CTW) Lempel-Ziv 78 and its improvement LZ-MS Prediction by partial match 它的缺点之一是难以产生语料之外的内容。 隐马尔科夫模型 Hidden Markov Model隐马尔可夫模型（Hidden Markov Model，HMM）是统计模型，它用来描述一个含有隐含未知参数的马尔可夫过程。其难点是从可观察的参数中确定该过程的隐含参数，然后利用这些参数来作进一步的分析，例如模式识别。 在一般的马尔可夫模型中，状态对于观察者来说是直接可见的。这样状态的转换概率便是全部的参数。 而在隐马尔可夫模型中，状态并不是直接可见的，但受状态影响的某些变量是可见的。每一个状态在可能输出的符号上，都有一定的概率分布。因此输出符号的序列能够透露出状态序列的一些信息。 也就是说，HMM 系统的实际状态是隐藏的，只能观察到 emission probilities。 HMM 常用来学习两个耦合的内容语料。例如，在语音识别中，可见的信息是音频信号，隐藏的信息是语音词汇。又例如，旋律是可见信息，伴奏/ 和声 是隐藏的信息。 最常见的三种 Hidden Markov Model 算法： the forward algorithm: 计算特定序列的概率，假设已知 transitions and observation 概率和初始状态 the Baum-Welch algorithm：找出被观测序列中最常见的参数 the Viterbi algorithm：维特比算法，基于观测序列计算隐藏状态最可能的序列（viterbi path） 隐马尔科夫模型的优势： 是学习和生成离散序列最有效和使用广泛的算法 可以对横轴和纵轴的相关性都建模，HMM 是随机耦合过程 比马尔可夫模型更好保留原始的数据结构 劣势： 需要有很好的领域知识来调整模型结构和参数 需要相对大的训练数据集 马尔可夫模型在音乐中的应用Lejaren Hiller 在 1957 年完成了算法生成的弦乐四重奏「依利亚克组曲」（Illiac Suite），这也是历史上第一支完全由计算机生成的音乐作品。首先使用马尔可夫链模型来产生有限控制的随机音符，之后利用和声与复调的规则测试这些音符，最后选择符合规则的材料，修改、组合成传统音乐记谱的弦乐四重奏。 Lejaren Hiller - Illiac Suite for String Quartet [4/4] - YouTube 该作品分为四个乐章： 第一乐章：计算机生成的不同长度的固定主题旋律 第二乐章：使用变奏的规则生成的四声部音乐 第三乐章：通过计算机对节奏、动态和演奏法的不同处理生成的音乐 第四乐章：通过衍生算法和马尔可夫链的不同模型及概率生成的音乐（pitch, intervals and textures） Iannis Xenakis在他 1958 年的专辑 Analogique 中就使用了马尔可夫链来作曲。 在他的著作 Formalized Music: Thought and Mathematics in Composition 里详细描述了使用马尔可夫模型的算法。 用马尔可夫模型生成音乐的优势，包括符合直觉、容易理解，以及计算量小。但也存在一些问题。例如，输出相当随机、缺乏整体结构；抽象层级有限，容易重复语料库中的片段；限于一维符号序列；限于风格模仿等等。 Ref Markov model - Wikiwand 马尔可夫性质 - Wikiwand 马可夫过程 - Wikiwand 隐马尔可夫模型 - Wikiwand Variable-order Markov model - Wikiwand Markov Chains explained visually Three Node Markov Chain 算法作曲历险记01-简史 | 00’s Adventure Iannis Xenakis - Wikiwand Harmonic Progression Realtime Generation of Harmonic Progressions Using Controlled Markov Selection | PDF]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>艺术</tag>
        <tag>Creative Coding</tag>
        <tag>Generative Art</tag>
        <tag>Computational Creativity</tag>
        <tag>创意</tag>
        <tag>创造力</tag>
        <tag>Markov</tag>
        <tag>马尔可夫</tag>
        <tag>马尔可夫模型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法创作实战03 - 用 MaxMSP 实现 L-system]]></title>
    <url>%2F181128-computational-creativity-in-maxmsp-03.html</url>
    <content type="text"><![CDATA[算法创作实战01 - 巴纳姆效应之随机星座实验 算法创作实战02 - 用 MaxMSP 生成随机颜色 好久不见~ 前面两篇算法创作的实战，都是相对容易的小程序。今天我们一起来挑战用 Max/MSP (更准确说，是用 jitter) 来「种」植物。 名称：L-system 主要使用的对象：jit.linden, jit.turtle, jit.matrix, jit.str.fromsymbol, jit.iter, jit.lcd, jit.pwindow 难度系数：★★★★☆ 什么是 L-system?在生成式艺术和算法创作07-向自然致敬的 L-system 中，已经对 L-system 做了详细的介绍。L-system 是 Aristid Lindenmayer 提出的有关生长发展中的细胞交互作用的数学模型，被广泛应用于植物生长过程的研究和建模，也常用于模拟各种生物体的形态。 L-system 是一系列不同形式的语法规则，它的自然递归规则产生自相似性，也能用于生成自相似的分形，例如迭代函数系统。它一般可以这样定义： 123456789G ＝｛V,S,ω,P&#125;,V: 变量符号集合S: 常量符号集合ω: 初始状态串(i.e. seed or axiom)P: 生成式规则(production) 接下来，我们动手来实现它。 开始的正确姿势 如何在 Max/MSP 实现 L-system？ 最开始面对这个问题，会觉得茫然无措：该从哪里开始？ 回答与软件相关的工程问题，最好答案永远是——搜索。 而搜索的第一站，不是 Google，应该是官方文档。在经历了长时间漫无头绪的搜索，各种成功不成功的尝试后，00 再次获得了一个多么痛的领悟——永远先搜索软件文档。搜索结果已经清楚明白地列出跟 L-system 有关的对象了！ 然后我们来仔细读一下文档里面的说明吧。 jit.linden打开 jit.linden 的帮助文档，例子如下： 一阵头晕目眩后冷静下来，试着运行程序。然而并不知道它在做什么…… 只好静下心来一点一点看。 首先是找出核心对象。核心对象 jit.linden 前面连接的是一个矩阵，接收了 tolinden 的消息（unlock patch 后才看到 s tolinden 的内容）；后面连接的是同一个矩阵。将矩阵可视化出来时需要变成 1 维 1 平面的矩阵。但是这个可视化方式非常不直观，需要另外寻找方法。（所以搜索结果列出了 jit.turtle 是不是……） 例子右边是规则相关的部分。在生成式艺术和算法创作07-向自然致敬的 L-system 中我们已经知道，生成式规则(production) 是决定 L-system 生成结果的关键。那么，这里 production 后面的一串 * F * +[F+]* G * -[GF-]F - F -- 是什么意思呢？下面给出的注释是： list of symbols in the format：left_context strict_predecessor right_context successor if a symbol matching the strict_predecessors is found in the matrix it is replaced with the sucessor string if the left and right context is met. the wildcard character (‘*’ by default) means no left or right context. 还是一知半解的感觉，这时候需要打开顶部 p moreinfo 子 patch。里面解释了 production 规则是如何设定的。 L-systems work on an interpreted grammar model wherein a syntax is defined for replacing individual elements of the incoming string with a replacement string. L-systems get larger through successive productions. the size of the Jitter matrix used by the object determines the maximum length of the string, so a large matrix is advisable, even if the axiom (starting string) is very small. 大意是，随着迭代，矩阵会变得越来越大，建议设定一个较大尺寸的矩阵。 ‘production F +F[F]’ tells jit.linden to take every ‘F’ found in the input matrix and replace it with the string ‘+F[F]’. So the first four generations of an L-system with an axiom of ‘F’ would look like this: 1234F+F[F]++F[F][+F[F]]+++F[F][+F[F]][++F[F][+F[F]]] production 接着的第一个 F 是初始值，或者叫做 axiom（公理），第二个 是 axiom 替代自己的规则。 More complex models can be created by adding multiple productions, or by introducing context matching into the L-system grammar. 例如：production G F * +F 意思是只有在 F 前面是一个 G 的时候，才将 F 替换为 +F 。 又如：production G F * +F * G * G- 包含两个规则，一个是上面提到的 GF 替换 为 G+F; 另一个是 G 替换为 G-。 jit.linden 最多可以定义 50 个规则。 the jit.turtle object interprets L-systems as turtle graphics, so that characters such as ‘F’, ‘+’, and ‘-‘ acquire special meaning. you could easily use jit.iter to access the Lindenmayer string in Max. 这一段也剧透了很多重要信息，包括用 jit.iter 获取字符串和用 jit.turtle 显示 L-system 生成的图形。 jit.turtle 然后再来看看 jit.turtle 怎么画图。 jit.turtle 前面是设定各种参数，例如步进值、旋转角度、起始点等，然后接收 jtr 传来的 production 规则，尤其要理解 F、+、- 的含义。jit.turtle 后面接的是一个 jit.lcd ，将规则显示出来。 生成 L-system下面开始动手尝试了。好消息是，不必从零开始，从 jit.linden 帮助里面 copy 主要的部分，就可以快速建立起程序的框架。 首先是用规则生成矩阵的部分。又可以分为矩阵、公理和规则三部分： 矩阵部分：jit.linden 前面是一个初始化矩阵，r generate 接收每一步的生成指令；jit.linden 后面是一步生成后存储的矩阵，在下面用 jit.cellblock 和 jit.pwindow 显示存储的值和存储占用情况 公理：用 jit.str.fromsymbol 接收 axiom 字母并转换成 ASCII 编码，同时指定矩阵的大小，如 1000 规则：将包含 axiom、production、turtle 参数的规则写入一个 message 中，然后用 r linden 接收并传入 jit.linden 接下来将矩阵中存储的规则用 jit.turtle 画出来。 这里的关键是用 jit.iter 将矩阵中每个值依次传到 jit.turtle ，并且接收 r turtle 中关于角度、大小等设置值，然后传给 jit.lcd 绘制： Let’s Play!接下来终于进入寻找有趣 production 的游戏环节了~ 可以自己试验，也可以从网上搜刮一些已经写好的规则。一个完整的规则可以写到一个 message 里面，打包传给 jit.linden: 下面进入愉快的玩耍时间~ 种草： 1* A * F * F * F-[[A]+A]+F[+FA] 种（歪的）树： 1* X * C0F-[C2[X]+C3X]+C1F[C3+FX]-X * F * FF 种粮食： 1* A * G * G * GFX[+G][-G] * X * X[-FFF][+FFF]FX 大城市的“地铁图”： 1* F * +F[--F+F] Ref 生成式艺术和算法创作07-向自然致敬的 L-system L-system - Wikiwand Koch snowflake - Wikiwand L-System manual Turtle graphics - Wikiwand L-Systems Renderer L-Systems Turtle Graphics Renderer - HTML5 Canvas - by Kevin Roast Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 Max/MSP/Jitter 教程 09 - 调整图像颜色 Max/MSP/Jitter 教程 10 - 简单混合 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>艺术</tag>
        <tag>Creative Coding</tag>
        <tag>Generative Art</tag>
        <tag>Computational Creativity</tag>
        <tag>创意</tag>
        <tag>创造力</tag>
        <tag>MaxMSP</tag>
        <tag>分形</tag>
        <tag>L-system</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生成式艺术和算法创作07-向自然致敬的 L-system]]></title>
    <url>%2F181123-generative-art-creativity-07.html</url>
    <content type="text"><![CDATA[生成式艺术和算法创作01-概述 生成式艺术和算法创作02-随机和噪声 生成式艺术和算法创作03-混沌和分形 生成式艺术和算法创作04-规则系统 生成式艺术和算法创作05-Tessellation 生成式艺术和算法创作06-形状语法 Lindenmayer system，简称 L-system，是由荷兰乌特勒支大学的生物学和植物学家，匈牙利裔的 Aristid Lindenmayer 于 1968 年提出的有关生长发展中的细胞交互作用的数学模型，被广泛应用于植物生长过程的研究和建模，也常用于模拟各种生物体的形态。 使用 L-system 生成的 3D 杂草 L-system 语法L-system 是一系列不同形式的语法规则，它的自然递归规则产生自相似性，也能用于生成自相似的分形，例如迭代函数系统，因此也是一种形态发生（morphogenesis）算法。 L-system 一般可以这样定义： 123456789G ＝｛V,S,ω,P&#125;,V: 变量符号集合S: 常量符号集合ω: 初始状态串(i.e. seed or axiom)P: 生成式规则(production) 例如，Lindenmayer 研究海藻生长模式时提出的最早的 L-system： 变量 : A B 常量 : 无 公理 (axiom) : A 规则 : (A → AB), (B → A) 迭代过程： 1234567891011121314151617181920n = 0 : An = 1 : ABn = 2 : ABAn = 3 : ABAABn = 4 : ABAABABAn = 5 : ABAABABAABAABn = 6 : ABAABABAABAABABAABABAn = 7 : ABAABABAABAABABAABABAABAABABAABAAB用树状分枝表示迭代过程会更容易理解：n=0: A 开始 (公理/起始点) / \n=1: A B 根据规则(A → AB)起始点A拓展成AB，由于起始点没有B，规则(B → A)没有被用到 /| \n=2: A B A AB中的A拓展成AB，B变成A，于是得到了ABA /| | |\n=3: A B A A B 可以看到每个A都是一个新的子树的根，由此引发出和整体结构同构的子结构。 /| | |\ |\ \n=4: A B A A B A B A 下面我们来看看著名的 Koch snowflake（科赫曲线）是如何用 L-system 生成迭代过程的： L-system 规则是：F→F+F–F+F。想象一下有一只乌龟🐢，当它接收到指令 F 时向前走，接收到指令 + 号就左转 60°，- 号右转 60°： F→F+F–F+F 的意思就是：把每一个线段 F，用 F&#39; 右转 F&#39; 左转再左转 F&#39; 右转 F&#39; 替代……晕了吧？00 为你准备了分解动作示意图： 使用 L-system 生成图形图像时，模型中的符号要能引用计算机屏幕上的图形元素。例如，Fractint 程序使用 Turtle graphics（类似于 Logo 编程语言中的图形）来生成屏幕图像。它将 L-system 模型中的每个常量解释为海龟命令。 在 L-system 的语法中，常用的符号及其含义： 123456789101112131415161718Character Meaning F Move forward by line length drawing a line f Move forward by line length without drawing a line + Turn left by turning angle - Turn right by turning angle | Reverse direction (ie: turn by 180 degrees) [ Push current drawing state onto stack ] Pop current drawing state from the stack # Increment the line width by line width increment ! Decrement the line width by line width increment @ Draw a dot with line width radius &#123; Open a polygon &#125; Close a polygon and fill it with fill colour &gt; Multiply the line length by the line length scale factor &lt; Divide the line length by the line length scale factor &amp; Swap the meaning of + and - ( Decrement turning angle by turning angle increment ) Increment turning angle by turning angle increment L-system 在生成式艺术中的应用L-system 常被艺术家用于生成植物形态或者模拟植物的生长过程。 例如，下面的规则可以生成一株 Fractal plant： 12345变量 : X F常量 : + − [ ]起始状态 : X规则 : (X → F+[[X]-X]-F[-FX]+X), (F → FF)角度 : 25° 如果 L-system 语法中每个规则仅涉及单个符号而不涉及邻近符号，则属于 context-free。如果规则不仅取决于单个符号而且还取决于邻近符号，则属于 context-sensitive L-system。这样，不同的规则可以在不同的上下文中运用。 如果每个符号对应多个 production，并且在每次迭代时以一定概率随机选择，则它是随机 L-system（Stochastic L-systems）。 L-system weed: 12345axiom = FF -&gt; FF-[XY]+[XY]X -&gt; +FYY -&gt; -FXangle = 22.5 L-system 已经是很成熟的算法，组合不同的规则、尺寸、角度和迭代次数，可以生成变化多样、富有美感的生成式图形。 Christa Sommerer 和 Laurent Mignonneau 研究互动式植物生成过程，采集人在环境中的移动等数据作为参数，加入到生成式算法中。 Interactive Plant Growing - YouTube Jon McCormack 是莫纳什大学的一名艺术家兼计算机科学教授，他的工作包含了算法创作。 他创作的 Fifty Sisters (2012)系列的特色是「未来的植物」，这些植物用代码通过算法生成。在另一部名为 Eden 的作品中，他创作了一个以虚拟生物为主题的装置作品。 Bloom 是昆士兰州 QUT 创意产业区委托他制作的一幅 43米 x 9.7米 的数字图像。 「我认为自己是艺术家」，McCormack 在谈到他的作品时说。 电脑仍然非常原始——它没有人类的创造力，但它有能力做一些我们无法做到的事情。人工智能目前只能给艺术实践带来有限的视角，它们只能利用所学到的知识，而人类的现实情况则是非常广阔的，并且能够给艺术带来了更深刻的视角。 McCormack 指出，人工智能本身就可以创造出看起来像艺术的东西，但是能否把它看作艺术是一个更难的问题。「我们对艺术的看法，很大程度上是人类之间的交流。一旦把一台电脑带进这个情境，你就会突然发现一个非人类的实体正在努力实现这个角色，而这个角色过去是由人类主导的。」 我们不仅把机器当成一个工具，更是一个合作伙伴或合作者，它拥有自己创造的能力。McCormack 说： 我们一直认为列侬和麦卡特尼是伟大的音乐创作伙伴。我们最终是否会看到一个转折点，这个转折点让我们承认，人类和计算机的伙伴关系不仅仅是其各部分的总和。 L-system 在建筑设计中的应用建筑一直都离不开技术的影响。如今电脑技术已经为建筑界带来了许多改变，但它依然潜力无限，甚至可能彻底动摇建筑界的基础规则。 Michael Hansmeyer 是一位建筑师和程序员，他探索使用算法和计算来生成建筑形式。受到了细胞分裂的启发，Michael Hansmeyer 写下了拥有惊人艳丽的造型和无数刻面的设计运算法则。没人能将他们手绘出来，但它们确实可以被做出来——它们也可以向常规的建筑形态掀起思想狂潮。 下面是 Michael Hansmeyer 在 TED 2012 年会上的演讲 Building unimaginable shapes： Michael Hansmeyer：塑造不可思议 L-systems 在音乐中的应用使用 L-system 辅助生成音乐片段的研究由来已久。 Przemyslaw Prusinkiewicz 在 1986 年的论文 Score generation with L-system 中探讨了用算法生成乐谱的方法：用 L-system 生成字符符号，再讲符号解析成一系列的音符 The score associated with the Hilbert curv in the common musical notation 随着技术的演进，生成式音乐、算法作曲越来越成熟，架构也越来越复杂，L-system 依然被用作规则和语法生成的方式： via: Improving L-System Music Rendering Using a Hybrid of Stochastic and Context-Sensitive Grammars in a Visual Language Framework. Ref L-system - Wikiwand Koch snowflake - Wikiwand L-System manual Turtle graphics - Wikiwand L-Systems Renderer L-Systems Turtle Graphics Renderer - HTML5 Canvas - by Kevin Roast Jon McCormack Michael Hansmeyer - L-Systems Michael Hansmeyer - Computational Architecture Score generation with L-systems Improving L-System Music Rendering Using a Hybrid of Stochastic and Context-Sensitive Grammars in a Visual Language Framework - Semantic Scholar theatre of noise: L-System Garden: Max implementation of Lindenmeyer Creating Cubic Spline with Mospline L-System The Beauty of Fractals - L-system in Houdini - motionesque - Andrea Kühne | motionesquemotionesque]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>艺术</tag>
        <tag>Creative Coding</tag>
        <tag>Generative Art</tag>
        <tag>Computational Creativity</tag>
        <tag>创意</tag>
        <tag>创造力</tag>
        <tag>分形</tag>
        <tag>L-system</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生成式艺术和算法创作06-形状语法]]></title>
    <url>%2F181120-generative-art-creativity-06.html</url>
    <content type="text"><![CDATA[生成式艺术和算法创作01-概述 生成式艺术和算法创作02-随机和噪声 生成式艺术和算法创作03-混沌和分形 生成式艺术和算法创作04-规则系统 生成式艺术和算法创作05-Tessellation 形状语法/形状文法（Shape grammars）是生成特定类别几何形状的生产系统。 1971年，George Stiny 和 James Gips 在一篇开创性的文章中定义了形状语法的基础。形状语法是一种计算机辅助设计方法，是研究二维和三维语言的一种方式，它可以按照人们的设计思想和要求，按照一定的规则自动产生新形态。 具体来说，形状语法由形状规则（shape rules）和选择、处理规则的生成引擎（generation engine）组成。形状语法执行计算的两个主要步骤是：识别特定形状，用可能的形状替代。 形状规则定义如何转换现有形状，由两个部分组成，两个部分由从左到右指向的箭头分隔： 箭头左侧的部分称为左侧（LHS），描绘形状和标记的条件。 箭头右侧的部分称为右侧（RHS），描述如何转换 LHS 形状以及标记的位置，标记有助于定位和定向新形状。 形状语法最少由三个形状规则组成：起始规则，至少一个转换规则和终止规则。形状语法中的生产规则可以连续应用，类似 L-Systems 中的 productions。 形状语法通常是一个四元组，SG＝（S, L, R, I）。其中 S 是形状的有限集合，L 是符号的有限集合，R 是规则的有限集合，I 是初始形状。形状文法产生的形状，都应通过形状规则由初始形状派生出来。 形状语法在一个小规模的、定义明确的生成问题（如住房布局和结构细化）时最有用。由于形状规则通常是在小形状上定义的，因此形状语法可以包含许多规则。 Mitchell 提出的 Palladian 别墅形状语法包含 69 个规则，这些规则适用于整个八个实施步骤。 Rules of Mughal garden： 借助 CAD，形状语法可以节省人力、缩短设计周期、产生系列化方案，能很好地传承文脉，使设计内涵在新环境下得以保存和发展，受到了设计界尤其是建筑设计的高度重视。 近几十年来，形状语法在计算机图形学中越来越重要。 除了用于建筑物或城市的程序建模（例如电影或视频游戏），Shape Grammars 是许多开发系统的基础，它们使用生产规则来生成各种不同的 3D 模型。 使用 Shape Grammars 可以创建具有逼真外观的街道平面图，以及建筑物的外墙或内部空间。 运用形状语法生成的建筑模型和建筑设计： Ref Shape grammar - Wikiwand Shape Grammars The complex geometry of Islamic design - Eric Broug - YouTube Stiny-Mitchell.pdf Design Computation | School of Architecture | Georgia Institute of Technology | Atlanta, GA What is computation? What is a shape grammar? How are shape grammars used in design? How is a shape grammar developed? - ppt download Procedural Building Generation with Grammars - YouTube]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>艺术</tag>
        <tag>Creative Coding</tag>
        <tag>Generative Art</tag>
        <tag>Computational Creativity</tag>
        <tag>创意</tag>
        <tag>创造力</tag>
        <tag>Shape Grammar</tag>
        <tag>形状语法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[兴趣多动症的自救指南 | 00 的 TEDx 演讲全文]]></title>
    <url>%2F181112TedxWumaStreet.html</url>
    <content type="text"><![CDATA[11 月 3 日，一场以「变」为主题的思想大会 TEDxWumaStreet 在温州开讲。12 位来自学术界、互联网、新闻界、文化产业、地产行业、设计领域的讲者，跨越山川湖海，共赴这场知识盛宴。 尽管行业不同、背景各异，但他们都是自身领域中的思考者和实践者，都在用思想和行动 Remake 人生，讲述精彩故事。 00 有幸作为本年度 TedxWumaStreet 的受邀演讲者，以自己所经历的兴趣和职业之「变」为主题，分享了个人的 Remake 故事。 以下是演讲全文，也许你也能感受到这个颇受关注的议题的共鸣，欢迎参与讨论。 这是一则寻人启事。 请大家回忆一下，在自己的亲朋好友、同事同学里面，有没有这样一类人：他们兴趣广泛，每隔一段时间都会开辟一些新的爱好。比如，这个月是美食博主、下个月可能就玩起了电子音乐。可是，他们挖坑远比填坑快，很难有长久的兴趣。 你可以回想一下这个朋友的名字，又或者，那个人就是你自己。 那么，欢迎加入兴趣多动症大家庭。 这个词是我编造的，我用它来称呼这样一群人，他们经常要面对一个来自灵魂的拷问： 兴趣太多，容易一事无成，怎么办？ 我被这个问题困扰了很久，应该是一个资深的患者。 我是学地理出身的互联网产品设计师，曾经在微信、网易等团队做了多年的产品和人机交互设计，业余运营两个公众号 HackYourself 和 ArtxCode，是一名写得了代码、焊的了电路板的菜鸟创客。 今天想跟大家分享的是，作为一个兴趣多动症患者，这十多年来我的困惑和领悟。 兴趣多动症，其实是一种长时间注意力缺乏的表现，做事容易三分钟热度。据我观察，患有这个病症的人群正在快速扩大，因为我们身处的时代，信息越来越丰富，而注意力越来越稀缺。 具体来说呢，这个病症主要有两个症状——多和动。 这一群人很容易被有意思的事情所吸引，这也觉得新鲜，那也觉得好玩。兴趣广泛是好事，可是兴趣泛滥就很难收拾了。然后，他们不但爱胡思乱想，还喜欢比划两下。行动力强是好事，可是经常乱动，也许就是不规则的布朗运动了。 // 俗话说，久病成医。 因为跟这个病症斗争了许多年，我也慢慢开始学着自救。自救的第一步呢，是先给自己把把脉。 之所容易兴趣广泛变成兴趣泛滥、行动变成乱动，我认为是没有处理好三对主要矛盾： 一个是深度和广度的矛盾。一个是探索和应用的矛盾，应该多探索不同的领域，还是应该尽可能地学以致用，提高投入产出比？还有一个矛盾是愉悦和成就。是满足自己的好奇心、追求新鲜刺激呢，还是应该潜下心来好好积累，成为专家？ 这一群人自然是会选择广度、探索和愉悦的。 那么，有没有可能，既顺应天性，又不需要去做两难的取舍呢？ 我想应该是有的，前提是要从我们给自己设下的二元对立的陷阱中挣脱出来。 // 第一个矛盾是追求深度还是追求广度。 我小时候是个乖学生，但是发现我的同桌们，有一个解答难题最取巧的方法。那就是——直接看别人的答案。所以，我们也可以找出那些兴趣很多，但是样样精通的人，看看他们是如何做到的。 大家可以想象这样一个人吗？他既拿过奥斯卡奖，又得过奥运会冠军。 赫伯特·西蒙就是这样一位神奇的人物，不过他不是奥斯卡影帝和奥运金牌得主，他是至今唯一一位既得过诺贝尔奖又得过图灵奖的学术泰斗。图灵奖就好比计算机科学里的奥斯卡奖。 对多数人而言，一辈子在一个领域有所成就已经非常幸运了，而西蒙一生一共拿了 9 个博士学位，在经济学、政治学、管理学、人工智能、心理学、认知科学等领域都是大师级的人物……这简直是开了挂的人生，他是怎么做到的呢？ 西蒙那些看似庞杂的研究领域，其实是围绕一个大问题展开的： 人类如何决策 他意识到这是人类行为的中心问题，无法由单一学科来解答。他分别从政治学、经济学与管理学视角研究过组织行为以后，转向了心理学，提出有限理性理论。为了深入解释人类决策的机制，又尝试用计算机去模拟人的思维过程，于是成为人工智能的先驱之一。 西蒙的例子告诉我们，如果由一个大的主题来驱动，庞杂的兴趣不是障碍，反而是优势。但是如果反过来，先任由兴趣蔓延，再尝试将它们有机结合起来，则要困难很多。 那么，要如何找到属于自己的主题呢？这也是我探索了多年的问题。 我在大学学的是地理信息系统和旅游规划，却做了互联网产品和交互设计的工作。刚开始我觉得挺焦虑的，好像那么多年白费了，一切要从零开始。后来，当我尝试把学科和领域抽象出来，寻找它们的共性，就有了不一样的发现。 我学的专业是地理，地理学的核心问题是人地关系，对应的实践领域是 planning，规划。我的工作是人机交互设计，顾名思义就是要研究人和计算机的关系，对应的实践领域是 design，设计。 其实规划和设计的相似远大于差异，只不过我研究的对象、还有问题的尺度发生了变化，从区域、城市、旅游景区的规划，变成了电脑和手机屏幕界面的设计。 这就是我对第一个矛盾的理解：当我们觉得自己的兴趣太多太杂的时候，不仿为它寻找一个主题。 // 第二个矛盾，探索和应用，我把它称为资本家的小算盘。 试想一下，如果我们是一名淘金者，可能经常需要做这样的取舍：是继续找更大的金矿，还是先把已经找到的矿开采完？探索还是开采，是资源有限的情况下，经常会遇到的两难。当我们面对新的领域和知识，想尝试另外一种职业、另外一种身份，甚至另外一种人生的时候，这个主题就会反复出现。 我认为，想种不同的果树、尝试不同的人生，没有问题。问题往往出在，果树还没有结出果实就把树砍了，一种人生的滋味还没有尝到就提前离席了。 兴趣太多，最容易遇上的尴尬就是从刚入门到秒放弃。 比如我，高中开始学吉他，但是几乎每一次都是练到手指起茧刚开始有进步，就没有继续下去了。所以十多年来依然停留在高级入门水平。 任何兴趣，都需要一个生长期。 深耕一个领域，一两年太短，十年又可能坐不住。那么不妨试着给兴趣分配一笔大额的预算，以两年或者四年为一个财政周期，就像重新读一次本科或者研究生，在开始时就选好课题，督促自己在这个周期内必需学有所成，交出像样的作品才能拿到毕业证。 Tim Ferriss 也是一名兴趣多动症患者。他是企业家、畅销书作家、演员、武术和舞蹈爱好者，会 6 国语言，拿过中国散打全美冠军、保持着一项探戈舞吉尼斯世界记录。虽然涉猎广泛，但是他会在某一段时间内（比如说 3-6 个月）沉浸地学习某项新技能，直到学有所成，并且把学习经验整理出来出版。 我觉得他的方法非常好。所以我也试着给我的兴趣至少半年的时间，并且记录自己的学习过程。 我一直对做东西感兴趣，所以参加了 MIT 麻省理工大学一个向全球开放的课程，用半年的时间专门学习数字制造的各种技能，包括 3D 建模，3D 打印，电路设计，嵌入式开发等等。每周要去上课，在实验室里动手做作业。 因为当时是在国内最早的一批学生，没有什么中文的资料，所以我把每一周的笔记和需要动手做出实物的作业都写成了教程。 半年里，看着自己一点一点地学着画图、操作机器、接电路板、编程，最终还通过了答辩拿到了毕业证，就会觉得从入门到没有放弃，这种感觉真是太鼓舞人心了。 所以，面对探索和应用的矛盾，我们可以设定兴趣周期，在相对固定的时间框架内自由探索，并且形成积累，成为下一个阶段的储备。 // 第三个难题，是如何平衡愉悦和成就。 多动症患者很喜欢 接触新课题时的感觉，喜欢即时满足，可能容易欺骗自己认为已经学到了，而对漫长、看似停滞的练习阶段缺乏耐心。可是如果不经过积累，哪来的成果和意义呢？ 这个矛盾困扰了我很久。直到有一天，我突然反问自己，为什么愉悦和成就变成了矛盾呢？ 愉悦到底来自哪里？ 什么样的愉悦是我们应该追求的？ 怎样可以既愉悦又有所建树？ 村上春树在《我的职业是小说家》这本书里这样写到。在外人看来，村上的写作生活，规律到有点乏味，就像钟表一样分秒不差。每天 4 点起床，写作 5 小时，下午跑步 1 小时或游泳 1 个半小时，然后读书、听音乐，晚上 9 点睡觉。这样的作息，从他写长篇小说开始，几乎从未改变。 愉悦和成就本来就不该是对立的，恰恰相反，在常人并没有什么感觉的事情上面，能体会到持续的愉悦，才容易做出不一般的成绩。我想，不论是写作还是跑步，村上应该都体验到了极强的心流。 心流是积极心理学的创始人之一，希斯赞特米哈伊提出的概念，它是指我们在做某些事情时，那种全神贯注、投入忘我的状态，甚至感觉不到时间的存在，而完成之后会有一种充满能量并且非常满足的感受。在做那些自己喜欢、擅长、有挑战的事情时，就容易体验到心流，比如写作、演奏乐器、玩游戏、运动等等。 所以，并不是所有的愉悦都值得追求。现在我常常会用一个标准来过滤兴趣，那就是看这件事情能否容易让我进入心流状态。 想要兼顾愉悦和成就，最简单有效的做法就是在心流中形成作品——不论是一篇文章，一个程序，还是一件物品。 // 以上就是我对兴趣多动症三个主要矛盾的自救策略。 深度和广度的矛盾，可以用主题来整合。探索和应用的矛盾，可以用兴趣周期来拆分。愉悦和成就的矛盾，可以用心流换作品，皆大欢喜。 兴趣多动症是一种频发症状，这也是我给自己的三颗速效救心丸。 在这些年的自救过程中，我曾经焦虑于自己的不专注，期望自己变成在兴趣上很专一的人。但是都失败了。因为那不是我。一个人最鲜明的特质，往往就是最大的缺点，也是最大的优点。找出那些自己能够以苦为乐的事情，不断地觉察、顺应、引导和锻炼天性，把它培养成优势，是我们每一个人真正的人生课题。 所以我的多动症还在继续。 你看，因为想给这次演讲做一个小片头，我又新开了一个坑：学做 3D 动画。我跟着教程做了一个四处张望的多动的潜水艇。 做完以后，我发现它更适合做片尾，因为这是我的第一个练习作品，前面有一个大坑等着我来填。 如果你跟我一样，曾经被兴趣太多而困扰，不妨试着善待自己本性，把天性塑造成独特的优势。 每个人都可以、并且应该成为自己的伯乐，为世界贡献一人份的多样性。 你也是兴趣多动症患者吗？欢迎在留言区吐槽和支招 ~]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>TED</tag>
        <tag>Speech</tag>
        <tag>演讲</tag>
        <tag>兴趣</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生成式艺术和算法创作05-Tessellation]]></title>
    <url>%2F181107-generative-art-creativity-05.html</url>
    <content type="text"><![CDATA[生成式艺术和算法创作01-概述 生成式艺术和算法创作02-随机和噪声 生成式艺术和算法创作03-混沌和分形 生成式艺术和算法创作04-规则系统 Tessellation（密铺/镶嵌/平面填充）或称细分曲面（subdivision surface），是指用一些较小的表面填满（tiling）一个较大的表面而不留任何空隙。在数学上，Tessellation 可以推广到更高的维度，称为空间填充。 A wall sculpture in Leeuwarden celebrating the artistic tessellations of M. C. Escher 在几何学中，两块相邻 tiles 的边界叫做 edge，三个或更多 tiles 的交点叫做 vertex。平面密铺分为规则和不规则两种，规则镶嵌即重复组合一种或多种不同的图形，具有周期性的重复模式。由正多边形组成的可以分为正镶嵌、半正镶嵌（Demiregular Tessellation）和不均匀半正镶嵌和复合多边形镶嵌等种类。 通过两个或多个凸规则多边形对平面进行细分，使得相同顺序的相同多边形围绕每个多边形顶点称为半规则 Tessellation，或者有时称为阿基米德曲面细分： 有 14 个单向 Tessellation 是三个常规和八个半规则镶嵌的有序组合： 有规律的填充形成的图案，可分为 17 组。你没有看错，是总共只有 17 组，详细的介绍请见 Wallpaper group，感觉有必要单开一篇来专门研究。 缺乏重复图案的密铺称为非周期平铺（Non-periodic/Aperiodic）。非周期平铺使用一些较小的表面来填满一个较大的表面而不留任何空隙，但由于每一片的形状皆不相同，以致无法形成重复图案。 另外，也存在非欧几里得空间的密铺，如正七边形镶嵌、七阶三角形镶嵌等。 在三维成像中也会使用 Tessellation 快速生成 3D 成像的小三角形。可以使用 GPU 通过 Programmable Tessellator 实现细分曲面，使得渲染对象的表面和边缘更平滑，物件呈现更为精细。 （写到这里只有一个感受：需要完全重修几何学和计算机图形学……） Ref Tessellation - Wikiwand Tessellation – from Wolfram MathWorld Tessellation Wallpaper group - Wikiwand 二次搬运 Wolfram 的 Reference： Ball, W. W. R. and Coxeter, H. S. M. Mathematical Recreations and Essays, 13th ed. New York: Dover, pp. 105-107, 1987. Bhushan, A.; Kay, K.; and Williams, E. “Totally Tessellated.” http://library.thinkquest.org/16661/. Britton, J. Symmetry and Tessellations: Investigating Patterns. Englewood Cliffs, NJ: Prentice-Hall, 1999. Critchlow, K. Order in Space: A Design Source Book. New York: Viking Press, 1970. Cundy, H. and Rollett, A. Mathematical Models, 3rd ed. Stradbroke, England: Tarquin Pub., pp. 60-63, 1989. Gardner, M. Martin Gardner’s New Mathematical Diversions from Scientific American. New York: Simon and Schuster, pp. 201-203, 1966. Gardner, M. “Tilings with Convex Polygons.” Ch. 13 in Time Travel and Other Mathematical Bewilderments. New York: W. H. Freeman, pp. 162-176, 1988. Ghyka, M. The Geometry of Art and Life. New York: Dover, 1977. Kraitchik, M. “Mosaics.” §8.2 in Mathematical Recreations. New York: W. W. Norton, pp. 199-207, 1942. Lines, L. Solid Geometry, with Chapters on Space-Lattices, Sphere-Packs, and Crystals. New York: Dover, pp. 199 and 204-207 1965. Pappas, T. “Tessellations.” The Joy of Mathematics. San Carlos, CA: Wide World Publ./Tetra, pp. 120-122, 1989. Peterson, I. The Mathematical Tourist: Snapshots of Modern Mathematics. New York: W. H. Freeman, p. 75, 1988. Radin, C. Miles of Tiles. Providence, RI: Amer. Math. Soc., 1999. Rawles, B. Sacred Geometry Design Sourcebook: Universal Dimensional Patterns. Nevada City, CA: Elysian Pub., 1997. Steinhaus, H. Mathematical Snapshots, 3rd ed. New York: Dover, pp. 75-76 and 78-82, 1999. Vichera, M. “Archimedean Polyhedra.” http://www.vicher.cz/puzzle/telesa/telesa.htm. Walsh, T. R. S. “Characterizing the Vertex Neighbourhoods of Semi-Regular Polyhedra.” Geometriae Dedicata 1, 117-123, 1972. Weisstein, E. W. “Books about Tilings.” http://www.ericweisstein.com/encyclopedias/books/Tilings.html. Wells, D. The Penguin Dictionary of Curious and Interesting Geometry. London: Penguin, pp. 121, 213, and 226-227, 1991. Williams, R. The Geometrical Foundation of Natural Structure: A Source Book of Design. New York: Dover, pp. 35-43, 1979. Woo, M.; Neider, J.; Davis, T.; and Shreiner, D. Ch. 11 in OpenGL 1.2 Programming Guide, 3rd ed.: The Official Guide to Learning OpenGL, Version 1.2. Reading, MA: Addison-Wesley, 1999.]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>艺术</tag>
        <tag>Creative Coding</tag>
        <tag>Generative Art</tag>
        <tag>Computational Creativity</tag>
        <tag>创意</tag>
        <tag>创造力</tag>
        <tag>Tessellation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生成式艺术和算法创作04-规则系统]]></title>
    <url>%2F181023-generative-art-creativity-04.html</url>
    <content type="text"><![CDATA[生成式艺术和算法创作01-概述 生成式艺术和算法创作02-随机和噪声 生成式艺术和算法创作03-混沌和分形 规则系统 In computer science, rule-based systems are used as a way to store and manipulate knowledge to interpret information in a useful way. –Wiki 规则系统（rule-based systems）的类型： 生成语法和乔姆斯基等级（乔姆斯基在20世纪50年代提出） 形式逻辑系统和逻辑程序：推理规则，定理求解程序，论证系统，案例推理系统 专家系统：将特定领域的专业知识，编码在可以执行演绎和归纳的框架中 跃迁过程网络（Transition-based networks）：有限状态自动机（finite state automata）和扩展随机系统（extension stochastic systems）如马尔可夫模型，马尔可夫链，以及隐马尔可夫模型 _Don_Usner-f_large-863c2ffef0e17c5b6fa999586cc0419d.jpg) 乔姆斯基（C.Chomsky）最初从产生语言的角度研究语言；他将语言 L 形式地定义为由一个字母表中的字母 ∑ 组成的一些串的集合 ，可以在字母表上按照一定的规则定义一个方法，该文法产生的所有句子组成的集合，就是该文法产生的语言。形式语言是模拟这些语言的一类数学语言，它采用数学符号，按照严格的语法规则构成。 那么，到底什么是规则呢？ α→β α 和 β 是由终结符（terminal symbol 如名词、动词等）或非终结符（如句子、动词短语、名词短语等）组成的表达式。 生成文法生成文法（generative grammar）尝试给出一套规则，能正确的预测在一种语言中怎样的词汇组合能成为正确的句子，这些规则通常也能预测句子中的构词法。生成文法可以借助乔姆斯基等级来描述和比较。 文法 G 是一个四元组：G =（V, T, P, S） V：变量/非终结符号的非空有穷集； T：终结符的非空有穷集，V∩T=Ø； P：生成式的非空有穷集合； S：开始符号，S 是 V 中的元素。 P 生成式的基本形式是 α→β，这里 α 和 β 都是（V∪T）中的元素，即它们都是由变元和终结符组成的符号串，但要求 α 至少含有一个非终结符；在形式文法定义中 P 至关重要，它决定了语言是如何构造出来的。 根据 P 中生成式 α→β 的特点，可以将形式文法及其产生的形式语言分类，构成形式语言谱系，对应四种自动机： 0 型文法，又称为短语文法：对生成式 α→β 不作特殊限制，α 和 β 可以是任意的文法符号串，当然 α 不能是空字符串；0 型文法是形式语言谱系中最大的文法类，是图灵机所识别的语言类，即递归可枚举语言。 1 型文法，又称为上下文有关文法：要求生成式 α→β 满足 |α|≤|β|，即 β 要至少和 α 一样长；由 1 型文法产生的语言称为 1 型语言或上下文有关语言，是非确定型线性有界自动机所识别的语言类。 2 型文法，又称为上下文无关文法（context-free grammars ）：要求生成式 α→β 中的 α 必须是变元；由 2 型文法产生的语言称为 2 型语言或上下文无关语言，是由下推自动机所识别的语言类。 3 型文法，又称为正则文法，这种文法分为两种类型：生成式的形式必须是 A→ωB 或 A→ω，其中 A，B 都是变元，ω 是终结符串（可以是空串），这种特殊的正则文法称为右线性文法；第二类正则文法称为左线性文法，它要求生成式必须是 A→Bω，或 A→ω 的形式。由正则文法生成的语言称为正则语言，它是有穷自动机所识别的语言类。 上述定义的 4 种语言类具有依次包含关系，即对于 i＝0，1，2，在不考虑空字符串时，i 型语言都真包含 i＋1 型语言。 通过这种语法推导出的句子可以用派生树描述。相邻的单词被组合成成分，可以进一步与其他单词或成分组合以创建分层树结构。 看着很晕吧？…… 我们还是来看一些艺术创作领域的例子吧！ 法国诗人雷蒙·格诺 (Raymond Queneau) 是国际文学团体乌力波（Oulipo, Ouvroir de littérature potentielle, 潜在文学工场）的创始人，其会员中名气较大的有意大利作家卡尔维诺（Italo Calvino），法国作家乔治·佩雷克（Georges Perec），此外还有一些成员是和文学不搭边的数学家。 Raymond Queneau 的诗集「百万亿首诗」(Cent mille milliards de poèmes) 是一本不寻常的诗集：表面上看这本书是由 10 首十四行诗构成，10 首诗的同一行都押同一个韵，实际上它能排列组合成一百万亿首诗。首行诗句有 10 种选择，第二行诗句也有 10 种选择，十四行诗组合在一起也就得到了 10 的 14 次方首各不相同的诗了。 诗集的设计也很特别，每一行都被剪成纸条，读完第一首诗的第一行，然后把第二行的纸条折过去读第二首诗的第二行，以此类推……这便是一个语法生成系统了。 自动机最简单的来说，自动机（Automaton）就是具有离散输入输出的数学模型，接受一定的输入，执行一定的动作，产生一定的结果。 状态是一个标识，能区分自动机在不同时刻的状况。可以使用状态迁移描述整个工作过程。有限状态系统具有任意有限数目的内部状态。自动机的本质是，根据状态、输入和规则决定下一个状态，即 状态 ＋ 输入（激励）＋ 规则 → 状态迁移 可能的状态、运行的规则都是事先确定的。一旦开始运行，就按照事先确定的规则工作，因此叫自动机。 根据结构不同，自动机又可分为： 有限自动机，可以认为是由一个带有读头的有限控制器和一条写有字符的输入带组成； 下推自动机，可以看作是由一条输入带、一个有限控制器和一个下推栈组成； 基本图灵机，由一个具有读写头的有限控制器和一条无限带组成 在这个系列的后续文章中，还会单独来讲讲元胞自动机。 Transition networkTransition Networks 是一系列有限状态自动机。 如果用有向图表示，节点表示状态，边缘表示转换过程。每一个自动机表示一个非终结符；每一个转换过程产生一个非终结符或终结符。 Augmented transition networks (ATN) 是一种形式语言操作化定义的图论结构。ATN 建立在使用有限状态机来解析句子的基础上，它理论上可以分析任何句子的结构，无论多么复杂。ATN 的一个优点是延迟决策——当模糊性出现时，许多语法会在对句子的了解还不够时进行猜测。而 ATN 使用递归来推迟决定，直到对句子了解得更多。 算法作曲的先驱 David Cope 创作的 EMI 是著名的和开创新的系统。EMI 使用了 ATN，由系统分析和分割给定的语料库，然后重新组合元素。 在这里，终结符是各种音乐片段，非终结符元素则捕捉各种层级的片段结构。 Ref Rule-based system - Wikiwand Generative grammar - Wikiwand Context-free grammar - Wikiwand Oulipo - Wikiwand Automaton - Wikiwand 乌力波（2） (豆瓣) 形式语言与自动机 EMI]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>艺术</tag>
        <tag>Creative Coding</tag>
        <tag>Generative Art</tag>
        <tag>Computational Creativity</tag>
        <tag>创意</tag>
        <tag>创造力</tag>
        <tag>规则系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生成式艺术和算法创作03-混沌和分形]]></title>
    <url>%2F181021-generative-art-creativity-03.html</url>
    <content type="text"><![CDATA[生成式艺术和算法创作01-概述 生成式艺术和算法创作02-随机和噪声 动态系统动态系统（dynamical system）是数学上的一个概念，是一种固定的规则，它描述一个给定空间中所有点随着时间变化的情况，例如运动的钟摆、弹跳的球、管道中水的流动等。 动态系统的行为可以分为四类： Fixed point behavior (equilibrium)：固定（平衡）行为 Limit cycle or periodic behavior：循环或周期行为 Quasi-periodic behavior：准周期行为 Chaotic behavior：混沌行为 虽然动态系统是可以确定的，但是一旦输入发生微小改变，结果都会变得难以预测。混沌系统短期、局部可预测，长期、全局不可预测的特点，让它成为算法创作中常用的手段。 via Generalization of the simplest autonomous chaotic system 单峰映象（logistic map）是一个二次的多项式映射，是由简单非线性方程式产生混沌现象的经典范例。 这种映射因生物学家 Robert May 在 1976 年发表的一篇论文而著名。公式为 $$x_{n+1}=rx_n(1-x_n)$$。对于任一个 r 值，最多只有一个稳定的极限环，若稳定极限环存在，几乎所有的点最后都会趋近极限。这些情况可用分枝图表示，分枝图中的横轴是 r 的数值，纵轴中显示大部份初值下稳态可能的 x 值，若数值在 2 个值中震荡，分枝图上对应的数值就会有 2 个点。若某 r 值已无法明确有几个对应的点，系统可能已经处于混沌状态。 分枝图有自相似的特性。若将分枝图中 r=3.82 的部份展开，只取三个分支中的一个，图形会好像是原分枝图缩放及扭曲后的结果。所有非混沌的参数 r 都有此一特性。可以看出混沌和分形的关系。 吸引子（attractor）是微积分和系统科学论中的一个概念。一个系统有朝某个稳态发展的趋势，这个稳态就叫做吸引子。 吸引子分为平庸吸引子和奇异吸引子。例如一个钟摆系统有一个平庸吸引子，这个吸引子使钟摆系统向停止晃动的稳态发展。平庸吸引子有不动点（平衡）、极限环（周期运动）和整数维环面（概周期运动）三种模式。不属于平庸的吸引子的都称为奇异吸引子，它表现了混沌系统中非周期性，无序的系统状态，例如天气系统。目前吸引子在学术上还没有完善的定义，奇异吸引子对于混沌系统的研究意义重大。 混沌理论的思想也从上世纪后半叶开始，逐渐渗入到音乐和作曲领域。 1960 年 George Brecht 在滴水事件（drip event）中，使不同来源的水，滴进所有空的容器。这个作品可以被视为音乐、剧场、或者是动态雕塑。 Brecht 的极简主义艺术活动是神秘费解、令人困惑的，这些作品及其配乐为观众设计成仅在想象的范围内可被解读与激活。滴水音乐（drip music）由此形成，指可由单个或多个表演者演出单一滴水水源与一个空的容器，通过设置使水滴入容器中。Drip music 很快就成为激浪派（fluxus）的标志，flux 一词本身不仅指持续的运动与改变，也指流体与流动，或更精确的是一个流体的流动速度。 80 年代，混沌理论开始被应用在作曲中。它适用于音高、持续时间、动态范围和编排。它们很容易产生重复，以及周期性/准周期性模型变化，或者在混沌模式下产生更多不可预测的行为，而重复、变化、convergence 和 divergence 是音乐作曲里的关键要素。 分形分形是一个可以分成数个部分的几何形状，且每一部分都（至少近似地）是整体缩小后的形狀，即具有自相似的性质。分形也被称为扩展对称或展开对称。如果在每次放大后，形状的重复是完全相同的，被称为自相似。作为一个数学函数，分形通常是处处不可微的。无穷分形曲线可以理解为一条一维的曲线在空间中绕行。 Fractals are mathematical dynamic systems represented by iterative equations that develop curves and geometrical shapes that have property of self-similarity. Sierpinski 三角是典型的自相似分形图形。1915 年由波兰数学家 Wacław Franciszek Sierpiński 提出。 算法： 取一个实心的三角形（多数使用等边三角形） 沿三边中点的连线，将它分成四个小三角形 去掉中间的那一个小三角形 对其余三个小三角形重复第 1 步 Sierpinski 三角可由分型树产生： 分形算法已经被广泛用于生成式艺术创作中。 Bogdan Soban 是斯洛文尼亚的信息学专家和软件开发者，退休后作为自由艺术家从事创作。他从 1999 年开始接触生成式艺术，开始编写基于算法的生成式艺术软件用于创作。 Paul DeCelle 用 Frederik Slijkerman 开发的 Ultra Fractal 创作了一些列作品： Etienne Saint Amant 是来自加拿大魁北克省舍布鲁克的艺术家。他专注于用数学语言设计和描述的大幅艺术品，致力于概念研究和当代艺术创作。 :origin()/pre00/ae50/th/pre/i/2005/136/1/4/rakis_by_etiennesaintamant.jpg) 一些分形艺术的软件： Ultra Fractal: Advanced Fractal Software for Windows and macOS Frax - Immerse, Create, Inspire Laravel Fractal Explorer Apophysis.org Ref Dynamical system - Wikiwand Attractor - Wikiwand Logistic map - Wikiwand 分形 - Wikiwand Sierpinski triangle - Wikiwand Generalization of the Simplest Autonomous Chaotic System Poul Hansen, George Brecht, Dick Higgins. George Brecht’s Drip Music, performed by Dick Higgins during Fluxus/Musik og Anti-Musik/det Instrumentale Teater, Nikolai Kirke, Copenhagen, November 23, 1962. 1962 | MoMA Generative Art - generated, artificial, random, software Fractal Art by Paul DeCelle chaoscopia - news]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>艺术</tag>
        <tag>Creative Coding</tag>
        <tag>Generative Art</tag>
        <tag>Computational Creativity</tag>
        <tag>创意</tag>
        <tag>创造力</tag>
        <tag>混沌</tag>
        <tag>分形</tag>
        <tag>Chaotic</tag>
        <tag>Fractal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法创作实战02 - 用 MaxMSP 生成随机颜色]]></title>
    <url>%2F181021-computational-creativity-in-maxmsp-02.html</url>
    <content type="text"><![CDATA[在「生成式艺术和算法创作」系列第二篇中，00 介绍了随机和噪声在算法创作中的应用。上一篇我们用 Max/MSP 做了一个随机生成星座描述的小应用，切身实践和感受了巴纳姆效应。 今天我们一起来用 Max/MSP 实现简单的随机颜色生成器，加深对 Max/MSP 中 random 对象的了解。 名称：Random Color 主要使用的对象：random, send, receive, uzi, pack, jit.matrix, jit.pwindow 难度系数：★☆☆☆☆ 这个程序叫 Random Color，可以指定行（y）和列（x）的数量，然后用随机颜色填充，可以手动生成新的图像，也可以自动连续生成。生成的图像可以导出成图片。最后的成果是这样： 首先来拆解需要实现的功能： 手动生成或者自动连续生成 指定图像的尺寸(dim) 生成随机颜色 自动填充每一个单元格 显示图像 导出图片 开始动手前，请复习 Max/MSP 文档中 random, send, receive, uzi, pack, jit.matrix, jit.pwindow 等对象的说明。 准备就绪后，我们先来看前两步如何实现： 1.手动生成或者自动连续生成 用 button 触发生成事件，前面加上 metro 对象并指定时间间隔就可以自动连续触发生成事件。 2.指定图像的尺寸(dim) 设置两个整数数字框，可以输入水平和垂直维度的数量，来指定图像的尺寸。 生成事件的 bang、x 和 y 的数值，都通过 send(简写为 s) 对象传递到后面的步骤。 接下来是关键的部分，用随机颜色自动填充每一个单元格： 3.生成随机颜色 用 3 个random 对象分别生成 R G B 三个颜色值，然后用 pack 对象打包起来。因为最后需要用 jit.pwindow 显示图像，它需要接收 ARGB 颜色，所以我们还需要用 setcell 消息指定需要填充的单元格，并且传递 255 作为 ARGB 的 Alpha 值。于是，pack 对象的参数需要写成：pack setcell 0 0 val 255 0 0 0。其中，前面两个 0 会传入之前通过数字框输入的 x 和 y 的垂直和水平 dim 值，后面 3 个 0 会传入由 random 对象生成的 GRB 值。 4.自动填充每一个单元格 编程中经常使用 for 循环来实现矩阵的填充，在 MaxMSP 里常用 uzi 对象来实现简单的循环效果。（当然，如果是 modern 的矩阵处理和运算，会用 jit 提供的丰富的矩阵功能；这里我们怀旧一下用 uzi）uzi 的作用是连续发出 bang，左入口接收触发命令，右入口接收连续 bang 的数量；左出口输出 bang，中出口输出完成所有 bang 后的消息，右出口输出当前是第几个 bang。 首先接收 y 维度的值，用 1 个 uzi 作为外层循环。因为 uzi 对象从 1 开始计数，所以需要减去 1 再传给 setcell，因为矩阵单元格从 0 开始计数。然后接收 x 维度的值，作为内层循环（同样要减去 1）。 uzi 和 random 生成的矩阵单元格位置和颜色都传给 pack 对象打包。 最后是显示和导出图像： 5.显示图像 使用 jit.matrix 存储并显示矩阵，更多 jit.matrix 的用法请参考 00 翻译的 Max/MSP/Jitter 官方教程系列。 指定矩阵为 4 个平面（plane），用 receive 对象（简写为 r）接受 x 和 y 维度的值。为了实时响应维度修改的操作，这里用 pak 对象而不是 pack 对象。pak 对象响应任一一个输入的变化，而 pack 对象需要由 bang 触发何时响应。 另外，使用一直开启的 qmetro 对象（@active 属性为 1）来监控矩阵的变化，以便随时更新，将矩阵值通过 send 对象发送给 jit.pwindow 中显示。 6.导出图片 用 exportimage 消息可以触发 jit.matrix 导出图像保存。因为矩阵的初始尺寸是 10x10，所以最后用了一个 jit.matrix 4 char 400 400 将矩阵扩大为 400x400 的尺寸，这样导出的图像大小就是 400x400 像素。 完整的 patch 如下： Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 Max/MSP/Jitter 教程 09 - 调整图像颜色 Max/MSP/Jitter 教程 10 - 简单混合 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>艺术</tag>
        <tag>Creative Coding</tag>
        <tag>颜色</tag>
        <tag>Generative Art</tag>
        <tag>Computational Creativity</tag>
        <tag>创意</tag>
        <tag>创造力</tag>
        <tag>随机</tag>
        <tag>MaxMSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法创作实战01 - 巴纳姆效应之随机星座实验]]></title>
    <url>%2F181017-computational-creativity-in-maxmsp-01.html</url>
    <content type="text"><![CDATA[在「生成式艺术和算法创作」系列第二篇中，00 介绍了随机和噪声在算法创作中的应用。 今天我们一起来用 Max/MSP 实现一个半（hu）仙（shuo）算（ba）命（dao）小应用，加深对 Max/MSP 中 random 对象的了解，并且学习如何使用 coll 对象。 名称：麦克斯半仙儿（又名 Random Bullshit） 主要使用的对象：random, coll, route, jit.cellblock, fpic 难度系数：★☆☆☆☆ 背景知识巴纳姆效应（Barnum effect）是 1948 年由心理学家伯特伦·福勒通过试验提出的一种心理学现象，以杂技师巴纳姆的名字命名。巴纳姆效应是一种心理现象，人们会对他们认为是为自己量身订做的一些人格描述，给予高度准确的评价，而这些描述往往十分模糊及普遍，以致能够放诸四海皆准适用于很多人身上。 据说巴纳姆的成功秘诀是：「永远要让每一个观众都感到自己若有所获」。意思如果要让每一个人都能感到对自己个性的描述是准确的，就要去提供一些放之四海而皆准的描述。看手相、算命、占星术及其他伪心理学经常利用这种效应，怎么说都能让你听着有点儿道理。于是有人将十二星座的描述随机排列，发现不同星座的描述基本上可以适用于其他星座。 所以今天我们来实践一下这个想法，看看程序随机给出的星座描述，有没有戳中你 🌝。 任务拆解这个程序叫麦克斯半仙儿，用户选择自己的星座后，程序给出描述。最后的成果是这样： 首先来拆解需要干的事儿： 收集十二星座的简短描述和图标 存储文本，方便随机调用 12 星座的选择控件 显示结果（包括加载默认值） 开始动手前，请复习 Max/MSP 文档中 random, coll, route, jit.cellblock, fpic 等对象的说明。 实现步骤这个小程序的核心是用 random 对象随机显示 coll 对象中存储的内容。coll 即 collection，用来存储一个列表，列表中每一项都包含 key 和 value（中间用 ， 隔开），可以通过 key 获取对应的 value。value 可以是单个值，也可以是以空格分隔的多个值。 在 Max 中新建名字为 blah 的 coll 对象，双击（或者 cmd+点击）打开，填入我们在网上找到的十二星座描述内容，格式如下： 12340, 你大方、明朗，全身充滿活力……;1, 你不但好學、知識豐富，還很……;2, 嗯，你善於說服別人，還是個……;…… 十二个星座描述的索引是从 0~11，所以在 coll 前用一个 random 对象随机选取其中一个星座的描述，然后从 coll 的左出口输出。因为我们存储的是文本内容（symbol），所以需要用一个 route 对象读取 symbol 内容，并发送到显示区域。 如果不想每次双击打开 coll 查看，可以用 refer 名字 消息连接一个 jit.cellblock 查看 coll 里面的内容。 随机调用的内容准备就绪后，接下来是选择星座的界面： 用 fpic 显示星座图标，在上面覆盖一个 button 对象，将按钮背景设置为透明。然后将按钮连接到 random 对象，读取 coll 的内容。 因为想显示每次选择的星座名称，所以每个按钮连接了一个包含对应星座名称的 message ，点击按钮时可以触发显示在内容区域。其实用 radio group 对象能更好实现，但是它的 UI 不好自定义，就放弃了。 完整的 patch 如下： 后记程序做好以后，随机生成了几个描述，发到朋友圈，让大家猜这些描述原本对应的是什么星座。 结果是——没有全部猜对的，哈哈哈！应该给撰写星座描述的小编加🍗~ 下一期实战见~ Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 Max/MSP/Jitter 教程 09 - 调整图像颜色 Max/MSP/Jitter 教程 10 - 简单混合 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>艺术</tag>
        <tag>Creative Coding</tag>
        <tag>Generative Art</tag>
        <tag>Computational Creativity</tag>
        <tag>创意</tag>
        <tag>创造力</tag>
        <tag>随机</tag>
        <tag>巴纳姆效应</tag>
        <tag>星座</tag>
        <tag>MaxMSP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生成式艺术和算法创作02-随机和噪声]]></title>
    <url>%2F181014-generative-art-creativity-02.html</url>
    <content type="text"><![CDATA[生成式艺术和算法创作01-概述 利用随机性（Randomness）和噪声（Noise），可能是最古老、最简单、最常见的生成式艺术的方法。 艺术家用各种参数来定义一个变化空间，可以在一定范围内取值，随机选中的值影响被操控的元素，形成最终的作品。 随机性表示一定程度上的目的、动机、规则等可预测性的缺失。引入随机性可以带来多样、不可预测的结果，从而让作品更丰富而有活力。 产生各种概率分布的随机数概率分布是随机变量的概率性质。比如，符合均匀分布的随机数，表示所有可能选项的出现概率是一样的。选择不同的概率分布，可以让随机数产生不同的结果。 常见的概率分布： http://blog.cloudera.com/blog/2015/12/common-probability-distributions-the-data-scientists-crib-sheet/ Uniform distribution：均匀分布 Bernoulli distribution：伯努利分布，就是常见的 0-1 分布，即随机变量只取 0 或者 1，频率分别为 1−p 和 p Binomial distribution：二项分布，例如在一连串 N/yes/no 中八次成功的概率。二项分布公式基于伯努利分布得到，因为每次实验都是独立的，因此每次实验都是一次伯努利实验 Hypergeometric distribution：超几何分布，常用来表示在 N 个物品中有指定商品 M 个，不放回抽取 n 个，抽中指定商品的个数 Poisson distribution：泊松分布，主要用来研究单位时间或单位空间内某事件的发生次数，事件的发生必须是相互独立的，比如单位时间内通过某一交通灯的车辆数 具有相同分布函数的随机变量一定是同分布的，因此可以用分布函数来描述一个分布，但更常用的描述手段是概率密度函数（Probability Density Functions）。利用概率分布和密度函数，可以引导和交叉训练随机性，让某些部分发生概率更高，而另一些概率更低。 噪声 In signal processing, white noise is a random signal) having equal intensity at different frequencies, giving it a constant power spectral density. – Wiki 我们经常会听到一个名词：白噪声。 它是什么意思呢？为什么噪声还有颜色呢？ 白噪声是一种功率谱密度为常数的随机信号或随机过程。即信号在各个频段上的功率是一样的。 由于白光是由各种频率（颜色）的单色光混合而成，因而此信号的这种具有平坦功率谱的性质被称作是「白色的」，此信号也因此被称作白噪声。相对的，其他不具有这一性质的噪声信号被称为有色噪声。 需要注意，相关性和概率分布是不同的概念。白色仅意味着信号是不相关的，白噪声的定义除了要求均值为零，并没有对信号应当服从哪种概率分布作出任何假设。因此，如果某白噪声过程服从高斯分布，它就是「高斯白噪声」。类似的，还有泊松白噪声、柯西白噪声等。 噪声的颜色分类，来自于将频谱中的噪声谱密度函数，和频谱中的光波信号做形式上的类比，也就是说，如果一束光波在频域内具有和蓝噪声相同的谱密度图样，则这束光波看上去将呈现蓝色。 White noise: 频率密度均匀分布 Brown noise (Red noise): 由布朗运动造成，又称为随机移动噪音（random walk noise） Pink noise (F noise): 功率谱密度与频率成反比的频谱信号或过程。在粉红噪声中，每个倍频程中都有一个等量的噪声功率。在生成式艺术中很常用，因为它可以模拟自然现象中的随机性 Aleatoric Music 机遇音乐 A process is said to be aleatoric … if its course is determined in general but depends on chance in detail. —— Werner Meyer- Eppler, 1957 机遇音乐是一种包含随机性元素的音乐创作。 在一首音乐作品中，作曲家在某些地方会让演奏者按自己的意愿，或使用一些系統来决定音乐的演奏，由于随机性不可能每次都得出相同的结果，所以乐曲每次的演奏版本都不完全相同。 Iannis Xenakis 开创了机遇音乐的一个子类：随机音乐（Stochastic music），即在音乐创作中或者在演奏中使用随机过程生成乐曲片段。 Xenakis 经常使用计算机来制作乐谱，例如包括 Morsima-Amorsima 和 Atrées 在内的 ST 系列。 Noise music 噪声音乐Noise music 是音乐的一个子流派，研究声学噪声的概念并将其作为重要的声学材料。 I believe that the use of noise to make music will continue and increase until we reach a music produced through the aid of electrical instruments which will make available for musical purposes any and all sounds that can be heard. — John Cage, The Future of Music: Credo (1937) 让我们来听听日本著名的噪音音乐人 Merzbow 的一首作品，感受一下什么是噪声音乐： https://soundcloud.com/merzbow/v2-1 噪音和音乐的定义因人而异，如果噪音是指让人不舒服的声音的话，流行音乐对我而言就是噪音。 ——Merzbow 在工业噪音、噪音摇滚、No wave 和 Harsh noise 之后，出现了大量的噪音音乐家，风格包括 Ambient、Microsound、Glitch 等，更强调微妙的脉冲式声响和敏感的听觉。 Random walkRandom walk 1905 年由皮尔逊首次提出，它是一种数学统计模型，由一连串轨迹组成，每一步根据概率随机选择。步长可以是固定也可以是动态的。 一维 Random Walk Brownian movement 是 Random walk 的特例（step 为 0）。所以上文提到的 Brown noise 也称为 Random walk noise。 随机漫步的算法虽然简单，但是经过多次迭代，可以产生丰富的随机效果，所以在生成式艺术中被广泛使用。 Chance and Order 是 Kenneth Martin 1971 使用随机漫步规则创作的一个系列。 the points of intersection on a grid of squares are numbered and the numbers are written on small cards and picked at random… A line is made between each successive pair of numbers as they are picked out. ——Kenneth Martin Quantum cloud 是艺术家 Antony Gormley 1999 年完成的当代雕塑作品。它由一系列四面体单元构成，由 1.5 米长的钢制成。钢架部分用 Random walk 算法生成。 Perlin noisePerlin noise 是由 Ken Perlin 发明的自然噪声生成算法，经常用来模拟自然界中的噪声现象、人体的随机运动、蚂蚁行进的线路等。还可以通过计算分形来模拟云朵，火焰等非常复杂的纹理。 在很多生成式系统中，比如游戏制作场景里的贴图材质、波澜起伏的地面和海洋，很多都是用 perlin noise 生成的。它旨在描述自然中的随机效果，创建的纹理可以直接运用于顶点着色器，而不是像纹理映射技术，先生成一张纹理图，然后把贴图附加到一个三维物体上。也就是说，只需要提供每个顶点的 (x,y,z) 的坐标，传入 perlin noise 函数，计算得到一个随机数，然后与原颜色运算，得到新的颜色，如同直接在物体表面绘制纹理一样。 Perlin 认为，理想的噪声函数应当具有以下性质： 旋转统计不变性（不管怎么旋转它的域都有同样的统计特性） 能量在频谱上集中于一个窄带（图像是连续的，高频分量受限） 变换统计不变性（不管如何平移它的域都有同样的统计特性） 产生 2D Perlin Noise 的方法： 为所有坐标为（x,y）且 x, y 都是整数的点指定一个值，同时指定一个梯度，这些点将空间分成方格； 对于坐标轴为整数的点，即上述方格的顶点的值作为该点的值；对于某个方格内部的点（x,y），用所在方格四个顶点的值和梯度进行插值。 为了简化计算，方便硬件实现，Ken Perlin 在 2002 年改进了方法，称为 Simplex 噪声。Simplex 噪声使用 作为插值函数，避免了导数中的线性部分。 使用 Simplex 方法产生噪声 Ref 概率分布 - Wikiwand Probability density function - Wikiwand Common Probability Distributions: The Data Scientist’s Crib Sheet - Cloudera Engineering Blog 白噪声 - Wikiwand 噪声的颜色 - Wikiwand Pink noise - Wikiwand Aleatoric music - Wikiwand Noise music - Wikiwand Perlin噪声 - Wikiwand Understanding Perlin Noise [图形学] 柏林噪声 （perlin noise）]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>艺术</tag>
        <tag>Creative Coding</tag>
        <tag>Generative Art</tag>
        <tag>Computational Creativity</tag>
        <tag>创意</tag>
        <tag>创造力</tag>
        <tag>随机</tag>
        <tag>噪声</tag>
        <tag>Noise</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生成式艺术和算法创作01-概述]]></title>
    <url>%2F181009-generative-art-creativity-01.html</url>
    <content type="text"><![CDATA[自从今年把兴趣领域从人机交互扩展到人机协同创作之后，接触到越来越多「艺术x技术」的新鲜知识、有趣项目和精彩作品。一个星期有那么 7 天心情如下图： 这个系列，00 将会（希望是深入地）整理和介绍 Generative Art 和 Computational Creativity 的一些研究领域、概念和作品。当然，我们不满足于做手残党。为了避免出现只是看看图惊叹两句就没有然后的纯消费行为，这个系列也会探讨相关的技术、算法，以及实现的思路。 需求井喷下的工具进化为什么关注生成式艺术和算法创作？ 除了个人的职业背景和癖好，还有对声色犬马的生活，哦不，做一个声色全码的手艺人的向往。 创意和娱乐产业发展到今天，已经是一个巨大的造梦引擎。但消费市场对极致体验和制造梦境能力的追求并不会停歇，这迫使技术和计算能力以前所未有的速度变化和发展。不但场景越来越宏大、梦幻、沉浸，对实时性、多角色协同、虚实融合的诉求也愈发强烈。这其中有大量的创作工作要做。 比如，在 Minecraft 中，每周有超过 1000 万玩家，会在游戏里待上 20 小时。这样算下来，需要多少作曲家才能为每一位玩家提供个性化的音乐呢？ Non-linear （非线性叙事）媒体日渐流行，自动生成丰富而个性化的内容流成为强需求，或者至少需要有方法能够帮助创意工作者更有效地完成创意任务。但是传统的工具例如视频剪辑、音频效果制作、图像合成等等，工具本身并不能提供更多的帮助。不论创意有多明确，一切都需要从头开始。 为什么机器不能以更动态、灵活、人性的方式与我们交互呢？比如说，我已经设计过 100 张海报，这次的设计跟其中的 3 张风格相似，但是内容会有变化。创作工具能不能自动生成几个草稿或模板，让我不必重零开始呢？ 打造这样的工具或者工作流程，需要研究人类的创造过程，让机器在一定程度上自主完成创造过程，才能更好地辅助我们创造。 应用了计算机算法的生成式艺术处于艺术和创造的前沿，已经涌现出许多艺术和文化作品。 生成式艺术生成式艺术（Generative art）是指部分或全部使用自动创作系统（autonomous system）创造的艺术。 Generative art refers to any art practice where the artist uses a system, such as a set of natural language rules, a computer program, a machine, or other procedural invention, which is set into motion with some degree of autonomy contributing to or resulting in a completed work of art. —— Philip Galanter 可以用来辅助生成艺术作品的系统有很多，通常是一个非人类的独立系统（不一定是计算机），只要它可以独立确定一件艺术品的特征。生成式艺术几乎跟艺术本身一样古老，使用几何对称、样式、重复来生成图案的做法，已经存在几千年了。 艺术家需要设计一个自主运作的机制来创作作品，这个机制通常包含一组规则，例如自然/音乐/编程语言、二进制代码、数据映射、生物指令等，由它们生成自动化处理过程，最终产生艺术作品。 生成式艺术可以为艺术家提供减少主观创造意向的手段。在不同的条件、参数、设置下，运行过程不同，结果会呈现出一定特征，但常常是不可预测的。 随着互动需求的增加、计算机计算能力提高，越来越多的生成式艺术作品是实时生成的，而且系统会收集反馈或产生即时的新输入，让结果持续更新和变化。 需要注意的是，生成式艺术并不是艺术流派、艺术运动或某种意识形态，它只是一种创造性的方法，与作品的意图和价值取向无关。 算法创作Computational Creativity（我翻译为算法创作），是一个学术研究领域，研究的对象主要是创意活动的计算化/自动化过程。它并不局限于艺术，还包含各种创造性活动，如绘画、音乐、文学、表演等等。 算法创作听起来跟人工智能似乎很像，都强调算法、计算、自动的处理过程。它们是一样的吗？ 让我们先来看看 Sternberg 在 Handbook of Creativity 里提出的创造性最重要的 3 类智能： 分析智能 Analytical Intelligence：分析、评论、判断、比较、评估 实用智能 Practical Intelligence：使用、实施 创作智能 Synthetic/creative Intelligence：想象、创造、发明、发现、预测 再来回顾一下人工智能先驱司马贺给出的人工智能的定义： Artificial intelligence is the science of having machines solve problems that do require intelligence when solved by human. —— Herbert Simon (1960) 此处的重点是：solve problems。 AI 擅长 rational problem solving，也就是说，擅长处理那些解决方案可能很复杂，但是容易理解、目标明确或定义良好（well defined）的问题。 但是，机器可以擅长创作吗？ 跟理性问题相比，创造性活动一般没有「最佳」结果或答案。不存在最好的音乐、绘画、诗歌、故事、笑话、菜谱、游戏……这一类活动更加需要 Sternberg 所说的第三类 synthetic 智能。于是算法创作渐渐从 AI 研究领域中分离出来，因为「最优」（optimality）的概念对创作行为来说是定义不良的（ill-defined）。 Creative System 的分类从通用性来分，创意系统可分为特定的 (基于领域/任务/审美的) 和通用的。 从自动化程度来分，可分为响应式的和全自动的。 从互动性来分，可分为低互动性的（只响应输入，比如一般的人机交互界面）和高互动性的（可以相互影响的智能体行为）。 从系统的知识来源分，可分为硬编码的、输入的和学习式的（比如从语料学习）。 从系统的行为模式来分，可分为：fixed - periodic - complex - chaotic。 从有效复杂性（effective complexity）来分，可以分为： 从架构和算法来分，可以分为： generative generate and evaluate generative with reflexive feedback interactive and adaptive 算法创作的领域实践生成绘画哈罗德·科恩（Harold Cohen）的 AARON 系统是一个从 1973 年开始的长期项目，他将软件人工智能与机器人绘画设备相结合，让机器自动作画，可以算得上是 AI 画家的鼻祖了。 自动作画的机器人被明名为 AARON。AARON 是一台很原始的绘画机器，但它可以在没有照片或其他人类输入参考的情况下绘制人物形象的静物和肖像。 在专注水彩作画的 40 多年里，AARON 的绘画能力逐年提高。80 年代学会了将物体或人物放置在三维空间中，从 1990 年起可以用彩色绘画。它的部分作品已被泰特等知名美术馆和一些私人收藏家收藏。 Final Approach 是 2013 年 AARON 最新的绘画作品之一： 时间快进到 2018 年，已经连续举办 3 年的 Robot Art Prize 已落下帷幕（ARRON 也参加了比赛🙂），第一名由名叫 cloudpainter 的机器人画家获得，下面是它的画作： 我认为，在短期内，机器人将越来越多地用于数字艺术的最终生产，特别是那些有很多细节或重复元素的机器人。 创立 RobotArt 的艺术家和工程师 Andrew Conru 表示。 但他不认为机器人或算法艺术家会取代更有创造性的人类。他把机器创造的艺术品比作照相机的创造。摄影成为一种全新的艺术分支，捕捉不同类型的图像和作品。 Conru 认为机器人和人类艺术品将继续存在。每个人都会为艺术领域带来不同的技能和方法。正如他的网站所说： We all win when we see something beautiful. 生成音乐人们希望借助自然的力量更自动地创作音乐，这种想法实际上早已出现。从某种程度上说，第一首自动生成音乐来自于大自然：中国的风铃、古希腊的风弦琴、日本的水琴窟等。 莫扎特的 Musikalisches Würfelspiel（Musical Dice Game，1757）被认为是早期的基于随机性的生成系统。 在这部作品中，他创作了 176 小节音乐，然后将小节号排列为两个特殊的矩阵图，通过演奏家掷般子的方式来决定音乐序列的选择。这个机制提供了有序和无序的平衡。可以说，将算法应用于音乐创作可能和音乐本身一样古老。 Iannis Xenakis 在他 1958 年的专辑 Analogique 中，使用了马尔可夫链来作曲。他在著作 Formalized Music: Thought and Mathematics in Composition 里详细描述了使用马尔可夫模型的算法。 第三章“马尔可夫的随机音乐：应用”（节选）音乐生成3_腾讯视频 John Cage，Farmers Manual 和 Brian Eno 等现代（电子）音乐先驱都在早期作品中开始使用生成系统。 Continuator 是 Francois Pache 在索尼计算机科学实验室 (Sony Computer Science Laoratories) 时主导的项目。 The Continuator is a usable musical instrument combining techniques from interactive and automatic learning systems. 他最近几年则投入到 Flow Machines 项目中。 2016 年，格莱美获奖制作人 Alex Da Kid 与 IBM Watson 搭档合作一起创作歌曲。Watson 将大量的非结构化数据转化为情感洞察，创造出有史以来一种全新的音乐——可以“聆听”受众的音乐。 Alex Da Kid 携手IBM Watson创作故事揭秘_腾讯视频 Watson 分析了近五年的文化和音乐数据，探索全新的情感洞察。 为了解最普遍最主流的话题及主题，自然语言分析 API Watson Alchemy Language 分析了过去 5 年的各类文本，包括诺贝尔和平奖演讲内容，《纽约时报》头版，美国最高法院的裁定，洛杉矶 Getty 博物馆的报告，维基百科文章，热门电影梗概等等。 掌握这些文化主题后，情绪分析 API Watson Tone Analyzer 分析相关的社交媒体内容了解受众对主题的想法和感受。它还分析了过去 5 年 Billboard Hot 100 歌曲中超过 26000 首歌的歌词。Watson Beat 检测出来热门歌曲的作曲过程中，从逐年来不同的节奏、音高、乐器、流派中找出关系模型，帮助 Alex 发现不同声音所反映出的不同情感。 同时, 颜色分析 API Cognitive Color Design Tool 对专辑封面、图像、色彩的分析也启发了 Alex 专辑封面的制作。 新的创作时代已经到来。 新技术激发了前所未有的创造力，新的创作方式将赋予创作者们更大的能量。 00 的生成式艺术和算法创作系列，将带你一起探索（看起来很 Geek 很头疼的）知识和项目，其中很多都是艺术创作领域中前沿和硬核的话题，例如混沌和分型理论（Chaotic &amp; Fractal）、形状语法（Shape grammar）、规则系统（Rule-based system）、马尔可夫模型（Markov Model）、智能主体（Intelligent Agents）、多智能体系统（Multi-agent system）、元胞自动机（Cellular Automaton）等。 道阻且长，行则将至。 感谢你的陪伴。 Ref Sternberg, R. J., &amp; O’HARA, L. A. (1999). 13 Creativity and Intelligence. Handbook of creativity, 251. Philip Galanter. What is Generative Art? Complexity theory as a context for art theory, 2003 International Conference on Generative Art Triarchic theory of intelligence - Wikiwand Harold Cohen Home Page cloudpainter - an artificially intelligent painting robot Qbits for Cubists: Robots Made These Incredible Works of Fine Art | Freedom and Safety Musikalisches Würfelspiel - Wikiwand François Pachet - Director of Spotify Creator Technology Research Lab Flow Machines: AI music-making Neural Nets for Generating Music – Artists and Machine Intelligence – Medium IBM Watson Music - 中国 机器人都能画出《蒙娜丽莎的微笑》了，那还要画家干什么？ 人工智能是怎么创作音乐的？]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>艺术</tag>
        <tag>Creative Coding</tag>
        <tag>Generative Art</tag>
        <tag>Computational Creativity</tag>
        <tag>创意</tag>
        <tag>创造力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/ Jitter 官方教程翻译20 - 迭代和矩阵重采样]]></title>
    <url>%2F180930-jitter-20.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 11 - 矩阵混合 Max/MSP/Jitter 教程 12 - Chromakeying 视频去背景合成 Max/MSP/Jitter 教程 13 - 列表和矩阵 Max/MSP/Jitter 教程 14 - 颜色查找表 Max/MSP/Jitter 教程 15 - 剪刀和胶水 Max/MSP/Jitter 教程 16 - 矩阵定位 Max/MSP/Jitter 教程 17 - 图像旋转 Max/MSP/Jitter 教程18 - 使用已命名的矩阵 Max/MSP/Jitter 教程19 - 使用已命名矩阵的反馈 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 18: Iterative Processes and Matrix Re-Sampling 本教程演示何时应该使用已命名 jit.matrix 对象的更复杂示例，以及如何使用 jit.matrix 对图像增采样（upsampling）和减采样（downsampling）。 patch 左上角包含一个 jit.movi​e，patch 打开时会加载一个静止图像 fuzz_circle.jpg。 单击开关启动 metro。图像出现在 patch 右下角的 jit.pwindow 中： fuzz_circle.jpg 包含一个白色圆圈与黑色背景，在最终矩阵里尺寸被缩放为小的圆形。 Getting Drunk patch 顶部将 jit.movi​​e 中的图像写入链条中的第一个 jit.matrix。bangbang 对象发出的 bang 用 drunk 对象随机变化坐标，来改变 jit.matrix 每一帧的 dstdimstart 和 dstdimend 属性。请注意第一个 jit.matrix 的 usedstdim 属性为 1，它将缩放输入矩阵： 第一个 jit.matrix 只是用来缩放圆形图像以适应输出矩阵的 80 x 60 区域。请注意，格式化缩放图像坐标的消息框，也会逐帧清除矩阵（用 clear 消息），这样就不会残留之前的图像。drunk 改变了圆圈的位置，让它四处抖动。 单击 patch 右下角 jit.pwindow 中的某个位置。圆圈将跳到单击的位置，并从那里开始移动。 在 jit.pwindow 中单击鼠标的结果将发送到 r winclick 对象。route 对象将 mouse 相关的信息抽出来，用 unpack 对象提取前两个元素（鼠标单击的 x 和 y 位置）。然后使用来设置 drunk 对象的新原点。 反馈网络一旦圆圈图像已被缩放并由 jit.matrix 放置好，patch 流程就进入一对名为 blurry 的 jit.matrix 反馈链： 反馈循环 这一部分包含四个 jit.matrix（不包括顶部的一个缩小圆形图像的对象）。其中两个对象同名（blurry），仅用于存储和检索由 patch 的其余部分之前生成的矩阵。最上面的 jit.matrix 将矩阵发送到第一个 jit.op 的右入口。此外，它用 bangbang 发送 bang 到第一个 jit.matrix blurry 让它输出矩阵。该矩阵最终到达 jit.op 的左入口，然后显示（通过 jit.pwindow）并乘以标量（第二个 jit.op 对象）。它最终会覆盖先前的矩阵（进入下面的 jit.matrix blurry）。先不管中间一些对象，可以看到 blurry 矩阵将保留圆形图像前一“帧”的某个版本： 第一个 jit.op @op max 组合新旧图像。@op max 比较两个矩阵中每个单元并保留值较高的那个单元。第二个 jit.op @op * 对象乘以标量（由 patch 右侧的数字框发送到 s fb）使图像变暗： 反馈量指定图像在存储之前变暗的程度 在 patch 的蓝色区域中用标记为 Feedback 的数字框来更改反馈量。单击 jit.pwindow 移动圆圈时，注意圆圈后的轨迹如何增加或减少，这取决于所设置的反馈量。 增采样和减采样图像处理算法的最后一步，涉及这两个对象之间的区域：发送前一帧中保留的矩阵的第一个 jit.matrix blurry，以及合成前后两个矩阵的 jit.op： 用 jit.matrix 重新采样图像 教程 patch 中两个绿色 jit.matrix 重新采样上方的 jit.matrix 的模糊图像矩阵。两个 jit.matrix 中的第一个将 dim 的属性设置为 4 x 4。可以用蓝色区域中标记为 Pixelation 的数字框来更改。这个数字被发送到 jit.matrix 上方的 s dim 对象。 在教程 patch 的蓝色区域中，更改标记为 Pixelation 的数字框。注意圆形轨迹如何变化。 对图像矩阵减采样，jit.matrix 将 320 x 240 矩阵从其输入复制到一个小得多的矩阵中，舍弃多余的数据。得到像素化的图像，可以用矩阵的 dim 控制。 第二个 jit.matrix 将矩阵增采样回到 320 x 240 大小。当后续的对象处理矩阵时，它们有全分辨率图像并将输出全分辨率矩阵。 jit.streak 对象通过随机复制到相邻单元得到好看的像素化轨迹效果。jit.streak 的 prob 属性控制矩阵中任何给定单元格被复制到相邻单元格的可能性。这里的 prob 为 0.5，任何给定单元格都有 50％ 的可能性。 技术细节：默认情况下 jit.streak 将单元格复制到左侧。更改 direction 属性将改变此行为。还有一个 scale 属性可以指定被复制的单元格与其原始值的亮度比值。jit.streak 的帮助文档有更具体的信息。 小结成对命名 jit.matrix 可以有效地存储先前迭代。这些技术可以用合成对象（例如 jit.op）组合先前矩阵与当前矩阵来生成视频延迟效果。还可以使用 jit.matrix 重新采样图像（使用 dim 属性）以更有效地执行算法（矩阵越小，图像处理得越快）并创建像素化效果。jit.streak 对象根据概率因子（prob 属性）随机复制单元格到相邻单元格。 Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 Max/MSP/Jitter 教程 09 - 调整图像颜色 Max/MSP/Jitter 教程 10 - 简单混合 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
        <tag>图像</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译19 - 使用已命名矩阵的反馈]]></title>
    <url>%2F180924-jitter-19.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 11 - 矩阵混合 Max/MSP/Jitter 教程 12 - Chromakeying 视频去背景合成 Max/MSP/Jitter 教程 13 - 列表和矩阵 Max/MSP/Jitter 教程 14 - 颜色查找表 Max/MSP/Jitter 教程 15 - 剪刀和胶水 Max/MSP/Jitter 教程 16 - 矩阵定位 Max/MSP/Jitter 教程 17 - 图像旋转 Max/MSP/Jitter 教程 18 - 使用已命名的矩阵 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Max 7 - Tutorial 16: Using Named Jitter Matrices 本教程讲解在反馈循环（feedback loop）中使用命名的 jit.matrix 。我们将使用随机值矩阵来构建迭代过程（Conway’s Game of Life）。 教程 patch 用 jit.noise 生成随机值的初始矩阵： jit.noise 对象 jit.noise 生成由随机值填充的矩阵。dim，planecount 和 type 属性确定输出矩阵（需要一个 80 x 60 单平面 char 数据矩阵）。jit.op 将随机单元格的值（初始为 0~255）设置为 false（0）或 true（255）。jit.op 的 &gt; 运算符从右入口数字框中获取值并用于比较运算。如果单元格值小于该值，单元格的值将设置为 0，否则设置为 255。发送到 jit.noise 的 bang 将生成新的随机矩阵。 更改附加到 jit.op 的数字框。单击连接到 jit.noise 的按钮，每次都生成一个新矩阵。注意更大的比较值产生更少的白色（255）单元格。jit.op 下面的小 jit.pwindow 显示随机矩阵。单平面矩阵数据由 jit.pwindow 解析为灰度视频。 矩阵反馈patch 顶部的量化（quantized）噪声从 jit.op 传到名为 cellular 的 jit.matrix： 在反馈循环中有两个已命名的 jit.matrix jit.matrix 接收来自 patch 顶部的 metro 的 bang，它连接到一个名为 jit.conway 的对象，其输出连接到另一个同名的 jit.matrix。结果是 jit.conway 的输出（无论它做什么）被写入跟其输入相同的矩阵中，从而创建反馈循环。 点击开关启动 metro。 patch 底部的 jit.pwindow 将显示 jit.conway 的输出。 如果想从一个新的随机矩阵开始，单击连到 jit.noise 的按钮，将新矩阵复制到反馈循环中。来自 jit.op 的矩阵会进入反馈循环中相同的 cellular 矩阵。 生命的游戏jit.conway 对输入矩阵执行名叫 “Game of Life” 的简单元胞自动机算法。该算法由普林斯顿大学的 John Conway 发明，模拟食物供应有限环境中的有机生存周期。矩阵中的单元格被看做是活的（非 0）或死的（0）。比较每个单元与周围的单元。如果一个活细胞有两个或三个活的邻居，它就活着。如果多于或少于该数字，它将死亡（0）。如果死去的细胞恰好有三个活的邻居，它就会变为活的（255）。就这么简单。 每当 jit.conway 接收到输入矩阵时，会开始一轮生命游戏。因此，在反馈循环内使用对象是有意义的，可以看到在同一初始数据集上执行多代算法。 例如，初始随机矩阵： 一些随机矩阵值 jit.conway 在前四次迭代中生成以下矩阵： 在上面的数据集上 Game of Life 的前四代 使用随机矩阵 seeding 反馈循环后，可以打开 metro 并观察算法运行。Game of Life 的设计方式使得矩阵最终将稳定到一组自振荡 (self-oscillating) 细胞单元或空矩阵（a dead world）。在任何一种情况下，都可以 bang 一组新的数字重新开始。 小结使用 jit.matrix 的 name 属性在 Jitter 中创建反馈循环。在对象链的任一端使用两个同名 jit.matrix，可以创建输出将被写入与输入来源相同的矩阵的链条。jit.noise 产生的任意随机数 type/dim/planecount 的矩阵。jit.conway 对输入矩阵做简单的元胞自动处理，在反馈回路中效果最好。 Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 Max/MSP/Jitter 教程 09 - 调整图像颜色 Max/MSP/Jitter 教程 10 - 简单混合 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
        <tag>图像</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译18 - 使用已命名的矩阵]]></title>
    <url>%2F180917-jitter-18.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 11 - 矩阵混合 Max/MSP/Jitter 教程 12 - Chromakeying 视频去背景合成 Max/MSP/Jitter 教程 13 - 列表和矩阵 Max/MSP/Jitter 教程 14 - 颜色查找表 Max/MSP/Jitter 教程 15 - 剪刀和胶水 Max/MSP/Jitter 教程 16 - 矩阵定位 Max/MSP/Jitter 教程 17 - 图像旋转 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 16: Using Named Jitter Matrices 本教程将学习如何使用 jit.matrix 的 name 属性将来自多个源的矩阵数据写入同一矩阵。我们还将研究如何在复制时缩放矩阵的大小，以及如何用 Max 低优先级队列来降低事件的优先级，以支持更耗时的任务。 教程 patch 分为五个彩色区域。中间（浅蓝色）区域包含两个 jit.movi​e 对象。loadbang 对象在 patch 打开时读取两个视频（rain.mov 和 traffic.mov）到 jit.movi​e： 与之前的教程不同，这里的 jit.movi​e 使用 send 和 receive 对象与 patch 的其余部分通信。名为 m1 和 m2 的 receive 对象将消息转发给两个 jit.movi​e 对象。然后发送它们的输出矩阵（使用 send）到 patch 其他位置名为 movie1 和 movie2 的 receive 对象。 patch 顶部的黄色区域包含驱动 patch 中 Jitter 进程的 metro​： metro 驱动两个消息框中的一个 点击开关启动 metro 。 patch 中的三个 jit.pwindow 开始显示图像。 优先级metro 经过 Ggate 和 jit.qball 到达 gate。 metro 发送的 bang 由 gate 分流到两个消息框之一。最终输出矩阵（在 patch 底部的 jit.pwindow 中）将根据哪个消息框被触发而改变。 单击连接到 gate 左入口的两个消息框（1 和 2）。注意底部的 jit.pwindow 如何变化： 最终输出矩阵根据 patch 的消息顺序而变化 两个消息框都将 bang 发送到三个命名相同的 receive 对象（m1，m2 和 output）。两者的区别在于发送消息的顺序。左侧消息框（由 metro 驱动，当 gate 设置为 1 时）将第一个 bang 发送到 jit.movie （rain movie）。最后，patch 底部的 jit.matrix 收到 bang，最终矩阵被发送出去。右侧消息框（由 metro 驱动，当 gate 被设置为 2 时）调换驱动 jit.movie 的两个 bang 的顺序（左 jit.movie 先输出矩阵，然后是右边的 jit.movie）。 当查看两个 jit.movie 和最终的 jit.pwindow 之间发生了什么时，这些消息发送的顺序才有意义。 要点：如果不确定 Max patch 中发生事件的顺序，可以查看 patch 的 trace 的执行方式。在接线中设置断点就可以使用 “Auto Step” 命令逐步执行 patch ，查看它如何运行。但是这对于 metro 效果不好，因为 bang 将持续重启。先在 metro 位置添加按钮用于调试。 名字里面有什么？一旦 jit.movie 接收到 bang，就会向下面的 send 对象输出一个矩阵，然后传递给名为 movie1 和 movie2 的 receive 对象。receive（在 patch 右侧两个相同的区域）连接到 jit.pwindow 以及两个已命名的 jit.matrix 对象： 已命名的 jit.matrix patch 右侧的两个 jit.matrix（以及 patch 底部 jit.pwindow 上方的 jit.matrix）都有名称。这三个对象的名称是 composite。它们共享包含在名为 composite 的矩阵中的数据。 理解了两个 jit.movie 将数据写入相同的矩阵（名称相同的两个独立的 jit.matrix），就明白为什么 bang 的顺序很重要。如果左边的 jit.movi​e 首先发出矩阵，它会将数据写入 composite 矩阵，然后是右边的 jit.movi​e，它将数据写入同一个矩阵。如果两个矩阵写入任何共同的单元格（见下文），那么最后到达的矩阵将覆盖之前单元格中的数据。 目的地维度教程 patch 右侧的两个 jit.matrix 对象将 usedstdim 属性设置为 1。这样可以缩放由 jit.movie 发送的矩阵，以便它们只写入 composite 矩阵的某个区域。 调整标记为 x origin y origin 的数字框，缩放它所连接的两个子 patch p coords。请注意 composite 矩阵如何移动和调整 jit.movie 中两个图像的大小。 图片内的图片 p coords 包含相同的辅助 patch ，用于格式化 jit.matrix 对象的 dstdimstart 和 dstdimend 属性。这些属性分别指定将数据复制到 composite 矩阵时的左上角和右下角坐标。usedstdim 属性告诉 jit.matrix 复制数据时使用这些属性。当 usedstdim 为 0 时，缩放输入矩阵以填充 jit.matrix 引用的整个矩阵。 写入共享矩阵之前先缩放输入矩阵 发送到子 patch 的三个数字由内部对象格式化，生成要填充的输出矩阵的左上和右下区域坐标列表。消息在输出前，用 $ 暂时替代列表中对应的数字参数。 在两个矩阵写入 composite 矩阵之后，最后一件事是发送 bang 到名为output 的 receive 对象： 最后的结果 教程 patch 底部的区域是第三个名为 jit.matrix 的对象。由 metro 发送的 bang 经过一个 trigger 对象发送 bang 到 jit.matrix（让它输出矩阵到 jit.pwindow），紧接一个 clear 消息（0），清除所有名为 composite 矩阵中的单元格。如果不清空矩阵，改变任何jit.matrix 的 dstdimstart 和dstdimend 属性，可能导致残留之前输出位置的图像。 队列优先级当 Max 运算跟不上速度时， patch 顶部的 jit.qball 对象就有了用武之地。metro​ （每隔 50 毫秒发出 bang）正在触发三个独立的操作（从 jit.movi​e 对象写入数据到两个已命名的矩阵，显示数据，清空矩阵以便重新开始）。jit.matrix 写入数据到内部矩阵（这个例子中是 composite 矩阵）并允许后续消息来插队。运行任务时，它允许其他优先级更高的 Max 事件发生。这样可以在前一操作完成之前显示矩阵（或将更多数据写入），从而引起闪烁和其他意外结果。 jit.qball 对象把消息放到 Max 低优先级队列的最后， 在那里其他消息可以被优先处理。如果 jit.qball 在所有当前任务完成之前从 metro​ 得到 bang，它将等到队列中其他所有任务都完成后，再发出 bang。同样，如果另一个 bang 在发出第一个 bang 之前就出现了（即如果 patch 的剩余时间需要超过 50 毫秒才能完成所有事情），第一个 bang 将被抢先（抛弃）而只发出第二个 bang。这让我们可以放心地在 Max patch 中设置极值，而不必担心事件累积过快 Max 处理不过来。 单击标记为 jit.qball bypass switch 的 Ggate 对象，让 metro​ 的输出绕过 jit.qball 。底部 jit.pwindow 中的合成图像开始闪烁，表示消息乱序到达。 通常，发送 bang 到 Jitter 对象将插到已经挂起的事件（例如已经到达但尚未被处理的 bang）前面。不过 jit.qball 提供了对多个 Jitter 对象链的控制，自动调度事件（dropframing）保证消息以正确的顺序到达。 注：在大多数应用中 Qball已被 qmetro​​ 取代。 qmetro​​ 是内置 qball 机制的 metro​​ 对象。 小结命名多个 jit.matrix 为同一个名称，可以在 patch 的不同部分中写入和读取矩阵数据。使用 dstdimstart 和 dstdimend 属性，或者设定 usedstdim 属性为 1，可以在将其复制到 jit.matrix 内部时缩放矩阵。jit.qball 对象把 Max 事件放到低优先队列中来降低优先级，如果没有足够资源来执行，则优先处理其他事件。 Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 Max/MSP/Jitter 教程 09 - 调整图像颜色 Max/MSP/Jitter 教程 10 - 简单混合 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
        <tag>图像</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译17 - 图像旋转]]></title>
    <url>%2F180915-jitter-17.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 11 - 矩阵混合 Max/MSP/Jitter 教程 12 - Chromakeying 视频去背景合成 Max/MSP/Jitter 教程 13 - 列表和矩阵 Max/MSP/Jitter 教程 14 - 颜色查找表 Max/MSP/Jitter 教程 15 - 剪刀和胶水 Max/MSP/Jitter 教程 16 - 矩阵定位 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 15: Image Rotation 使用 jit.rota 旋转和缩放Jitter 提供 jit.rota 对象来旋转和/或缩放图像。旋转和缩放是常见的视频效果，以不同方式组合它们还可以实现万花筒效果。jit.rota 在入口处获取视频数据矩阵（或其他类型的图像），根据对象属性的设置发送已缩放、旋转和以其他方式失真的版本。 打开教程 patch 。loadbang 触发 QuickTime 视频 dishes.mov 读入 jit.movi​​e。单击 “Display” 开关启动 metro 开始播放视频。 视频是一个对着餐盘拍摄的三秒从左到右平移镜头。jit.movi​​e 的循环属性初始化为 2，因此视频来回循环产生了来回平移的效果。 注意：Jitter 对象的许多属性使用参数 1 和 0 表示 “on” 和 “off”，因此可以合理地假设 jit.movi​​e 的 loop 属性也是这样。loop 0 关闭循环，loop 1 打开，loop 2 让视频向前播放，到达 loopend 点时向后播放，而不是跳回到视频起点。 jit.rota 的 theta 属性指定围绕中心锚点的旋转角度。 拖动 “Rotation Angle” 数字框旋转视频。正（或增加）值是逆时针旋转，负（或减小）值是顺时针旋转。旋转角度 - 也就是角度（θ） - 以弧度表示。0 或 2π 的任何倍数（如 6.283185）是正常的直立位置。π 值（3.141593）或 π 的任何奇数倍是颠倒的位置。随意尝试，直到了解 theta 值与 jit.rota 行为之间的关系。 技术细节：jit.rota 用三角法进行大量内部计算，以确定如何旋转图像。如果不是三角学迷，你可能不习惯用弧度来思考角度。平时我们更常使用度数，即一个完整的旋转是 360°。在三角学中更常使用弧度，完整旋转是 2π 弧度。这是因为半径为 1 的圆的周长恰好为 2π，可以用与单位圆相交的点来表示角度。（例如，从单位圆上的一个点开始并绕圆周移动 π/2 的距离，会得到 90° 角度 - 即 π/2 弧度的角度 - 从开始的地方以圆心为中心） 另外，在三角学中，角度的正变化是围绕单位圆逆时针旋转，而在日常生活中，把顺时针运动看做 “正” 或 “增加” 更符合惯例（如钟表时针的转动）。 因此，如果把度为单位的顺时针旋转，转换为以弧度表示，需要将度角乘以 2π，然后除以 -360。 自动旋转除了手动旋转图像外，还可以编写自动化程序提供不断变化的旋转角度。在上一章中，我们编写了一个名为 rotate 的子 patch，它使用 line 对象将色调旋转角度从 0° 增加到 360°。现在做类似的事情，但使用 bang 视频的 metro 来增加旋转角度。为了使用上的友好，用 ° 表示旋转角度，而不是弧度（在子 patch 中转换度弧度单位），另外也显示转速为 “每秒转数”。 在标有 Degrees per bang 的数字框中输入数字 6。这让旋转角度在 metro 每次 bang 时增加 6°。由于 metro 每秒发出 20 次 bang（每 50 毫秒一次），我们可以通过公式 d * 20 / 360 计算每秒的转数（即 d / 18，d 是每次 bang 增加的角度）。现在单击标记为 On / Off 的开关开始自动旋转。 双击 rotate 查看子 patch [rotate]子 patch 中的自动旋转 用度数 * 2π / -360，将用户指定的每次旋转角度转换为弧度量。当一个 bang 进入左入口时，如果正在旋转，bang 让旋转角度增加并添加到 accum 对象中。请注意，每次增加负的角度也 ok，这让图像逆时针旋转。当总旋转角度超过 2π（或 -2π）时，split 将值发送到使用模运算的 expr，并在发送到出口前将其恢复到范围内（重置 accum 中的值）。如过旋转关闭，我们 用 sel 0 检测到该事件，将 theta 角度重置为 0。 关闭子 patch 窗口。单击 On/Off 开关停止自动旋转。 放大或缩小jit.rota 的另一个主要功能是缩放。缩放量由 zoom_x 和 zoom_y 属性决定。这样可以单独放大或缩小水平和垂直尺寸；或者一次更改两个属性来同时缩放。 拖动标有 Zoom 的数字框来放大和缩小。大于 1 的值会放大图像，小于 1 的值会缩小图像。直接在 x 和 y 数字框中输入值分别更改 x 和 y 的缩放尺寸（负缩放值会翻转图像并调整其大小）。 当放大图像（如值为 2）时，图像质量仍然不错，因为我们已经用 interp 1 消息打开 jit.rota 的插值属性。如果关闭 interp，会在放大时产生像素化。当缩小时 interp 没有明显的效果，它几乎浪费了计算资源。（有关像素化和插值，请参阅 Jitter 教程16）不过插值确实可以改善旋转图像的现实，即便图像缩小。 超越边缘将缩放的两个尺寸设置为较小的值例如 0.25。 当图像由于收缩或旋转而未填满整个显示区域时，jit.rota 必须决定如何处理位于图像区域外的矩阵的其余部分。现在 jit.rota 将图像区域外的所有单元格值设置为 0，使它们为黑色。boundmode属性决定 jit.rota 如何处理位于图像边界之外的单元格。不同的可用 boundmode 设置显示在 patch 右上角标记为 Space outside the image 的弹出菜单中。将 boundmode 的值初始化为 1，让 jit.rota 清除所有外围单元格。以下是每个 boundmode设置的含义： 0 Ignor：保持所有外围单元格不变。 1 Clear：将所有外围单元格值设置为0。 2 Wrap：根据需要重复图像以填充矩阵。 3 Clip：对于所有外围单元格，继续使用图像边界单元格的值。 4 Fold：重复图像，向相反方向翻转。 对于缩小图像时的特殊效果，尝试将 boundmode 属性设置为 2（Wrap）以获得 “Warhol” 复制图像效果，或设置为 4（Fold）得到万花筒效果。 现在试着重新打开自动旋转，组合旋转和缩放，并修改参数（每次 bang 的度数、缩放、Space outside the image）。 尝试完以后，关闭自动旋转并将缩放属性（ zoom_x和 zoom_y）调整回 1。 调整锚点和偏移目前为止，我们一直使用图像的中心作为旋转锚点。其实可以选择任意一点。用 anchor_x 和 anchor_y 属性设置旋转中心。现在是 160 和 120（图像尺寸的一半），可以在标记为 Anchor 的数字框中更改。 尝试不同的锚点，然后在 Rotation Angle 数字框上拖动查看效果。可以尝试 0,0 或 40,30 或 160，-120 或 320,240。将 boundmode属性设置为 1 可以更清楚地看到不同旋转的效果。请注意，anchor_x 和 anchor_y 值是相对于矩阵的左上角指定的，但它们可以超出矩阵维度的边界。 此外可以用 offset_x 和 offset_y 属性在缩放和旋转后，将图像移动到输出矩阵中的其他位置。 要最有效地查看此内容，请先单击 patch 右下角的 pvar 对象上方的消息框。这会将旋转角度/边界模式/缩放/锚点恢复到本章开头的设置。（已经为相关的 UI 指定了名称，以便通过 pvar 与它们通信）现在将缩放数字框设置为 0~1 的某个值来缩小图像。 使用 Location offset 数字框，更改 offset_x和 offset_y 值来移动图像。同时设置 boundmode 4，在 “kaleidoscope” 模式下查看效果。 完成后，将位置偏移值重置为 0。 鼠标控制旋转我们为你设计了另一种旋转图像的方法。 单击 jit.pwindow 显示对象，按住鼠标，围绕对象中心以小圆周运动拖动。 jit.pwindow 跟踪鼠标移动，当鼠标按下时，它会以鼠标消息的形式将坐标信息（和其他鼠标信息）发送到右输出口。鼠标消息的前两个参数是相对于 jit.pwindow 左上角的 x 和 y 坐标。使用这些坐标来计算鼠标相对于 jit.pwindow 中心的角度并发送到 jit.rota 作为theta 属性的参数。 用 jit.pwindow 中的鼠标位置作为控制信息 技术细节想知道这是如何计算的吗？ 如果将 jit.pwindow 的中心点视为原点 0,0，把当前鼠标位置看做是位于该点圆周上的点，那么可以基于这两点得到一个直角三角形。获取鼠标坐标 y / x 的反正切值，得到鼠标相对于 jit.pwindow 中心的角度。 接收到传入的 x 和 y 坐标要做的第一件事是做转换，使它们以 jit.pwindow 为中心。 1expr-1.0*atan(($i1-160.)/(-1.*$i2+119.5))+($i2&gt;=120)*-3.141593 用 x 坐标减去 160 （x 值现在在 -160~160）并将 y 坐标乘以 -1（这样上移时值正向增大）然后加上 119.5。（如果正好添加120，那么每次从 jit.pwindow 得到 120 的 y 坐标时都会尝试在 expr 中除以0，这是一个未定义的数学运算）转换了 x 和 y 坐标，用 atan(y / x) 来获得弧度，然后乘以 -1 使鼠标顺时针旋转，从而使图像顺时针旋转。 此方法仅在 180° 范围内有效，因为反正切函数无法区分鼠标位置与圆上相对点之间的差异（这两个点 y / x 的值相同）。因此每当鼠标的 y 坐标进入 jit.pwindow 的下半部分时，我们在 θ 角度上添加 -π 的偏移量来区分那些来自另外一边的位置。（表达式中的最后一部分） 请注意，此表达式仅适用于 jit.pwindow 中的点 160,120。如果想创建一个适用于任何大小 jit.pwindow 中心点的表达式，要使用 getsize 消息获取 jit.pwindow 的维度，并用 size 值作为表达式中的变量。正如书上所说，“我们把这个练习留给读者”。 小结jit.rota 对象用 theta 属性指定旋转角度，以弧度表示旋转图像。它还提供了使用 zoom_x和 zoom_y 属性放大和缩小图像的简便方法。用 anchor_x和 anchor_y 属性更改旋转的中心点，用 offset_x 和 offset_y 属性在输出矩阵中移动生成的图像。可以用 boundmode 属性更改 jit.rota 处理位于结果图像之外的矩阵单元格的方式。结合这些功能，除了缩放和旋转之外，你还可以获得重复图像和万花筒效果。 缩放和旋转涉及 jit.rota 相当密集的内部计算，这些操作对计算机的处理器提出了很高的要求。本教程中未提及的其他属性，可以调整旋转公式中的几乎每个系数，提供更多扭曲和旋转图像的可能性。请查看 jit.rota 文档说明。 要同时管理对如此多属性，可以设计自动流程以生成属性值，和/或交互式控件来更改值。 Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 Max/MSP/Jitter 教程 09 - 调整图像颜色 Max/MSP/Jitter 教程 10 - 简单混合 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
        <tag>图像</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译16 - 矩阵定位]]></title>
    <url>%2F180909-jitter-16.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 11 - 矩阵混合 Max/MSP/Jitter 教程 12 - Chromakeying 视频去背景合成 Max/MSP/Jitter 教程 13 - 列表和矩阵 Max/MSP/Jitter 教程 14 - 颜色查找表 Max/MSP/Jitter 教程 15 - 剪刀和胶水 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Max 7 - Tutorial 14: Matrix Positioning 在矩阵中数据定位本教程将讨论如何获取矩阵的一部分数据，放到另一个矩阵中不同位置。要重新定位数据的原因可能有很多。这里讨论的技巧主要为了生成各种视觉效果，但对于其他目的也适用。 我们将展示如何分离矩阵的一个区域，将其放到另一个矩阵中的指定位置，调整大小（对于拉伸、像素化和模糊等视觉效果非常有用）并动态移动它。 jit.window打开 Window_options 子 patch 在 patch​ 左下角有一个教程 3 介绍过的 jit.window 对象。它创建一个单独的窗口来显示矩阵内容。在大多数其他教程章节中都使用 jit.pwindow​。 jit.window 和 jit.pwindow​ 非常相似 - 除了一个是打开单独的窗口而另一个使用 Patch 中的矩形区域 - 它们有许多相同的属性和消息。但也有一些差异，这将使用 jit.window 来展示一些特性。 你可能看不到 jit.window 打开的 Display 窗口，因为它隐藏在 Patch 窗口后面。我们可以让 Display 窗口浮动 - 一直在浮动在 Max 每个窗口之上，同时仍然与 Patch 窗口交互。为此要用 floating 1 消息打开 jit.window 的浮动属性（默认为 0）。 打开 Window_options 子 patch​ ，单击标记为 Display as floating window 开关，将 floating 1 消息发送到 jit.window。 使窗口“浮动”在其他窗口前面 输入到 jit.window 的屏幕坐标 - 450 60 770 300 - 指定了 320 像素宽，240 像素高的显示区域。（如何为 jit.window 指定屏幕坐标，请参阅本章后面的说明和/或教程 3） 从一个 jit.matrix 到另一个现在加载图片并尝试修改。 单击消息框 importmovie sunset.jpg 将图片加载到 patch 顶部的 jit.matrix 中。打开标有 Display On/Off 的 metro，开始向 jit.matrix 发送 bang。 用 jit.window 显示图像之前，bang 将矩阵（通过 jit.hue）发送到第二个 jit.matrix。在那里能够修改属性以指定显示矩阵的哪个部分。 发送矩阵给另一个 jit.matrix，然后到 jit.window 我们已经在 patch​ 中间的 preset 中为 UI 对象保存了几个配置。 选择 preset 中的配置 1 会发送 dim 16 12 消息将下方的 jit.matrix 的尺寸更改为 16x12。 dim 消息改变jit.matrix的维度 输入矩阵的尺寸是 320x240，但是接收 jit.matrix 的尺寸仅为 16x12，它尽可能显示接收的矩阵，但必须丢弃大部分信息。这会导致图像像素化（指用低分辨率 - 较小的像素 - 来显示图像时产生的马赛克效果）。即使 jit.window 能够显示全分辨率 320x240 的图像，它接收的矩阵现在只有 16x12。出于显示目的，它按需复制像素，将 16x12 矩阵「扩展」为 320x240。 拖动标有 “Change actual matrix dimensions” 的两个数字框，查看不同的像素化效果。 插值现在将数字框设置回 16 和 12，然后单击标记为 Interpolate in window to smooth pixelation 的开关将 interp 1 消息发送到 jit.window。 在 jit.window 中打开插值 现在由 jit.window 在输入矩阵和扩展到 320x240 之间插值，而不是复制 16x12 像素来制作一堆 20x20 像素块。也就是说，当它扩展图像时，在每个单元格值与其输入矩阵中的相邻值之间，创建平滑的颜色渐变，因此 320x240 矩阵中从一个单元到另一个单元的所有变化都尽可能渐进发生。插值会产生极大的模糊，因为输入和输出矩阵的大小差异很大。 再次点击开关，发送 interp 0 消息给 jit.window 设置 interp 的属性为 0（关闭）。在标记为 Change actual matrix dimesions 的数字框中输入新的矩阵尺寸，减少图像像素化：例如，80 和 60（现在像素化块每个只有 4x4）。点开关重新开启插值。请注意，在这种情况下模糊减轻了，因为插值只发生在 4 个像素上。再次关闭插值。 现在点击标记为 Interpolate in matrix to smooth pixelation 的开关，打开 jit.matrix（而不是 jit.window）的插值。 减小矩阵的大小时，插值就不明显 这没有太大变化。因为 jit.matrix 仍然只能发送 80x60 矩阵。在这种情况下的插值（缩小而不是放大矩阵时）可以忽略不计。 再次点开关关闭 jit.matrix 的插值。 隔离矩阵的一部分在 preset 中，选择配置 2。现在只能看到图片的一小部分。 这个配置将 jit.matrix 的尺寸恢复为 320x240。但是仍然可以使用一些属性来隔离矩阵的特定部分而不改变整个矩阵的实际尺寸： srcdimstart​ ，srcdimend​ 和 usesrcdim。 向 jit.matrix 发送三条新消息来设置这三个属性：dimstart 40 150，dimend 119 209 和 usesrcdim 1。这些消息指定输入矩阵的子集，并将这些值作为全尺寸（在本例中为 320x240）矩阵发送出去。输入矩阵的这个子集在 jit.matrix 「扩展」（按需复制单元格），以填充输出矩阵的大小。srcdimstart​ 和 srcdimend​ 属性被忽略。 设置 srcdimstart​ 和 srcdimend​ 属性的消息中，单词紧跟的是描述每个维度内起点和终点的单元索引。dimstart 40 150 和 dimend 119 209 消息告诉 jit.matrix 在水平维度中使用来自单元格 40~119 的特定 80x60 区域，在垂直维度中使用单元格 150~209。 本章中讨论了三种指定矩形区域的方法！关键要明确每种情况下指定的内容。 在 jit.window 中输入显示区域的坐标。在计算机的操作系统中，屏幕坐标原点在左上角，是 0,0; 往右两个像素（左起第三个像素）是 2,0; 该点向下 5 个像素（向下的第六个像素) 是 2,5。输入矩形的左-上-右-下的参数坐标描述屏幕的矩形区域。 jit.matrix dim 属性指定维度大小（单元格数量）。 srcdimstart​ 和 srcdimend​ 属性指定单元格索引（包含）。单元格索引从 0 到单元格数量 - 1（平面的索引也类似）。对于 320x240 矩阵，第一维中单元格索引从 0~319，第二维索引从 0~239。对于 jit.matrix 的维度，用 srcdimstart​ 后跟起始单元格索引，来指定每个维度的起点，用 srcdimend​ 后跟结束单元格索引，来指定终点。 输入矩阵仅有 80x60 像素，而目标矩阵为 320x240。较小矩阵扩展为较大矩阵会导致像素化。但是现在扩展发生在 jit.matrix 内部（即在它的“源”区域和“目标”大小之间），而不是在 jit.matrix 和 jit.window 之间（正如之前减小 jit.matrix 尺寸）。如果想通过插值来平滑像素化，必须在 jit.matrix 中完成。在 jit.window 中启用插值没有意义，因为它已经从 jit.matrix 接收到 320x240 矩阵。 要验证这一点，请打 interpolate in window... 开关发送 interp 1 到 jit.window。因为我们试图将 320x240 矩阵插入到 320x240 显示区域，因此不会发生任何变化。关闭开关，将 jit.window 差值属性设置回 0。现在用另一个开关将 interp 1 消息发送到 jit.matrix。现在得到了我们想要的平滑效果。 尝试输入新值来更改 srcdimstart​ 和 srcdimend​ 属性的参数。这样可以将图片的任何特定区域隔离为“源”区域。为源区域选择的尺寸将决定图片在扩展到填充 320x240 输出矩阵时的失真程度。 翻转图像你可能认为 srcdimend​ 属性的参数（源区域的终点单元索引）应该大于 srcdimstart​。并非如此。 选择 preset 的配置 3 垂直翻转图片。 顶部和底部在第二维中翻转 如果在垂直维度中指定小于起始索引的结束单元格索引，jit.matrix 仍将这些索引与目标矩阵的垂直维度中的起点和终点相关联，从而有效地反转值的方向。 可以在水平维度中进行翻转以水平翻转图像。如果在两个维度上翻转源区域，会得到将图像旋转 180° 的视觉效果。 选择 preset 的配置 4。 这个例子在两个维度上翻转了源区域，将大小减小到 160x120 ，并打开 interp 属性来平滑像素化。 调整输出矩阵的大小既然可以指定矩阵的源区域，那么也可以指定目标区域。这仍然不会改变输出矩阵的大小，dim 属性为 320x240。但是会更改源区域所在的区域。输入矩阵的源区域，将被放置在输出矩阵的目标区域中（按需扩展/收缩）。位于目标区域之外的输出矩阵的单元将保持不变。 选择 preset 的配置 5。整个输入矩阵被挤压到输出矩阵中心的 80x60 矩形中。 首先要注意的是 usesrcdim 属性已被关闭，因此我们再次使用整个输入矩阵作为源（现在忽略 srcdimstart​ 和 srcdimend​ 属性）。usedstdim 属性已打开，输入将被放在输出矩阵的任意指定部分。dstdimstart 和 dstdimend 属性指定矩阵中间的单元为目的地：dstdimstart 120 90 和 dstdimend 199 149。我们关闭了 interp 属性，因为现在正在收缩图像。 另外，我们已打开标记为 Erase previous image 的开关。这将数字 1 发送到 if $2 then clear 对象。该语句的 if 部分现在为 true ，因此每次对象在左入口处收到消息时，将发送 clear 消息。这会在显示图像后立即清除 jit.matrix 对象的内容，为将要接收的下一个 jit.matrix 准备。这样可以确保目标区域外的所有单元格的值都为 0，输出矩阵的未使用区域将显示为黑色。 更改指定目标尺寸的数字框中的值，在 Display 窗口中移动（并调整尺寸）图片。 关闭标记为 Erase previous image 的开关停止 clear 消息。更改 dstdimstart 和 dstdimend 的参数，注意这次有什么不同。之前的目标区域仍然在 Display 窗口中绘制，因为矩阵中的那些单元格尚未清除，如果它们位于新目标区域之外，将保持不变。这样产生了前面图像的残留效果，可进一步获得特定的视觉效果。 在矩阵中移动图像数据自动设置 dstdimstart 和 dstdimend 属性过程，我们可以在矩阵中移动数据，使图像看起来在实时移动。 选择 presets 的配置 6。 这将启动 move_around​ 子 patch 内部的自动过程，持续提供新的参数给 dstdimstart 和 dstdimend 属性。用 patch 上方的开关启动，数字框为每次移动到新目的地指定时间（以毫秒为单位）。 双击 patch move_around​ 查看子 patch 内容。目前为止我们只使用了子 patch​ 的右半部分。 子 patch [move_around​] 中的目标移动过程 右入口中的 rate 值是 metro 的时间间隔。定期触发 4 个 random 对象，随机选择新的左-上-右-下索引。这些目标点与时间值一起发送到 line 对象，再以每 50 毫秒间隔发出，把目标区域逐步转移到这些新的随机点（显示图像的速率）。在子 patch​ 之外，这些值用作 jit.matrix 的 dstdimstart 和 dstdimend 属性的参数。 这个子 patch​ 包含一些值得注意的技巧。第一个技巧我们已经实现过，它让 dstdimend 的参数可以超过矩阵的 320x240 范围。例如，使用 random 640 对象作为水平维度，然后从结果中减去 160，得到从 -160~479 的结束单元格索引。这样做是为了增大目标区域，以便图像变化时看到较大的视图，这也意味着图像将更频繁地移动到窗口边缘。值得注意的是，可以指定超出矩阵实际单元格的目标边界，jit.matrix 能够在该区域内完整显示图像（当超出矩阵尺寸时裁剪）。 第二个技巧比较细节：使用 sel 0 对象来检测 metro 何时关闭，用它来触发每个 line 对象的 stop 消息，以便它们在自动流程关闭后不会继续发送值。 关闭 [move_around​]子 patch​ 窗口。 更改，调整大小和移动源图像现在我们也将更改源图像自动化。 选择 presets的配置 7。 与设置目标区域的方式大致相同，现在需要不断改变图像的源区域。我们现在看到源矩阵的一些矩形子集的动画视图（使用 srcdimstart​ 和 srcdimend​），不断调整该视图的大小并在窗口中移动它（使用 dstdimstart 和 dstdimend）。由于[move_around​]子 patch​ 随机选择源矩形和目标矩形，因此图像有时也会被翻转。jit.matrix 的插值属性已经打开，平滑源图像被拉伸时出现的像素化。 要更清楚看到变化，打开标记为 Erase previous image 开关。 关于尺寸的更多信息本教程介绍了如何更改 jit.matrix 的维度，以及如何在对象中指定源和目标区域。为了便于讨论和可视化，我们在二维矩阵内指定源矩形和目标矩形。这也可以用于任意维度的矩阵。（srcdimstart​ ，srcdimend​ ，dstdimstart 和 dstdimend 的参数个数对应于 jit.matrix 的维度）。 例如，如果有一个三维矩阵，这些参数可用于指定矩阵的虚拟 3D 空间中的六面体。 注意：某些专门处理 2D 矩阵的 Jitter 对象（例如 jit.movi​​e），源和目标区域将始终为矩形区域。在这些对象中，源区域和目标区域在名为 srcrect 和 dstrect 的单个属性中定义，这些属性用四个参数来指定矩形的边界（左上角和右下角）单元格。 Hue Rotation为了增添一点多样性，在两个 jit.matrix 中间增加 jit.hue 对象。（教程 9 详细介绍了 jit.hue） 选择 presets配置 8 并查看正在运行的 jit.hue。 修改色调角度 这个配置关闭 usedstdim 但打开 usercdim，并在 jit.matrix 中启用插值以模糊扩展的图像。rotate 子 patch 自动旋转 jit.hue 的色相角度。 双击打开 rotate 查看子 patch。 [rotate]子 patch​ 右入口的值指定完成 360° 色调旋转的时间（以毫秒为单位）。当 1 进入左入口时，数字 360 与该时间值组合，指示 line 对象在该时间内从 0 到 360，每 50 毫秒发出一个新的值。 请注意，line 的第一个 typed-in 参数包含一个小数点，说明 line 发送浮点数而不是整数以提高精度（而且 jit.hue 的 hue_angle 消息接收浮点数）。当line 到达 360，右出口发出 bang。用它将 line 设置回 0，然后 re-bang pack 对象开始下一个旋转。当左入口处接收到 0 时，sel 1 对象直接将其传递到 line 停止重置色调角度为 0。 关闭[rotate]子 patch​。 选择 preset 配置 9。它基本上整合了 patch​ 中所有自动化和图像处理技巧。这次 jit.matrix 的目标尺寸变化设置为 200 毫秒，以更快的速率产生效果。 全屏显示当你用 Max patch​ 创建了想要的图像，并想以更优雅的方式显示结果时，可以让 jit.window 全屏。它的 fullscreen 属性打开时，jit.window 使用整个屏幕作为显示区域。如果不勾选 inspector 中的 fsmenubar 属性，将隐藏菜单栏。 关于 jit.window 全屏功能，有几点需要注意。 首先，一旦全屏（特别是隐藏了菜单栏时），无法再使用鼠标退出全屏。所以需要在 Max patch​ 中设置让全屏属性恢复为 0 的方法。 其次，只有一个 jit.window 可以全屏。如果有多个 jit.window 对象争夺全屏访问权限，则最近将全屏属性设置为 1 的对象将填满屏幕。 此外，即使 jit.window 全屏，其分辨率也由其实际尺寸（即其 rect 属性的参数）决定。例如，如果 rect 属性指定了 320x240 的矩形，那会作为图像的分辨率，即使屏幕尺寸远大于此。 在 Window_options 子 patch​ 中，包含了使用空格键打开和关闭 jit.window 全屏属性的功能。jit.window 将 fsmenubar 设置为 0。这在全屏时隐藏顶部菜单栏（Mac）。 使用空格键切换到全屏显示 尝试使用空格键打开和关闭全屏。 要获得更抽象的视觉效果，请将 colorswatch.pict 图像导入到 patch 顶部的 jit.matrix 中，然后尝试不同的配置。 本教程使用静止图像作为源素材，以便查看演示效果，当然也可以使用视频。 小结隔离和重新定位矩阵中的某些数据有不同的方法。jit.matrix 的 dim 属性设置矩阵的实际尺寸。打开 jit.matrix 的 usesrcdim 和 usedstdim 属性，可以使用输入和输出矩阵的指定区域，它们被称为源（source）和目的（destination）区域。 使用 srcdimstart​ 和 srcdimend​ 属性指定这些区域的单元格边界（将起始和结束单元格设置为源区域的角点）和 dstdimstart 和 dstdimend 属性（用于目标区域）。 这些属性不会改变矩阵的实际大小，当 usercdim 和 usedstdim 打开时，它们指定输入矩阵的某部分将显示在输出矩阵的哪个部分。如果源区域和目标区域的形状（大小）不同，jit.matrix 将扩展或收缩源区域以适合目标区域。这会导致重复或丢失数据，但可以产生有趣的拉伸或像素化效果。源区域和目标区域可以使用 Max patch​ 的其他部分的数字来动态更改，以便交互式或自动修改图像的大小、形状和位置。 interp 属性打开时，如果目标区域的尺寸大于源区域，jit.matrix 在它们之间插值（提供中间值）。这可以平滑像素化效果，并模糊相邻单元格的变化。 jit.window 用已经指定的 rect 属性大小的矩形区域，显示它接收的任何尺寸的矩阵。如果输入矩阵的大小与显示区域的大小不同，图像将被 jit.window 扩展、缩小或扭曲。这也可以用于拉伸和像素化效果。 打开 jit.window interp 时，可平滑拉伸和像素化。 要使用图像填充整个屏幕，可以打开 jit.window 全屏属性，并用 fsmenubar 0 消息隐藏菜单栏。（要留下一些方法让 Patch 窗口回到前台） 我们已经演示了调整矩阵数据的大小、重新定位、翻转和插值以生成视觉效果（如拉伸，扭曲，模糊和像素化）的技巧。 Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 Max/MSP/Jitter 教程 09 - 调整图像颜色 Max/MSP/Jitter 教程 10 - 简单混合 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
        <tag>图像</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译15 - 剪刀和胶水]]></title>
    <url>%2F180908-jitter-15.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 11 - 矩阵混合 Max/MSP/Jitter 教程 12 - Chromakeying 视频去背景合成 Max/MSP/Jitter 教程 13 - 列表和矩阵 Max/MSP/Jitter 教程 14 - 颜色查找表 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 13: Scissors and Glue 本教程学习如何使用两个简单的对象来切割和组合二维矩阵的矩形区域。 教程 patch 有两个互补的 Jitter 对象：将矩阵切割成大小相等的小矩阵的 jit.scissors; 将多个矩阵粘贴到一起的 jit.glue。还会简要介绍 router 对象，它可以将 Max 消息从多个源引导到多个目的地。 读取视频 patch 左上角的 loadbang 自动发送 read traffic.mov 消息给 jit.movi​​e 加载交通镜头的视频。 点击 patch 顶部的开关启动 metro。视频出现在底部较大的 jit.pwindow 中。有趣的是，图像被切割成四个象限，出现在分开的的 jit.pwindow 中。 切割jit.scissors 把包含视频的矩阵分割成四个小矩阵： jit.scissors 将任意尺寸/类型/平面数的矩阵切割成更小的矩阵，然后在不同出口发送。@rows 和 @columns 属性指定每次接收到矩阵时分割成多少个小矩阵。这里 jit.scissors 将图像拆分为四个小矩阵（2 列 2 行）。这些单独的矩阵以列优先顺序发送到各出口（从左到右，然后从上到下）。 jit.scissors 有两个属性非常重要： 1）出口数量在创建对象时就确定。只有在对象框中指定行和列属性，才会生成对应数量的出口。例如，jit.scissors @rows 10 @columns 2 将创建一个有 20 个出口的 jit.scissors 实例（包括用于查询属性的最右出口），如果 jit.scissors 没有参数，就只会生成一个出口。可以用 Max 消息更改行和列属性，但是无法添加超过对象初始化时的出口数量。 2）jit.scissors 发送的矩阵大小等于矩阵切片的大小，而不是整个原始矩阵。例如，教程 patch 中的四个较小的矩阵，每个都是 160x120 个单元，而不是 320x240。 Routing the Matrices由 jit.scissors 输出的四个小矩阵，被发送到两个不同的地方： jit.pwindow 和 router 对象。彩色接线显示每小矩阵被发送到了哪里。 router 对象 router 是 gate 和 switch 的组合。它有两个参数（输入口数量和输出口数量），由左入口的消息指定。router 能处理的大多数消息与 MSP 对象 matrix~ 相同。因此可以跟 matrixctrl 对象一起使用。 router 右侧的四个入口从 jit.scissors 的四个矩阵出口获取输入。receive routeit 对象从 patch 的右下方控制 router 的 s routeit 获取消息。router 最左边四个出口连接到 jit.glue 对象，我们稍后会讨论。 控制路由器 发送消息 patch $1 后跟入口号($1)和出口号到 router， 会在该入口和对象的出口之间建立虚拟连接。到达该入口的任何消息会转发给相应出口。如果先前已有入口连接到该出口，patch 消息将切断该连接以支持新连接。 patch 中的 radiogroup 对象控制四个小矩阵（到达入口）被发送到 router 的哪些出口。入口和出口从 0 开始编号，所以 2 1 在 router 的 3 入口和 2 出口建立连接。 单击 radiogroup 控件并观察下方 jit.pwindow 的图像如何变化。注意 router 如何使剪切的矩阵，出现在底部合成图像的四个象限中。 整合的胶水patch 底部的 jit.glue 做与 jit.scissors 相反的事情。行和列的属性指定入口数而不是出口数，以网格排列的输入矩阵合成一个矩阵输出。 将相同的矩阵发送到 jit.glue 的四个入口 要点：与 jit.scissors 一样，jit.glue 只能在对象初始化时创建入口和出口，对象框中的行和列属性将确定入口数。此外，由 jit.glue 生成的输出矩阵的大小，等于所有小矩阵的大小（例如，四个 160x120 矩阵将合成一个 320x240 矩阵）。 jit.glue 默认当从左入口接收到新矩阵时，只输出复合矩阵。如果断开 jit.glue 最左边的入口，就不能再获得任何新的输出矩阵。syncinlet 属性可让 jit.glue 发送输出到不同的入口。syncinlet 值为 -1 时，jit.glue 在任一入口收到新矩阵时都输出新的合成矩阵。虽然看似不错，但会增加大量冗余工作，降低 Jitter 的帧处理速率。 小结jit.scissors 对象切割矩阵成更小的、大小相等的矩阵。jit.glue 对象把相同大小的矩阵合并到一起生成复合矩阵。两个对象的行和列属性分别确定出/入口的数量，以及矩阵被切割或合成的方式，这在对象创建时就要给出。router 以任意方式连接多个入口处的消息到多个出口，跟 MSP matrix~ 对象类似。 Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 Max/MSP/Jitter 教程 09 - 调整图像颜色 Max/MSP/Jitter 教程 10 - 简单混合 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译14 - 颜色查找表]]></title>
    <url>%2F180907-jitter-14.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 11 - 矩阵混合 Max/MSP/Jitter 教程 12 - Chromakeying 视频去背景合成 Max/MSP/Jitter 教程 13 - 列表和矩阵 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 12: Color Lookup Tables 本教程将讲解如何使用颜色查找表（lookup tables）重新映射 Jitter 矩阵内的数据。jit.charmap 对象是为此而设计的。我们还将研究生成查找表矩阵的不同策略，包括 jit.gradient 对象。 查找过程查找表（通常称为传递函数/transfer functions）是一个数组，以数字为表的索引。检索存储在该索引（地址或位置）的数字来替换原数字。任何函数 graph - 每个 x 值（地址）有相应的 y 值（输出）- 都可以用作查找表。Max 对象如 funbuff，table 和 MSP buffer~ 对象是常用的查找表。本教程将以类似的方式使用 Jitter 矩阵。 打开教程 patch 读取图像 patch 左上角有一个 jit.movi​​e 对象，读取两个文件。初始化对象（通过 loadbang）并加载文件 colorwheel.pct。也可以点击 rain.mov 消息加载视频。可以随意切换两个图像源。 单击 patch 顶部的开关启动 metro。色轮同时出现在顶部和底部的 jit.pwindow。底部第三个（矩形）jit.pwindow 中出现渐变。 jit.charmap 的输出和查找表矩阵 patch 底部有一个jit.charmap 对象，用它来重新映射图像中的单元格值。对象有两个入口，左入口连接到顶部的 jit.movi​​e。右入口连接到 jit.matrix colortable。名为 colortable 的矩阵只有一维共 256 个单元，有四个 char 型数据平面。这是jit.charmap 用来重新映射左边矩阵中单元格的颜色查找表。带有名字 ctable 的receive（一般缩写为 r）对象从 patch 的其他位置接收数据并发送到 jit.matrix。打开顶部的开关发送一个 bang 到 jit.matrix colortable，它将矩阵消息发送到jit.pwindow 和 jit.charmap。 jit.charmap 用输入（左）矩阵中的值，指向（右）矩阵中对应的位置并复制那里的值，生成输出矩阵。如果发送给jit.charmap 的矩阵包含一个在四个平面中值为 100 50 35 20 的单元格。如果查找表在平面 1 第 100 个单元格的值是 73，平面 2 第 50 个单元格的值是 25 ，平面 3 的第 35 个单元格的值是 0，平面 4 第 20 个单元格的值是 203，输出单元的值是 73 25 0 203。 jit.charmap 查找表是有 256 个单元格的一维矩阵，其平面数量与要重新映射的矩阵相同。因为 char 矩阵的值范围是 0~255，因此需要 256 个数字来覆盖查找表。 生成查找表patch 的右上侧包含三个 multislider，可以设计 colortable 查找表矩阵 1-3 平面的传递函数： 用 multislider 的值填充查找表矩阵 multislider（有 256个 整数 slider，范围为 0~255）把列表发送到下面的 jit.fill对象。它用 multislider 的值替换 colortable 矩阵当前存储在平面1-3（即红，绿和蓝）的值。当矩阵采用新值时，jit.fill发出 bang 到 patch 左边连接到 jit.charmap 右入口的 jit.matrix。这里忽略了平面 0，因为只有将 4 平面矩阵视为视频时，它才包含 Alpha 值。 patch 中的 jit.matrix 和 jit.fill 的名称相同（colortable）。这样两个对象从同一矩阵读取和写入，一个对象（jit.fill）生成另一个对象（jit.matrix）可读取的数据，而不必在两个矩阵之间复制数据。这跟许多 MSP 对象（例如 peek~，play~，groove~）可以共享存储在单个 buffer~ 中的样本数据类似。关于命名矩阵请参见教程 13，18 和 19。 在 multislider 中随意绘制一些形状，看它如何影响查找表（较小的jit.pwindow）和 jit.movi​​e 的输出图像。可以来回切换两个图像源。 如果想重置任一平面为 y = “x” 传递函数（使所有值保持不变的固定斜率直线），可以单击相应 multislider 上的按钮。名为 p clear 的子 patch 用 uzi 初始化了 multislider。 要点：与许多 Max 对象一样，Jitter 对象会保留存储在一个入口中的矩阵，即使另一个入口接收到了新矩阵。所以这个 patch 的 metro 只需要触发 jit.movi​​e。包含查找表jit.charmap 的jit.matrix 只需要在所存储的数据发生变化时输出值。 以下是一些查找表及其结果： 三组 multislider及其生成的颜色查找表和输出颜色轮 例 1 中，红色和蓝色查找表调换而绿色正常。结果是输入图像中较大的红色和蓝色值在输出时变小，反之亦然。所以色轮的白色背景现在看起来是绿色的（单元格值 0 255 255 255 映射为 0 0 255 0）。 例 2 设置绿色平面为 0（查找表在整个输入值范围内设置为 0）。红色和蓝色平面如果超过阈值也设置为 0，这时值会突然上升（红色比蓝色上升得更明显）。结果是色轮大部分都是黑色的（特别是在绿色区域）。红色平面仅在非常高的值（即色轮背景中的品红色）中可见。 例 3 正常映射红色平面。绿色平面是抛物线形状，极值映射为高，中间阴影映射为低。蓝色平面除了中间调中被归零的范围，其余正常。这种非线性表现为贯穿彩色轮顶部和右侧的红色“断层线”。 有无数组合可以重新映射矩阵单元格的值。接下来研究另一个以更精确方式重新映射颜色值的对象。 jit.gradient 对象打开 Duotone 子 patch，它显示了使用 jit.gradient 生成查找表的方法： 使用 jit.gradient 对象 jit.gradient 生成两个单元格的值之间平滑渐变的单维 char 矩阵。start 和 stop 属性是指定这些单元格的值列表。例如，start 属性 0 0 0 0 和 end 属性 0 0.5 1.0 0.5 将生成从黑色（矩阵中的单元格 0）到浅绿色（矩阵中最后一个单元格）的渐变。 我们已经用参数指定 jit.gradient 为 256 单元宽，这样当它改变时可以存储在 jit.matrix colortable 中。请注意， jit.gradient 在属性列表中使用浮点数来指定 char 值（即属性中用值 1.0 指定 char 值为 255）。 用 swatch 对象输出的 RGB 列表转换为 ARGB 浮点数来获得格式化属性。将属性发送到 jit.gradient 对象后，它接收触发对象发出的 bang，将矩阵输出到 patch 左侧的jit.matrix。 尝试在 swatch 中选择颜色。start 和 end 属性指定查找表的边界，所以输入图像的值表现为在两种颜色之间变化的双色调外观。patch 顶部的 multislider 将反映 jit.gradient 所生成的查找表。 使用颜色渐变作为查找表 例 1 是翻转的图像。查找表的 start 是白色（start 0 1.0 1.0 1.0），end 是黑色（end 0. 0. 0. 0）。结果是输入值 0 映射到 255，反之亦然（y = 255 - x）。 例 2 和 3 是双色调渐变，将色轮的光谱重新映射到红色和橙色（例 2）以及橄榄色和青色（例 3）之间。请注意，根据色轮中不同点的原始颜色，渐变曲线变得更陡峭或更和缓。 jit.gradient 的另一个属性是 cheby，它指定在矩阵开始和结束值之间的变形曲线。cheby 属性的参数列表是浮点数。这些参数是 Chebyshev polynomials（见下文的切比雪夫多项式）不同阶数的振幅。使用查找表时，这些特殊功能曲线会产生不同的效果。patch 中设置 cheby 属性的 multislider，可以指定前 8 个 Chebyshev polynomials 曲线的相对振幅，形状如下（如果将它们视为从黑色到白色的过渡）： 用 Chebyshev orders 1-4（顶行）和 5-8（底行）生成的梯度 技术说明：切比雪夫多项式通常用作数字合成算法中波形整形音频信号的查找表（它们的特殊属性可以将正弦波形扭曲成等效于不同阶数幅度的谐波频谱）。MSP lookup~ 对象可以与加载到 buffer~ 中的函数一起来完成音频信号处理（跟本教程中的图像处理类似）。更多内容请参阅 MSP 手册中的教程 12：综合波形整形。 复位 gradient 中开始和结束点（单击上面的消息框），缓慢调整 multislider控制的 cheby 属性。观察颜色轮在颜色消失并在不同区域重新出现时如何变化。 在 jit.gradient 中使用 cheby 属性时，即使将渐变起点和终点保留为黑色和白色，也可以得到一些非常有趣的颜色变形效果。以下是视频剪辑 rain.mov 的一些例子： 不同梯度曲线对雨水彩色频谱的影响 左边图像显示 rain.mov 中未处理的静止图像。中间图像显示了当使用二阶切比雪夫多项式（图像中最暗的区域现在位于色谱的中间）生成梯度时色谱的变化。右侧图像显示更复杂的梯度，色谱显示多个峰和谷。 patch 顶部的 multislider反映查找表的当前状态（由 jit.gradient 生成的矩阵被发送到 p showit 子 patch 中的 jit.iter，在那里数字被组合以设定 multislider 的状态）。尝试生成渐变，然后调整 multislider 手动修改查找表。这样 jit.gradient 就作为更复杂的查找表的起始点。 小结使用 jit.charmap 映射 char 矩阵中单元格的值。jit.charmap 的右入口接收 256 单元矩阵来定义要用于输入矩阵数据的查找表（或传递函数）。可以使用多种方法定义查找表，包括使用 jit.fill从 Max 列表生成矩阵，或使用 jit.gradient 对象根据 cheby 指定的曲线形状，在开始和结束单元格值之间生成颜色渐变属性。 Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 Max/MSP/Jitter 教程 09 - 调整图像颜色 Max/MSP/Jitter 教程 10 - 简单混合 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
        <tag>颜色</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译13 - 列表和矩阵]]></title>
    <url>%2F180906-jitter-13.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 11 - 矩阵混合 Max/MSP/Jitter 教程 12 - Chromakeying 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 11: Lists and Matrices 本教程讲解如何用 Max 列表和 jit.fill 对象来填充（部分）矩阵，以及如何用 jit.spill 检索（部分）矩阵内容作为列表。还将演示通过矩阵名称远程访问矩阵内容。 矩阵名称patch 左侧有一个蓝色的 jit.matrix。第一个参数是矩阵的名称 smallbox。其他参数表示矩阵有 1 个 char 平面，包含一维 12 个单元格。 矩阵唯一名称：smallbox 教程 4 介绍过，每个矩阵都有一个名称。如果没有另外指定，Jitter 将自动命名（类似 “u040000114” 奇怪的唯一名称）。名称表示存储矩阵的内存位置。为什么要另外给矩阵命名呢？这样可以告诉其他对象如何找到矩阵的内容。引用矩阵的名称，对象之间可以共享数据，无需接收 jit_matrix 消息就可以远程访问矩阵的内容。 Jitter 使用矩阵名称来指代内存位置，这跟 Max 的 value 对象类似。名称相同的对象可以有多个，只在其中一个中存储数值，其他对象就可以检索这个值。该名称实际上只有一个内存位置，它们共享相同的数据。同样，可以有多个名称相同的 jit.matrix 对象，它们共享相同的数据。其他对象（例如 jit.fill）只需知道名称即可访问矩阵内容。 jit.fill教程 4 展示了在矩阵特定位置指定数值的 setcell消息，以及检索位置内容的 getcell 消息。现在来看看如何使用 jit.fill 对象将一个值列表存入矩阵中。（本章后面还将展示如何从矩阵中一次检索多个值） 在 patch 的左上角有一个包含 12 个数值列表的消息框。它连接到 jit.fill smallbox 对象。矩阵名字是 smallBox。 jit.fill 在命名矩阵中存储一个值列表 单击消息框将列表发送到 jit.fill smallbox。对象在名为 “smallBox” 的矩阵存储这些值。单击 jit.matrix smallbox 上方的按钮显示 smallbox 矩阵的内容来验证。这些值由 jit.print 打印在 Max Console 中，并在狭长的 jit.pwindow 中显示为灰阶。 这个例子的列表长度恰好可以填充整个矩阵。这不是必须的。可以在 1D 或 2D 矩阵的任意连续部分中放置任何长度的列表。 偏移属性双击打开 random_lists 子 patch。 默认情况下，jit.fill 将值列表放在矩阵最开头。也可以设置 jit.fill 的 offset 属性将列表指定到矩阵中的任何位置。这里演示如何使用 offset。 首先指定偏移量，后跟列表 上面的例子随机选择单元格索引作为 jit.fill offset 消息的参数，然后向 randbox 矩阵中的该索引处，发送要存储的 16 个元素的列表。 点击开关启动 metro。每隔半秒，16 个元素的列表被写入 randbox 矩阵中的新位置。 用 clear 消息清除 randbox 矩阵的内容，然后观察 metro 将列表写入新的随机位置。metro 也正在触发 jit.matrix randbox 将其内容发送到 jit.pwindow 显示。 使用 multislider打开 draw_list 子 patch。 现在我们知道如何将预先定义的值列表存到矩阵中。如果要在 Max 中交互式生成列表并实时放置在矩阵中，需要用构建列表的对象比如 multislider 和 zl。 multislider 对象包含一组 slider，并一次发送所有 slider 的值作为列表（slider 可以小到一个像素宽，这样它看起来更像一个图形而不是一组单独的控件）。在窗口中移动任何 slider 时会发送整个列表，释放鼠标按钮时再次发送列表。在 draw_list 子 patch，有一个包含 256 个滑块的 multislider，可发送从 0~255 的值，它恰好将 256 个 char 值发送给 jit.fill graybox 对象。 拖动鼠标在 multislider 中设置 256 个滑块。释放鼠标按钮时，256 个值的列表将发送到 jit.fill graybox。注意矩阵单元的亮度如何与滑块的高度相对应。 一旦 jit.fill 在入口处收到列表，就会写入指定的矩阵（offset 属性指定的）位置。完成时 jit.fill 会发出 bang。可以用它来触发另一个动作，例如显示矩阵。 前两个例子故意不使用 jit.fill左侧出口的 bang，以便清楚看到，jit.fill 远程写入到指定命名的矩阵，而不是通过物理连接。当然 jit.fill 左侧出口的 bang 很方便，只要填充完就会触发矩阵的输出。 使用 zl打开 collect_values 子 patch 某些情况下你可能想用矩阵来存储 patch 某处的数字消息：MIDI消息、来自 UI 对象的数字等。可以向 jit.matrix 发送 setcell 和 getcell 消息，也可以将消息收集到列表中，然后用 jit.fill 将它们一次性存到矩阵中。 zl 是多功能的列表处理对象，由第一个参数指定模式和行为。当第一个参数是 group 时，它会收集左入口的消息直到一定数量，然后将这些数字作为单个列表发送出去（这些值按接收顺序分组）。在 collect_values 子 patch 中有一个 zl group 256 对象，每当它从左入口收集够 256 个值，就把这个列表发送到左出口（并清除内存）。 向上和向下移动 slider 为 zl 对象生成 256 个输入值。当 zl 收到 256 个数字时，它把这个列表发送到 jit.fill midibox，由它写入 midibox 矩阵，然后 bang jit.matrix midibox 1 char 256 对象以显示矩阵。 zl 将包含 256 个元素的列表发送到 midibox 矩阵，然后 bang jit.matrix 来显示结果 如果电脑连接了 MIDI 键盘，可以使用 MIDI 键盘的 modulation wheel 移动 slider。（MIDI 和 Jitter 的交互将在后面的教程中详细探讨） 值*2 获得 0~254 范围 可以用list length数字框向右入口发送新的值来更改 zl数据集的列表长度。用 loacation 数字框发送 offset 消息给 jit.fill 告诉它想要存储列表的位置。改变列表长度和位置，可以将任意数量的值放入矩阵的任何连续区域。 更改 zl 的 list length （如 100），设置 jit.fill 的 offset 属性（如 50），然后移动 slider 把值的列表存到矩阵中的指定位置。 jit.fill 和多平面矩阵打开 fill_separate_panes 子 patch jit.fill 可用于多平面矩阵，但它一次只能填充一个平面。jit.fill 要处理哪个平面由 @plane 属性指定。在fill_separate_panes 子 patch 中创建了另一个名为 colorbox 的矩阵，这次有四个char 数据平面。设置了三个 multislider 和三个 jit.fill 对象，每个对象都对应 colorbox 框矩阵的不同颜色平面。 各自填充每个平面 拖动三个彩色 multislider 填充三个颜色平面。 这样可以快捷生成矩阵中 RGB 平面不同强度的曲线。显示矩阵的 jit.pwindow 宽为 256 像素，所以矩阵 64 个单元格都显示为 4 像素宽的条带。如果打开 jit.pwindow 的 interp 属性，相邻频段之间的差值会被插值平滑。 单击 interp $1 消息框上方的开关，将消息发送到 jit.pwindow。（注意，这也会发送 bang 到 jit.matrix 重新显示内容） 与前一个示例相同，但打开了 jit.pwindow 的插值 jit.fill 和二维矩阵目前为止所有的例子都是一维矩阵。用列表（一维数组）通过 jit.fill 填充二维矩阵时会发生什么？jit.fill 对象在第一个维度里尽可能排列列表（尽量排满指定的行）然后绕到下一行继续排列。下面演示排列的过程。 单击标有 2D 的按钮，把 jit.matrix colorbox 对象变成 8x8 二维矩阵，jit.pwindow 也会调整为更合适的形状。无论何时更改矩阵尺寸，它都会清除之前的数据，所以需要再次单击三个 multislider 重新填充矩阵。仍向每个 jit.fill 对象发送 64 个元素的列表，并用 8 个元素填充矩阵的 8 行。 要点：这里没有演示如何使用带有 offset 属性的 2D 矩阵，当 jit.fill 的 name 属性命名 2D 矩阵时，offset 属性需要两个参数： x 偏移量和 y 偏移量。 jit.fill 仅适用于 1D 和 2D 矩阵。 相同的例子，列表填充 8x8 矩阵（未插值） 开启插值 jit.spilljit.spill 是 jit.fill 的补充。它在入口处接收 jit_matrix 消息，将矩阵值作为列表发送到左出口。当使用红色 multislider ，下面的 jit.spill 发送平面 1（红色）的值到左出口并在消息框显示内容。 用列表显示 colorbox 矩阵的平面 1 的内容 jit.spill 也有 list length 和 offset 属性 如果需要发送一系列单个数字消息而不是单个列表消息，iter 对象了解一下。 从矩阵中获取一些值并分成不同的消息 jit.iter打开 individual_values 子 patch。 jit.iter 对象可以检索矩阵中的每个值。当它收到 jit_matrix 消息时，会按矩阵中单元格的顺序发出消息序列：单元格索引（中间出口），然后是该单元格的值（左出口）。如果是一个大矩阵，会有一大堆消息试图在（Max’s scheduler）单个 tick 中发送出去，所以当它完成所有发送后，jit.iter 会向右出口发送一条完成的消息。 在 individual_values 子 patch 中有一个 jit.iter 对象，它接收来自 jit.matrix readbox 1 char 256 的矩阵信息。我们使用 swap 对象切换单元格索引的顺序（来自 jit.iter 中间出口）和单元格值（来自 jit.iter 左出口）。然后用该单元格的值作为想要存储在表对象中的 y 值，用单元格索引作为 x 轴索引。 点击 multislider 发送内容给 jit.fill（然后 bang jit.matrix 并传达其内容给 jit.iter）。双击 tabel 对象打开图形窗口，看到它包含与 readbox 矩阵相同的值。 请注意，使用 jit.iter 填充表格的技巧适用于中等大小的一维单平面矩阵，因为表格是一维数组。但是像jit.movi​​e 对象的 2D 矩阵有四个平面，jit.iter 的中间（单元索引）出口输出双元素列表，左出口的值列表是四元素列表。 对于一维或小的 2D 矩阵，或者在较大矩阵中搜索特定值或模式， 用 jit.iter 扫描整个矩阵是很方便的。 小结发送 setcell 和 getcell 消息给 jit.matrix，可以存储或检索矩阵中的单个值（如教程 4 所示）。如果要存储或检索列表，就要用 jit.fill 和 jit.spill。它们可以检索 1D 或 2D 矩阵的任何平面，在任意起始单元位置存储任何长度的列表。 multislider 和 zl 对象用于实时生成列表消息。用鼠标拖动 multislider 可以绘制列表。使用 zl group 收集多个单独的数值到一个列表中，然后一次性发送到 jit.fill。 可以设置 jit.fill（或 jit.spill）的 offset 属性来指定矩阵中的起始单元格位置。jit.fill 对象要设置名称属性（或者发送name 消息或输入[name]参数），指定它将填补的矩阵名称。它用这个名称访问矩阵，并且在列表写入矩阵完成时发出 bang。可以用它来触发其他操作。 发送矩阵给 jit.iter，可以输出整个矩阵中所有值。 Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 Max/MSP/Jitter 教程 09 - 调整图像颜色 Max/MSP/Jitter 教程 10 - 简单混合 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
        <tag>列表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译12 - Chromakeying 视频去背景合成]]></title>
    <url>%2F180904-jitter-12.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 11 - 矩阵混合 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 10: Chromakeying 本教程介绍如何使用 jit.chromakey 对两个源视频Chromakeying（去背景合成，chroma-纯色，key-抽离颜色）。还将学习如何使用 suckah 对象获取屏幕上任意像素的颜色。 打开教程 patch，由 loadbang 发送 read 消息到两个 jit.movi​​e 对象，自动读取两个视频（oh.mov 和 traffic.mov）： 通过 loadbang 初始化 patch 其他参数也由连接到右侧消息框的 loadbang 初始化。消息框发送消息到 patch 中其他名为 receive 的对象完成初始化。（参见教程 18：Remote Messaging）。 点击开关启动 metro。三个 jit.pwindow 对象中出现了图像。开关不仅可以启动和停止 metro，还可以启动和停止两个 jit.movi​​e 视频播放。 教程 patch 的下半部分（三个 jit.pwindow 中的两个）是这样的： jit.chromakey 对象 点击左侧 jit.pwindow 对象的蓝色区域（即视频中男性头部后面的区域）。 第三个 jit.pwindow（在 patch 右下角）将显示： 历史说明：蓝屏合成（在蓝色哑光背景下拍摄现场镜头的过程）在 20 世纪 30 年代就出现了，目的是为了后期用其他图像替换蓝色。蓝屏合成涉及平版印刷分色，起初是非常昂贵的电影工艺，它（现在更常见的是绿屏合成）已经演变成影视制作中最常见的特效。通过数字叠加完成 Chromakeying（蓝屏处理的术语）让它更普及。Chromakeying 在电视行业中常被称为 CSO（色彩分离叠加），由 1960 年代开发它的 BBC 团队命名。蓝屏发明者 Petro Vlahos 在 1994 年被授予了电影艺术与科学学院终身成就奖，以表彰这项无可替代的技术。 jit.chromakey 对象去背景合成 - 将一个图像叠加在另一个上面，选择性替换颜色的过程 - 由 jit.chromakey 对象实现。通过指定颜色和其他参数， jit.chromakey 在第一个（左侧）矩阵中检测包含该颜色的单元，并在生成输出矩阵时，用第二个（右侧）矩阵中的对应单元替换它们。这样，来自第一个矩阵的单元叠加到第二个矩阵上。 可以选择任何颜色为要去除的背景，请尝试点击左侧 jit.pwindow 中的其他区域。不同的颜色会从男人的脸上移除，而显示出第二个视频中的图像。 消失的面孔（第一部分） jit.chromakey 用 color 属性（称为参考颜色）来定义中心色。这个属性是一个值列表，应用于等待抠图的矩阵中的所有平面。tol 属性定义中心色的容差范围。此范围内的颜色也会被去除。 将 jit.chromakey 与 char 矩阵一起使用时，属性值的范围在 0.0~1.0，然后映射到 char 数据所需的 0~255。所以可以将属性设置为 color 0 0 1.0 0，而不是 0 0 255 0。tol 为 0.5 时会去除距离参考色一半色阶的所有颜色（key all values within half of the chromatic distance from the reference color）。tol 为 0 时只会用精确的参考色来完成抠图。 再次点击左侧视频中的蓝色区域，然后调整 tol 属性查看输出的变化。在低容差时，左图中的一些蓝屏将保留。容差值非常高时，男人脸部的部分可能会消失。 在教程 patch 中，我们通过点击不可见的对象来设置 jit.chromakey 的颜色属性。解锁 patch，会看到左侧 jit.pwindow 上面的同心红色方块区域： suckah 对象 该区域是名为 suckah 的 Max UI 对象，可以在 interface 工具栏找到它： 对象面板中的 suckah 对象 suckah 对象获取它所覆盖的屏幕像素的 RGB 值。当单击对象时（patch 处于锁定状态），它会获取 0.0~1.0 范围内的浮点数值。例如，单击视频中的纯蓝色区域，suckah 会发送 0 0 1.0 列表（suckah 的初始版本使用 0~255 范围。如果需要，可以在 inspector 中选择这个设置） suckah 对象获取 RGB 颜色列表后，用 prepend 0 在前面加上 0（增加 alpha 值到列表最前面）来设置 jit.chromakey 的颜色属性。然后再 prepend color 并发送给 jit.chromakey。 Chromakey 选项jit.chromakey 对象有附加属性：minkey，maxkey 和 fade。当矩阵从左入口进入，jit.chromakey 基于该矩阵在内部创建一个灰度（单平面）遮罩。输入矩阵中，在容差（tol）范围内颜色值的单元格，将设置为遮罩中的 maxkey 属性值（默认为 1）。容差范围之外的区域乘以 minkey 属性（默认为 0）。如果 minkey 和 maxkey 为 0 和 1，生成的图像在去背景的位置应该看起来是白色，而在要保留原始图像的位置看起来是黑色。 将得到的遮罩及其负片，分别乘以右矩阵和左矩阵。然后添加乘法的结果以形成合成图像。下图说明了这个过程： 遮罩（minkey 为 0，maxkey 为 1）和合成效果 maxkey 属性设置右边输出矩阵的强度，minkey 属性设置左边矩阵的强度。如果要反转 minkey 和 maxkey 属性，chromakey 将被反转： minkey 为 1，maxkey 为 0（反向色度键）的合成效果 fade 属性在被去除和保留的区域之间生成插值，可以生成柔化边缘。左边矩阵中的颜色略微超出了容差范围，但是在参考颜色的 tol + fade 的范围内，在原始颜色和右侧矩阵对应单元格中的颜色之间插值。插值取决于 fade 值的大小，以及颜色距离容差边界有多远。 尝试不同的 tol，fade，minkey，maxkey 和 color 值。观察五个属性如何影响不同的抠图效果，以及 minkey 和 maxkey 值如何相互补充。 完全去除背景很困难。选取合适的 tol 和 fade 属性值，才能确保第一个图像中的区域对第二个图像起作用。包含很多细节的图像，通常会在抠图和保留区域之间颜色变化的区域，出现轻微的斑点。此外，单一颜色（例如蓝色）基本上满足不了去背景的需要，必须使用一系列值。但是你会发现，希望去除的颜色会出现在想要保留的区域中！平衡所有因素以获得满意的效果，是使用 jit.chromakey 对象最困难的部分。 小结jit.chromakey 对象实现两个 Jitter 对象的 chromakeying。可以使用 color 和 tol 属性设置抠图的颜色范围，并用 fade，minkey 和 maxkey 值来定义两个矩阵在合成时的工作方式。suckah 对象放置在 jit.pwindow 上方，点击即可以获取所在位置的颜色。 Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 Max/MSP/Jitter 教程 09 - 调整图像颜色 Max/MSP/Jitter 教程 10 - 简单混合 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
        <tag>Chromakeying</tag>
        <tag>抠图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译11 - 矩阵混合]]></title>
    <url>%2F180903-jitter-11.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 Max/MSP/Jitter 教程 09 - 调整图像颜色 Max/MSP/Jitter 教程 10 - 简单混合 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 9: More Mixing 本教程探讨用 jit.scalebias 和 jit.op 实现交叉渐变的技巧。它比 jit.xfade 方法复杂一些，但更灵活。 混合和交叉淡化上一章讲解了 jit.xfade 用缩放（乘法）和加法以不同的比例混合两个矩阵。本教程将使用 jit.scalebias 和 jit.op 对象来自动执行这些数学运算。 这样做有一些好处。首先能清楚地演示混合和交叉渐变的数学过程。其次能看到 jit.op 如何对两个输入矩阵做数学运算。（在教程 5 中展示了 jit.op 和标量值如何作用于单个矩阵）。第三，它可以分别指定两个矩阵的缩放因子，比 jit.xfade 更灵活。最后，jit.op 可以实现许多不同类型的数学运算，我们可以尝试其他组合矩阵的方法来得到不同的视觉效果。 再说 Mixing打开教程 patch 用乘法和加法混合/交叉渐变矩阵 缩放因子设置为 0~1 之间的 jit.scalebias 将两个视频 scaled down（变暗）。下面会看到用 jit.op 的不同：两个入口的输入都是矩阵。这时 jit.op 分别对每个值执行指定的数学运算，将左矩阵中的每个值与右矩阵中的对应值配对。这样我们可以把两个矩阵的所有值相加来混合图像。 这些乘法和加法的结果与 jit.xfade 对象做内部运算的结果一样。可以试试用 patch 右上角的控件来交叉渐变视频（与上一章几乎完全相同）。 启动 metro 并使用 Mixer slider 执行从视频 A 到 B 的交叉渐变。 请注意，渐变值直接作为视频 B 的缩放因子，同时 !- 1 对象用 1 减去该值，得到视频 A 的缩放因子。这样，两个缩放因子的和总是等于 1，就像在 jit.xfade 中一样。 使用其他运算符组合矩阵加法是两个矩阵最常见的运算。更改 jit.op 的 op 属性，可以尝试许多其他运算并查看其视觉效果。 在 Transition Time 数字框中设置一个非常长的交叉渐变时间（例如 10000 ms）。在 Operator 弹出菜单中选择 + 以外的运算符。现在点击 Go To switch 开始渐变，可以看到两个视频矩阵的运算如何进行。 弹出菜单包含 jit.op 各种运算符中的一部分。以下是菜单中选项的简要说明。 + 把 B 值加到 A -m 从 A 中减去 B，然后取模将结果折算回所需的数值范围 max 使用 A B 中较大的值 absdiff从 A 中减去 B，然后取差值的绝对值 | “按位或”; 二进制操作，A 或 B 为 1，结果为 1 ^ “按位独占或”; 二进制操作，A 和 B 值不相同，结果为 1，否则为 0 &gt; 如果 A 大于 B，结果为 1（或 char 255），否则为 0 &lt; 如果 A 小于 B，结果为 1（或 char 255），否则为 0 &gt;p 如果 A 大于 B，结果为 A，否则为 0 &lt;p 如果 A 小于 B，结果为 A，否则为 0 其他运算符请查看 jit.op 对象参考文档。 你也可以直接拖动 jit.scalebias 上方的数字框，单独设置混合比例。还可以尝试超过 0~1 范围的值。 jit.scalebias vs. jit.op @op *这个 patch 用 jit.scalebias 来做缩放乘法，而没有用 jit.op 与 * 运算符。为什么呢？ 当 jit.op 操作 char 数据时，val 属性范围是 0.0~1.0（浮点数）或 0~255（整数）。如果想将 char 数据乘以 0~1 的某个值，用 jit.op 就可以。如果想乘以其他范围的值，就要用 jit.scalebias，它允许 scale 的值超过 0~1 范围。 jit.scalebias 仅用于处理 4 平面 char 矩阵，在这个例子中没问题。所以在这个 patch 中，因为是在 4 平面 char 矩阵上做运算，并且想使用超过 0~1 范围的缩放因子，所以使用了 jit.scalebias。 小结你可以用 jit.op 对两个不同矩阵中的值执行各种数学运算。 jit.op 对每个值执行指定的数学运算，将左矩阵中的每个值与右矩阵中的对应值配对。当两个矩阵的 dim，planecount 和 type 属性不同时，jit.op 使用左入口矩阵的属性。在混合两个视频图像时，不同的数学运算符可以生成各种视觉效果。 Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译10 - 交叉渐变]]></title>
    <url>%2F180902-jitter-10.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 Max/MSP/Jitter 教程 09 - 调整图像颜色 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 8: Simple Mixing 本教程介绍如何使用 jit.xfade 对象混合和淡入淡出两个图像。 混合两个视频源混合两个图像是视频处理中最常见和最有用的技巧之一。 最简单的视频混合是将两个图像叠加起来，可以调整任一图像的强度。逐渐淡出一个图像，同时淡入另一个图像，可以创建图像之间的平滑过渡淡入淡出效果。 Jitter 处理混合和过渡渐变的对象是 jit.xfade。 技术细节：这种类型的混合，将一个矩阵中的每个值，加到另一个矩阵各单元和各平面的相应值上，并输出所有总和的矩阵。但这样让输出图像的值都大于任何一个输入图像，会比原始图像更亮（如果矩阵包含 char 数据，某些值甚至会在 255 处裁剪）。所以在它们相加之前应该减小一个或两个图像的强度。例如，为了按相同比例混合两个图像，在相加之前将它们缩小相等的量（例如，0.5 倍）。 jit.xfadejit.xfade 对象接收两个输入口的矩阵，缩放两个矩阵中的值，然后把两个矩阵相加并输出混合后的矩阵。两个输入矩阵缩放因子由 xfade 属性决定。xfade 是 1~0 之间单个（浮点） 数值，是右输入口矩阵的缩放因子。左输入口的矩阵按 1-xfade 的比例缩放。如果逐渐将 xfade 值从 0 增加到 1，输出矩阵将从左输入到右输入淡入淡出。 打开教程 patch。loadbang 对象自动读取两个源视频。开启metro。开始只会看到左侧视频。拖动滑块更改 xfade 值来控制左右矩阵的混合。 值为 0.5 时左右矩阵以相同比例混合 自动交叉渐变交叉渐变是最常见的图像转换方式之一。它可以非常缓慢 - 持续几秒 - 或者非常快速，只持续几分之一秒，只比突然跳帧略微平滑。 在 patch 左上角，有一个从视频 A 到 B （B 到 A）的自动渐变控制器。交叉渐变可以持续用数字框指定的任意过渡时间。 自动发送不断变化的 xfade 值 用数字框设置一个比较长的渐变时间（例如 5000 ms），可以看到交叉渐变器的效果。单击 Go To 右侧的开关淡入视频 B。 Go To 开关实际上是一个范围为 2 的 slider和一个 * 100乘法器，所以只会发送 0 和 100 两个值。单击开关右侧发出值 100，pack 发出消息 100 5000，line 对象在五秒内发出 0~100 的连续值（每 50 毫秒一个新值）。然后将这些值乘以 0.01，得到平滑变化的从 0~1 的 xfade 值。 小结叠加两个矩阵是最简单的混合视频图像的方法。想要控制两个图像的混合比例，首先要按某个因子缩放每个矩阵。想从一个图像渐变到另一个图像，将一个图像的缩放因子从 1 减小到 0，另一个从 0 增加到 1。 jit.xfade 对象专门混合和/或交叉渐变两个矩阵。xfade 属性指定两个矩阵之间的混合比例。将 xfade 值从 0 连续增大到 1 可实现平滑的交叉渐变。可以使用 line 或其他 Max 计时对象来自动化交叉渐变。 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>视频</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译09 - 调整图像颜色]]></title>
    <url>%2F180901-jitter-09.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 Max/MSP/Jitter 教程 08 - 调整颜色 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 7: Image Level Adjustment 本教程介绍如何调整 Jitter 矩阵中图像数据的亮度、对比度和饱和度，以及色调和色调旋转(hue rotation)的概念。 教程 patch 中有两个新对象：jit.brcosa ，控制矩阵中图像数据的亮度（brightness）、对比度（contrast）和饱和度（saturation），以及 jit.hue，旋转图像的色调。 亮度，对比度和饱和度打开并查看图像 点击 read colorwheel.pct 消息框打开文件 colorwheel.pct。点击开关启动 metro 开始显示视频。 patch 底部 jit.pwindow 中会出现一个色轮： jit.pwindow 展示了穿越过两个对象的图像。我们先谈谈 jit.brcosa，然后再到 jit.hue。 jit.brcosa 对象将 4 平面 char 矩阵看作 ARGB 图像数据，可以调整矩阵数据的亮度、对比度、饱和度。三个属性的默认值是 1.0，这样矩阵保持不变： 使用 jit.brcosa 对象 更改 jit.brcosa 对象的属性并观察输出矩阵的变化。 与参考颜色（通常为黑色）相比，图像的亮度是指整体亮度/暗度。更改亮度属性相当于将矩阵中的值乘以该值。亮度值为 0 的图像是黑色；大于 1.0 的亮度值值将逐渐增加所有非 0 单元格直到白色（255）。值 0.5 使图像明显变暗，将值的范围从 0~255 降到 0~127。下面的色轮显示了一些亮度值：亮度值分别为 0.5，1.5 和 10 的色轮 用这种方式调整时，单元格的值会被裁剪为 0 和 255。这就是为什么亮度为 10 的那个图像基本上是白色，颜色只显示在原始矩阵中一/多个可见颜色平面（RGB 或平面 1,2 和 3）为 0 的区域。 图像对比度可以表示为图像中的颜色偏离整个原始图像的平均亮度的量（见下文）。当jit.brcosa 的对比度属性增加到 1.0 以上，高于整个矩阵平均亮度的单元变亮（增加），低于平均值的单元变暗（减少）。结果是矩阵图像 dynamic expansion，亮值更亮，暗值更暗。低于 1.0 的对比度设置则相反，较暗的色调变浅，较浅的色调变暗，直到对比度为 0.0，只保留整个图像的平均灰度。负值会以相同的总体对比度反转图像的颜色。 技术细节：矩阵的平均亮度可以通过平均矩阵中所有单元格的值来计算，各平面互不干扰（获得 Alpha，red，green，blue 平面各自的平均值）。然后将三个平面乘以公式： L = .299 * Red+ .587 * Green + .114 * Blue L 值就是整个矩阵的平均亮度，jit.brcosa 用它来确定调整对比度时扩展的阈值。 以下是一些对比度设置： 比度设定为 0.3，2，-1 和 100 的色轮 第一个例子中色轮的对比度急剧下降（单元格的值都接近矩阵的平均亮度）。第二个例子中对比度增加。请注意色轮中间较浅的色调开始接近白色。第三个示例显示了负值对比度。颜色与原始颜色相反，但矩阵的平均亮度与原始颜色相同。最后一个例子是大幅增强对比的结果。该示例中的单元值被极化为0 或 255。 图像饱和度反映了单元格中主要颜色与次要颜色的比率。随着饱和度值降至 1.0 以下，单元格中的所有颜色值将变得相似，变成去饱和的灰度。高于 1.0 的值将使颜色彼此远离，从而强化了主色。与对比度类似，饱和度属性的负值将反转颜色，但保留与原始颜色相同的亮度关系。 饱和度值为 0.2,2 和 -1 的色轮 第一个图像是去饱和的，矩阵中的每个单元格值都趋近于该单元格的亮度值。第二张图像过饱和，颜色比原始图像更亮（或更暗）。第三个图像保持色轮的原始亮度，但反转了颜色。 Hue and Cryjit.hue 对象可以旋转输入矩阵的色调。设置 hue_angle 属性会将输入矩阵的色调旋转指定的度数（以度为单位）： hue_angle 属性旋转输入矩阵的色调 矩阵单元的色调可以看作是其基本颜色（例如，品红色）。图像色调在色轮上从红色变为绿色、蓝色，再变为红色。用 0-360 度数指定的色调值，以及图像的饱和度和亮度，可用描述特定的颜色，这与 RGB 值描述唯一颜色的方式非常相似。向前旋转图像的色调，我们移动颜色光谱的红色部分，使其显示为绿色，光谱的绿色部分显示为蓝色，蓝色部分显示为红色。饱和度和亮度不会改变。负色调旋转会将红色变为蓝色。以 120 度为增量的色调旋转将使图像与原始色调精确地移位一个（或多个）色彩平面。 技术细节：我们的眼睛通过视网膜锥体的感知器来感知颜色（还有一种被称为 rods 的感知器专门探测微弱的光，但是不识别颜色）。我们眼睛的锥体响应三种不同波长的光来区分：L-senstive receptors 感知长波长的光（红色），M-senstive receptors 感知中波长光（绿色），以及 S-senstive receptors 感知短波长的光（蓝色）。跟听觉系统被加权以更好地感知人类语音范围内的频率一样，为了感知环境最关键的中间波长，我们的视锥细胞的分布也经过了加权处理。于是我们眼睛中的绿色感知器大约是其他两种颜色的两倍。所以上面的亮度公式将几乎 60％ 的感知亮度分配给图像中的绿色值。 单击开关以自动化色轮的 hue_angle。请注意，当 hue_angle 达到 360 度时，会恢复原始矩阵图像。 色轮在各种色调之间旋转（0~360 度） 小结jit.brcosa 和 jit.hue 对象控制输入矩阵的亮度，对比度，饱和度和色调。你可以使用这两个对象调整动态水平（例如自动曝光），校正色彩或实现指定色调的位移。 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
        <tag>颜色</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译08 - 调整颜色]]></title>
    <url>%2F180831-jitter-08.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 Max/MSP/Jitter 教程 07 - ARGB 颜色 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 6: Adjust Color Levels jit.scalebias本教程进一步讨论了上一章的颜色话题，并介绍专门用于修改矩阵 ARGB 颜色平面的对象：jit.scalebias。 “scale” 是缩放因子，乘以给定的数值。”bias” 是加上一定的量来偏移某个值。组合乘法和加法，可以实现输入值到输出值的线性映射。 因为 jit.scalebias 修改图像中的 ARGB 颜色信息，所以它只处理 char 数据类型的 4 平面矩阵。（有关 ARGB 颜色和 char 数据的内容，请参阅 教程 7） 用 char 类型数据计算前一章讲到，char （8位）数据可以表示 0~255 之间的整数值，或 0~1 之间的小数值。比如在教程 4 中，我们用 jit.print 输出 0~255 的整数值。但是很多时候要修改矩阵的 char 值（更改其中一个属性）时，Jitter 对象只接收浮点数属性值。这可能有点费解，让我们来看看本教程的 patch。 打开教程 patch。双击打开中间的 explain_scalebias查看子 patch： char 数据的浮点类型演示 在上面的例子中有一个非常小的矩阵。它有 4 个 char 平面，但只有一个单元。这样我们只需要注意矩阵中单个数值的变化。已将平面 2（绿色平面）的值设置为 100。在右侧，把整数值转换为 0~1 之间的小数值：用 100/255，得到 0~1 之间的值 0.392。 jit.scalebias 对象乘上指定的缩放因子，然后再加上偏移因子。jit.scalebias 计算时会把所有值看做浮点数，然后再转换为 char 数据重新存储到矩阵中。 这里用 scale 2.0 和 bias 0.2消息来设置缩放和偏移因子。缩放因子（乘数）是 2.0，偏移因子（之后添加的偏移）是 0.2。为了了解 jit.scalebias 内部机制，将绿色值看做 0.392 x 2.0 + 0.2，等于 0.984。jit.iter 对象逐一输出每个单元中每个平面的值（矩阵只有一个单元），（以 char 类型存储在矩阵中）为 251（或是 0~1 范围的 0.984）。 （作为练习，请计算 jit.scalebias 在上面例子中在红色和蓝色平面中产生的值。在原矩阵中这些平面的值为 0，因此结果矩阵中的值将为 0 x 2.0 + 0.2 = 0.2，在 0~255 的范围内等于 51。因此底部的 jit.pwindow 对象显示的 RGB 值是 51 251 51） 更多例子如果前一部分的讲解你已经理解得很清楚，可以跳过这部分。如果还是不太清楚 char 数据（特别是 jit.scalebias）的数学运算是如何工作的，这里还有一些例子。 从左到右逐个点击 preset 对象中的每个预设值。下面我们解释每个预设。 原始矩阵的绿色平面中的值为 255.（相当于 0~1 范围的 1.0） jit.scalebias 将其乘以 0.5 得到 127.5; 但是将值存储为 char 时，jit.scalebias 会截断小数部分，将值存储为 127。 这产生了相当不精确的结果。（0~255 范围的 127 等于 0~1 范围内的 0.498，而不是我们期望的 0.5）但用 8 位 char 数据只能这样了。如果需要更高的精度，char 数据就不适合，需要用 long，float32 或 float64 数据的矩阵，以及 jit.op @op * 和 jit.op @op + 对象。 原始值为 100，将它加倍（缩放因子 2.0）会得到预期结果 200。这样不会有精度损失。 原始值为 100（0.392）。缩放 1.0 倍保持不变，然后加上 -0.2 （也就是减去 0.2）得到结果 49（即 0.192）。 0.392 x 2.0 + 0.2 = 0.984。在 0~255 的范围内为 251。 此示例和下一个示例说明当乘法和加法运算的结果超过 8 位字符的容量时会发生什么。jit.scalebias 会直接裁剪结果为 char 的最大或最小值。这里，0.392 x 4.0 = 1.568（即 100x4 = 400），因此取上限为 255。 在另一个方向，0.392 - 0.5 = -0.108，因此结果为 0。 注意，这些误差和裁剪只发生在将结果重新存储为 char 时。在此之前，这些值在内部用浮点数计算，可以保证精度。即使乘法使内部值超出0~1 范围，也不会做裁剪，而且加法运算可以让其回到范围。这里 0.392 x 3.0（= 1.176）- 0.5 = 0.676。存储为 char 时会产生小的误差。0.676 在 0~255 范围内等于 172.38，但是小数部分会被截断并存储为 172（即 0.675）。如果没有变化，比例因子应为 1，偏移量应为 0。 你可以尝试更多的值，直到完全了解 jit.scalebias 以及 8 位 char 数据产生的结果。完成后关闭 [explain_scalebias] 窗口。 调整图像的颜色亮度现在将 jit.scalebias 应用于彩色图像。在教程 patch 的左上角可以看到熟悉的配置：jit.movi​​e 对象，加载视频的 read 消息，和从 jit.movi​​e 触发 jit_matrix 消息的 metro对象。在这个 patch 中，jit.scalebias 用乘法和加法来修改矩阵。 加载图片或视频 点击 read chilis.jpg 读取 JPEG 静态图像（而非视频）到 jit.movi​​e。QuickTime 可以处理各种媒体格式，包括 PICT 或 JPEG 格式的静止图像。jit.movi​​e 将静止图像视为 1 帧长的视频。 jit.movi​​e 的输出将传到 jit.scalebias 处理，然后显示在 jit.pwindow 中（现在先忽略 jit.matrix 对象。我们在本章后面讨论）。可以修改 jit.scalebias 的 scale 和 bias 属性来更改值。 点击开关启动 metro。拖动 scale $1 消息框上方的数字框，将 scale 属性值增加到 1.25。 增加图像亮度; scale 值越大亮度越大 这将使图像的 4 个平面的所有非零值放大到 1.25 倍（增加 25％）。请注意，乘法会让较大的被乘数增加更多值。例如，如果原始矩阵中某单元格的红色值为 200，它将增加到 250（净增加 50），而同一单元格的蓝色值可能从 30 增加到 37（净增加 7）。 尝试将 scale 增加到非常大，如 20。原始矩阵中 13 或更大的值将被增大到最大值 255（甚至非常小的值也会增加到可见水平），产生人为的过度曝光。 尝试将 scale 降低到 0~1 之间。这会使图像变暗。scale ≤ 0 会将所有值设置为 0。 将 scale 属性恢复为 1。现在尝试调整 bias 属性，为矩阵中所有值添加常量。正值使图像变亮，负值使图像变暗。 以常量提升（或降低）亮度 还可以尝试几种更极端的 scale 和 bias 设置。设置 scale 为 40，bias 为 -20。这会将几乎所有值推到 255 或 0，除白色或黑色之外仅留下少数颜色。尝试设置 scale 为 -1，bias 为 1。高低值会互换，反转颜色。继续降低 scale（比如 -4 或 -8）会产生类似的反转，但只有原始值较低的值才会被正 bias 提升回 0~1 范围。 单独调整平面你可以用 scale，abias，rscale，rbias 等属性在 jit.scalebias 中单独调整每个平面中的亮度。 将 scale 设置回 1，将 bias 设置回 0。然后提供新的值来独立调整每个颜色平面。 调整每个颜色平面的亮度 这里有一个可以同时调整三个颜色平面缩放比例的控制器，让过程更具交互性。单击或拖动 swatch 对象时，它发送一个表示鼠标所在位置 RGB 颜色值的列表。这些值之前以 0~255 范围表示，现在已经被改为 0.0~1.0 的值（如果需要，inspector 中有一个复选框可选择用旧样式输出）。用 unpack 拆分列表为三个单独的浮点数来改变 jit.scalebias 的 rscale，gscale 和 bscale 属性 。 用 swatch 的值作为 jit.scalebias 的属性 拖动 swatch 同时缩放 RGB 三个平面。这会产生 0~1 范围内的缩放值来降低所有亮度，让图像稍微变暗。 可以在不同图像上尝试这些操作。读取其他彩色图像如 colorswatch.pict 或 wheel.mov， 并尝试调整颜色亮度。 重新分配矩阵的平面在上一个教程中，我们使用 jit.unpack 和 jit.pack 来重新组合矩阵的平面。使用 jit.matrix 对象的planemap 属性也可以做到。在这个例子中，用 jit.matrix 传递 jit.movi​​e的输出来演示如何设置 planemap 属性。 用 jit.matrix 重新分配矩阵的平面 jit.matrix 的 planemap 属性可以映射（分配）输入矩阵的任何平面到输出矩阵的任何平面上。planemap 后面跟的数字表示矩阵中有多少平面（在本例中为 4）。列表中的每个位置代表输出平面（第一个代表输出平面 0，第二个代表平面 1，等等），数字表示分配给它的输入平面。默认情况下，平面值为 0 1 2 3（等），输入矩阵中的每个平面都分配给输出矩阵中的同一平面。可以随意更改这些映射。例如，如果发送消息 planemap 0 3 2 1 给 jit.matrix ，会把输入平面 3 分配给输出平面 1（3 位于输出平面 1 的列表位置），把输入平面 1 输出到平面 3。这样就调换了图像的红色和蓝色平面。 点击 read wheel.mov 消息框并启动 metro 显示视频。（设置jit.scalebias scale 属性为 1，bias 属性为 0，就可以在 jit.pwindow 中看到未改变的图像）在 patch 的右下角，单击planemap 0 3 2 1 消息框交换矩阵的红色和蓝色平面。单击消息框 planemap 0 1 2 3 恢复正常的平面映射。如果设置所有 RGB 输出平面设置为相同的输入平面，将在三个 RGB 平面中得到相等的值，从而产生灰度图像。 单击消息框 planemap 0 1 1 1 查看效果。三个 RGB 平面在列表中的值都是 1，因此原始的红色平面用来输出矩阵的所有 RGB 平面。用一个 coll 对象存储所有平面映射的组合，发送到 jit.matrix 来更改 planemap 属性。 双击 patcher rotatecolorplanes 查看子 patch。里面有一个 1 到 6 的计数器，逐一执行主 patch 中 coll 对象中的不同映射。（当它关闭时会发出数字 1 重置为默认平面映射） 点击主 patch rotatecolorplanes 对象上方的开关，以每秒切换一次设置的速率，逐一执行不同的平面映射。将右输入口上方的数字框更改为较小的值（例如 80），查看快速重新分配平面的闪烁效果。 在下一章节中，你将了解如何使用 jit.hue 以更微妙的方式调整图像色调，以及使用 jit.brcosa 调整颜色的其他方法。 读取和导入图像在本教程 patch 中，将三种不同类型的图像加载到 jit.movi​​e 中：PICT 和 JPEG 静止图像，以及 QuickTime 视频。在视频对象中读入静止图像看起来有点奇怪，但 QuickTime 确实可以播放多种类型的媒体文件，jit.movi​​e 知道如何读取它们。（jit.movi​​e 还可以读入 AIFF 音频文件，用 start 和 stop 消息播放，用 time 属性跳转到不同的位置等等。当然这时看不到矩阵的任何视觉内容） 如教程 5 所示，用 importmovie 消息加载静止图像到 jit.matrix 中很方便。用这种方式导入 QuickTime 视频，只有一帧存储在 jit.matrix 中。 在这个 patch 中，我们用 jit.movi​​e 加载所有图像。原因一是我们要加载整个视频（不只是视频的一帧）。原因二是想演示 jit.matrix 的 planemap 属性。矩阵有实际输入（左入口传入 jit_matrix 消息）时，planemap 属性才起作用。如果用 importmovie 直接导入图像到 jit.matrix ，planemap 不起作用。 小结jit.scalebias 用乘法和加法来修改 4 平面 char 矩阵中指定的平面（或所有平面）的值。scale 是矩阵中的每个值要乘上的缩放因子；bias 是乘法之后被加到每个单元的值。scale 和 bias 属性影响矩阵的所有平面。如果想一次只影响一个平面，请使用特定的属性例如 ascale，abias，rscale，rbias 等。 必须用浮点数定义这些属性值。当执行乘法和加法运算时，jit.scalebias 将 char 值视为 0~1 范围内的小数值，使用 floats 执行数学运算，然后将结果转换回 char（0~255 之间的整数）并存储。超出 0~1 范围的结果，在转换回 char 之前截取为 0 或 1。 可以用 jit.matrix 的 planemap 属性重新分配矩阵的平面。planemap 的参数按顺序列出输出平面，列表中的值是要分配给每个输出平面的输入平面。例如，要将输入矩阵的平面 1 分配给输出矩阵的所有四个平面，属性应设置为 planemap 1 1 1 1。 jit.scalebias 提供了强大的工具来调整 4 平面 char（ARGB 颜色）矩阵中的颜色值。下一章节将介绍更多此类工具。 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
        <tag>颜色</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译07 - ARGB 颜色]]></title>
    <url>%2F180830-jitter-07.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 Max/MSP/Jitter 教程 06 - 控制视频播放 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 5: ARGB Color Jitter 中的颜色本节将讨论如何在 Jitter 中处理颜色，主要讲解用数字表示颜色，而不涉及把数字可视化为颜色。用数字表示颜色有许多方法，而关于色彩理论的全面讨论 - 光和物质如何产生色彩感觉 - 远远超出了本教程的范围。如果想了解颜色相关的理论和/或颜色数值表示的更多信息，可以查看参考书目。 本节重点说明 Jitter 表示颜色的方法，以及如何在矩阵中实现。 颜色组成：RGB混合红色，绿色和蓝色可以产生任意颜色 - 每种颜色都有一定的亮度（intensity）。这是「加法合成（additive synthesis）」 - 添加一定量的三原色光来生成颜色（与此相反的是减法合成：混合有色颜料，如油漆，吸收某些颜色的光并反射其余部分）。这样就可以用红色，绿色和蓝色相对应的频率强度来描述任意颜色。 在 Jitter 中一般用红色，绿色和蓝色的精确亮度组合来描述颜色。对于图像的每个像素 - 无论是视频，图片还是其他 2D 矩阵 - 至少需要三个值表示三原色。屏幕上的彩色图像一般使用至少 3 个平面的 2D 矩阵。 Alpha 通道第 4 个平面一般是 alpha 通道 - 它存储像素的透明度信息。Jitter 矩阵中一般都会包含颜色透明度的 alpha 通道。多数情况下，alpha 通道存储在平面 0（矩阵平面从 0 开始编号），RGB 值存储在 1,2 和 3 平面中。 颜色数据：char，long 或 float在计算机中用 8 位信息来表示每个基本颜色值。8 位能够表达 256（2 的 8 次幂）个不同值。如果分别用 8 位表示红色、绿色、蓝色，总共可以表示 16,777,216（2 的 24 次方）种不同颜色，足以覆盖人眼能够区分的所有颜色渐变。 因为 8 位分辨率已经可以表示所有基本颜色值，所以颜色信息矩阵 4 个平面中的值用 8 位 char 类型就足够了。当然 Jitter 也允许用 long，float32 或 float64 类型，只不过这会浪费内存。全帧视频图像要处理大量的像素（640x480 图像有 307,200 像素），为了节省内存和加快处理速度，最好使用 char 数据类型。 8 位 char 数据可以表示 0~255 之间的数字，或者 0~1 之间的灰度。包含 char 数据的 Jitter 对象，通常以 0~1 范围内浮点数的形式从其他 Max 对象接收数值。然后在内部计算时将浮点数转换为对应的 char 值（有一些例外，例如 jit.op 可以接收 0~1 的浮点数或右入口的 0~255 的整数）。关于在 Jitter 矩阵中使用 char 数据类型的更多内容，请参阅教程什么是矩阵？ 分离矩阵的平面在示例 patch 的顶部有两个视频。一个是街机游戏，另一个是视频校准的标准颜色条。打开 metro对象（用来反复触发矩阵对象）可以查看。 观看视频或静止图像 单击 metro 30对象上方标有 “show movie” 的按钮查看视频 示例 patch 用 jit.unpack 对象将颜色信息矩阵分解为 4 个平面，可以单独查看和修改每个平面。与 Max 对象 unpack 将列表拆开成单个数字类似，jit.unpack 将多平面矩阵分解为单平面矩阵。可以输入参数来指定矩阵中有多少个平面，默认是 4 个平面，这是颜色数据的标准。想看到红色，绿色和蓝色屏幕的内容，就将平面 1,2 和 3 发送到 jit.pwindow。因为这里不关心 alpha，所以不显示平面 0。 将多平面矩阵拆为单平面矩阵 可以用三个单色图像查看每个颜色平面的内容。较亮的像素表示该颜色值较大。将每个矩阵发送到 jit.op 可以单独控制每种颜色的强度，并改变颜色平衡。然后将单个（改变后的）矩阵发送到 jit.pack，重新组合为 4 平面矩阵在 jit.pwindow 中显示。 尝试将绿色和蓝色的强度降低到 0.12，生成更偏红色的图像： 降低某些颜色的亮度来改变颜色平衡 颜色交换为了演示另一种技巧，将每个颜色平面发送到 gate 对象，这样每个矩阵都可以 route 到 jit.pack 的不同入口（颜色平面）。这样就重新定义了每个平面，并且从 patch 左侧的 coll 对象中选择选项来尝试所有可能的颜色组合。 拖动标记为 “Rotate RGB planes” 的数字框，尝试重新分配三个颜色平面。（请注意，平面 0 直接从 jit.unpack 发送到 jit.pack ; 它是触发矩阵输出到 jit.pwindow的 jit.pack的左入口收到的 jit_matrix 消息）如果选择 coll 中的选项 3，会得到如下结果： 重新分配各个颜色平面; 红色和绿色平面相互交换 上面的示例显示原始的绿色和蓝色平面减少为原来的 0.12，并在发送到 jit.pack之前，用 gate 调换红色和绿色平面，得到更偏绿色的图像。coll 对象包含 RGB 平面所有可能的排列组合。 双击 coll 对象可以查看其内容： RGB 平面分配的排列组合 来自 coll 列表中的元素被 unpack 并发送给 3 个 gate 对象。发送到 coll 的数字也会发送给 umenu（标签模式）用单词显示颜色状态 - 现在显示为 “Green-Red-Blue”。 颜色自动变化让我们再来做一个颜色修改练习：制作不断更改颜色的缩放和旋转的自动化流程。 点击标记为 “Automate color changes” 的开关。三个颜色平面的缩放因子都在不断变化。双击 patch colorgames 对象查看子 patch 的内容。 [colorgames]子 patch 子 patch 用 line 对象为每个颜色缩放因子发送 0.5~1 的值。红色系数每 3 秒变化一次，绿色每 4 秒变化一次，蓝色每 5 秒变化一次（这三个 line 对象每 60 秒同步一次）。每隔 60 秒，metro 计数器会选择一个新的颜色组合。 你可以在不同的源图像上尝试所有颜色组合。回到主 patch，点击标记为 “Show movie” 的开关停止 metro。（也可以用这个开关来启动和停止 jit.movi​​e 播放视频。如果不需要观看，就没必要持续播放）现在点击标有 “Show colorbars ” 的开关来显示颜色栏。试着更改此图像上的 scale 和 rotation 系数。 小结当 jit.window 或 jit.pwindow 接收单平面 2D 矩阵时，会显示为单色（灰度）图像。当接收到 4 平面 2D 矩阵时，会将平面解析为 alpha，red，green 和 blue 值并显示相应颜色。Jitter 最常用 ARGB 4 平面矩阵来表示颜色。 Jitter 颜色数据以 char 数据类型存储，因为所有基本颜色只需要 8 位精度就可以完全覆盖。大多数与 QuickTime 相关的对象（例如 jit.movi​​e）和许多专门用于操作颜色的对象（例如 jit.brcosa 和 jit.colorspace）都使用 4 平面 char 数据的 2D 矩阵。（许多对象会自适应其他数据类型。如有疑问请查看相应文档）。char 数据的范围是 0~255 的证书，或者 0~1 的浮点数。大多数情况下，包含 char 数据的对象从其他 Max 对象接收 0~1 的浮点数值。 jit.unpack 可以拆分多平面矩阵为单平面矩阵。jit.pack 打包单平面矩阵成一个多平面矩阵。单独处理每个平面可以控制图像的色彩平衡，甚至可以重新定义各个平面。 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
        <tag>颜色</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译06 - 控制视频播放]]></title>
    <url>%2F180829-jitter-06.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 Max/MSP/Jitter 教程 05 - 矩阵的数学运算 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 4: Controlling Movie Playback 本教程讲解在 Jitter 中播放 QuickTime 视频的进阶知识。我们将学习如何获得正在播放的视频的信息，以及如何更改速度、音量和循环点来控制视频的播放。 你应该已经熟悉 patch 中的两个 Jitter 对象： jit.movi​​e 和 jit.pwindow。其余部分尝试改变已加载到 jit.movi​​e 对象中的视频的播放行为。 patch 的左边部分我们很熟悉了： 打开并播放视频 点击消息框 read crashtest.mov，打开文件。 jit.movi​​e 一读入视频就开始播放。这个视频有配乐，因此视频加载后会立即听到音乐。视频配乐由计算机内置音响而不是 MSP 播放。如果不希望听到声音，可以将消息框 vol $ 的数字 1 改为 0。 即使视频正在播放，jit.pwindow 没有显示任何东西，因为 jit.movi​​e 需要 bang 消息才能发送矩阵到 jit.pwindow。单击连接到其入口的开关，启动 metro 对象。这时视频图像出现在 jit.pwindow 中。先忽略 gettime 消息，等会我们会提到。 获取视频信息jit.movi​​e 打开新的视频时，会读取视频的大量信息（包含在视频的标题中），包括视频的长度、有多少帧、播放速度等。我们用这些元数据来控制视频播放。 要点：与许多可手动设置或由对象本身设置的 Jitter 属性不同， jit.movi​​e 的许多属性都依赖于当前的视频文件。不同视频生成不同的设置。 要对 QuickTime 视频做的第一件事是读取元数据属性。可以向 jit.movi​​e 发送 get 消息来检索。然后解析对象最右输出口的响应消息。我们需要的信息是帧速率，时间单位(time scale)（一秒钟内 “QuickTime 时间单位” 的数量），持续时间（QuickTime 的单位），播放速率和音量。这些都通过带有 getfps, gettimescale, getduration, getrate, getvol的消息框获得。 让 jit.movi​​e 打开一个视频并播放时（发送read消息），它会向右输出口发送一条消息，告诉你它已找到视频并知道如何播放。如果要将打印对象连接到 jit.movi​​e 的右输出口并重新加载影片，会在 Max Console 中看到：read crashtest.mov 1。 在这个 patch 中，jit.movi​​e 的右输出口连接了一个 route 对象。加载成功后它收到 read 消息并传递给 unpack 和 select，再触发 get消息。如果无法找到 crashtest.mov 文件，会在文件名后看到 1 以外的数字，并且不会发出请求。 自动查询 jit.movi​​e 对象 除了捕获 read 消息之外，route 对象在接收到视频信息后做分发。Jitter 属性一般都由在 patch 中设置为相同格式的对象输出：属性的名称，后跟需要设置的信息。route 出口连接了数字框，以显示分发的值。虽然还不知道那些值代表什么，但是每次 jit.movi​​e 成功加载新视频时都会显示属性。 开始，停止和减速一些简单的视频播放控件 patch 的顶部有一些可以更改 jit.movi​​e 回放行为的控件。向 jit.movi​​e 发送 stop消息，将在视频当前帧停止播放。发送 start 消息将从上次停止的位置恢复播放。视频播放停止时，视频文件中的所有音轨也都将停止。停止和启动视频对 jit.movi​​e 对象的矩阵输出没有影响，该输出仍然由 metro 对象控制。如果在开启 metro 的情况下停止播放视频，仍将以 metro 的速度收到新的矩阵对象（这里是每秒 25 次），虽然所有矩阵都是相同的。 更改视频的速率将改变音视频内容的播放速度。正的速率值使视频向前播放，值为 1 表示正常播放速度。负值将使视频倒退，速率为 0 将停止播放。jit.movi​​e 的速度属性以浮点数为参数，因此值 0.5 会使视频播放速度减半，值 -2.3 以超过两倍的速度向后回放。调整这个值时，音轨会加速、减速、向后播放，跟视频保持同步。一旦视频到达其最后一帧（或回放时的第一帧），它将循环到文件的另一端。将 jit.movi​​e 的 loop 属性设置为 0（无循环），1（常规循环）或 2（回文循环），可以更改此行为。 vol 属性控制视频音轨的音量（响度）。1 为全音量，0 将关闭声音。 加载视频时，速率和音量属性都由 pathc 中间的消息框初始化。它们会给出每个 QuickTime 影片中存储的值。 时间属性之前查询了三个属性：duration，timescale 和 fps，告诉我们视频文件如何处理时间。Duration 说明了视频的总长度。这个值不以毫秒或帧表示，而是以 QuickTime 时间单位表示。每个时间单位的实际长度，取决于视频的时间单位。视频的 timescale 是每秒视频的分辨率。视频的duration / timescale 会得出视频的大致长度，以秒为单位。例如， crashtest.mov 文件有一个持续时间为 2836 个时间单位和 600 的 timescale。视频大约持续 4.73 秒。如果想要用 2 秒钟播放视频，可以将 jit.movi​​e 设置 time 1200（1200 时间单位除以 600 单位/秒的时间刻度得到 2 秒）。 视频中的 fps （或每秒帧数）说明每秒显示多少单独的视频图像。fps 越高，视频播放就越平滑（假设每帧都不一样）。常见的 fps 速率是15, 24, 29.97 和 30. 这个例子中的视频以每秒 15 帧的速度播放，也就是每 40 个时间单位，或大约每 66.7毫秒，会更新一个视频帧。如果用 crashtest.mov 的持续时间，除以视频中每帧的 time units，可以得到视频文件有 70 帧。如果需要，可以用 getframecount 消息查询 jit.movi​​e 视频中的总帧数。 截取和循环显示和设置当前播放帧 patch 底部区域包含两个进一步操作视频播放的控件。左侧的数字框显示视频当前正在播放的帧。该值由 patch 顶部的 metro 对象发送到 jit.movi​​e 的 gettime 消息更新; 每次输出新的一帧时，时间都会更新。如果停止视频传输（向 jit.movi​​e 发送 stop消息），可以拖动数字框来“截取”视频。视频会跳转到 frame 消息指定的参数那一帧。 设置视频中的循环点 用两个整数参数设置 looppoints属性，可以将循环点（指定循环开始和结束的时间值）发送到 jit.movi​​e。教程 patch 中的 rslider 可以指定 jit.movi​​e 的循环区间。在加载视频时查询属性，将 rslider 的大小设置为视频的时长。可以发送不带参数的 looppoints 消息重置循环点。 小结jit.movi​​e 提供了一些简单的属性来改变 QuickTime 播放内容的方式。可以使用这些消息停止和开始播放视频。速度属性可以改变播放速度和视频播放的方向。使用 vol 属性控制视频音轨的音量。 查询 duration，time scale 和 fps 等属性可获取加载到 jit.movi​​e 中视频的属性。用 frame 消息可跳转到视频中的特定帧，并且可以设置和检索循环点。发送 gettime 消息可以查询视频的当前时间位置​​。 更多强大的功能（例如编辑和保存视频）将在后面的教程中讨论。 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>视频</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译05 - 矩阵的数学运算]]></title>
    <url>%2F180828-jitter-05.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 Max/MSP/Jitter 教程 04 - 创建矩阵 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 3: Math Operations on a Matrix 本教程介绍如何对存储在 Jitter 矩阵中的数据做简单的数学运算，使用 jit.op 对象来缩放矩阵单元格或单个平面。 教程分为三个​​简单的例子，你可以使用 jit.op 对象执行这些操作。jit.op 对矩阵的所有对象而不是单个数字执行数学运算。 向矩阵中的所有单元格添加常量 第一个示例显示了连接到 jit.op 的 jit.matrix 对象，其输出可由 jit.pwindow 查看。每次改变连接到 jit.op 右输入口的数字框，都会从 jit.matrix 输出一个新的矩阵。从参数中可以看出，jit.matrix 生成一个 4x3 的单平面 char（0-255） 矩阵。jit.pwindow 把这个矩阵可视化为一个灰度图像。拖动数字框将改变显示的灰度级别（黑色 0 ~ 白色 255）。 请注意，jit.matrix 输出了一个所有单元格都为 0 的矩阵。如果将 jit.matrix 和 jit.pwindow 对象绕过 jit.op 连接在一起，无论向 jit.matrix 发送多少次 bang 消息，都只能看到黑色图像。jit.op 向 jit.matrix 和 jit.op 之间的矩阵的所有单元都加上了一个值（由数字框给定）。 @ 操作符jit.op 根据参数指定的运算（用 @op 表示）向矩阵加了一个值（不是乘或除）。@op 之后的参数是一个符号（或符号列表），它定义了 jit.op 在输入矩阵上执行的数学运算。 在这个例子中，op 属性设置为 + ，它对从左入口输入的任何矩阵都执行加法操作。右侧入口中的整数值会加到矩阵中的所有单元格。这个值被称为标量（scalar），因为它向整个矩阵添加了相同的值（在教程 11 中我们会展示 jit.op 如何使用两个矩阵进行数学运算）。 要点：更改 jit.op 右侧入口中的标量值不会输出新矩阵。如果断开数字框和按钮之间的接线，jit.pwindow 将停止显示任何新内容。原因在于，大多数 Jitter 对象与大多数 Max 对象一样，仅在数据进入其最左侧入口时才会输出数据。 在上面的例子中，每次更改数字框时 jit.op 都会存储新的标量值。此时按钮发送一个 bang 给 jit.matrix，让它将新的矩阵（所有值设置为 0）发送到 jit.op 的左入口，触发输出矩阵。 如果在按钮上方的接线上放置一个断点，然后 shift-cmd-T 逐步执行消息，就能看到它是如何运作的。（有关如何使用断点功能跟踪 Max 消息，请参阅教程：消息顺序和调试） 使用 jit.op 的 val 属性，标量值也可以作为常量。例如，如果想要为矩阵的所有单元格添加 134，可以使用 val 属性并省去数字框： 类似地，如果想要更改由任何给定的 jit.op 对象执行的数学运算，可以用消息 op 后跟数学符号，发送到对象的左入口。 多平面数据的数学运算第二个示例显示了使用 jit.op 将值传入矩阵的更复杂的例子。 为矩阵的每个平面使用单独的标量 这个 patch 跟第一个类似，区别在于现在使用的是 4 平面矩阵。这由 jit.matrix 的第一个参数给出。jit.pwindow 现在有颜色了，它正在解析矩阵 α/红/绿/蓝 4 个单独存储颜色通道的平面。这个例子中的 jit.op 包含 op 属性的四个符号的列表：每个符号设置输入矩阵的一个平面的数学运算。在这个 patch 中，保留第一个（alpha）平面不做改动，而为其他 3 个平面做加法运算。 pak 对象向 jit.op 右输入口传送四个打包的整数。pak 和 pack 的唯一区别是，当更改任何数字时，pak 都会输出一个新列表（pack 需要一个新数字或左侧入口的一个 bang 来触发输出新列表）。由 pak 生成的四个数字决定了传入 jit.op 矩阵的每个平面的标量值。 在上面的示例中，平面 0 没有添加任何内容（op 属性的第一个参数是 pass）。平面 1,2 和 3 将分别添加 161,26 和 254。jit.pwindow 将输出矩阵的单元格解析为洋红色（即使只看到一种颜色，矩阵中实际上有 12 个单元格，都设置为相同的值）。 要点：如果jit.op 对象的 op 属性只有一个值（只使用一个数字作为标量），jit.op 将在输入矩阵的所有平面都使用该运算符号和标量值。 修改图像中的颜色第三个例子说明如何在矩阵中使用 jit.op，这个矩阵已经存储了相关数据： 将单个平面与标量相乘 单击消息框 importmovie colorbars.png，jit.matrix 的 importmovie 消息将图像或 QuickTime 视频文件中的单帧图像加载到对象存储的矩阵中。它会将原图像缩放到矩阵的尺寸（320 x 240）。 单击按钮，jit.pwindow 中显示图像校准颜色条。这时 jit.op 的算术运算符设置为：alpha 平面不做修改（pass）， 其他平面设置为 *（乘）。这个矩阵有 4 个平面，因此使用 4 个浮点数列表设置每个标量。平面 1~3 中的值都是 1.，结果是显示原始的图像： 所有标量均为 1 如果将标量设置为 1.0，0 和 0.，会看到以下图像： 包含颜色条的矩阵的所有平面（平面 1 除外）都乘以 0。这将消除矩阵的α，绿色和蓝色平面，仅留下红色（平面 1）。 将中间值（例如 0.,0.,1. 和 0.5）设置为 jit.op 的标量，会得到颜色栏看起来不同的图像： 在这种情况下，忽略 alpha 通道并将红色通道归零。蓝色平面的值是它们的一半。绿色通道（平面 2）保持不变。 要点： jit.op 中的一些数学标量使用浮点数，有些则使用整数。这取决于相关运算符（由 op 属性定义）以及输入矩阵的类型。本教程所有示例都使用了 char 矩阵，因此在添加时可以使用整数（任何浮点数都将被截断，因为矩阵数据保留 0-255 范围内的整数）。 如果使用 float32 矩阵作为输入，就需要添加浮点数。同样，用 char 乘以浮点标量的矩阵也可以（240 * 0.5 = 120，整数）。但是，由于 jit.op 输出的矩阵仍然是 char 矩阵（参见下面的注释），因此仍然只能获得 0-255 范围内的值。 如果你尝试使用标量值，容易看到某些颜色条消失或与相邻条形图合并。这是因为颜色条都设置为范围相似的标准颜色值。如果一次只显示一个通道（设置一个平面为 1，其余为 0），顶部七个条形中的四个将显示颜色。 本教程中只演示了 + 和 * 运算符，实际上 jit.op 对象可以执行许多其他的数学运算。运算符的完整列表请查看参考文档，或双击 jit.op 帮助文件中的 p op_list 子 patch。 调整大小创建 jit.pwindow 对象时，它默认显示为 80 像素宽，60 像素高。它可以像 Max 中的许多 UI 对象一样改变大小。如果要精确地指定大小，可以使用 inspector 或向其发送尺寸消息，后跟宽度和高度（以像素为单位）： 更改 jit.pwindow 的大小 如果给某个固定尺寸（像素）的 jit.pwindow 发送不同的尺寸的矩阵，jit.pwindow 会按自身的大小来缩放传入的矩阵。如果将非常小的矩阵发送到非常大的 jit.pwindow ，会做像素化处理（图像中颜色完全相同的矩形区域）。如果发送大矩阵到一个小的 jit.pwindow，可能会丢失不同程度的细节。 要点：在上面的示例中，含有颜色块的 jit.matrix 的大小（由其维度决定）为 320 x 240 个单元格，planecount 为 4，类型是 char。jit.op 对象（以及大多数 Jitter 对象）识别出信息并自动适配计算、输出相同规格的矩阵。 如果要更改 jit.matrix 的大小， jit.op 将立即识别变化并重新适应。jit.pwindow 也适配传入的矩阵，但方式略有不同。如果输入矩阵小于其自身的尺寸，则使用重复数据填充所有像素。（这会产生前一段中描述的像素化效果）如果输入矩阵大于其自身的维度，则必须忽略某些数据，只显示它可以显示的内容。因此，即使教程 patch 中的 jit.pwindow跟输入矩阵的大小不同，它们也会尽可能适配 jit.op 矩阵。 最后一个例子中的 jit.pwindow 尽可能显示了 jit.op 输出的整个矩阵，但它必须忽略所有其他行和列，以使其接收的 320x240 矩阵适合自己的 160x120 显示区域。 小结jit.op 对矩阵上的所有数据进行数学运算。可以分别对矩阵单元格中的整体或每个平面执行计算。jit.op 的 op 属性决定要执行什么数学运算，可以输入 @op [operator] 属性参数，或者由左入口中的 op [operator] 消息提供。 对于多平面矩阵（例如彩色图片和视频），可以给出运算符列表（例如，op pass *）来指定每个平面的操作，并且可以为每个平面提供不同的标量值。在教程 11 中我们会看到如何使用矩阵来代替简单的标量。 你可以使用 size [width] [height] 消息设置 jit.pwindow 的大小。jit.pwindow 将尽可能适应接收到的矩阵的大小。如果输入矩阵小于其维度，它将复制数据；如果输入矩阵大于其自身维度，它将忽略某些数据。大多数 Jitter 对象都尽量适应它们接收的矩阵的维度、类型和平面数量。对 jit.op 而言，它没有自己的维度，所以它自动适配传入的矩阵大小。 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译04 - 创建矩阵]]></title>
    <url>%2F180826-jitter-04.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 Max/MSP/Jitter 教程 03 - 播放 QuickTime 视频 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 2: Create a Matrix 什么是矩阵？本教程讲解处理矩阵数据的方法。可以先回顾一下 Max/MSP/Jitter 教程 01 - 什么是矩阵？ 矩阵用虚拟的网格来存储和修改大批的数值数据。数据存储在矩阵中，就可以通过网格位置查找，并指定整个矩阵或部分矩阵来批量修改多个值。 在上一篇教程中，我们使用 jit.window 对象打开一个窗口，并将矩阵的内容显示为彩色像素。 显示的矩阵来自 jit.movi​​e 对象，它用 QuickTime 视频的当前帧连续填充矩阵。jit.window 之所以能显示视频，只不过因为被告知要显示哪些矩阵的内容; 事实上，矩阵中的任何数值都可以显示。本教程通过一个更简单的例子帮助你理解矩阵，它是 Jitter 的核心思想。 以下是本节完整的 patcher 截图 jit.matrix 对象为单个 8 位值创建 16x12 存储空间 jit.matrix 对象创建矩阵并在内存中声明存储空间，以便我们存储和检索数值，并打印或显示出来。 jit.matrix 的参数包括： [name]（可选，本例中未包含） [planecount]（在矩阵的每个单元格中存储多少个值） [type]（用多少个字节来表示每个数字） [dim]（维度，描述矩阵的大小） 括号 [] 里面应填入实际的赋值。上面的例子创建了 1 个平面（每个矩阵单元包含 1 个数字）、尺寸为 16x12（共 192 个单元格）的 char 型（单字节值）矩阵。由此可以推断出矩阵能够保存 192 个单独的数值，每个值的范围是 0~255（单个字节的范围）。 注意：在 Max 中用 x，y（宽度，高度）格式描述二维矩阵的维数，先给出水平维度的范围，然后是垂直维度。这跟视频和计算机屏幕坐标处理尺寸的方式一致（例如，640x480 视频图像）。即，先说明有多少列（宽），再说明有多少行（高）。需要注意，Jitter 描述行和列，与线性代数中描述矩阵的惯例（先表示行，然后是列）不同。 回到例子中，一个按钮连接到 jit.matrix 的入口。当 Jitter 对象在左入口接收到 bang 消息时会发送矩阵名称，这个按钮会触发 jit.matrix 发送它的矩阵名称（以 jit_matrix 消息的形式）。 jit.print对象打印 jit.matrix 的内容 在 jit.matrix 下面有一个新的 Jitter 对象：jit.print。它在入口处接收矩阵名称（jit_matrix 消息）并格式化矩阵的值，以便在 Max Console 中打印。它将格式化的值打印到 Max Console，就像 Max 的 print 对象一样，然后在 jit_matrix 消息中以矩阵名称的形式传递出来。 单击标记为 “output” 的按钮，这会让 jit.matrix 传递矩阵名称给 jit.print，后者格式化值并在 Max Console 中显示：jit_matrix [somename]。左边的单词表示这是由 jit.print 对象打印的，这是 jit.matrix 出口的结果。 因为我们没有指定矩阵的名称（没有指定 jit.matrix 的第一个输入参数），所以 jit.matrix 自己会生成唯一名称（类似 “u330000007”）。这里我们并不关心名称是什么，但它能够告诉 jit.print 对象要显示哪个矩阵的数据。 上图显示了来自 jit.print 矩阵中的所有值，按 16 列和 12 行整齐排列。它们现在都是 0，因为我们还没有在矩阵中填充任何内容。 在矩阵中设置和查询值在上一章中，我们知道如何使用 QuickTime 视频中的彩色数据帧自动填充整个矩阵。还可以将数值放置在矩阵的特定单元格中，并从特定位置检索。 在下面的例子中，jit.matrix 上方有一些消息框，可以设置和获取矩阵中的值。 消息 setcell 和 getcell 可以访问矩阵中的特定值 使用 setcell 消息可以在特定的矩阵位置中存储值。语法是： setcell [cell coordinates] val [value（s）]。 例如， jit.matrix 消息 setcell 0 0 val 127 会将矩阵的第一个单元格（即左上角的单元格）的值设置为 127。每个维度中对单元格坐标的编号从 0 开始，最大值比维度小 1。在此矩阵中，x 维度中的位置编号为 0~15，y 维度中的位置编号为 0~11。因此右下角的单元格坐标是 15 11. pack 0 0 0 对象组合多个数字提供给setcell 消息发送给 jit.matrix。首先设置想要存储值的 x 和 y 位置，然后指定要存储在那里的值。当 x 和 y 位置为 0 0 时，用标有“value” 的数字框发送 127 到 pack 0 0 0 的左侧入口。这将触发消息 setcell 0 0 val 127 发送给 jit.matrix。 消息 setcell 0 0 val 127 设置单元位置 0,0 的值为 127 （如果矩阵中有多个平面，可以在单元格的特定/所有平面中设置值） 为了演示之前提过的单元格位置编号，现在尝试将消息 setcell 15 11 val 255 发送到 jit.matrix。在 “X position” 下面的数字框输入 15，在 “Y position” 下面的数字框输入 11 ，在 “value” 下面的数字框输入 255。然后点击 “output” 按钮查看矩阵的变化。jit.print在 Max 控制台中打印出整个矩阵。请注意，单元格位置 0,0 和 15,11 中的值已变为 127 和 255。 消息 setcell 15 11 val 255将单元格位置 15,11 的值设置为 255 在 Patch 窗口中，你可能已经注意到黑色矩形区域的变化。它的左上角和右下角已经改变了。 jit.pwindow 对象显示的数值为颜色（或灰度值） 该区域是一个名为 jit.pwindow 的用户界面对象。在添加对象面板中可以找到它： 对象选项板中的 jit.pwindow 图标 在添加对象面板中单击或将其拖动到 patch 窗口时，它会创建一个小的矩形对象（可以拖动对象右下角调整尺寸）。它在功能上与 jit.window 非常相似，区别是它在 Patch 窗口中显示矩阵数据，而不是在一个单独的窗口。 于是我们看到数值显示为颜色（char 数值范围是 0~255）。矩阵中只有一个平面，所以是单色（即灰度）。0 表示黑色，其他值是某种灰度，最大值255 是白色。因此，单元格 15,11 的 255 值显示为白色，0,0 的 127 值显示为黑色和白色之间的 50％ 灰色。 你可能会觉得这样填充矩阵相当繁琐。没错。所以 Max 允许我们编写程序来自动填充。 以算法方式填充矩阵双击 patcher fillmatrix 对象打开子 patch。它将不同的数字传入数学表达式，生成 192 个不同的值到矩阵中的每个单元。 通过算法生成值来填充矩阵的单元格 当 uzi 12 对象收到 bang（点击主 Patch 窗口中标记为 “fill” 的按钮）时，它会快速从右侧出口进行 1 到 12 计数，并向左侧出口发送每个计数的 bang。 那些 bang 触发了uzi 16对象，因此它每次都会发出 1~16 的数字。然后把这些数字减去 1，这样值的范围就限定在 0~11 和 0~15，输出的结果作为矩阵中的 y 和 x 位置。对于 12 个 y 位置中的每一个，uzi 16对象指定所有 x 位置，然后在数学表达式（expr）中使用这些数字来计算要存储在该位置的值。这些数字从 outlet 发送给主 patch 创建定义好的 setcell 消息，就像我们之前手动做的那样。 这里不需要关注具体的数学表达式。它可以生成任何公式。刚才我们用一个公式在每列中产生亮度的正弦梯度，这将让列的整体亮度从左向右增加（即随 x 增加）。 关闭 patcher fillmatrix ，然后单击标记为 “fill” 的按钮。矩阵在 Max 的 scheduler 的每个时钟节拍中填充值（由子 patch 中的 uzi 对象生成）。现在单击标有 “output” 的按钮查看矩阵的内容。数值将打印在 Max Console 中，并显示在 jit.pwindow 中。 即使对于像 16x12 这样的小型矩阵，仅仅查看 Max Console 中的数字打印输出，我们很难看到数值数据的趋势。而 jit.pwindow 中的显示能够清楚而直观地展示值在矩阵中的变化情况。这是数据可视化的好处。 你可以想象在 Max 中以算法方式填充矩阵的其他方法，我们将在后面的教程中演示。 jit.matrix 可以响应的其他消息jit.matrix 还可以接收许多其他消息。例如可以使用相同的值填充所有 jit.matrix。发送给jit.matrix 的 clear消息将所有值设置为 0，setall 消息（setall 后跟一个值）将矩阵中的所有单元设置为同一个值。 查询矩阵位置 8,6 处的值; 报告单元格 8 6 val [value(s)] 还有 getcell消息。单词 getcell 后跟矩阵中的位置（x和y）会让 jit.matrix 将单元格坐标和该位置的值发送到右侧出口。 在 getcell $1 $2 消息框上方的数字框中输入 y 值，然后输入 x 值，并观察 Max Console 中打印的内容。请注意，该矩阵位置的值在 jit.matrix 的右侧出口输出。 在后面的教程中，你将看到从矩阵中检索值的各种方法。 小结jit.matrix 对象可以为任何尺寸、平面数和数据类型的矩阵数据创建存储空间。该矩阵可以填充来自另一个 Jitter 对象（例如 jit.movi​​e ）的数据，或者用 setall [value]之类的消息来设置所有单元格中的值，或者 setcell [position] val [value（s）]来设置特定单元。可以使用 patch 中其他位置的算法根据公式或一组规则来填充矩阵。 要获取特定单元格中的数据，可以使用 getcell [position]消息。要查看在 Max Console 中打印的所有数值数据，请使用 jit.print 对象格式化矩阵数据并打印。要查看显示为颜色的矩阵数据，请使用 jit.pwindow 对象。这类似于教程1中演示的 jit.window 对象。 在本教程中，我们查看了自己生成的数据，而不是上一篇中的数字视频。两种情况下的存储原理是相同的。无论矩阵是存储来自数字视频帧的每个像素的颜色信息，还是表示颜色的数字，它们都存储在二维矩阵中，并且通过 jit.window 或 jit.pwindow 显示。 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译03 - 播放 QuickTime 视频]]></title>
    <url>%2F180825-jitter-03.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 01 - 什么是矩阵？ Max/MSP/Jitter 教程 02 - Jitter 对象的属性 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Tutorial 1: Playing a QuickTime Movie 这个教程教你使用 Jitter 执行最简单但最有用的任务之一：在窗口中播放 QuickTime 视频。 打开 QuickTime 电影文件 这个 Patch 中有两个 Jitter 对象：jit.movi​​e 和 jit.window。jit.window 会自动打开电脑屏幕上的窗口。jit.movi​​e 则打开 QuickTime 视频并开始播放。 单击 read countdown.mov 的消息框，jit.movi​​e 就会打开 QuickTime 视频文件 countdown.mov 并开始读取。 默认情况下，jit.movi​​e 会在打开文件后立即播放。但是请注意，即使 jit.movi​​e 对象正在播放电影，窗口中却没有显示，因为： Jitter 中的每个对象都执行特定任务——可能非常简单，也可能相当复杂。播放 QuickTime 视频实际上被分解为两个任务： 从硬盘上的文件中将每帧视频数据读入 RAM 获取 RAM 中的数据，并将其显示为屏幕上的彩色像素 第一个任务由 jit.movi​​e 执行，第二个任务由 jit.window 执行。为了让 jit.window 知道要显示什么，这两个对象需要进行通信。 Jitter 对象如何通信 重要概念：Jitter 对象相互通信的关键是矩阵的名称 —— 它指定了数据在内存中的位置。Jitter 对象输出其他 Jitter 对象能理解的消息（jit_matrix，后跟空格和存储数据的矩阵名称）。此消息通过接线在对象之间传递。 接收的对象从入口接收消息，从内存中的指定位置获取数据，以某种方式修改数据，并发送修改后的名称数据，输出到对象的左侧出口。 这样每个对象查看内存中相应的位置来获取所需的数据，执行各自的任务，而不必知道其他对象正在做什么。大多数 Jitter 对象只有从另一个对象获取 jit_matrix 消息，得知该查看相应的矩阵，才会对那里的数据做一些事情。 在多数情况下，Jitter 对象自己会生成唯一的名称。你也可以指定名称（最好是这样）。显式地命名矩阵，不同对象就可以使用相同的内存空间。 由 Jitter 对象触发动作是什么让一个 Jitter 对象将 jit_matrix 消息发送给另一个对象呢？大多数 Jitter 对象在收到消息 outputmatrix 或 bang 时，会发出 jit_matrix 消息。另外，一个对象收到消息并修改了数据后，它会自动发出一条 jit_matrix 消息，通知其他包含相同矩阵名称的对象。 也就是说，当一个对象收到 jit_matrix 消息时，它会做一些事情并发出自己的 jit_matrix 消息。当一个对象收到 outputmatrix 或 bang 时，它会发送一个 jit_matrix 消息，而不做任何其他事情。 因此在示例中，jit.movi​​e 对象正在播放 QuickTime 视频，不断存储当前的视频帧，但 jit.window 对象只会在从 jit.movi​​e 对象接收到 jit_matrix 消息时显示内容。只有当 jit.movi​​e 收到消息bang（或 outputmatrix）时才会发生这种情况。那时，jit.window 将显示当前正在电影中播放的任何视频帧。 为了使 jit.window 以一定速度更新并不断显示视频帧，就需要以同样的速度发送 bang 消息给 jit.movi​​e。 视频在 jit.movi​​e 中播放，每当要显示一帧时都要发送 bang 消息 单击标记了 play 的开关，metro 对象就会启动。这将以每秒 25 次（每 40 毫秒）的速度发出 bang 消息。这个速度足以显示该视频的每一帧。只要 bang 继续，我们就能看到窗口中显示的视频。 jit.window 显示矩阵的内容 点击开关停止 metro。jit.window 对象停止更新电影窗口，现在只会看到最后显示的静止图像。电影仍在播放 - jit.movi​​e 仍在逐帧更新内存 - 但 jit.window 会忽略这些更新，因为 jit.movi​​e 不再发送消息。 你可以单击 metro 下方的按钮，来验证电影是否仍在播放。这会让 jit.movi​​e 将 jit_matrix 消息发送到 jit.window，当前帧会更新 Movie 窗口。连续点几次，会看到电影在鼠标点击之间有变化。 总而言之，jit.movi​​e 以视频正常速率逐帧读取 QuickTime 文件的一帧。当 jit.movi​​e 收到 bang 消息时，会将该数据的位置传达给 jit.window，然后 jit.movi​​e 收到 bang 时所包含的任何帧都由 jit.window 显示出来。 对象中的参数本教程中的 jit.movi​​e 的两个参数 320 和 240，指定了对象在内存中保留单帧视频时的宽度和高度。它会声明足够的 RAM 来存储这些帧。因此，使用 read 消息输入希望读入的视频的尺寸是 ok 的。这样我们知道 QuickTime 视频的尺寸是 320x240。 如果输入的维度小于读入的视频的尺寸，jit.movi​​e 没法声明足够的存储空间，就不得不忽略每帧的一些像素。相反，如果输入的维度大于读入的视频尺寸，则每一帧中都没有足够的像素来填充已分配的内存空间，因此 jit.movi​​e 会平均分发数据，并用重复数据填充空余的内存。 jit.window 对象有五个输入的参数：Movie 5 41 325 281。第一个参数是 jit.window 显示的矩阵的名称。它也会出现在视频窗口的标题栏中。它可以是任何单词（用引号括起来的话，可以是多个单词）。接下来的两个参数，表示视频窗口显示区域左上角的 x，y 屏幕坐标，后两个参数是显示区域右下角的坐标（左-上-右-下）。选择了这些数字是因为 它们定义了一个 320x240 的显示区域，与视频尺寸相同 当考虑操作系统默认的窗口边框、标题栏和菜单栏的尺寸时，窗口刚好隐藏在桌面的左上角。（当然也可以设置标题栏不显示） 输入 metro 的参数 40，使其每秒发出 25 次 bang消息。QuickTime 视频的帧速率是每秒24帧，因此这个 metro 持续触发 jit.movi​​e 对象，确保每帧都能显示。 要播放 QuickTime 视频，请使用 jit.movi​​e 打开文件并将视频的连续帧读入 RAM，然后使用 jit.window 在单独的窗口中显示视频。使用输入的参数指定视频的尺寸，以及屏幕上显示区域的精确坐标。 小结Jitter 对象通过相互发送矩阵的名称，来传递特定视频帧的信息——该信息在内存中的位置。 Jitter 对象获得矩阵名称时，它使用该位置的数据执行指定的任务，然后将修改后的数据名称，发送给其他 Jitter 对象。几乎所有 Jitter 对象在收到bang消息 （或 outputmatrix）时都会发出一个名称（包含在jit_matrix消息中）。因此，为了显示视频的连续帧，以某个速率向 jit.movie 发送 bang 消息，然后​​连接到jit.window显示。 跟踪每个对象的消息和角色 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>视频</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译02 - Jitter 对象的属性(attributes)]]></title>
    <url>%2F180822-jitter-02.html</url>
    <content type="text"><![CDATA[Max/MSP/Jitter 教程 01 - 什么是矩阵？ 00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档：Attributes: Editing Jitter object parameters 属性是指定 Max 对象行为的方法。大多数 Jitter 对象使用属性来指定当前状态的变量。 许多 Max 对象使用多个参数来确定行为。对象名称后面的这些参数的顺序，决定了对象如何解析它们。在上面的例子中，counter 的第一个参数设置了计数的方向；第二个和第三个参数确定最小值和最大值。 这些值都是数字，参数个数可能会影响对象的行为，所以它们的顺序很重要。如果 counter 只有两个参数，它们会作为最小和最大值，而不是方向和最小值。参数的位置和数量最为关键，在 counter 的例子中，如果只有两个参数，就没办法创建能够指定方向和最大值的 counter 对象。 给定的对象参数，通常被视为初始值，可以从其他入口或发送特殊消息给对象来修改这些值。例如，分别发送整数到第 2 个和第 5 个入口，来更改 counter 对象的方向和最大值，它们会替代默认值。同样，你可以向左入口发送消息 min 后跟一个整数，来更改对象的最小值。 当 Max 对象只有两、三个参数时，天下太平。但是 Jitter 对象通常有很多很多变量（甚至几十个）。如果所有变量都依赖于入口和对象参数的顺序，那么光看文档就够你忙的…… 设置属性与 Max 对象不同，Jitter 对象可以用属性来设定行为。将属性与 Jitter 对象的名称一起输入对象框，或者在创建对象后用消息设置（和检索）属性： 具有对象名称后的属性的Jitter对象 上面是 jit.brcosa 的例子，它有三个属性。使用 @ 符号 + 属性名称 + 一个或多个参数（可以是任意数​​据类型：int，float，symbol 或 list），在对象框中设置属性。 可以在对象的名称之后，以任意顺序输入个数不限的属性。你可能不知道 jit.brcosa 对象的功能，但可以根据属性的名称以及数据类型来推断。 提示：@符号与属性名称之间没有空格 同样重要的是：Jitter 对象可以同时具有输入的属性和输入的参数。请参阅下面的 Jitter 对象参数 部分。 与 Max 对象一样，创建 Jitter 对象并设置初始值以后，可以向对象发送消息随时更改这些属性值： 使用 Max 消息更改属性 jit.brcosa 对象的亮度属性初始值为 0.5（在对象框中输入 @brightness 0.5），然后可以发送消息 brightness [float]到对象的左入口来更改。发送带有属性名称的消息（后跟相关参数）到 Jitter 对象的左入口，就可以更改几乎任何属性。 与 Max 对象一样，Jitter 对象有参数的默认值。上面的 jit.brcosa 对象只设置了亮度的初始值，其他属性都使用默认值。在上面的示例中，使用消息更改对象的对比度(contrast)和饱和度(saturation)属性的值，从而替换对象的默认值。 下面说明如何设置对象的属性值。 Jitter 对象参数大多数 Jitter 对象有四种输入属性或输入参数。实际上它们都是属性，只不过 Jitter 对象会自动判断应该用作属性还是参数。 Jitter 对象也可以有参数 上面 jit.rota 对象有两个初始化的属性：anchor_x 和 anchor_y。但其他数字是什么意思呢？ 如果 Jitter 对象处理的是矩阵数据，则参数将被理解为： 输出矩阵的 planecount 输出矩阵的类型 输出矩阵的大小或维度 现在我们知道，上面的 jit.rota 对象将输出一个由 4 个 char（8位整数）数据平面组成的矩阵，每个平面的维度是 320x240。 注意：如果要指定 Jitter 对象的参数，参数必须出现在任意属性之前。否则 Jitter 对象会将参数误解为属性的值，而不是对象的参数。 所有可以输出矩阵数据的 Jitter 对象，都有几个共同的属性，它们可以设置参数：planecount，type 和 dim。可以通过输入属性（不需要指定顺序），也可以用消息触发更改。例如，下面的三个对象是等价的： 参数或属性？你来定 第一个对象的输出矩阵，直接使用输入的参数来设置。 第二个对象使用输入的参数设置了 planecount 和 type，但使用了输入的属性设置了 dim 的数量。 第三个对象使用输入的属性来设置所有内容。 你也可以用 loadbang 对象触发的消息来初始化对象属性： 另一种初始化属性的方法 查询属性和对象状态查找对象属性设置的最快方法，是查看检查器（inspector）。选中对象，按 cmd/alt + i 或单击右侧工具栏上的 i 图标就可以打开。在窗口底部附近可以找到当前属性设置。 属性的另一个功能是显示 Jitter 对象属性的当前值。用一个 get 开头的消息，紧跟想要查询的属性名（与get之间没有空格）来触发。比如下图的 getdim 可以触发动作，获取 jit.grab 对象的 dim 当前参数。结果值由 Jitter 对象以消息形式从右输出口输出（以属性的名称 dim 开头）。 查询 Jitter 对象的属性 使用 get 可以查询出属性的当前值，即使之前从未设置过。例如，下面的 patch 获取了 jit.plur 对象的一些默认值。用 route 对象可以轻松分离每个属性的值。 获取属性的默认值 你可以发送给任何 Jitter 对象getattributes 和 getstate 消息，来获得对象的所有属性。 getAttributes 消息令 Jitter 对象输出它包含的所有属性列表。查看几个 Jitter 对象，很快就会发现几个频繁出现的属性（例如outputmode，type 和 dim）。其他（例如 jit.brass 对象中的 mask）则是某些对象独有的。 getstate 消息可以一次性输出 Jitter 对象所有属性的值： 查询对象的状态 这样我们就可以用 route，unpack和其他对象来按需查找属性值了。在后续的教程中会遇到几个 Jitter 对象，其属性基于输入矩阵（或被对象打开的文件）执行的计算而更改。想要找出对象计算结果，就需要查询相关属性值。 ATTR你还可以使用 attrui 对象读取属性值。这是一个 UI 控件，它与对象的入口是双向连接的。attrui 对象有两个部分，左边部分是所有可用的属性的下拉菜单。选择属性后，右侧会显示属性的当前值，并可编辑。 查找对象的状态 小结Jitter 对象的属性，让我们可以很好地管理复杂的对象参数。你可以使用属性来初始化、更改和查找存储在 Jitter 对象中的当前值。直接在属性名称后赋值，就免去了记忆参数功能和顺序的麻烦。 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇 MakeNoise 系列 MakeNoise01 - 声音是什么？ MakeNoise02 - 频率和音高 MakeNoise03 - 振幅/响度/音量/增益 大乱斗 MakeNoise04 - 波形和相位 MakeNoise05 - Envelope 包络（ADSR） MakeNoise06 - 音色和均衡器(EQ) MakeNoise07 - 音频的分辨率 Sample rate/Bit depth MakeNoise08 - 振荡器和滤波器 MakeNoise09 - 压缩 Compression MakeNoise10 - 延时和混响 Delay &amp; Reverbimg.viz.mobi]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>视频</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Max/MSP/Jitter 官方教程翻译01 - 什么是矩阵？]]></title>
    <url>%2F180821-jitter-01.html</url>
    <content type="text"><![CDATA[00 翻译自 Cycling74 的 Max/MSP/Jitter 官方文档： What is a Matrix? 矩阵即网格，网格的每个格子都包含一些信息。例如，棋盘是一个矩阵，每个方格包含特定的信息：有某个棋子，或没有棋子。 方便起见，假设矩阵中每个格子的「信息」都是数字。 电子表格是二维矩阵 水平的数据组称为行，垂直的数据组称为列。在路线图、棋盘或电子表格中，通常会使用字母和数字标记行和列，这样就可以表示任意一个单元格的位置。在上面例子中，单元格 C3 的数值为 0.319。 上面的矩阵例子是二维的——宽度和高度。在 Jitter 中，矩阵维度范围在 1~32 维之间。（一维矩阵对应编程中的数组 array。Max 中有一些对象用于存储数组，例如 table 和 multislider。不过有时候 Jitter 中的一维矩阵更适用）虽然在纸上描绘起来有点困难，但我们仍然可以想象一个有宽度/高度/深度的立方体三维矩阵。（例如，矩阵宽/高/深 分别有 3 个单元，总共 3x3x3 = 27个单元） 一个 3x3x3 维矩阵共有 27 个单元 四维或更高维度的矩阵，相当挑战我们的视觉想象力和描述能力，但它们确实存在。 视频屏幕作为矩阵视频屏幕由微小的单个像素组成，每个像素都显示特定的颜色。在计算机显示器上，屏幕的分辨率通常是 1024 像素宽，768 像素高，也可能是800x600 或 640x480。在电视监视器中，分辨率大约为 640×480。上述屏幕的宽高比为 4:3。 在较宽的 DV 格式中，宽高比为3:2，图像通常为 720x480 像素。高清晰度电视（HDTV）指定了另一种宽高比 16:9。在教程中通常使用 4:3 的宽高比，最常见的尺寸小于 320x240 甚至 160x120，这样可以节省 Max patch 的大小。 常见的像素尺寸 单帧标准视频由 640×480 = 307,200 个像素组成。每个像素显示一种颜色。为了用数字表示眼睛可分辨的像素的颜色，我们需要范围非常大的颜色值。 用数字表示颜色值有许多方式。描述计算机中每个像素颜色的标准方法，是将颜色分解为红色、绿色和蓝色（也称为RGB），以及透明度（称为Alpha通道）。因此，大多数计算机程序将单个像素的颜色，存储为四个单独的数字，分别表示 α，红色，绿色和蓝色。这种四通道颜色表示方案通常称为 ARGB 或 RGBA。 Jitter 也遵循这个惯例。为了使矩阵的每个单元表示一个颜色像素，每个单元都包含四个数值（α/红/绿/蓝）。因此存储视频帧数据的矩阵，实际上在每个单元格中包含四个数值。 矩阵的每个单元格包含多个数字 因此，视频帧在 Jitter 中是二维矩阵，每个单元表示帧的像素，并且每个单元包含 α/红/绿/蓝 四个值，范围从 0 到 255。为了区分多单元格与矩阵维度的概念，Jitter 引入了平面(plane)的概念。 什么是 plane？为矩阵中的数字分配内存时，Jitter 需要知道每个维度的范围 - 例如，320x240 - 以及每个单元格中要保存的值的数量。为了跟踪单元格中的不同值，Jitter 把单元格看做位于某个单独平面上，因此我们将视频帧视为四个数据平面的二维矩阵。 矩阵每个单元中的值存在于四个虚拟平面上 使用这个概念框架，我们可以在需要时单独处理每个平面（以及颜色信息的每个通道）。例如，想要增加图像的红色，只需增加矩阵红色平面中的所有值，保持其他值不变。 一般在 Jitter 中用四个矩阵的数据-α/红/绿/蓝的 表示视频。这些平面的编号从 0 到 3，因此 Alpha 通道位于平面 0 中，RGB 通道位于平面 1,2 和 3 中。 矩阵中的数据计算机用不同格式来存储数字。如果知道想要存储的数字类型，就可以仅为每个数字分配真正需要的空间来节省内存。例如，用 ASCII 0~255 存储字母字符，只需要 8 位（2 的 8 次方）的空间来存储每个字符。如果想要存储更大范围的数字，可能会使用 32 位（包含的整数范围从 -2,147,483,648 到 2,147,483,647）。为了表示带小数部分的数字，例如 3.1416，我们使用浮点数二进制系统，32 位或 64 位数字的某些位表示值的尾数，其他位表示指数。 用 Max 编程的大多数情况下，不需要知道 Max 如何存储数字。但是用 MSP 处理数字音频时，最好了解 MSP 什么情况下使用浮点数（如果不小心用整数替代了浮点数，程序可能会报错）。在 Jitter 中，了解计算机的存储类型非常有帮助。 Jitter 矩阵可以将数字存储为 64 位浮点（也称为双精度浮点或双精度），32 位浮点（简称浮点数），32 位整数（称为long int，或者只是int）和 8 位字符（称为char）。某些 Jitter 对象仅以一种格式存储，因此不必指定存储类型。但是其他 Jitter 对象允许多种方式存储，因此必须指定数据类型为 char / long / float32 / float64 等。 重要概念：在使用 Jitter 操作视频时，需要了解矩阵中数据存储的知识。矩阵默认以 ARGB 格式保存视频数据，每个单元的数值范围是 0~255 （一般在四个平面中）。最常见的数据存储类型是 char，并不是因为存储的是字符。最常存储的值通常是数字，只需要 256 个不同的可能值来表示，因此 8 位的 char 就足够了。视频数据量一般较大，所以 Jitter 中大多数矩阵对象默认使用 char 存储类型，以减少存储空间。对于单色（灰度）图像或视频，单个 char 数据平面就足够了。 友情提示：独自折腾 Max 易患上癔症……不妨入群互助 👇👇👇 MakeNoise 系列 MakeNoise01 - 声音是什么？ MakeNoise02 - 频率和音高 MakeNoise03 - 振幅/响度/音量/增益 大乱斗 MakeNoise04 - 波形和相位 MakeNoise05 - Envelope 包络（ADSR） MakeNoise06 - 音色和均衡器(EQ) MakeNoise07 - 音频的分辨率 Sample rate/Bit depth MakeNoise08 - 振荡器和滤波器 MakeNoise09 - 压缩 Compression MakeNoise10 - 延时和混响 Delay &amp; Reverb]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Max/MSP</tag>
        <tag>Jitter</tag>
        <tag>视频</tag>
        <tag>Creative Coding</tag>
        <tag>教程</tag>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[破解 AI 时代的焦虑 —— 从人机交互到人机协同创作]]></title>
    <url>%2F180717-human-computer-symbiosis.html</url>
    <content type="text"><![CDATA[这是 4 月做的一次分享。大概是我做过的分享中，现场讨论气氛最热烈的一次了。 最近抽空整理成文章，希望大家可以继续讨论这个有趣、有争议的话题。 为什么分享这个话题呢？ 我做了好多年交互设计的工作，所以学习和工作一直有一个离不开的主题——人机交互（Human-Computer Interaction）。 人机关系的演进什么是人机交互？我把它简单理解为： 人如何与机器或是某个复杂系统的沟通和互动过程。 更为完整的版本，请看我在知乎上的回答 什么是交互设计？ 比如，鼠标就是一个解决人和机器互动问题的经典产品。 现在大家都觉得鼠标再平常不过了，但是在当年，Douglas Engelbart 的这一项发明，极好地解决了人们在图形化计算机界面操纵屏幕元素的问题。为了表彰这项发明以及在人机交互领域的开拓式贡献，Douglas Engelbart 在 1997 年获得了「计算机界的诺贝尔奖」——图灵奖。 For an inspiring vision of the future of interactive computing and the invention of key technologies to help realize this vision. – Turing Award Citation 人和机器的对话、交互一直在演进。这也从一个侧面反映了人创造工具的历史： 人创造的工具越来越多样、复杂、强大。想想看，今天我们在手机上能完成多少事情。 于是，有人慢慢感到这种发展速度似乎不大对劲……奇点要来了，AlphaGo 也出现了。 随着深度学习热潮的演进，大家发现，以前为了让机器智能化而不得不做的很多工作，比如，符号化、标准化、模块化、输入大量专家知识、需要庞大的训练数据集、要做苦脏累的特征工程等等，现在都简化了。基本上，只要目标足够清晰、可操作，训练数据和计算资源足够，机器学习产生的结果就可以满足要求。 我个人也经历了一次切身的体验。 今年年初在上 Udacity 的 Deep Learning Nano Degree 课程的时候，最后一个实践项目，是基于人脸图像库，用生成对抗网络（GAN）算法自动生成人脸。 虽然在学习过程中，早已对算法能实现的结果有所预期。但是当我把程序放到 AWS 的 GPU 上面跑了不到二十分钟，看到结果时还是忍不住隐隐感到机器的强大和压迫。 这是最开始几个训练迭代生成的模糊不清的轮廓： 这是十几分钟训练结束后生成的人脸： 说一点儿都不焦虑是假的。 何况各种媒体还铺天盖地强化这种焦虑，今天是一百零八种会被机器取代的工作，明天是哪个比赛机器又战胜了人…… 于是大家经不住会问： 似乎只有像诗词、小说、爵士乐、即兴表演这些领域，机器看起来就是不太擅长。 但，也不好说。 Paul 是一个专门给人画肖像画的机器。从 2011 年至今已经创做了非常多的作品。看起来非常有艺术感，不是吗？ 有时候在焦虑之余，又忍不住会想：这种焦虑到底从何而来？ 如果看过莱考夫「我们赖以生存的隐喻」的同学都知道，隐喻 Metaphor 对我们的影响有多么大。仔细想想，感到机器的威胁，是不是也源于人机关系的一些基本隐喻？ 我们基本上都是以一种对立或一分为二的方式来看待这些基本词汇： 看到这些词汇，我们会下意识地觉得它们是对立关系。逻辑、精确、冰冷的工程思维，怎么跟想象、感性、个性、创作融为一炉呢？ 这大概就是问题所在了。 隐喻和可能语言有边界。这是语言能高效传递信息的代价之一。 所以，打破语言或者说概念的界限，也许就是找到新出路的起点。 （PS. 在心理咨询中，咨询师很重要的一部分工作，是帮助来访者呈现问题、reframe 问题，而不是直接插手去替他解决问题。） 其实早在 50 多年前，就有人探讨过人机关系的「未来简史」。 美国心理学家和计算机科学家 Licklider 在 Man-Computer Symbiosis 这篇论文中，讨论人跟机器的关系存在什么样的可能性，提出「人机共生」的概念。 快 60 年过去了，技术的发展让「蠢机器」第一次有可能成为人类的「好基友」，我们为什么首先感到的是焦虑而不是兴奋呢？ 还记得 2016 年，在 AlphaGo 战胜李世石后，跟安猪老师在大理有过一次讨论。当时我的感慨是，为 AlphaGo 的胜利感到挺开心的，但并不是因为我是技术的脑残粉，而是因为我觉得到了这个时候，人不得不去面对这样一个问题： 人到底擅长什么？ 也就是说，当接受生物智能无法跟上非生物智能的发展时： 人到底有哪些可以让机器「羡慕」（当然，机器不会有这种情绪）的天赋呢？ 至今我还没有答案，但我想，大概会包括：直觉、洞察力、探索和意外的创造。人欣赏「意外」的审美、运用「意外」的创造力，应该会长期秒杀机器。 人跟机器最大的区别到底是什么？ 我一直在问自己这个问题。 意图，可能是现阶段人跟机器最大的差别。 人因为时间、空间、认知方面的三大局限，因为生命时长极其有限、可触达的空间极其有限、工作记忆（内存）极其有限，决定了人类的一些基本 drive 和价值观。人的美妙与荒谬，可能都来自于两行二选一的核心代码： Be numb/sober and Duplicate Be insane/self-distroying and Love 所以我（naive地）认为，突破时间、空间、认知限制，渴望无限，是人类物种永恒的追求，换一个词来概括，那就是——意图。 我们在基本意图上发展出复杂的能力，会体会微妙的情感，会追求意义，会审美、表达、共情，会讲故事和构建社会关系…… 而机器，无所不能，但就是没有意图！ 这样看来，现在难道不是人类最好的时代吗？有一个毫无私心、任劳任怨、潜力无限的助手，为什么我们担心的是被助手取代，而不是兴高采烈地放开手脚去创造呢？ 人机关系的新阶段无论技术如何发展，人类从来没有停止过创造。 这是用 Google DeepDream 算法生成的作品： DeepDream 网站的首页，已经为人机关系的新时代做了注脚： 艺术家们一直在尝试探索人机关系，可能是这样的： 也可能是这样的： 上图是一位叫做 Dragan iLiC 艺术家的项目，人充当机器的笔刷，由机械臂控制着人去作画。 在分享的现场，这张图引发了热烈的讨论。有的小伙伴表示，这样做的目的到底是什么，她看不出任何意义。有的小伙伴认为这是对人机关系一种悲观的表达。有的小伙伴的态度则更为中立而开放…… 我想，这恰恰就是艺术家的目的吧：激发人们的反思与讨论。并不存在对与错，只是 raise questions，这也许就是最大的善意。 音乐，人机协同即将爆发的领域？最近关注音乐和技术结合的领域比较多，越来越觉得音乐也许会迎来人机共创的繁荣时期。 音乐本身是符号化、形式化非常强的「语言」。音乐的规律经过数百年的研究和沉淀，几乎已经没有太多规律上的「未知和秘密」，更多的变化会来自文化思潮影响下的风格探索。 算法作曲早已不是什么新鲜事，基于 AI 自动生成音乐已经有很多成熟的应用。甚至是在对即兴表演要求相当高的爵士乐，也已经有人机共同即兴表演的尝试。比如 Al Biles 教授的 GenJam 项目，从 2005 年至今，已经演出过数十场。 GenJam’s Journey_腾讯视频 而去年的 Qosmo AI DJ 项目也展示了人类 DJ 和 AI DJ 一起 Jam 的效果~ AI DJ Project 人工智能 DJ 与人类合作打碟_腾讯视频 何以解忧？ 这是最坏的时代 也是最好的时代 这取决于我们现在每做的一个决定、每投入的分分秒秒。 回到主题，如何破解 AI 时代的焦虑呢？ 以下是 00 给（自己）的解药： 回归创造者的使命，装备上创造所需要的心、眼、脑、手，去看去爱去体验。知识可以学习，但智慧更多是一种体验。把技术当成伙伴和切磋的对手，去行动，去试验，去创造。 最后 Ref Doug Engelbart 1968 Demo PATRICK TRESSET | Licklider - Man-Computer Symbiosis.pdf www.draganilic.org GenJam]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>交互设计</tag>
        <tag>AI</tag>
        <tag>ArtxCode</tag>
        <tag>Deisgn</tag>
        <tag>人工智能</tag>
        <tag>HCI</tag>
        <tag>人机交互</tag>
        <tag>人机共生</tag>
        <tag>艺术</tag>
        <tag>跨界</tag>
        <tag>创新</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MakeNoise10 - 延时和混响 Delay & Reverb]]></title>
    <url>%2F180708-make-noise-10.html</url>
    <content type="text"><![CDATA[MakeNoise01 - 声音是什么？ MakeNoise02 - 频率和音高 MakeNoise03 - 振幅/响度/音量/增益 大乱斗 MakeNoise04 - 波形和相位 MakeNoise05 - Envelope 包络（ADSR） MakeNoise06 - 音色和均衡器(EQ) MakeNoise07 - 音频的分辨率 Sample rate/Bit depth MakeNoise08 - 振荡器和滤波器 MakeNoise09 - 压缩 Compression 音乐是时间的艺术。 时间也是信号的天然属性。而声音设计，同时还是空间的艺术。 声音必定产生在某个空间当中，人对声音的印象和记忆，多少都包含了对空间线索的直觉和感受。比如，密友之间的低语声，比较可能发生在一个小房间里；而轮船驶过的汽笛声，大概是在一个临海、开阔的码头，夹杂着繁忙的机械马达声和喧闹的人声。如果是清晨的港湾，大概又是不同的景象了。 调整声音信号的方式有很多，延迟（delay）是必不可少的一种。混响（reverb）是塑造声音的空间感的秘密。今天我们就来一探究竟吧。 Delay 延时 Delay is an audio effect and an effects unit which records an input signal to an audio storage medium, and then plays it back after a period of time. — Wiki￼ 延时可以在时间上平移一个信号。延迟效果器储存并保留音频信号一段时间后再将其释放。 延时是很多音效的核心，比如混响 Reverb、滤波 Filters 、和唱 Chorusing、Flanger（镶边，利用原音叠上稍微延迟的音，产生出金属感的回旋声）。 通过控制多条延迟的声音，可以产生回声效果。以一定顺序衰减并释放每条延迟声音，可以模拟出真实的回声效果。 延迟效果有很多种形式。比如在 Pink Floyd 的 Comfortably Numb 里面，第一句歌词「Hello…Hello…Hello」是一个长延迟的效果。 Delay 的参数： Time/tap: the amount of time between the dry, unprocessed signal and the wet, processed signal. Repeat/feedback: controls how many repeats of a delayed sound Reverb 混响混响可以帮助我们营造合适的空间「场所感」。 混响(reverberation)是声源发音停止后，声音继续存在的声学现象。—wiki 声音在空间中传播，会遇到不同的物体，发生反射（reflection）、吸收（absorption）和扩散（diffusion）。混响产生于声波的传播被墙壁或周围障碍物反射而滞后于发声。￼ 不同的材料对声音的吸收效果不同，常常需要精密的计算和搭配，才能营造出理想的声音效果。 混响时间是指从其最初的反射声强度衰落 60 dB (降低到 -60dB)所花费的时间。￼ 延时时间的最小值，应该至少为混响时间的四分之一，而且延时的长度应为质数（或各延时时长是互质的）。合理的混响效果建议每秒有 1000 个回声。 室内环境的声学效果涉及非常复杂的声学知识，尤其是录音棚和音乐厅。 下图是 00 所拍摄的上海交响乐团音乐厅的一角，舞台上方使用了很多木质材料，来获得最佳的混响和其他声音效果。 在 Ableton Live 里处理混响下面来看看 Ableton Live 里面是如何调整音频的混响的。 混响的参数： Dry/Wet: 没有混响/最大混响 Input: 控制对多少原始信号做混响处理 Reflect: 混响初期（early reflection），对混响感知影响更大 Diffuse: 混响末期（late reflection） Size: 模拟不同大小的空间的混响 (对 Reflect 的影响大于 Diffuse) Decay time: 混响消失所需时间 Predelay: 原始信号做混响处理之前的等待时间 以下视频详细讲解了 Reverb 效果器的使用： Reverb in Ableton Live_腾讯视频 Max/MSP 里的延时和混响Max/MSP 有丰富的控制延时的方法和对象。 delay~ tapin/tapout teeth~ 还有处理非信号的延时器：pipe 如果对如何从信号层面实现混响有兴趣，可以到 Max/MSP 里面拆开 BEAP 组件里面的 Reverb2，看看到底是怎么实现的。 (小编 0 已晕…… 后会有期) Ref Audio Engineering 101 - A Beginner’s Guide to Music Production Reverberation - Wikiwand Acoustic Sound Absorption - Acoustic Panels Review Delay (audio effect) - Wikiwand) Comb filter - Wikiwand 混音指南（2016） | À quoi bon]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Music</tag>
        <tag>Sound</tag>
        <tag>声音</tag>
        <tag>Ableton Live</tag>
        <tag>Max/MSP</tag>
        <tag>Delay</tag>
        <tag>Reverb</tag>
        <tag>混响</tag>
        <tag>延迟</tag>
        <tag>音效</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MakeNoise09 - 压缩 Compression]]></title>
    <url>%2F180706-make-noise-09.html</url>
    <content type="text"><![CDATA[MakeNoise01 - 声音是什么？ MakeNoise02 - 频率和音高 MakeNoise03 - 振幅/响度/音量/增益 大乱斗 MakeNoise04 - 波形和相位 MakeNoise05 - Envelope 包络（ADSR） MakeNoise06 - 音色和均衡器(EQ) MakeNoise07 - 音频的分辨率 Sample rate/Bit depth MakeNoise08 - 振荡器和滤波器 在音频处理中，压缩可以指数据压缩格式（如 mp3 格式），如何压缩可以减少文件大小。本文学习的则是动态范围（Dynamic range）的压缩。￼ EQ（均衡器） 和 Compressor（压缩器）是 Sound engineering 里面最基础最常用的效果器。压缩器是动态处理器的一种。动态处理器最简单的形式就像一个自动的音量控制器（gain control），当音量太大时减低音量，当音量太小时调高音量。 想象一下，你家的电视有两个不同的频道。一个频道总是很小声，需要用遥控器调整到 20 才听得清楚。另外一个频道却很大声，必需用遥控器调到 12 才不会吵到邻居。 Compressor 的作用，就相当于每次切换这两个频道的时候，自动帮你调整声音大小，使之保持在合适的范围。￼ 在音频处理中，压缩的目的是让乐器、人声或录音的动态范围保持在我们想要的范围： 控制动态性能 填补漏洞 声音包络控制/塑形 调控音色 调整峰值和失真 Sidechain compression(ducking/dipping/pumping) ￼ 更直观来说，压缩处理可以： 使音频的动态范围更平整（even out） 融合两种乐器的声音（如bass 和底鼓），听起来更为整体 提亮音量比较小的声音 控制太响的声音 使声音获得特定的音色效果 创造特别的声音 所有的动态处理器基本上都是指定一个开始工作的信号电平，然后对信号做出某种形式动态变化。 不同压缩方法对 dynamic range 的影响：￼ 在 MakeNoise 06 中我们学习了均衡器(EQ)。那么在处理音频时，应该是先调 EQ 还是先调 Compressor 呢？ Placing an EQ before a compressor can have the effect of exaggerating the applied EQ. Placing an EQ after a compressor you can often attain more audible results with less EQ, producing results that often do not “sound EQ’s EQ” – Chuck Zwicky 一般来说，EQ 在 Compressor 之前，主要为了调整 Compressor 的反应；EQ 在 Compressor 之后，是为了调整波形达到更好的混音效果。当然也要取决于声音素材和想要的效果。 在 Ableton Live 里压缩不同的音轨进入 Ableton Live，在效果库里面找到 Compressor，拖到音轨上，就看到 Compressor 面板中调整压缩的参数： ￼ Threshold/Input：控制何时触发压缩 Gain reduction (GR)：有多少 dynamic range 被去掉 Output/Makeup gain：补偿因压缩导致的音量减小，设定输出的最高电平 Attack：当信号达到阈值时，压缩器在多少时间内开始处理。Fast attcak 0.01~10 ms, slow attack &gt; 50 ms Release：当压缩时，原始信号被保留多久。通常以音频的 tempo 为基准 Ratio：以输入为基础，按比例设定输出值 Link：连接双声道/单声道压缩器到另外一个单声道，形成立体效果 Side chain：使用信号而不是主输入来控制压缩 Bypass：压缩过滤 如何调整不同乐器音轨的压缩器，请看下面视频里的详细讲解： Compressor in Ableton Live_腾讯视频 用 Max/MSP 实现 Compressor更进一步，我们到 MSP 里拆解 Compressor 是如何实现的。 官方文档里提供了详细的说明和例子。00 调整和补充了一些注释： 压缩器主要有三部分构成：参数、压缩流程和处理算法。下面分别看看每一部分的实现。 可控制的参数主要有 Input gain, Threshold, Ratio, Attack time, Release time，之前我们在 Ableton Live 的 Compressor 面板里都看到了： 压缩处理的主流程：先实时监测 input level，把信号从 amplitude 转换为 dB，然后跟阈值参数比较，判断是否进行压缩： 如果达到阈值后开始压缩，需要降低的 gain 由以下部分计算。公式是 (Threshold - Level) * (1 - 1/ratio)： 然后将计算值再换算为 amplitude，输出到 compression 的主流程中，最后再加一道 rampsmooth~ 来平滑 gain 的变化。 Ref Audio Engineering 101 - A Beginner’s Guide to Music Production 什么是动态处理器？ MSP Compression Introduction: What is Compression? Parallel Compression | RA: Understanding compression 先EQ？還是先Compressor？ @ Balanced Audio Lab 平衡音訊實驗室 :: 痞客邦 :: Session 6: Compression and Dynamics]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Music</tag>
        <tag>Sound</tag>
        <tag>声音</tag>
        <tag>Ableton Live</tag>
        <tag>Max/MSP</tag>
        <tag>EQ</tag>
        <tag>Compressor</tag>
        <tag>动态压缩</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MakeNoise08 - 振荡器和滤波器]]></title>
    <url>%2F180703-make-noise-08.html</url>
    <content type="text"><![CDATA[MakeNoise01 - 声音是什么？ MakeNoise02 - 频率和音高 MakeNoise03 - 振幅/响度/音量/增益 大乱斗 MakeNoise04 - 波形和相位 MakeNoise05 - Envelope 包络（ADSR） MakeNoise06 - 音色和均衡器(EQ) MakeNoise07 - 音频的分辨率 Sample rate/Bit depth 制造声音，总的来说有两种思路：加性和减性。加性的方法逐步叠加多个声源，减性的方法逐步剔除声音中不想要的部分。 所以，声音设计的过程，无外乎是发出声音，修剪、调整为想要的效果。 对应的，振荡器是最主要的发声对象，而滤波器是最主要的过滤修整对象。所以这一篇的内容比较多，也会需要回顾之前所讲的一些概念。 振荡器和谐振器在所有能够产生声音的东西（包括所有乐器）中，绝大部分都是振荡器 (Oscillators)、共振器 (Resonators) 或是两者的组合。 OSC 振荡器电子振荡器是用来产生具有周期性的模拟信号（通常是正弦波或方波）的电子电路。音频振荡器产生频率约为 16 Hz~20 kHz。 振荡器（OSC）产生原始波形与音高，是所有合成器发声的源头。合成器一般由多个 OSC 或 Wavetable 的声音叠合而成一个音色。 如果没有 OSC 振动发出原始音高，其他元件也就没有存在的意义了。（还记得大明湖畔 440 Hz 的中央 A 音高吗？） MakeNoise02-frequency_in_max 在 MakeNoise04 - 波形和相位 中介绍过基础的波形，它们都产生于基础的振荡器：￼ Resonator 共振器/谐振器 In physics, resonance is a phenomenon in which a vibrating system or external force drives another system to oscillate with greater amplitude at specific frequencies. —Wiki 振荡器和共振器的区别在于，它们出现在能量流动链的什么位置，是作为原初的波源还是作为被振动源驱动（受力）的系统。 如果两个点有相同的固有频率，则相互冲突的力就变为零。即，由一个点提供给对方的阻抗变为 0 ，这被称为共振/谐振 (resonance)。共振通过在特定频率上施力，来增加震动的幅度 。 这么说真的好抽象哦……还是直接到 Ableton Live 里面体验一下吧。 拖进一段 beats，然后对比开启和关闭 Resonators 的效果： Resonator in Ableton Live_腾讯视频 低频振荡器 LFO Low-frequency oscillation (LFO) is an electronic signal which is usually below 20 Hz and creates a rhythmic pulse or sweep. – Wiki 低频振荡器发出低于 20Hz 的信号，主要用来驱动其他参数、调制合成器/延迟等形成周期性响应，以此来制造出特定的音效，而不是作为主频发声振荡器。 LFO 的主要参数： Shape：Sine、Square、Pulse、Triangle、Sawtooth 等波形 Rate：控制振动時間的快慢，可以调为预设的 BPM Amount/Depth：控制振动的强度 Phase/Offset：波形起始位置 LFO的使用范围很广泛，当需要制造往复变化的周期性效果，如音高一高一低的 Vibrato，相位一左一右的 AutoPan，音量一强一弱的 Tremolo…等等，都可以利用 LFO 来生成。在一部强大的合成器上，方便且多功能的 LFO 是不可或缺的。 滤波器 Filter声音由振荡器/谐振器产生以后，声音塑形的第二个关键，就是调整其频率分布。Filter 起到限制信号的频率范围的作用，它其实就是最简单的 EQ。 按过滤的频率来区分，滤波器可分为以下几类： Low Pass Filter 低通滤波（LP）：允许低于其中心频率的信号更多的通过（过滤掉高频信号） High Pass Filter 高通滤波（HP）：允许高于其中心频率的信号更多的通过（过滤掉低频信号） Band Pass Filter 带通滤波（BP）：允许指定频段的频率通过，过滤掉两侧的频率 Band Reject 带阻（陷波）（BR）：在频谱中过滤掉一部分频率，保留其他频段 在 Ableton Live 的 EQ Eight 中，八个调节点都可以选择采用哪种滤波形式： 按响应方式来区分，滤波器有两类： FIR：输出仅取决于输入的过往数值，称为有限冲激响应 Finite Impulse Respons IIR：输出取决于过往的输入值和过往的输出值，围绕延时元件有一个反馈环路，称为循环（recursive）或无限冲激响应（Infinite Impulse Response）滤波器。可用作累加器，如果反馈很高，当前输入会被加到所有先前输入值上。 Filter 的主要参数包括 Cutoff / Freq 和 Resonance / Res。 选定 Filter 波形后，需要指定过滤的频率界点(Cutoff)。比如选择低通滤波，将 Cutoff freq 指定为 800Hz，那么高于 800Hz 的频率将被滤除。通过指定 Cutoff 的落点，达到调整音色的目的。Res 的作用则主要是为了凸显 Cutoff 所在的频率位置（放大 db）。 Max/MSP 里的滤波器Max/MSP 提供了一系列滤波器任君选择。 Onepole~: 单系数滤波器，也是最简单的 IIR(Infinite Impulse Response) 低通滤波器，常用来减少刺耳的高频信号，或者用来平滑信号。 虽然onepole~的基础用法是低通滤波，不过只要做一个简单的信号减法操作，就可以起到高通滤波的效果： 单系数不够？那么 Biquad~ 双系数过滤器 了解一下~ 为什么叫双系数呢？因为滤波公式为： y[n] = a0 x[n] + a1 x[n-1] + a2 x[n-2] - b1 y[n-1] - b2 * y[n-2] 其中 a0, a1, a2, b1, b2 都是可调参数。 双系数不够？那么了解一下：cascade~ 级联滤波器（多个biquad~） 级联可调性较差？那么 filtergraph~ 了解一下： 如果还是无法满足需求，请尽情折腾更为灵活的filterdesign…… Ref 设计声音 Resonance - Wikiwand LFO (Low Frequency Oscillator) - Synthesis | Coursera 探索合成器的奧妙 | Zuirens 燧人氏]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Music</tag>
        <tag>Sound</tag>
        <tag>声音</tag>
        <tag>Ableton Live</tag>
        <tag>Max/MSP</tag>
        <tag>EQ</tag>
        <tag>Oscilator</tag>
        <tag>Filter</tag>
        <tag>LFO</tag>
        <tag>过滤器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MakeNoise07 - 音频的分辨率 Sample rate/Bit depth]]></title>
    <url>%2F180701-make-noise-07.html</url>
    <content type="text"><![CDATA[MakeNoise01 - 声音是什么？ MakeNoise02 - 频率和音高 MakeNoise03 - 振幅/响度/音量/增益 大乱斗 MakeNoise04 - 波形和相位 MakeNoise05 - Envelope 包络（ADSR） MakeNoise06 - 音色和均衡器(EQ) 在 MakeNoise03 中，我们区分了第一捆容易混淆的概念：振幅/响度/音量/增益。 今天来捋一捋第二捆概念们——Sample rate / Bit depth / Dynamic range / Bit rate，它们影响了声音的分辨率。 图像的分辨率是大家比较熟悉的概念。在一个固定尺寸的图像里包含多少像素，决定了图像的分辨率。 由此可以类比声音的「分辨率」。 一个声音信号的质量由两个变量决定：采样速率 Sample rate 和 比特深度（位深度）Bit depth。 图像分辨率由横纵坐标的像素数量所决定。对应到声音，Sample rate 设定了能够捕捉音频信号的最高频率，可以看做横坐标；Bit depth 决定了每一个 sample 的精度，可以看做纵坐标。两者在两个维度上共同决定了音频的分辨率。 ￼ 采样率 Sample rate The sampling frequency or sampling rate, fs, is the average number of samples obtained in one second (samples per second) — wiki 采样率决定了每一秒内会从音频信号中采集多少样本。 在现实世界中的音频采样，是不连续或离散的信号，每个梯级值都是一个数值，表示一个单一时间点上的幅度。 多少采样点算是足够多，能够精确编码一个声音信号呢？这就要提到 The Nyquist Theorem （尼奎斯特定理）了： States that the signal’s sample rate must be at least two times greater than the highest desired frequency. 采样率/2是一个特殊数字，被称为奈奎斯特点 Nyquist point，它是在任何声音中能够被一个给定采样率所编码的最高频率。 也就是说，每秒的采样至少是信号中的最高频率的 2 倍，就可以完美地还原声音信号。 所以，为了覆盖人类的听觉范围（20Hz~20kHz），每秒需要 40000 个采样点。 那么问题来了，既然 40 kHz 就够了，为什么现在音频 CD 的标准采样率是 44.1 kHz 呢？ 一方面原因是工程的需要。 现实中，麦克风所能接收、采集到的空气振动的频率范围非常大，远远超过人耳听力。如果直接采样会出现混叠。所以要先使用一个低通滤波器，把高于阈值的信号过滤掉。超过 40 kHz 的频段，给低通滤波器留出空间，使得那一段不怎么完美的下降曲线落在 20KHz 之外，不影响音频效果。 另一方面是技术历史问题。 在数字存储媒介被发明之前，早期的数字音频录制在模拟录像带上。当时世界上的录像机主要有二大制式：欧洲的 PAL 和美国日本的 NTSC。当时的 CD 是 SONY（美日制式）与 PHILIPS（欧洲制式）合作的。适用于 PAL 制式录像机的编码器采样频率是 44.1kHz。适用于 NTSC 制式录像机的编码器采样频率是 44.056。 那么 44.1 和 44.056kHz 这两个数字是怎么来的呢？ 44,100=294 x 50 x 3 44,056=245 x 59.94 x 3 50Hz 和 59.94Hz 分别是 PAL 和 NTSC 的场频， PAL 制式下可用扫描线数是 294 线，而 NTSC 则是 245 线。至于x3，则是在一条视频扫描线的磁迹中，纪录三个数码音频数据块。44.056KHz 标准并不能很好地被 NTSC 系统兼容，有一定的误差，所以没有被市场接受。索尼提出了以 44.1KHz/16bit 的方式录制，在数字信号和模拟信号的过渡期，大获全胜。哪怕最后出现了数字CD，也没有敌得过用户的使用惯性。 更多这个话题的讨论，可以参考知乎问题：人耳 20kHz 封顶，为什么数字音频都要记录和解析到更高的频率上去？ 那该用什么样的采样率呢？ The Audio Engineering Society recommends 48 kHz sampling rate for most applications but gives recognition to 44.1 kHz for CD and other consumer uses, 32 kHz for transmission-related applications, and 96 kHz for higher bandwidth or relaxed anti-aliasing filtering. — wiki 比特深度 Bit Depth In digital audio using pulse-code modulation (PCM), bit depth is the number of bits of information in each sample, and it directly corresponds to the resolution of each sample. — Wiki 在 CD 的采样标准中，44.1 kHz 的 Sample Rate 我们有所了解了。那么 16 Bit Depth 又是什么意思呢？ 在音频采样中，每个采样的 amplitude 用二进制数字编码。这个编码的分辨率就是比特深度。 把数据存储成二进制，意味着如果用 n 个二进制位来存储每个幅度值，总共可以表示的数值数量为 2 的 n 次方-1。1 bit 代表采样的值: 0 或 1。如果是 2 bit，采样值范围就是 0, 1, 2, 3。2 的 16 次方是 65536，所以 16 bit 的采样深度分辨率是 -32768~32768。 Bit depth 实际上决定的是 dynamic range 的分辨率。 动态范围 Dynamic Range Dynamic range is the ratio between the largest and smallest values that a certain quantity can assume. It is measured either as a ratio or as a base-10 (decibel) or base-2 (doublings, bits or stops) logarithmic value of the difference between the smallest and largest signal values. 声音的 dynamic range 由信号的最大值和最小值所决定。 在音频处理中，dynamic range 与最大振幅和 noise floor 的比值有关： ￼ 假设 1 bit 表示听觉的门限，16 位 bit depth 可以给出 98 dB 的 dynamic range，32 位为 192 dB，64 位为 385 dB。现在很多数字音频系统都用 64 位。 比特率 Bit Rate还有一个容易与采样率、比特深度混淆的概念，叫比特币，哦不对，比特率。 在数字多媒体领域，比特率是单位时间播放连续的媒体(如压缩后的音频或视频)的比特数量，常用码流或码率表示，单位是kbps（千位每秒）。——wiki 高音质 MP3 的 Bit rate 可达 256-320 kbps ，低音质的 MP3 大概在 100 kbps 。 音频数据的比特率文件大小计算公式如下： Bit rate = sample rate bit depth channels Size in bits = sample rate bit depth channels * length of time 所以，Sample rate 和 Bit depth 会影响 Bit rate 和文件大小。 一般原始的多媒体文件都比较大，为了便于使用需要对其进行压缩，而码流就对应了压缩时的取样率。单位时间内取样率越大，精度就越高，处理出来的文件就越接近原始文件，但是文件也会越大。 小结今天我们又梳理了一捆容易混淆的概念们： Sample rate：每秒采集的音频信号样本 Bit depth：每个信号样本的幅度范围分辨率 Dynamic range：信号的范围极限值区间 Bit rate：单位时间传送的媒体信号量 以后，看见 DAW 里面相关的选项，就心里有数啦： 附录在数字音频领域，常用的采样率有： Sample Rate Use 8,000 Hz 电话所用采样率，对于人的说话已经足够 22,050 Hz 无线电广播所用采样率 32,000 Hz miniDV数码视频camcorder、DAT（LP mode）所用采样率 44,100 Hz 音频CD,也常用于MPEG-1音频（VCD, SVCD, MP3）所用采样率 47,250 Hz Nippon Columbia（Denon）开发的世界上第一个商用PCM录音机所用采样率 48,000 Hz miniDV、数字电视、DVD、DAT、电影和专业音频所用的数字声音所用采样率 50,000 Hz 二十世纪七十年代后期出现的3M和Soundstream开发的第一款商用数字录音机所用采样率 50,400 Hz 三菱X-80数字录音机所用所用采样率 96,000或者192,000 Hz DVD-Audio、一些LPCM DVD音轨、Blu-ray Disc（蓝光碟）音轨、和HD-DVD（高清晰度DVD）音轨所用所用采样率 2.8224 MHz SACD、索尼和飞利浦联合开发的称为Direct Stream Digital的1位sigma-delta modulation过程所用采样率。 Ref Audio Engineering 101 - A Beginner’s Guide to Music Production 设计声音 Max_MSPJitter for music a practical guide to developing interactive music systems for education and more Sampling (signal processing) - Wikiwand#/Sampling_rate) Audio bit depth - Wikiwand Dynamic range - Wikiwand Bit rate - Wikiwand Nyquist rate - Wikiwand 采样率 - Wikiwand 人耳 20kHz 封顶，为什么数字音频都要记录和解析到更高的频率上去？- 知乎 CD为什么采用44.1kHz采样频率? - 知乎]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Music</tag>
        <tag>Sound</tag>
        <tag>声音</tag>
        <tag>Ableton Live</tag>
        <tag>Max/MSP</tag>
        <tag>Sample rate</tag>
        <tag>采样率</tag>
        <tag>Bit rate</tag>
        <tag>Bit depth</tag>
        <tag>Dynamic range</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MakeNoise06 - 音色和均衡器(EQ)]]></title>
    <url>%2F180629-make-noise-06.html</url>
    <content type="text"><![CDATA[MakeNoise01 - 声音是什么？ MakeNoise02 - 频率和音高 MakeNoise03 - 振幅/响度/音量/增益 大乱斗 MakeNoise04 - 波形和相位 MakeNoise05 - Envelope 包络（ADSR） 音色 timbre/tone The character or quality (like attack, spectrum, spectral evolution) of a musical sound or voice as distinct from its pitch and intensity. 音色对应一个静态的频谱，它带有基频和一系列泛音。 泛音其实就是物理学上的谐波，但次数的定义稍有不同，基波频率 2 倍的音频称为一次泛音，基波频率 3 倍的音频称为二次泛音，以此类推。谐波是指周期函数或周期性的波形中能用常数、与原函数的最小正周期相同的正弦函数和余弦函数的线性组合表达的部分。 音色跟频谱（spectrum）和波形（waveform）相关。 明亮的声音比暗淡的声音包含更多的高频泛音。最好的度量是找到它的频谱重心或频谱质心（spectral centroid）。灰暗的音色频谱质心较低，或是在语音范围内没有确定的谐波结构。 一些对音色的「形容词」：￼ 均衡器 EQ调整（Boost/cut/flat）EQ，即通过增高或降低声音在某个频率范围的频率，来影响整体的音色。 现在不妨回到信号处理领域，从物理背景来理解 Equalizer。由于信号在传送路径到接收器接收的过程中，会受到多路径干扰、路径中遮蔽物阻挡造成遮蔽效应，这些码间干扰会导致接收讯号错误率上升。为了降低通讯系统传输的错误率，要作通道估测，根据结果对通道响应做补偿而降低传送错误率。 对声音处理而言，EQ 是一种可以分别调节各种频率成分电信号放大量的电子设备，通过调节不同频率的电信号，来补偿扬声器和声场的缺陷，补偿和修饰各种声源及其它特殊作用。 在各种软硬件和 DAW 里面，EQ 简直可以说是千人千面了。 iTunes 里的 EQ： 调整声音的 EQ 可以： 平衡混音中的各种声音 让声音分布在特定的频段 调出想要的音色 提升整体的听觉效果 补偿环境声场 减少回响 制作音效 当我们调节 EQ 时，经常需要控制调节点所影响的频率范围，它可以由 Q（Slop / Bandwidth / Resonance）来控制。￼ 用 Max/MSP 制作 EQ调整声音的均衡效果，实际上就是调整不同频段频率的高低。所以理论上可以用 Max/MSP 实现任意的 EQ 效果。 下面来看看 Max/MSP 里自带的 buffir-eq 的例子，实现了简单的高-中-低均衡器效果： EQ in Max/MSP_腾讯视频 在 Ableton Live 里用 EQ 修饰声音Ableton Live 里面最常用的 EQ 是 EQ Three 和 EQ Eight。 Three 和 Eight 分别表示有 3 个和 8 个调节点。EQ Three 只能分成高、中、低频三个范围进行调节： EQ Eight 则可以添加多达 8 个控制点，更为灵活： 在下面的视频中，尝试调节每一个控制点的滤波方式，并且移动到不同频率的位置，查看调节频段产生的均衡效果： EQ Eight in Ableton Live_腾讯视频 Ref Audio Engineering 101 - A Beginner’s Guide to Music Production 均衡器 - Wikiwand 谐波 - Wikiwand Session 4: Sculpting Frequencies: Equalization Harmonic - Wikiwand EQ Tutorial: The Basics of How to EQ Properly - YouTube What Are Harmonics? I Full Spectrum Science I Exploratorium - YouTube 附录EQ points of interest Subs (&lt; 80 Hz), low freq Big/fat(20~100 Hz), low freq Muddy(100~300 Hz), low-low-mid freq: if a sound isn’t very clear, or muddy, try subtracting between 100 and 300 Hz. Boxy/hollow(300~700 Hz), low-mid freq In your face(1.5~4 kHz), Mid-mid-upper-mid freq: punk rock music accentuates this freq, too much here can cause ear fatigue, whereas not enough here can make a mix or sound appear dark and distant Presence and clarity(4~10 kHz), upper-mid-high freq Airy(&gt; 10 kHz), high freq via Audio Engineering 101 - A Beginner’s Guide to Music Production 一些常用频点 50hz，常用的最低频段，是强劲的地鼓声的频段，也是能够让人为之起舞的频段。通过适当提升将得到令人振奋的地鼓声音。但是，一定要将人声里面所有的 50hz 左右的声音都切掉，那一定是喷麦的声音。 70～100hz，获得浑厚有力的BASS的必要频点，也是需要将人声切除的频点。BASS和地鼓不要提升相同的频点，否则地鼓会被掩没掉的。 200～400hz，主要用途，首先是军鼓的木质感声音频段；其次是消除人声脏的感觉的频段；第三，对于吉它，提升这个频段将会使声音变的温暖；第四，对于镲和 PERCUSSION，衰减这个频段可以增加清脆感。其中，在 250hz 这个频点，对地鼓作适当的增益，可以使地鼓听起来不那么沉重，很多清流行音乐中这样使用。 400～800hz，获得更加清晰的BASS，并且可以使通鼓变得更加温暖。另外，通过增益或衰减这个频段内的某些频点，可以调整吉它音色的薄厚程度。 800～1khz，这个频段可以调整人声的“结实”程度，或者用于增强地鼓的敲击感，比较适用与舞曲的地鼓。 1k～3khz，这是一个“坚硬”的频段。其中，1.5k~2.5k的提升可以增加吉它或BASS的“锋利”的感觉；在2～3k略作衰减，将会使人声变得更加平滑、流畅，否则，有些人的声音听起来唱歌象打架。反过来，在这个频段进行提升也会增加人声或者钢琴的锋利程度。总的来说，这个频段通常被成为噪声频段，太多的话，会使整个音乐乱成一团，但在某种乐器上适当的使用，会使这种乐器脱颖而出。 3k～6khz，声音在3k的时候，还是坚硬的。至于6k，提升这个频点可以提升人声的清晰度，或者让吉它的声音更华丽。 6k～10khz，这个频段可以增加声音的“甜美”感觉。并且增加声音的空气感，呼吸感。并可增加吉它的清脆声音。PERCUSSION、军鼓和大镲都可以在这个频段里美化。并且，弦乐和某些的合成器综合音色，可以在这个频段得到声音的“刀刃”的感觉。 10k～16khz，提升这个频段会使人声更加华丽，并且能够提升大镲和PERCUSSION 的最尖的那个部分。但是，一定要首先确认这个频段内是有声音存在的，否则所增加的肯定是噪声。 各音源的频率范围 乐器 音色丰满度 音色明亮度 音色力度 音色表现力 其他 小提琴 200Hz~400Hz 6~10KHz 1~2KHz 是拨弦声频带 中提琴 150Hz~300Hz 3~6KHz 大提琴 100Hz~250Hz 3KHz 贝斯提琴 50Hz~150Hz 1~2KHz 长笛 250Hz~1KHz 5~6KHz 黑管 150Hz~600Hz 3KHz 双簧管 300Hz~1KHz 5~6KHz 1~5KHz 提升使音色明亮华丽 大管 100Hz~200Hz 深沉感强 2~5KHz 小号 150Hz~250Hz 5~7.5KHz 是明亮清脆感频带 圆号 60Hz~600Hz 提升会使音色和谐自然；强吹音色光辉，1~2KHz 明显增强 长号 100Hz~240Hz 500Hz~2KHz 提升使音色变辉煌 大号 30Hz~200Hz 100Hz~500Hz 提升使音色深沉、厚实。 钢琴 27.5~4.86KHz 是音域频段。音色随频率增加而变的单薄；20Hz~50Hz 是共振峰频率。 竖琴 32.7Hz~3.136KHz 是音域频率。小力度拨弹音色柔和；大力度拨弹音色丰满。 萨克斯管 600Hz~2KHz 提升此频率可使音色华彩清透 吉它 100Hz~300Hz 2~5KHz 低音吉它 60Hz~100Hz 低音丰满 60Hz~1KHz 2.5KHz 是拨弦声频 电吉它 240Hz 2.5KHz 3~4KHz 拨弹乐器的性格表现的更充分 电贝司 80Hz~240Hz 600Hz~1KHz 2.5KHz 是拨弦声频 手鼓 200Hz~240Hz 共鸣声频；5KHz 影响临场感 小军鼓 240Hz 2KHz 5KHz 是响弦音频（泛音区） 通通鼓 360Hz 8KHz 为硬度频率；泛音可达 10~15KHz 低音鼓 60Hz~100Hz 为低音力度频率；2.5KHz 是敲击声频率；8KHz 是鼓皮泛音声频。 地鼓 60Hz~150Hz 是力度音频 5~6KHz 是泛音声频 镲 250Hz 强劲、坚韧、锐利；7.5~10KHz 音色尖利；1.2~15KHz 镲边泛音“金光四溅”。 人声 频段效果 歌声（男） 150Hz~600Hz 影响歌声力度，提升此频段可以使歌声共鸣感强，增强力度。 歌声（女） 1.6~3.6KHz 影响音色的明亮度，提升此段频率可以使音色鲜明通透。 语音 800Hz 是“危险”频率，过于提升会使音色发“硬”、发“楞” 沙哑声 提升 64Hz~261Hz 会使音色得到改善 喉音重 衰减 600Hz~800Hz 会使音色得到改善 鼻音重 衰减60Hz~260Hz，提升 1~2.4KHz 可以改善音色。 齿音重 6KHz 过高会产生严重齿音。 咳音重 4KHz 过高会产生咳音严重现象 via 均衡器的各个频段所增益的乐器和人声效果调节对照表]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Music</tag>
        <tag>Sound</tag>
        <tag>声音</tag>
        <tag>Ableton Live</tag>
        <tag>Max/MSP</tag>
        <tag>EQ</tag>
        <tag>均衡器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MakeNoise05 - Envelope 包络（ADSR）]]></title>
    <url>%2F180628-make-noise-05.html</url>
    <content type="text"><![CDATA[MakeNoise01 - 声音是什么？ MakeNoise02 - 频率和音高 MakeNoise03 - 振幅/响度/音量/增益 大乱斗 MakeNoise04 - 波形和相位￼ Envelope 是什么？信封吗？ 🤷‍♀️ Envelope of an oscillating signal is a smooth curve outlining its extremes.Via Envelope (waves) - Wikiwand) The envelope of a sound describes the way it’s amplitude varies over time.Via What is the envelope of a sound? (ADSR explained) - YouTube 在声学中，envelope 是非常重要的概念，它描述声音振幅（能量）的变化。一波一波的声音，就像互联网上面根据网络协议传送的数据包一样，不断被发送出去，用 envelope 来形容倒是很形象。 ADSR在声音设计中通常用四个词来描述一个声音的 envlope (包络)：ADSR - Attack, Decay, Sustain, Release。 ￼ Attack 起音 The area that rises from silence to its peak volume。 声音从零开始上升到最大能量处，也可以理解为从产生这个声音开始到最响时，需要的时间。 敲击型声音的起音段非常短，比如钢琴（见下图）。而一根被温和拉响的琴弦，来自琴弦的恢复力和施加到琴弓上的立达到受摩擦限制是的最大动态平衡，这个过程可以长达几秒。另外，物体越小，初始能量就会被吸收的越快。 不同乐器的 ADSR 曲线大致可以简化如下：￼ Decay 衰减 The area goes from the peak to a medium level of decline。 衰减出现在那些瞬变阶段（transient）以后有能量持续供应的系统中，系统初始的输入能量超过后续延音阶段的电平。也就是说，在起音阶段后，音源还持续产生能量一段时间。 Decay 就是音量下降到稳定时需要的时间，对于钢琴而言，整个音符都处在 Decay 阶段。 Sustain 延音 The portion of the envelope that is constant in the declining stage。 这个阶段，系统的输入能量等于输出能量，达到某种类型的稳定动态平衡，所以产生声音的这部分能量也维持稳定，结果通常是有一个稳定的声音输出。 Sustain 一般对于管乐器和弦乐器适用。钢琴没有稳定的 Sustain 阶段，因为按下琴键之后就没有更多机械能了，音量持续减小，可以说 decay 和 sustain 没有明显的区分。 Release 释音 Last point in the envelope where the sound returns back to silence 当停止为系统提供能量，被保存的能量以一个恒定的速率被释放，继续产生一段时间的声音，这就进入释音阶段。 Release 是音源停止震动后仍然发声的阶段，钢琴在不踩踏板的时候 Release 非常短，踩踏板的时候 Release 非常长。释音始终趋向于 0，这是一个声音的最后阶段。 ADSR 的作用ADSR 也可以叫做「声音的生老停死」…………￼ 再来感受一下不同乐器的 ADSR 形状：￼ Fast Attack + Fast Release = 吉他Pick、木琴、木鱼 Fast Attack + Slow Release = 钢琴、扬琴、竖琴 Slow Attack + Slow Release = 提琴、胡琴、Pad Synth 为什么 ADSR 如此重要？因为影响声音的包络可以大大的改变声音特性。 当通过合成器来创作一个新的声音时，合成器需要控制 ADSR 的形状。组合包络形状比较类似的声音，可以优化混音效果。当 ADSR 差异非常大的声音结合在一起时，可以创作出结构非常丰富的音效。￼ 在 Ableton Live 中调整 ADSR 在 Ableton Live 里，很多音效都提供 ADSR 的控制，比如最常见的 operator。 下面的视频中，我们尝试调整各个参数，看看声音产生了怎样的变化。 Envelop &amp; ADSR in Ableton Live_腾讯视频 Max/MSP 中 调整 ADSRMax 里面提供了专门的 ADSR 对象，于是对声音参数的调控灵活度很大。 我们先来生成周期波形，观察不同 ADSR 参数状况下声音波形的变化： ADSR in Max/MSP_腾讯视频 在生成一个声音包络时，可以调整不同的参数改变声音的属性： ADSR Noise in Max/MSP_腾讯视频 ￼Ref Audio Engineering 101 - A Beginner’s Guide to Music Production 设计声音 Envelope (waves) - Wikiwand) Synthesizer - Wikiwand_envelope) What is the envelope of a sound? (ADSR explained) - YouTube ADSR Envelopes: How to Build The Perfect Sound [Infographic] | LANDR Blog Back to Basics (EMM Apr 85)]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Music</tag>
        <tag>Sound</tag>
        <tag>声音</tag>
        <tag>Ableton Live</tag>
        <tag>Max/MSP</tag>
        <tag>Envelope</tag>
        <tag>ADSR</tag>
        <tag>包络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MakeNoise04 - 波形和相位]]></title>
    <url>%2F180626-make-noise-04.html</url>
    <content type="text"><![CDATA[MakeNoise01 - 声音是什么？ MakeNoise02 - 频率和音高 MakeNoise03 - 振幅/响度/音量/增益 大乱斗 声音的速度和波长对于在同一种材质中出现的一个声音事件，波的速度通常是恒定的（主要取决于温度）。在 20°C 的空气中，声波的传播速度大概是 1130 ft/s 或 344 m/s 。 ￼ 通过测量具有相同位移、且运动方向一致的距离最近的两个质点的距离，就可以确定波长 wavelength。 因为声音在介质中的传播速度相对固定，所以频率低的声音，波长更长。 跟声音类似，光也是一种波动，是能量的一种形式。而波动传递的能量跟波长密切相关。下面是不同波长的波动类型（包括可见光在内）： ￼ 波形波形（waveform）表示信号的形状、形式。波形可以千变万化，常见的基础波形包括正弦波，方波，三角波，锯齿波等：￼ 在 Max/MSP 中，有一系列与之对应的生成周期信号的信号源对象： 最常用的生成器对应的波形如下： ￼ 其中 cycle~ 生成正/余弦波，phasor~ 和 saw~ 生成锯齿波（两者的取值范围不同，saw~生成的波形更平滑一些），rect~ 生成方波。 然后我们来听听看不同波形发出 440Hz 声音： Different Waveform in Max/MSP 相位了解过频率、波长、波形等概念，下面来啃一个相对复杂的概念——相位 Phase。 相位是波形中一个参考点在某个时间点所处的位置，用来描述信号的波形变化（单位： degree）。 Phase is the degree of progression in a cycle 参考点的位置公式如下： 不同相位的波形会相互干涉。当两个声波 in phase（相位相同），会增强振幅； ￼ 当两个声波相位不同，会形成干涉。￼ 当两个声波 180° out of phase（相位相反），会完全抵消。这一原理常运用在降噪耳机、消音器上。￼ 在 Max/MSP 中生成和改变波形在前面我们已经用几个信号对象生成对应的波形： ￼ 周期性信号从 0 开始上升，每一步递增的量就是这个信号的斜率，它决定了这个周期会持续多长时间(控制着频率)。其中 phasor~ 相位器是非对称的，取值不会低于 0.0，而是在 0.0~1.0 之间移动。通常使用相位器作为所有周期波形的时间基准或输入（基础源）。 在实现相位干涉之前，我们先试着修改波形：给波形做乘法会缩放，做加法会在 y 轴产生位移： ￼ 然后，我们用 cycle~ 生成两个频率为 4 的正弦波。将其中一个乘以 -1 得到相反相位的波形。然后把两个波叠加起来，会看到结果是波形完全消失： ￼ 在 Ableton Live 中实验相位干涉在 Ableton Live 中，波形的调制随处可见。比如 Operator 里面可选多种波形去调制声音： ￼ 我们首先来实验两个相同的音频，同时播放时的增强效果。 In_phase 然后再来尝试将两个音频消音。 添加 Utility 音效器，在第二个音轨播放时，打开左右声道的相反相位开关。然后同时播放两个音频，会发现声音消失了，因为两个音频的相位正好相反，产生了完全抵消的效果。 Phase Interference in Ableton￼ 彩蛋现在让我们回头看看在 Max/MSP 里听不同波形的这个视频： Different Waveform in Max/MSP 有什么新发现吗? 😁 ￼Ref Audio Engineering 101 - A Beginner’s Guide to Music Production Waveform - Wikiwand Light: Crash Course Astronomy #24 - YouTube Traveling Waves: Crash Course Physics #17 - YouTube Simple Harmonic Motion: Crash Course Physics #16 - YouTube]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Music</tag>
        <tag>Sound</tag>
        <tag>声音</tag>
        <tag>Ableton Live</tag>
        <tag>Max/MSP</tag>
        <tag>Phase</tag>
        <tag>相位</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MakeNoise03 - 振幅/响度/音量/增益 大乱斗]]></title>
    <url>%2F180624-make-noise-03.html</url>
    <content type="text"><![CDATA[MakeNoise01 - 声音是什么？ MakeNoise02 - 频率和音高 振幅/响度/音量/增益，这大概是 Sound engineering 入门的第一捆容易混淆的概念们。(¦3」∠) 振幅 Amplitude振幅 Amplitude 是在波动或振动中，距离平衡位置或静止位置的最大位移。￼ 最大正位移与最大负位移之差，称为值域（range）或峰-峰幅度，是常规振幅的两倍。 音源的振幅（物理量）与频率、频谱包络以及时域包络等其他因素一起，影响声音的响度（感知量）。顺便复习一下，频率是声源每分钟震动次数的物理量，音高是感知量。 响度 Loudness我们常用 Sound pressure level (SPL) 值来测量声音的响度，单位为 dB。 不过 dB 并不是可以测量的物理量，它只是一个单位。来看看以下几个概念，有助于我们理解响度到底是什么： 声压/声强（acoustic pressure）：是指声波通过媒质时，由振动所产生的压强改变量。声压的数值很大，不便于计算和描述，于是人们取了一个人耳刚刚能听到 1kHz 声音时候的声压值作为标准。 声压等级（SPL）：是描述声音大小的物理量，用声压值除以上面提到的标准声压值，取了对数再乘以10，就得到 SPL，公式见下图。 分贝（decibels/dB）：是描述物理量比值的单位（分贝不仅用于声学，多用于衡量各种信号的强度、增益等）。 ￼ 从以上公式容易看到，响度和声压并不是线性关系。一个声波大概需要 10 倍的压强，才能让我们在听觉上感受到 2 倍的响度。 Fletcher-Munson 曲线总结了人耳对响度的敏感性。人耳对 3kHz~4kHz的声音最敏感，其他频率区域的声音往往都需要经过放大才能被听清。￼ 常见的响度范围大多数人能识别 3dB 的声音幅度变化。下图给出了常见的声音场景的响度： 0 dB: 几乎安静无声 40-50 dB: 室内环境音 50-60 dB: 低语声 60-75 dB: 谈话声 80-85 dB: 最佳声音响度区域，在混音时最高不应超过 85 dB 90 dB: 工厂噪声，长时间暴露在这种环境中会损伤听力 100 dB: 婴儿哭声 110 dB: 汽车喇叭 120 dB: 会引起疼痛和听觉损伤的响度阈值 140 dB: 相当于连续猛烈敲击军鼓1分钟 150-160 dB: 飞机引擎声 不同枪支发射时的 SPL： ￼ Sound engineering 里的音量 Volume 和 增益 Gain 的区别Volume 和 Gain 是初学者常常容易混淆的两个概念（就像我现在……☁️☁️☁️），在各种教程和工具界面里会频繁出现这两个词，它们似乎都可以翻译为「音量」。但它们是两个不同的概念。 GainGain 用来表示信号的强度，是音频输入信号和输出信号差异的幅度。 Gain is the parameter for the amount that some sort of amplifier circuit is going to increase the amplitude of an input signal. via Gain vs Volume - Production Concepts 可以说，gain 控制的是「进入」声音设备的信号。 在数字音频中，Gain 常用的单位是 dBFS。0 dBFS 是数字音频中的最大值，正常值都为负数。如果大于 0 呢？音频就会出现削波和失真。 VolumeVolume 是声音大小（响度）的值，单位是 dBSPL(dB Sound Pressure Level)，测量的是声波在环境中的压强值。可以说，volume 控制的是从声音设备「输出」的声响大小。 在混音时，volume 值保持在 80 dB 左右最佳。增大响度叫 boost，减小响度叫 cut。 在软件中的使用场景现在，我们知道可以将 Gain 理解为对信号的调整，将 Volume 理解为处理完成后声音响度的听觉感受。 这正好可以对应到 Max/MSP 和 Ableton Live 的实现中。 Max/MSP 很擅长数字信号处理，主要在信号层面做底层的调控。所以在 Max/MSP 中只有控制 gain 的对象，而没有调控 volume 的对象。 ￼ 而 Ableton Live 善于处理音频，叠加各种音效和编排音轨。控制每一个音轨的音量是最基本的功能之一。在界面功能中，它会把信号的 level 描述为 volume： Volume in ableton live 从上面的视频中可以看到，这个音轨的 peak level 是 -14.9，不会超过 0 ，实际上它控制的还是信号的 gain。 小结 振幅：波动的最大位置，并不是响度的唯一影响因素 响度：用物理量声压级 SPL 来测量，一般用简化的单位 dB 来表示响度这一感知量 音量：在音频处理时表示响度的概念，更多是指音频输出时听觉感受到的声音大小 增益：在音频处理时表示信号强度的概念，更多是指音频输入与输出时信号强度的差别 它们都是对声音「大小」的不同描述，现在是不是更清晰一些了？ Ref Audio Engineering 101 - A Beginner’s Guide to Music Production Sound: Crash Course Physics #18 - YouTube Sound pressure - Wikiwand 响度与振幅与分贝的关系是什么？ - 知乎 Fletcher–Munson curves - Wikiwand Tips from a Recording Engineer: The Critical Difference Between Gain and Volume Gain vs Volume - Production Concepts - YouTube]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Music</tag>
        <tag>Sound</tag>
        <tag>声音</tag>
        <tag>Ableton Live</tag>
        <tag>Max/MSP</tag>
        <tag>Gain</tag>
        <tag>Volume</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MakeNoise02 - 频率和音高]]></title>
    <url>%2F180623-make-noise-02.html</url>
    <content type="text"><![CDATA[MakeNoise01 - 声音是什么？ 频率 Frequency 是周期运动在一秒内重复的次数。比如一根琴弦在一秒内震动 440 次（cycles per second - cps），它发出的就是 440 Hz 频率的声音。 频率是绝对量，在心理声学上对应的感知量是音高 Pitch。 一个声音听起来什么样，频率是最基本的决定要素之一。声源在每秒内振动次数的越多，频率就越大，产生的音高也就越高。 常见声音频率范围下图展示了人和一些动物的听觉范围。人的听觉范围在 20 ~ 20000 Hz。低于 20 Hz 的属于次声波 infrasounds，高于 20 kHz 的属于超声波 ultrasounds。 ￼ 所以市面上有一些号称 α、β 脑波的音乐，纯粹是耍流氓： 再来看看乐器的发声频率： 小提琴的频率是 200Hz~1.25kHz，中提琴是 125Hz~1kHz，大提琴是 60Hz~500Hz。频率越高，音高越高，所以小提琴的音高&gt;中提琴&gt;大提琴。男声的频率在 100Hz~800Hz，女声的频率在 250Hz~1kHz，所以大多数女声比男声听起来更「高」更「尖」。 可听的频率范围可以进一步划分为： 低音频率: 20~200 Hz 中音频率: 200~5k Hz, 在这个范围我们的听力最佳 Low-mids: 200~700 Hz， 常用 darker, hollow 来形容 Mid-mids: 700~2k Hz，more aggressive “live” tones High-mids: 2k~5kHz，常用 brighter, present 来形容 高音频率: 5k~20kHz 查看小提琴和大提琴的频谱接下来，我们到 Ableton Live 里试听小提琴和大提琴的声音和频率有什么不同。 在内容库里面找到 String1 Violin 和 Strings2 Cello，在 C3 拖出 2 个节拍。￼ 再加入内容库里面 Audio Effects 里的 EQ eight。播放音频时，可以看到小提琴的频率范围： ￼ 大提琴的频率范围，更多会在低频率的部分。 ￼ 用 Max 制作不同频率的声音接下来用 Max/MSP/Jitter （系列教程另外单开）来实现并聆听不同频率的正弦声波。 Max 内置了强大的声音和信号处理机制。这次我们用最简单的方式—— cycle~ 对象来生成持续的正弦波信号。 设定不同的频率 200Hz、440Hz、800Hz、1200Hz，切换频率，就能听到不同频率产生的音高不同。 ￼ 声音和频谱可以查看下面的视频： MakeNoise02-frequency_in_max 谐波频率振动物体可以产生一个谐波频率（每个频率都与基频呈简单的整倍数关系），也可以产生非谐波频率。 谐波是一个数学或物理学概念，是指周期函数或周期性的波形中能用常数、与原函数的最小正周期相同的正弦函数和余弦函数的线性组合表达的部分。 一个纯净音色并不需要各个谐波都完美的排列在完全整数值上，它需要这些谐波形成一个稳定的级数。例如，100Hz、199Hz、396.01Hz。每个泛音几乎都是一个频倍，是前一个频率的 1.99 倍。 除了正弦/余弦波以外，所有声音都由多个频率构成，形成一个频谱（在上面 Max 里面展示频率的图就是一种频谱）。 Ref MakeNoise01 - 声音是什么？ Audio Engineering 101 - A Beginner’s Guide to Music Production Sound: Crash Course Physics #18 - YouTube Balance is key – EQ’s magic frequencies | Heavyweightbass.net Harmonic series (music) - Wikiwand) 谐波 - Wikiwand 腦波 - Wikiwand ￼]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Music</tag>
        <tag>Sound</tag>
        <tag>声音</tag>
        <tag>Ableton Live</tag>
        <tag>Max/MSP</tag>
        <tag>Frequency</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MakeNoise01 - 声音是什么？]]></title>
    <url>%2F180621-make-noise-01.html</url>
    <content type="text"><![CDATA[这是个新开的系列，关于声音和制造声音，大概会持续更新（吧）： 声音的一些物理原理 声音的属性 如何用 Max/MSP 构造和设计声音 如何用 Ableton Live 制作音效 声音可视化 第一篇是绕不开的概念和原理。 为什么绕不开呢？（因为我尝试过……┓( ´o` )┏）如果不从波动的角度开始理解声音，在 Max 等工具里制造和修改声音真是抓瞎，更不要提有数量巨多的音效和合成器等着我们去调戏了。 声音无处不在，但是因为看不见摸不着，所以它是一种大部分时间存在感很弱的现象。 声音的本质是波动，是在介质（如空气）中的一种震动传播现象。 震动方向和传播方向垂直的波，叫 Transverse wave；方向相同的波叫 Longitudinal wave。声波属于 longitudinal wave。 声音是相当「物理」的一门学科，它属于动力学的一个分支。 声波在运动中传递能量，它全都是关于「变化」的——声音的波形、位置、能量等等随着时间而变化。 声源震动引起空气分子往复运动，不断挤压周围的空气而产生声波。我们熟悉的声音：音乐，人说话，猫叫，敲击键盘的声音，噪声……都由震动引起。 比如话筒，持续接收声源震动，转换为连续变化的电压，再转换为数字信号：￼￼ 耳朵也是这么接收声音哒！（鼓膜的英文 eardrum 是不是很形象？）￼ 更多关于声音的原理，推荐这个视频： 下一篇关于声音最重要的属性——频率。 Ref Audio Engineering 101 - A Beginner’s Guide to Music Production Sound: Crash Course Physics #18 - YouTube]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>ArtxCode</tag>
        <tag>Sound</tag>
        <tag>声音</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Happy New Mac II - Mac 私人调教手册]]></title>
    <url>%2F180402-happy-new-mac-ii.html</url>
    <content type="text"><![CDATA[元宵节这天，迎娶了属于自己的第一台 iMac。 3 年前写了一篇 Happy New Year Happy New Mac，是时候更新一版，跟大家分享如何用最合理的顺序、最快的速度、最轻松的姿势，调教出一台高大威猛动静皆宜无所不能所向披靡的 Mac…… （如果你不是工程师，但是有一定的编程需要，比较经常使用命令行，是 Alfred 粉丝，那么本文就最适合你了~） 一、开箱负责任地说一句：体积越大的苹果产品，开箱体验就越享受。 键盘和 Magic Mouse 都从以前的电池换成了充电式—— Magic Mouse 终于变轻了，好评！比较遗憾的是京东买的这款 21.5 高配还是没有配触控板 😔 拍照就不用说了，开箱后记得拍一张序列号备用。 二、基本设置 开机后打开设置，到「Trackpad」里面设置习惯的触控板手势 更新系统至最新版本 有必要的话，在 App Store 里下载最新版本的 Xcode 三、TerminaliTerm原配 terminal 比较简陋，先升级一下。用 safari 下载 iTerm2 并安装。 Homebrew在新电脑上一个一个下载各软件最新版本很麻烦吧？Homebrew 帮你搞定！用 safari 打开 http://brew.sh，按说明在 terminal 里安装 Homebrew： 1/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 安装 brew-cask：brew tap phinze/homebrew-cask 或者 brew install brew-cask。以后更新只需要： 1brew update &amp;&amp; brew upgrade 按需安装各种包，比如 brew install wget。 安装 oh-my-zshiTerm 虽好，还是缺了一些补全、alias、快速跳转等神奇功能，所以再套上 oh-my-zsh。GitHub 地址：robbyrussell/oh-my-zsh. 安装说明 如果已经安装 wget，执行命令： 1sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)" Github 配置按照 Github Generating a new SSH key and adding it to the ssh-agent 说明，创建 SSH 秘钥： 1234mkdir ~/.sshcd ~/.sshssh-keygen -t rsa -b 4096 -C "your_email@example.com"pbcopy &lt; ~/.ssh/id_rsa.pub 此时，pdcopy 命令已经将 id_rsa.pub 内容复制到剪切板。 登录并进入 Github SSH and GPG keys 设置页面，点击 New SSH key。Title 部分填写一个所用电脑的名称，然后在 Key 部分填写之前通过 pdcopy 命令复制的内容。生成 ssh key 的说明。然后在全局设置中设置用户名和邮箱。 git config --global user.name &quot;yourusernamegit config --global user.email &quot;youremail&quot; 如果有项目需要推送到 coding.net，也需要去 SSH公钥 - 设置 做类似的设置。 四、刚需：VPN、浏览器和输入法 安装 VPN 工具（12vpn已经用了五年，推荐）。需要先做好这一步，不然 Chrome 的帐户设置没法同步 安装浏览器 brew cask install google-chrome（可能需要开 vpn，如果不成功，需要手动下载安装），安装成功后，选择要同步的设置项 下载安装输入法 五、效率神器安装大管家 Alfred: brew cask install alfred，导入之前备份好的 workflows。严重推荐以下 workflow： Douban：直接搜索豆瓣书、影、音，方便得不像话 Youdao-Translate：快捷查词和翻译，学渣和学霸都必备 chrome-bookmarks：chrome 书签搜索并打开，简直救了收藏夹整理无能者一命 Copy-Path：快捷键复制当前文件夹路径，跟命令行绝配，尤其是 Git 重度患者 其余：百度云盘搜索、淘宝搜索、日历、下载链接分析、自定义搜索、生成短链接和二维码等等，绝对能让 mac 效率提升至少 200% 如果购买了 Power Pack，可以在 Preference - Advanced - Syncing 里设置配置文件同步，快速导入常用配置。 六、基础应用 安装文档同步工具，用 Airdrop 把原有文件传送到新电脑上（新开机有整体 transfer 的选项，但是试了一下要十几小时，太慢了，就放弃） 安装 Markdown 编辑器 brew cask install macdown 安装笔记应用 brew cask install evernote 安装文献管理工具 Zotero brew cask install zotero，然后设置已经从之前电脑传过来的库 安装视频播放器 brew cask install vlc 如果有需要，装个虚拟机吧！ 七、编程环境Python 环境安装 Miniconda： 下载 sh 文件 或者 wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh 命令行进入下载的文件夹 bash Miniconda3-latest-Linux-x86_64.sh，按照提示操作。 新建环境 1conda create -n pyp python=3 numpy pandas matplotlib jupyter 激活环境 1source activate pyp Node.js 和 npm因为要用 hexo 更新博客，以及方便以后安装各种基于 js 的应用，下载 Node.js 并安装。 然后用 npm 安装 hexo： 1sudo npm install hexo-cli -g 编辑器和 Dash安装代码编辑器 brew cask install atom。然后是编程语言和各种库的文档大管家 Dash，具体操作略。 八、创作者套件 Sketch Mindnode 图床 dropzone3 + qiniu bundle（最新版的 bundle 有 bug，需要用回 1.2 或更低版本） 图标库 Icons8，图片管理应用如 Inboard 3D 工具如 SketchUp/Fusion 360 Logic X pro 清单暂时更新到这里。欢迎亲们推荐相见恨晚的应用和奇技淫巧~ Happy New Year &amp; Happy New Macbook!]]></content>
      <categories>
        <category>教程</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[DeepLearning 笔记：如何评估神经网络的训练效果]]></title>
    <url>%2F180327-DeepLearning12-model-evaluation.html</url>
    <content type="text"><![CDATA[阿扣：阿特，我们已经学过怎样构建神经网络，得到预测结果了。不过到这里还没有完，还有重要的步骤。 阿特：是什么呢？ 阿扣：检验效果，来判断模型是否靠谱。 阿特：是不是根据错误率呀？错误率低就说明更靠谱。 阿扣：没错，是这个思路。不过要怎样计算错误率呢？想想看，我们的模型是根据训练数据「拟合」出来的，也就是说，模型在这些数据中「学习」到了规律。但是这不代表模型在其他数据中也能预测得很好哦。 阿特：是不是像有的专家，在某些领域有经验，但是换一个领域可能跟普通人没什么区别。 阿扣：说得对。我们的训练模型也是这样，它有可能对给出的数据了如指掌，就像谈恋爱一样，成为某个姑娘的「专家」。但是换一个姑娘，人家喜欢吃什么、爱豆是谁、是不是颜控，它可能就抓瞎了。很多时候，不是模型复杂效果就好，因为那样可能是「过拟合」（over-fitting）了： Cross validationK-flld cross validation 阿特：那怎么防止过拟合呢？ 阿扣：要学会评估训练效果。当模型遇到新的数据，看看这些数据它预测得咋样。一般的做法是，把训练数据分成 3 部分： 数据集 作用 参考比例 训练集 Training Set 训练模型 70 验证集 Validation Set 调整模型 10 测试集 Testing Set 测试模型效果 20 阿特：就是把拿到的数据分三份，有一份要存起来，最后才拿出来用。 阿扣：奏四这个节奏。记住啊，千万不要用测试数据来训练模型！不然就「监守自盗」了啊！切记切记！ Confusion matrices 混淆矩阵阿扣：模型在做预测的时候，通常会犯两种错误。我们举个例子——要诊断某个人是不是得病。那么错误会有两种： 实际上得病，但是判断为没病 (False Negative) 实际上没病，但是判断为得病 (False Positive) 阿特：好惨哦……这种错范不得…… Accuracy 准确率阿扣：有了混淆矩阵，我们就容易计算出模型的准确率： Accuracy = (True positives + True Negatives) / Total 阿特：把对的加起来，除以总数。 阿扣：对呀对呀，来，给你留个小测试，看看是不是掌握了： 补充：如何评估线性模型Mean Absolute Error ：把每个数据点的误差 $(y-\hat y)$ 加起来 Mean Squared Error ：把每个数据点误差的平方项加起来 R2 Score ：比较训练模型和最简单的模型。 Model complexity graph 下图虚线表示验证集数据，实线表示训练数据。好的模型，在训练集和验证集上的准确率都比较高。 Ref Deep Learning Nanodegree | Udacity Confusion matrix - Wikiwand]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>ArtxCode</tag>
        <tag>DeepLearning</tag>
        <tag>Coding</tag>
        <tag>编程</tag>
        <tag>神经网络</tag>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DeepLearning笔记：如何用亚马逊云服务 GPU 训练神经网络]]></title>
    <url>%2F180322-DeepLearning11-aws-gpu-training.html</url>
    <content type="text"><![CDATA[在 Udacity 的深度学习纳米学位课程中，5 个实战项目里至少有 3 个需要用到 GPU 来训练模型。课程附带了 100 刀的亚马逊云服务（AWS）credit，这篇笔记分享如何使用 AWS 完成模型的训练。 注册帐户首先，注册亚马逊 AWS 的免费帐号：Amazon Web Services Cloud。 在项目中要用到 Elastic Compute Cloud (EC2)，它可以启动 GPU 运行的虚拟服务，具体类型是 p2.xlarge。 我们会用到 this AMI (Amazon Machine Image) 去定义所需要的环境。在使用之前，需要选择离你最近的 AWS 地区： EU (Ireland) Asia Pacific (Seoul) Asia Pacific (Tokyo) Asia Pacific (Sydney) US East (N. Virginia) US East (Ohio) US West (Oregon) 选择好后，查看 EC2 Service Limit report，找到 「正在按需运行的 p2.xlarge 实例」项目： 如果限制是 0，点击右侧「请求提高限制」链接。提高限值不会收费，运行 instance 才会收费。 提高限制的表单需要填写： Region: 选择前面步骤的 AWS 地区 Primary Instance Type: p2.xlarge Limit: Instance Limit New Limit Value: 1 (more if you like) Use Case Description: I would like to use GPU instances for deep learning. 如果之前没有启动过 AWS 服务，可能会收到确认邮件。 在 Billing Management Console 页面输入 Udacity 提供的优惠代码。 运行实例Launch an Instance访问 EC2 Management Console, 点击 “Launch Instance” 。 选择 AMI (Amazon Machine Image) 如下图，进入 AWS Marketplace，搜索 Deep Learning AMI with Source Code (CUDA 8, Ubuntu)。 Select the Instance Type在步骤 2: 选择一个实例类型中 Filter the instance list to only show “GPU compute” Select the p2.xlarge instance type Review and Launch Configure the Security Group在 步骤 7: 核查实例启动 中点击「编辑安全组」 On the “Configure Security Group” page: Select “Create a new security group” Set the “Security group name” (i.e. “Jupyter”) Click “Add Rule” Set a “Custom TCP Rule” Set the “Port Range” to “8888” Select “Anywhere” as the “Source” Click “Review and Launch” (again) Create an Authentication Key Pair“Create a new key pair” and click the “Download Key Pair” button. 下载 .pem 文件并保存好，在启动时需要这个文件。 下载完成后，继续点击「启动实例」按钮。 设置计费提醒此刻开始，启动这个 EC2 instance，AWS 会开始计费。费用可以查看 EC2 On-Demand Pricing page p2.xlarge: $0.9 每小时 Most importantly, remember to “stop” (i.e. shutdown) your instances when you are not using them. Otherwise, your instances might run for a day, week, month, or longer without you remembering, and you’ll wind up with a large bill! 登录云服务器实例启动后，在命令行中进入 .pem 文件保存的目录，输入命令（IP 是控制台提供的 IP，每次都不同）： 1ssh -i DLND.pem ubuntu@13.115.162.209 这时候看到错误提示： 12345678@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ WARNING: UNPROTECTED PRIVATE KEY FILE! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Permissions 0644 for 'DLND.pem' are too open.It is required that your private key files are NOT accessible by others.This private key will be ignored.Load key "DLND.pem": bad permissionsubuntu@13.115.162.209: Permission denied (publickey). 查找到 排查实例的连接问题 - Amazon Elastic Compute Cloud 您的密钥必须不公开可见，SSH 才能工作。要修复此错误，请执行以下命令: 1chmod 400 DLND.pem 配置 Jupyter notebook连接服务器后，输入以下命令创建 Jupyter notebook 的配置文件： 1jupyter notebook --generate-config 服务器返回： 1Writing default config to: /home/ubuntu/.jupyter/jupyter_notebook_config.py 然后，修改 notebook 的 IP 地址设置： 1sed -ie "s/#c.NotebookApp.ip = 'localhost'/#c.NotebookApp.ip = '*'/g" ~/.jupyter/jupyter_notebook_config.py 测试实例On the EC2 instance Clone a GitHub repository git clone https://github.com/udacity/aind2-cnn.git Enter the repo directory cd aind2-cnn Install the requirements sudo python3 -m pip install -r requirements/requirements-gpu.txt Start Jupyter notebook jupyter notebook --ip=0.0.0.0 --no-browser From your local machine You will need the token generated by your jupyter notebook to access it. On your instance terminal, there will be the following line: Copy/paste this URL into your browser when you connect for the first time, to login with a token:. Copy everything starting with the :8888/?token=. http://13.115.162.209:8888/?token=94e72e170ca3fdbe1cd7c58a3fd898e9533e740beb6070fa Access the Jupyter notebook index from your web browser by visiting: X.X.X.X:8888/?token=… (where X.X.X.X is the IP address of your EC2 instance and everything starting with :8888/?token= is what you just copied). Click on “mnist_mlp” to enter the folder, and select the “mnist_mlp.ipynb” notebook. Run each cell in the notebook. 实验完，记得 stop instance。 新建环境参考深度学习学前须知及常见问题 - DLND: 深度学习纳米学位 - 优达学城论坛 安装 conda 123wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.shbash Miniconda3-latest-Linux-x86_64.sh 新建环境: conda create -n dlnd python=3 激活环境: source activate dlnd 安装 tf 1pip install --ignore-installed https://storage.googleapis.com/tensorflow/linux/gpu/tensorflow_gpu-1.1.0-cp36-cp36m-linux_x86_64.whl 下次进入环境 从链接 EC2 Management Console 启动实例 本地输入命令 ssh -i DLND.pem ubuntu@52.197.226.169 连接服务器后，激活环境 source activate dlnd 启动 jupyter notebook jupyter notebook --ip=0.0.0.0 在浏览器打开： http://52.197.226.169:8888/?token=a55e1cfbc162df6d3358e3553d220b4d269e2789df6e5ddd]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>ArtxCode</tag>
        <tag>DeepLearning</tag>
        <tag>Coding</tag>
        <tag>编程</tag>
        <tag>神经网络</tag>
        <tag>Programming</tag>
        <tag>AWS</tag>
        <tag>GPU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[00's Learning Log 180223]]></title>
    <url>%2F180223-learning-log.html</url>
    <content type="text"><![CDATA[Summary 整理文档系统结构，参考 构建优雅的知识创造系统 - 阳志平的网志 采用域名方式命名。 整理 gitbook 文档理出 sound visualization 的思路 p5.sound 的 envelope 和 FFT 例子 Music Theory 101 的 Model 4 练习 「乐理自学指南」第1-10课 p5.soundphrase乐句是一段时间内 musical events 的模式，比如一系列的音符和休止。Phrases 必需添加到 p5.Part 播放。 1new p5.Phrase(name,callback,sequence) p5.Part 播放一个或多个 p5.Phrases. 用 steps and tatums(Divisions of a beat) 初始化. 每个 step 默认为 1/16 音符。 1new p5.Part([steps],[tatums]) 例子中用函数控制声音播放/暂停时的显示，可以参考 12345678910111213141516171819202122function updateDescription() &#123; if (!soundFile.isPlaying()) &#123; description = 'Paused...'; p.html(description); &#125; else if (soundFile.isPlaying())&#123; description = 'Playing!'; p.html(description); &#125; else &#123; for (var i = 0; i &lt; frameCount%3; i++ ) &#123; // add periods to loading to create a fun loading bar effect if (frameCount%4 == 0)&#123; description += '.'; &#125; if (frameCount%25 == 0) &#123; description = 'loading'; &#125; &#125; p.html(description); &#125;&#125; sampleRate返回每一秒所有声音对象总体采样率数值。It is often 44100, or twice the range of human hearing. p5.js | Phrase p5.js | Part p5.js | sampleRate Music Theory 101 Model 4 练习在识别音级的这个练习中： 在给定曲调的下方的音符，音程为 (8+1-间隔音程)]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Coding</tag>
        <tag>编程</tag>
        <tag>Learning</tag>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[00's Learning Log 180222]]></title>
    <url>%2F180222-learning-log.html</url>
    <content type="text"><![CDATA[Summary p5.sound 的例子 优化了情人节小动画 Treble + Bass clef 组合练习 Music Theory 101 Model 4 知识大融通 ch12 p5.sound 对象和方法学习补充昨天 SawOsc/TriOsc 的波形图像 昨天看了半天文档和例子，发现效率还是比较低。今早搜了一下 youtube，发现丹叔也有讲 p5.sound！17.1: Loading and Playing - p5.js Sound Tutorial 开心地刷完了 11 个视频。 Loading and Playing17.1: Loading and Playing - p5.js Sound Tutorial 加载声音：loadSound()，必需在 setup() 或 draw() 函数内使用。在 p5.js 里一般会用两种方式加载声音文件： preload() : 用于在 setup() 之前加载文件，加载成功才开始运行其他部分 callback() ：如果不想完全加载才运行程序，可以用 123456789101112131415161718192021222324252627282930var song, slider, button;function setup() &#123; createCanvas(200, 200); background(127); song = loadSound('song.mp3', loaded); button = createButton('play'); button.mousePressed(togglePlaying); slider = createSlider(0, 1, 0.5, 0.01);&#125;function loaded() &#123; console.log('loaded');&#125;function draw() &#123; song.setVolume(slider.value()); // song.pan(slider.value()); //set right or left channel, -1~1 // song.rate(slider.value()); //set play speed&#125;function togglePlaying() &#123; if (!song.isPlaying()) &#123; song.play(); // or song.loop(); button.html('pause'); &#125; else &#123; song.pause(); button.html('play'); &#125;&#125; Add cueaddCue(time,callback,[value]) ：在设定的时间点(a playback cue point)触发事件。 p5.js | addCue 比如可以在游戏中加载音效：17.5: Adding Sound Effects - p5.js Sound Tutorial Sound Synthesis17.6: Sound Synthesis - p5.js Sound Tutorial 123456wave = new p5.Oscillator();wave.setType('sine');wave.start();wave.amp(0.5);wave.freq(440); ADSR Envelope补充昨天的 env 对象。17.7: ADSR Envelope - p5.js Sound Tutorial A-AttackD-DecayS-SustainR-Release 优化情人节小动画查看 裁剪音频 用 preload 函数预先加载音频 增加 play/pause 按钮控制播放 调整频谱视觉效果，尝试渐变 拾遗 sindresorhus/awesome: Curated list of awesome lists：Github 超全索引！ Basic Electronics Tutorials and Revision：电路电子教材 Free SFX：免费音效]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Coding</tag>
        <tag>编程</tag>
        <tag>Learning</tag>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[00's Learning Log 180221]]></title>
    <url>%2F180221-learning-log.html</url>
    <content type="text"><![CDATA[Summary 基于例子学习 p5.sound 库的几类对象和方法 开始 Bass clef 低音谱号识谱练习(工具 Music Tutor App) Music Theory 101 的 Module 3 练习 开始使用 workflowy 写学习 log (工具 WorkFlowy Panel) 知识大融通 ch11 p5.sound 对象和方法学习fftFFT (Fast Fourier Transform 快速傅里叶变换) 是一种分离声音频率波形的分析算法。p5 里面的 FFP 对象可以分析声音的频率，返回两种数组： FFT.waveform() : 计算时间振幅。数组内每一个值代表取样时间内的波形振幅。返回值在 -1 到 1 之间。可用来绘制声音的波形。 FFT.analyze() : 计算频率振幅。数组内每一个值代表频谱(frequency spectrum, i.e. pitches)振幅。用 getEnergy() 方法可以获取某个范围内的频率。 17.11: Sound Visualization: Frequency Analysis with FFT - p5.js Sound Tutorial noiseNoise 对象是生成随机 buffer 的振荡器(oscillator)。 1new p5.Noise(type) //String: Type of noise can be 'white' (default), 'brown' or 'pink'. delayDelay 生成回声效果. 参数包括 delay time, feedback, filter, and type. envEnvelopes (中文术语是什么？)是预先定义时间内的振幅分布，常用于控制输出音量和 a series of fades referred to as Attack, Decay, Sustain and Release (ADSR). SawOsc/TriOsc创建 SawTooth Wave Oscillator / Triangle Wave Oscillator (相当于 new p5.Oscillator(&#39;sawtooth&#39;)/ p5.Oscillator(&#39;triangle&#39;) 或者创建 p5.Oscillator 然后调用 setType(&#39;sawtooth&#39;) / setType(&#39;triangle&#39;) ) distortion生成 Waveshaper Node，是 p5.Effect 的子类。 1new p5.Distortion([amount=0.25],[oversample='none']) Ref p5.js | FFT p5.js | Noise p5.js | Delay p5.js | Env p5.js | Oscillator p5.js | SawOsc p5.js | TriOsc p5.js | Distortion Bass clef 识谱练习 经过一周练习，Treble clef 高音谱号的识谱练习准确率可达 95% 以上。熟练掌握 Treble clef 后，Bass clef 整体下移三度，另外加上快捷位置记忆： 下加二线：C 0-3间：FACE 🙂 5线：A 上加一线：C 继续用 Music Tutor 练习，吸取 Treble clef 的经验，开始时的练习可以设置为： 练习时长 1 分钟（便于总结规律） 识别区间B1-E4 (强化记忆中间区域的 notes) 去掉升降号识别 熟悉自己的 base notes 以后，增加练习时长，并且加入升降号识别 Music Theory 101 的 Module 3 练习Juilliard 的这门课 Music Theory 101 的练习都很走心。今天做到 Module 3 练习，主要针对音符/休止符和拍子。 为了在电脑上写作业，找了一款音乐符号的字体：MusiSync font - FontSpace Meter 的遗留问题：如何确定以什么音符为一拍？ 明日 To do p5.sound 的例子 Treble + Bass clef 组合练习 Music Theory 101 Module 4 知识大融通 ch12]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Coding</tag>
        <tag>编程</tag>
        <tag>Learning</tag>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DeepLearning 笔记：用 Python 实现反向传播算法]]></title>
    <url>%2F180208-DeepLearning10-backpropagation-python.html</url>
    <content type="text"><![CDATA[用反向传播算法更新权重的算法如下： 给每一层的权重赋值为 0 输入层→隐层的权重 $\Delta w_{ij}=0$ 隐层→输出层的权重 $\Delta W_j=0$​ 对训练集里的每一个数据： 使用 forward pass，计算输出节点的值 $\hat y$ 计算输出节点的误差梯度 $\delta^o=(y-\hat y)f’(z)$， 这里的 $z=\sum_jW_ja_j$ 将误差反向传递到隐层 $\delta^h_j=\delta^oW_jf’(h_j)$ 更新权重步长 $\Delta W_j = \Delta W_j + \delta^oa_j$ $\Delta w{ij} = \Delta w{ij} + \delta^h_ja_i$ 更新权重（η 为学习率，m 为输入节点的个数): $W_j = W_j + \eta \Delta W_j /m$ $w{ij} = w{ij} + \eta \Delta w_{ij} /m$ 重复 e 次训练步骤 (epochs) 在 python 中实现如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import numpy as npfrom data_prep import features, targets, features_test, targets_testnp.random.seed(21)def sigmoid(x): """ Calculate sigmoid """ return 1 / (1 + np.exp(-x))# Hyperparametersn_hidden = 2 # number of hidden unitsepochs = 900learnrate = 0.005n_records, n_features = features.shapelast_loss = None# Initialize weightsweights_input_hidden = np.random.normal(scale=1 / n_features ** .5, size=(n_features, n_hidden))weights_hidden_output = np.random.normal(scale=1 / n_features ** .5, size=n_hidden)for e in range(epochs): del_w_input_hidden = np.zeros(weights_input_hidden.shape) del_w_hidden_output = np.zeros(weights_hidden_output.shape) for x, y in zip(features.values, targets): ## Forward pass ## # Calculate the output hidden_input = np.dot(x, weights_input_hidden) # x·w hidden_output = sigmoid(hidden_input) output = sigmoid(np.dot(hidden_output, weights_hidden_output)) ## Backward pass ## # Calculate the network's prediction error error = y - output # Calculate error term for the output unit output_error_term = error * output * (1 - output) ## propagate errors to hidden layer # Calculate the hidden layer's contribution to the error hidden_error = np.dot(output_error_term, weights_hidden_output) # Calculate the error term for the hidden layer hidden_error_term = hidden_error * hidden_output * (1 - hidden_output) # Update the change in weights del_w_hidden_output += output_error_term * hidden_output del_w_input_hidden += hidden_error_term * x[:,None] # x.T # Update weights weights_input_hidden += learnrate * del_w_input_hidden / n_records weights_hidden_output += learnrate * del_w_hidden_output / n_records # Printing out the mean square error on the training set if e % (epochs / 10) == 0: hidden_output = sigmoid(np.dot(x, weights_input_hidden)) out = sigmoid(np.dot(hidden_output, weights_hidden_output)) loss = np.mean((out - targets) ** 2) if last_loss and last_loss &lt; loss: print("Train loss: ", loss, " WARNING - Loss Increasing") else: print("Train loss: ", loss) last_loss = loss# Calculate accuracy on test datahidden = sigmoid(np.dot(features_test, weights_input_hidden))out = sigmoid(np.dot(hidden, weights_hidden_output))predictions = out &gt; 0.5accuracy = np.mean(predictions == targets_test)print("Prediction accuracy: &#123;:.3f&#125;".format(accuracy)) 你可能会感兴趣： DeepLearning笔记：Backpropagation 反向传播算法 DeepLearning笔记：多节点神经网络 DL笔记：用 python 实现梯度下降的算法 DL笔记：梯度下降 Gradient Descent DL笔记：Cost function 损失函数 DL笔记：Activation Function 激活函数 DL笔记：Linear regression 线性回归 DL笔记：Neural Networks 神经网络 DL笔记：机器学习和深度学习的区别]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>ArtxCode</tag>
        <tag>DeepLearning</tag>
        <tag>Coding</tag>
        <tag>编程</tag>
        <tag>神经网络</tag>
        <tag>Backpro</tag>
        <tag>反向传播</tag>
        <tag>Programming</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DeepLearning笔记：Backpropagation 反向传播算法]]></title>
    <url>%2F180125-DeepLearning9-backpropagation.html</url>
    <content type="text"><![CDATA[阿扣：今天我们来学习反向传播算法。 阿特：为什么你一脸严肃哦？ 阿扣：咳咳，有吗……可能因为当初被 Backpropagation 这个词吓得不轻吧…… 反向传播算法是深度学习的核心之一，不过也没有很难，放轻松~ 阿特：你是说你还是说我 😄 阿扣：来，我们先回忆一下，对多层神经网络，我们用梯度下降法去训练。之前已经学过如何计算输出节点的误差项 $\delta =(y-\hat y)f’(h)$，借助梯度下降算法，用误差项训练隐层到输出层的权重。 阿特：隐层到输出层。我记得最简单的神经网络应该有 3 层——是不是还有输入层到隐层？ 阿扣：没错。 阿特：那该怎么求隐层节点对应的误差项呢？ 阿扣：在神经网络里，输出节点的误差项，跟隐层的权重是成比例的。 阿特：意思是误差项越大，隐层节点的权重也越大？ 阿扣：可以这么理解。既然我们知道输出的误差项，就可以用它来「反向传播」，求出隐层的误差项，再用于求输入节点的权重。 阿特：咦，那不是反过来了？先知道输出结果，再反推输入权重？ 阿扣：对的，所以叫做「反向」呀。 比如，输出层 k 个节点对应的误差项是 $\delta^o_k$ 。隐层有 j 个节点，那么隐层节点到输出节点的 j 个误差项是： $\delta^hj=\sum W{jk} \delta^o_k f’(h_j)$ 阿特：等等！先让我复习一下误差项是什么…… 阿扣：嗯！误差项 δ 表示 误差 * 激活函数的导数，$\delta_j=(y-\hat y)f’(h_j)$。对比一下 $\delta^hj=\sum W{jk} \delta^o_k f’(h_j)$，看看有什么不同？ 阿特：隐层到输出层的误差 (y-y^) 变成了 $\sum W_{jk} \delta^o_k$ 阿扣：很棒！你发现了吧，$\delta_k$ 成为了 wx + b 中的变量 x： 阿特：啊，又要来算这个了…… 阿扣：没关系，虽然看上去麻烦一些，但是跟正向传播的做法很类似，权重的更新为 $\Delta w_{ij}=\eta \delta^h_jx_i$ 。 阿特：每次都要来一遍，要死不少脑细胞啊…… 阿扣：那我给你列个清单吧，每次照着做就好。 假设我们考虑最简单的神经网络：只有一个隐层节点，只有一个输出节点。用反向传播算法更新权重的算法如下： 给每一层的权重赋值为 0 输入层→隐层的权重 $\Delta w_{ij}=0$ 隐层→输出层的权重 $\Delta W_j=0$​ 对训练集里的每一个数据： 使用 forward pass，计算输出节点的值 $\hat y$ 计算输出节点的误差梯度 $\delta^o=(y-\hat y)f’(z)$， 这里的 $z=\sum_jW_ja_j$ 将误差反向传递到隐层 $\delta^h_j=\delta^oW_jf’(h_j)$ 更新权重步长 $\Delta W_j = \Delta W_j + \delta^oa_j$ $\Delta w{ij} = \Delta w{ij} + \delta^h_ja_i$ 更新权重（η 为学习率，m 为输入节点的个数): $W_j = W_j + \eta \Delta W_j /m$ $w{ij} = w{ij} + \eta \Delta w_{ij} /m$ 重复 e 次训练步骤 (epochs) 阿特：天！看上去好复杂。 阿扣：练习两次就能熟悉起来了，别担心。下一次我带你用 Python 实现反向传播算法。 Ref Deep Learning Nanodegree | Udacity Yes you should understand backprop – Medium CS231n Winter 2016 Lecture 4 Backpropagation, Neural Networks 1-Q_UWHTY_TEQ.mp4 - YouTube 00 的 DeepLearning 笔记 DeepLearning笔记：机器学习和深度学习的区别 DeepLearning笔记：Neural Networks 神经网络 DeepLearning笔记：Linear regression 线性回归 DeepLearning笔记：Activation Function 激活函数 DeepLearning笔记：Cost function 损失函数 DeepLearning笔记：梯度下降 Gradient Descent DeepLearning笔记：用 python 实现梯度下降的算法 DeepLearning笔记：多节点神经网络]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>ArtxCode</tag>
        <tag>DeepLearning</tag>
        <tag>Coding</tag>
        <tag>神经网络</tag>
        <tag>Backpro</tag>
        <tag>反向传播</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[码以致用03 - 用 Pandas 分析爬虫抓取的数据]]></title>
    <url>%2F180118-python-pandas-data-analysis.html</url>
    <content type="text"><![CDATA[上一篇，我们用 Scrapy 从简单心理网站上抓取了心理咨询师的信息。 接下来试着分析一下咨询师的价格。 如何去掉某一列中不需要的字符？在 price 列中，数据格式是 600 元/次。很明显，中文字符会给统计价格带来不便，需要想办法去掉。 取 price 列：df[&#39;name&#39;] 去掉元/次 字符：str.rstrip() 把剩下字符转换成数字：pd.to_numeric Pandas 语句可以这样写： 1df['price'].str.rstrip('元/次').apply(pd.to_numeric) 结果： 如何统计价格？用 Pandas 做基本的数据统计如均值、最大值、最小值等，非常方便，分别用 mean(), max(), min()就可以： 1print("平均价格：&#123;:.1f&#125;元 \n最高价格：&#123;&#125;元 \n最低价格：&#123;&#125;元".format(df['price'].mean(),df['price'].max(),df['price'].min())) 平均价格：570.9元 最高价格：3000元 最低价格：100元 另外，Pandas 还提供了 describe() 函数，快速给出概要统计值： 然后单独取出收费最高和最低的咨询师资料： 12df.loc[df['price'].idxmax()]df.loc[df['price'].idxmin()] 如何统计咨询师介绍里的词频？方法 1 ：用 jieba 分词，用 Counter 统计 123456789101112131415161718192021import jiebafrom collections import Counter# 单独导出咨询师介绍列df['info'].to_csv('info.txt')with open('info.txt', 'r') as f: text = f.read()wordlist = Counter()words = jieba.cut(text)for word in words: if len(word) &gt; 1: wordlist[word] += 1def gen_cloud_word(): words = [] for word,cnt in wordlist.most_common(30): words.append(word) return words 列出前 30 个高频词： 方法 2 ：用 wordcloud 直接制作标签云 word cloud 是一个 python 的标签云生成库，可以直接输入文本，得到标签云图片，还可以定制图片形状和颜色，小巧好用。(https://github.com/amueller/word_cloud) 结合 matplotlib，很快就可以画出高频词的标签云： 1234567891011121314151617181920212223242526272829303132%matplotlib inline%config InlineBackend.figure_format='retina'from os import pathfrom PIL import Imagefrom wordcloud import WordCloud, ImageColorGeneratorimport matplotlib.pyplot as pltimport numpy as npd = path.dirname('info.txt')# 设置字体font = r'/Users/kidult/Library/Fonts/MFKeSong_Noncommercial-Regular.TTF'# Read the whole texttext = open(path.join(d, 'info.txt')).read()# 排除词stopwords=('Dr','of','to','and','The','in','zx','至今','中国','同时','当然')# 用图片截取并取色heart_coloring = np.array(Image.open(path.join(d, "heart.png")))# Generate a word cloud imagewordcloud = WordCloud(max_words=80, background_color='white', mask=heart_coloring, max_font_size=60, relative_scaling=0.4, font_path=font,stopwords=stopwords, random_state=42)wordcloud.generate(text)image_colors = ImageColorGenerator(heart_coloring)plt.figure(figsize=(12,8))plt.axis("off")plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation="bilinear"); 结果如下： 完整的 Jupyter Notebook，请查看 00 的 Github。 Ref PANDAS 数据合并与重塑（concat篇） - CSDN博客 初学pandas（八）条件选取行的便捷… - CSDN博客 pandas数据清洗，排序，索引设置，数据选取 - CSDN博客 amueller/word_cloud: A little word cloud generator in Python]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Coding</tag>
        <tag>编程</tag>
        <tag>爬虫</tag>
        <tag>Scrapy</tag>
        <tag>Pandas</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大哉问06 - 学习中最应该养成什么习惯？]]></title>
    <url>%2F180113-first-principle-of-learning.html</url>
    <content type="text"><![CDATA[上一篇大哉问我们讨论了这个问题：什么是学习中最大的误区？ 以为学习的行动，就是学习本身 学习是以改变为目的的一系列探索活动。如果改变没有发生，没有形成新的视角或行动或规则，那么学习基本上可以说无效。 明确了应该避开「不改变」这个误区，那么下一个大问题来了： 什么是学习中最应该养成的习惯？ 00 思考了很久，目前的回答是： 学习是一种训练学习不是看书、做实验这些行为本身，学习是围绕目标和薄弱点的「训练」，它们指向思想或行动的改变。 学习不是孤立的阅读、孤立的理解、孤立的运用，一个学习的「迭代」包括： 设定目标 - 模块拆解 - 刻意练习 - 评估调整 完整的学习由很多个迭代循环构成，迭代的结果是行为改变。 向机器学习「学习」最近在学习机器学习和深度学习。机器如何学习给我非常多启发。 机器的学习为什么高效？除了它计算能力超强、根本不会疲劳以外，它们学习的方法——所谓算法——都是最聪明的人类精心设计的。 深度学习的基本思路是： 设定目标 Y 找到真实数据集（包含自变量 x 和输出值 y） 给出初始模型，喂入真实数据集 观察模型输出的损失（目标 Y 和实际值 y 的差值） 调整模型参数，使损失函数最小 （重复循环） 达到目标 Y ，停止训练 再打开「刻意练习」这本书复习一下。 刻意练习聚焦于提高绩效和表现，它的特点： 有定义明确的特定目标 专注的 包含反馈 需要走出舒适区 产生有效的心理表征 构建或修改那些过去已经获得的技能 See? 机器学习完全遵守了这些规则，能不高效吗？！ GEXTE ：学习循环的模板事不宜迟，在我们下一个学习计划，启用 00 为你准备的「GEXTE 学习循环模板」吧！ 在定义一个学习项目时，我们需要把学习的循环拆分成几个部分： 目标是什么？怎么评估做到了？可以拆分为哪些训练模块？模仿什么？训练步骤是？ 代号 循环项 定义 每次循环时 G 目标 / Goal 明确可描述的目标，从现状 A 到终点 B 回顾目标 E 评估方法 / Error 如何评估是否达成目标 获得反馈 X 技能模块 / X 影响 Error 的模块、技能点 检查是否有遗漏 T 模仿对象 / Target 具体的模仿对象和结果 比较的结果差别 E 单次训练 / Epoch 每一次训练要做什么 调整行动或目标 可打印的模板也做好了。HackYourself 公众号回复 「学习模板」即可获得： 看吧，学习是远比我们想象要复杂但也更有趣的挑战。不妨在每个循环后面，增加一些奖励来激励自己。 虽然正儿八经地学个什么颇费力，但总比数十年喊着口号却原地打转强得多，是不是？ 下面来看两个例子：编程学习和产品决策能力训练。 栗子1：学习用 Processing 模拟自然现象Processing 是基于 Java 的一套编程语言和环境，有很强的图形、动画生成能力，被称为「设计师的编程语言」。现在我们就来尝试用 GEXTE 模板定义完整的学习循环。 G 目标 目标1：学习如何用代码可视化表达随机性、力与运动、震荡、粒子、分形等自然现象 现状 A 不了解模拟自然现象的算法 不知道如何用 Processing 实现 终点 B 能用基础的公式表示自然现象背后的数学和物理原理 用 Processing 实现动画程序 目标2：练习巩固 Python 语法 现状 A 会基本的 Python 语法 能看懂简单的 Java 程序 终点 B：用 Python 实现 Processing 动画程序 E 评估用 processing.py 实现模拟自然现象的动画程序 程序运行结果是否如预期 抄程序：Java 没问题但 Python 有问题的地方，是需要加强的薄弱点 重写程序 是否理解原理 是否理解 Processing 如何实现 是否理清实现的思路 X 模块 自然现象的原理 Processing 语法和模块 Python 语法 debug 方法 T 对象「The Nature of Code」配套视频和例子 E 训练 看 youtube 视频和书，学习自然现象的原理 看 Java 代码 用 Python 抄一遍 用 Python 自己写一遍 填写训练反馈 完成 9 个单元，把所有例子翻译成 python 版本 Bonus 上传 NOC python version 到 Github 每一章实现一个有意思的小动画 上面这个例子可能比较特殊，因为学习对象是界定非常明确的编程练习，学习产出也容易评估。 下面再举一个不太容易定义的例子。 栗子2：产品决策能力训练G 目标提升决策的质量并优化决策的流程 E 评估决策是否达到预期目标 X 模块 逻辑思维、抽象、演绎、分析、综合等能力 决策信息的收集 提炼、表达和沟通能力 决策落地 评估标准制定和信息收集 T 对象 自己的决策：拥有最全面的信息，方便评估 上级/团队的决策：观察、评估上级或团队的决策，也是绝佳的练习机会 E 训练 决策问题产生和定义 情报收集和分析 决策制定和描述 推进和项目组织 结果评估 决策方法总结 每一步可能还有很多细分的练习模块，这里就不具体展开，产品同学们开启脑洞吧。 最后 打造有效的学习循环很难，几乎就像是打造一个产品循环。 这也就是为什么学习容易成为西西弗斯式壮（xiao）举（hua）的原因。因为富有成效的学习，太不符合大脑喜欢最短路径的构造，所以我们总是自欺自人。 但总有一些奖赏，要在经历之后才深明其义。 One of the first rules of science is if somebody delivers a secret weapon to you, you better use it. — Herbert Simon HackYourself 学习专题： 大哉问05 - 什么是学习中最大的误区？ 重启学习系统，做个知识炼金术士 知识炼金术士行动指南 1.0 心智乐高01 - 寻找智慧组块 别傻了，傲娇大脑爱学习？]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>大哉问</tag>
        <tag>学习</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[码以致用02 - 用 Scrapy 爬虫抓取简单心理咨询师资料]]></title>
    <url>%2F180112python-scrapy-jdxl.html</url>
    <content type="text"><![CDATA[目标和步骤爬虫目标：从简单心理网站上抓取心理咨询师列表和信息。 学习目标： 熟悉 Scrapy 框架，理解如何使用 初步掌握 xpath 语法 导出爬取信息为 csv 用 Pandas 查看和清理数据 简单心理网站上有「咨询咨询」和「精神科顾问」两类专家，这里先尝试抓取咨询师资料。 咨询师展示列表比较简单，一共有 49 页，每页有 10 或 11 个咨询师（真是有点坑……）。抓取每页上的信息即可。 步骤分解： 抓取每一页上面所有咨询师的信息，包括姓名、简介、地点、咨询方式、地点、价格等 按页面顺序抓取全部咨询师资料 导出信息为 csv 用 pandas 查看信息 新建项目和爬虫上一篇已经介绍过 Scrapy 爬虫框架和如何新建 Python 虚拟环境。现在来新建一个 Scrapy 爬虫项目： 1scrapy startproject jdxl Scrapy 生成了以下文件 123456789├── jdxl│ ├── __init__.py│ ├── items.py│ ├── middlewares.py│ ├── pipelines.py│ ├── settings.py│ └── spiders│ └── __init__.py└── scrapy.cfg 我们在 spiders 文件夹里新建爬虫文件 counselor.py。 然后在 items.py 里面定义要抓取的项目： 123456789class JdxlItem(scrapy.Item): # define the fields for your item here like: # name = scrapy.Field() name = scrapy.Field() #姓名 url = scrapy.Field() #链接 info = scrapy.Field() #简介 zx_type = scrapy.Field() #咨询类型 location = scrapy.Field() #地点 price = scrapy.Field() #价格 抓取页面信息打开爬虫 counselor.py，开始写爬取的程序。 不要忘记先 import 上面定义好对象： 1from jdxl.items import JdxlItem 问题1：如何设置起始 URL？打开心理咨询师列表页面，然后翻到第二页，发现 url 是很长的一串： 1https://www.jiandanxinli.com/experts?filter%5Bcity_id%5D=&amp;filter%5Bfield_id%5D=&amp;filter%5Bgender%5D=&amp;filter%5Bonly_available%5D=&amp;filter%5Bonly_junior%5D=&amp;filter%5Bonly_online%5D=&amp;filter%5Bprice%5D=&amp;filter%5Bq%5D=&amp;filter%5Bsect_id%5D=&amp;filter%5Btarget_id%5D=&amp;filter%5Btime%5D=&amp;filter%5Btype_id%5D=&amp;page=2 中间都是传递的筛选参数，只有最后 &amp;page=2 才是关键。也就是说抓取的页面URL是这样的： 1234https://www.jiandanxinli.com/experts?&amp;page=1https://www.jiandanxinli.com/experts?&amp;page=2...https://www.jiandanxinli.com/experts?&amp;page=49 在 class JdxlSpider(scrapy.Spider): 下面开始定义起始 URL： 12345678allowed_domains = ["jiandanxinli.com"] start_urls = ['http://jiandanxinli.com/experts'] start_url_list = [] for i in range(1,50): start_url_list.extend(['http://jiandanxinli.com/experts?&amp;page=' + str(i)]) start_urls = start_url_list 问题2：如何抓取一个节点的信息在 def parse(self, response): 函数中定义要抓取内容，用 XPath 语法告诉爬虫要抓取的节点位置。 什么是「叉怕死」呢？ XPath (XML Path Language) is a query language for selecting nodes from an XML document. In addition, XPath may be used to compute values (e.g., strings, numbers, or Boolean values) from the content of an XML document. —— Wiki 那怎么写 XPath 呢？ 感谢 Chrome，直接提供了 XPath 选取功能。对需要抓取的位置单击右键，点击 Inspect，打开 chrome-devtools 面板： 对准要抓取的节点，再次右键，点击 Copy XPath，XPath 路径就复制好了。 别高兴得太早，在调试坑里跌倒无数次的 00 颤抖地告诉你：直接复制的 XPath 往往不能直接用…… 比如上面的咨询师姓名这里，chrome 提供的路径是： 1//*[@id="content_wrapper"]/div[2]/div[2]/a[5]/div[1]/strong/text() 但更准确的路径是： 1/div[@class="summary"]/strong/text() . 对初学者来说，如果之前没有太多写 html 和 css 的经验，每一个 xpath 都需要摸索好半天。不过这也是必经之路吧。折腾多了，就学会老老实实去看 XPath 的文档了。 问题3：内容没有节点怎么办？抓到咨询师的咨询方式、地点、价格等信息的时候，坑爹的事情来了。 这一坨的结构是： 文字竟然没有包括在标签之内！前后都是个 i 标签！要怎么抓！ 然后开始了漫漫 Google 之路。最后终于找到了这篇：如何用scrapy提取不在标签内的文字？ 用 following::text() 的方式抓取了几个信息： 123zx_type = response.xpath('./div[@class="info"]/i/following::text()').extract()[1]location = response.xpath('./div[@class="info"]/i/following::text()').extract()[2]price = response.xpath('./div[@class="info"]/i/following::text()').extract()[3] 这样必需是每一栏信息都没有缺少，否则抓取就会错位……暂时这么处理吧 &gt;.&lt; 问题4：如何抓取多个专家信息抓取好一个专家的信息后，要怎么把每个页面 10~11 个专家的信息都抓下来呢？看了页面的 html，每个专家都在 &lt;a class=&quot;expert&quot; ...&gt; 标签下面。于是用循环获取所有带有这个特征的标签。 为了缩小范围，在 response.xpath(&#39;//a[@class=&quot;expert&quot;]&#39;) 就传入了父节点的路径。 123456789101112131415for each in response.xpath('//a[@class="expert"]'): print(each) item = JdxlItem() # 抓取姓名 item['name'] = each.xpath('./div[@class="summary"]/strong/text()').extract() # 抓取 url item['url'] = each.xpath('./@href').extract() # 抓取简介 item['info'] = each.xpath('./div[@class="summary"]//div[@class="content"]/text()').extract() # 抓取咨询方式、地点、价格等 item['zx_type'] = each.xpath('./div[@class="info"]/i/following::text()').extract()[1] item['location'] = each.xpath('./div[@class="info"]/i/following::text()').extract()[2] item['price'] = each.xpath('./div[@class="info"]/i/following::text()').extract()[3] yield item 其他配置在 settings.py 文件里添加模拟 user_agent 的模块（需要先 pip 安装 faker 包）、设置爬取间隔、头信息等： 1234567891011121314151617from faker import Factoryf = Factory.create()USER_AGENT = f.user_agent()# Obey robots.txt rulesROBOTSTXT_OBEY = TrueDOWNLOAD_DELAY = 1DEFAULT_REQUEST_HEADERS = &#123; 'Host': 'www.jiandanxinli.com', 'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'zh-CN,zh;q=0.8', 'Cache-Control': 'no-cache', 'Connection': 'Keep-Alive',&#125; 测试和抓取开始抓取的命令是： 1scrapy crawl counselor crawl 后面跟的是在 class JdxlSpider(scrapy.Spider): 中定义的爬虫名字。 先抓取 2 页试试： 12for i in range(1,3): start_url_list.extend(['http://jiandanxinli.com/experts?&amp;page=' + str(i)]) 调试过程主要问题是节点的 xpath 提供得不准确，没有抓取到内容。另外就是可能忘记在 items.py 里面设置 item。一般来说，根据报错慢慢找，总能找出问题，耐心一些就是了。 输出 csv查看了官方文档里面有关输出的部分 Feed exports — Scrapy 1.4.0 documentation 和 Item Exporters — Scrapy 1.4.0 documentation，试了一下写 pipelines，有点复杂，没有成功。 然后搜到 Scrapy爬虫框架教程（二）– 爬取豆瓣电影TOP250，只需要在执行爬虫时设置输出参数就可以了： 1scrapy crawl counselor -o output_file.csv 查看、清理数据新建 Jupyter Notebook，import pandas 包，用 pd.read_csv 命令查看文件： 抓取的链接不完整，补全并输出： 12df['url'] = 'http://jiandanxinli.com'+df['url']df.to_csv('counselor.csv', index=False) 下一篇继续介绍用 Pandas 和 Bokeh 做简单的数据统计和可视化。 项目源码请查看 00 的 github repo： Ref Scrapy 1.5 documentation XPath - Wikiwand XPath Tutorial 如何用scrapy提取不在标签内的文字？ Scrapy爬虫框架教程（二）– 爬取豆瓣电影TOP250]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Coding</tag>
        <tag>编程</tag>
        <tag>爬虫</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[码以致用01 - Scrapy 爬虫框架简介]]></title>
    <url>%2F180108python-scrapy-introduction.html</url>
    <content type="text"><![CDATA[Scrapy 是什么 Scrapy 是一个为了爬取网站数据，提取结构性数据而编写的应用框架。可以应用在包括数据挖掘，信息处理或存储历史数据等程序中。 Scrapy 的结构Scrapy 的结构如下： via Architecture Overview - Scrapy 1.5.0 在 Scrapy 中数据流是这样的： 引擎从爬虫(Spider)获得初始抓取请求 引擎在 Scheduler 中安排好请求，获取下一个抓取请求 Scheduler 返回下一个抓取请求 引擎通过 Downloader 的 Middlewares 发送请求到 Downloader 完成页面下载后，Downloader 生成请求并通过 Middlewares 发送给引擎的 引擎接收来自 Downloader 的响应，通过 Spider Middlewares 发送给 Spider 处理 Spider 处理请求并返回爬取内容，向引擎提交下一个请求 引擎发送爬取内容到 Item Pipelines，然后发送处理请求到 Scheduler，获取下一个爬取请求 重复 1-8 步，直到没有新的请求 安装 Scrapy新建 Python 虚拟环境比如用 conda，也可以用 virtualenv （参考：virtualenv installation instructions) 1conda create -n &#123;env_name&#125; &#123;list of packages&#125; 上面的命令中，env_name 是用来折腾爬虫的项目环境名称，list of package是要一起安装的包，如 scrapy，pandas。 我新建了一个叫 pyp 的环境，打开这 Python 环境的命令是： 1source activate pyp 如果你使用 zsh，可以在 zshrc 文件里面新建 alias，并 source ~/.zshrc 保存生效，下次就可以用别名快捷打开这个环境了。 安装 Scrapy通过 pip 安装很方便 1pip install Scrapy 新建 scrapy 项目进入存放项目的目录，用命令新建一个爬虫项目： 1scrapy startproject &#123;name&#125; 新建好以后，可以看到起名为 lyrics 的爬虫项目，生成了以下目录和文件： 12345678910111213├── lyrics│ ├── __init__.py│ ├── __pycache__│ ├── items.py│ ├── middlewares.py│ ├── pipelines.py│ ├── settings.py│ └── spiders│ ├── __init__.py│ └── __pycache__└── scrapy.cfg4 directories, 7 files 对照上面介绍的 Scrapy 引擎的结构，可以大概知道每个文件的作用。 下一篇我们尝试用 Scrapy 抓取一些简单的网页内容。 Ref Scrapy 1.5 documentation Scrapy爬虫框架教程（一）– Scrapy入门 virtualenv installation instructions 你可能会感兴趣 DL笔记：用 python 实现梯度下降的算法 菜鸟数据科学入门03 - NumPy 数组基础和基本操作 设计师学编程 - 那些绕不过的概念 多用Git少交税]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Coding</tag>
        <tag>编程</tag>
        <tag>爬虫</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大哉问05 - 什么是学习中最大的误区？]]></title>
    <url>%2F180106-the-learning-myth.html</url>
    <content type="text"><![CDATA[我只想知道我将来会死在什么地方，这样我就可以永远不去那里啦。——查理·芒格 如果说学习是 hack yourself 的主要方式，那么时刻反思「学习」本身就极其重要。 芒格曾经这样总结他的成功经验： 迅速歼灭不该做的事情，接着对该做的事情发起熟练的、跨学科的攻击，然后，当合适的机会来临——只有当合适的机会来临——就采取果断的行动。 今天，我们一起来聊聊学习中应该「迅速歼灭」的事情。 误区千千万，这个特别坑学习中可能的误区有哪些？这个列表会很长： 没有开始去做 没有集中精力 学习材料不对 学习方法不对 缺少目标 缺少练习 缺少反馈 遗忘 …… 被大家戏称「学习机器」的 00 曾经有过很多无效的学（zhe）习（teng）经历，这些坑我都踩过。再次反思，发现其中最巨大的一个，我今天仍然会反复地跌进去。 这个误区就是： 我们以为，一本书接一本书地看，就是学习了；我们以为，买了各种各样的课程（甚至能坚持听完），就是学习了；我们以为，有人手把手地教，就是学习了…… 买课、看书、做计划，甚至开始动手尝试、反复练习，都只是学习的「动作」，而不是学习本身。 这些都是我们为学习所缴纳的巨额税款，而且可能会一直这么交下去。 反思「学习」这个概念在重启学习系统，做个知识炼金术士一文中，00 曾经整理过学习的一些概念。一年多以后再次翻出来，发现自己虽然理解，但是并没有内化，也没有持续践行。 快速找出权威教材和一些大师对学习的定义，其中共同出现频率最高的词是：改变。 学习是通过经历或练习所带来的行为上相对持久的改变。——「心理学最佳入门」 学习意味着从一种知识状态进入另一种知识状态，学习要使学习者的知识结构发生改变。——「变构模型—学习研究的新路径」 学习是在观察行动与结果联系的基础上，改变行动或行动规则。——马奇「经验的疆界」 00 再做了一点简化： 学习是一系列以改变为目的的探索活动 所以，学习的目的，甚至学习的本身，就是：改变。 以这个标准衡量，80% 以上的学习都是徒劳。因为我们根本没有花哪怕 1 分钟去仔细想过： 我现在处于什么状态（起点 A）？ 想达到什么状态（终点 B）？ 如何衡量这一改变？ 为了达成这一改变，需要做哪些改变？ 于是我们在自己那模糊而远大的雄心之下，开始了漫长的西西弗斯式的「壮举」：开始学习，然后无疾而终。 学习的陷阱如同「不是所有的感情都能够被命名」，也不是所有的学习都能被描述和评估，尤其当我们没有去主动思考内隐学习的时候。内隐学习(implicit learning)，指人们对复杂规则知识的无意识获取。 包括内隐学习在内的许多学习主题，都很容易偏离目标，以致于无法形成最终的改变，因为它们： 影响范围很模糊 结果无法标准化/描述 检验周期很长 层级模糊 目标层面的「内隐」从现状 A 到目标 B，B 永远都像梦境中的理想伴侣——面目模糊。 我说我要学日语。但我不去问，「学会」的标准，是在旅行时能流利交流呢，还是能听懂 80% 日剧的对话呢，还是能通过考试呢，还是能熟练对照五十音图发音……我也没有问，这一改变需要通过哪些以往没有做过的事情来达成。我甚至没有问，为什么学这个的优先级比 xx 高，为什么是现在？ 我说我要学编程。但我不去问，「学会」的标准，是能写出简单的脚本处理一些任务呢，还是跟程序员更顺畅地沟通呢，还是找到一份编程的工作呢……我也没有问，这一改变需要通过哪些以往没有做过的事情来达成。我甚至没有问，为什么学这个的优先级比 xx 高，为什么是现在？ 我说我要学如何做决策。但我不去问，「学会」的标准，是工作中做出更有理据的决策呢，是提高个人投资的回报率呢，还是了解决策的过程……我也没有问，这一改变需要通过哪些以往没有做过的事情来达成。我甚至没有问，为什么学这个的优先级比 xx 高，为什么是现在？ 以上都还只是目标容易识别和描述的学习。如果涉及到关系处理、自我觉察、个人成长、构建知识体系等等话题，提炼目标会更加困难。 行为层面的内隐假如目标能够清晰描述，接下来有更多难题等着我们： 从 A 到 B，存在哪些路径，是否存在最优路径？ 路径可以拆分吗？由哪些部分组成？ 每一步拆分的 B 又是什么？ 共性/规则/规律是什么？如何描述？ 如果难以描述，又怎么判断学习效果和改进步骤呢？ 等级层面的内隐如果本身就在三界和五行中，要怎么跳出三界外，不在五行中呢？？ 比如，德雷弗斯模型划分了新手到专家的五个阶段。当我们还处于新手阶段，怎么能想象出成为专家需要具备哪些条件，如何做到呢？ 阶段 特点 概述 新手 没有经验或很少经验（通过实施技术促进了思维改变）。不知道自己的行为是对是错。新手不是特别想要学习，只是想实现一个立竿见影的目标。不知道如何应付错误。新手需要一份指令清单。 Novices need recipes 高阶新手 可以独自尝试任务，但仍难以解决问题。想要快速获取信息，不想在此刻寻根究底，或者重新温习一遍基础知识。能够开始形成一些总体原则，但不是全貌。情境理解有限。 Advanced beginners don’t want the big picture. 胜任者 能够建立问题域的概念模型，并有效使用它们，可以独立解决自己遇到的问题，并开始考虑如何解决新的问题。开始寻求和运用专家的意见并有效利用。如果没有更多经验，在解决问题时，他们难以确定关注哪些细节。 Competents can troubleshoot. 精通者 需要全局思维，寻找并想了解更大的概念框架。会自我改进，反思以前是如何做的，并修改做法期望下一次表现得更好。会学习他人的经验，如案例研究、观察、从故事中学习。可以在不同情境中理解和运用格言经验之谈。可以充分利用思考和反馈。 Proficient practitioners can self-correct. 专家 专家是各个领域知识和信息的主要来源。他们总是不断的寻找更好的方法和方式去做事。他们有丰富的经验，可以在恰当的情境中选取和应用这些经验。他们著书、写文章、做巡回演讲。专家根据直觉工作，而不需要理由。专家知道哪些是无关紧要的细节，哪些是非常重要的细节，非常擅长做有针对性的特征匹配。 Experts work from intuition. 因为这种种的「不可描述」，学习其实是一件不确定性蛮高的事情。如果没有充分启动元认知去理解和反思我们的学习行动，就容易用行动替代实质。 所以，学习的尝试和学习是两回事。 所以，看书和学习是两回事。 如果把看书的目的分为：参考资料、获得体验、启发思路、重塑三观/知识体系，我们惯常的读书习惯，其实都是以获得体验为主，尤其是虚构类的书籍。当然，获得体验本身就是非常有价值的目标，只不过这非常奢侈。 如果以学习为侧重而去读书，可能可以这样分配比例： 目的 书籍比例 精力投入 重塑三观 0.1% 70% 参考资料 10% 15% 获得体验 8% 10% 启发思考 1.9% 5% 没有营养 80% 0% 更新「学习」这个概念从今天开始，往头脑的概念库中重新写入「学习」这个概念吧！ 马奇在「经验的疆界」中提出，学习会在三个层面同时发生： 学习做什么：例如寻找好的技术、战略或合作伙伴 学习如何做：例如精炼并改进在某技术、战略或合作伙伴上的胜任力 学习期盼什么：例如调整绩效目标（经常出问题，开始设定太高或太低后续没有调整） 所以，学习并不是「做了哪些代表学习的举动」，而是在清醒知道为什么学、如何学、如何评估的前提下，从 A 到 B 的过程。如果没有（一定程度上可描述的）改变，学习相当于没有发生。 这么看来，学习真是一件远比我们想象要深刻且有用的事情。低效的学习，大都来自于对「学习」概念本身的误解。 既然找出了大坑，下一篇我们来详细讨论，学习中最应该养成的习惯是什么。 Ref 心理学最佳入门（原书第2版） 经验的疆界 穷查理宝典 程序员思维修炼 变构模型-学习研究的新路径 HackYourself 大哉问系列 小哉问：年终总结写什么？ | 00’s Adventure 大哉问04 - 为什么要学编程 | 00’s Adventure 大哉问03 - 什么是赚钱之道？更新你的个人商业模式 | 00’s Adventure 大哉问02 - 如何爱自己？拟一份爱的宣言 | 00’s Adventure 大哉问01 - 什么样的时间观值得拥有？ | 00’s Adventure 用问题对话虚无 —— HackYourself 大哉问系列 | 00’s Adventure]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>大哉问</tag>
        <tag>学习</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DeepLearning笔记：多节点神经网络]]></title>
    <url>%2F180104DeepLearning8-MultiLayer-Perceptrons.html</url>
    <content type="text"><![CDATA[阿扣：上回我们在 python 里面实现了单个神经元的梯度下降算法。现在可以挑战一下多个神经元的网络了。 阿特：那会不会很难哦？ 阿扣：也不会，原理其实是一样的，只是需要分辨清楚各个参数属于哪一层。 阿特：（不祥预感） 阿扣：比如说，下面这个网络： 有 3 个输入 x1,x2,x3，2 个隐层节点 h1,h2 节点之间的权重用 w 表示，第一个下标为出发节点，第二个下标为目标节点，比如 $w_{11}$ 表示 x1 到 h1 的权重 我们把权重存在一个矩阵中，每一行对应一个输入值的权重，每一列对应一个隐层节点的权重： 所以，隐层的第 j 个节点就表示为：$h_j = \sumi w{ij}x_i$ 权重和输入值相乘时，需要用到矩阵乘法中的点乘（dot product）： 阿特：啊……矩阵，我好些已经忘得差不多了…… 阿扣：没关系，慢慢回忆起来。这里比较关键的是，两个矩阵相乘，左边矩阵的行数，必需跟右边矩阵的列数相等，不然没法相乘。 比如我们要计算的神经网络的矩阵： 左边矩阵有 1 行 3 列，右边矩阵有 3 行 1 列，它们是可以相乘的。 阿特：让我数一数…… 阿扣：记得矩阵需要「门当户对」就好 😄 。上面这个矩阵，我们也可以调换左右顺序，并且让两个矩阵都转置（就是行列互换）一下来满足相乘的条件： 阿特：这跟上面那两个矩阵相乘的结果是一样的吗？ 阿扣：是的。按照矩阵点乘的公式 ($h_1=x1w{11} + x2w{21}+x3w{31}$) 把它们展开，会发现其实是一个东西。 00 的 DeepLearning 笔记 DeepLearning笔记：机器学习和深度学习的区别 DeepLearning笔记：Neural Networks 神经网络 DeepLearning笔记：Linear regression 线性回归 DeepLearning笔记：Activation Function 激活函数 DeepLearning笔记：Cost function 损失函数 DeepLearning笔记：梯度下降 Gradient Descent DeepLearning笔记：用 python 实现梯度下降的算法]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>ArtxCode</tag>
        <tag>DeepLearning</tag>
        <tag>Coding</tag>
        <tag>神经网络</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小哉问：年终总结写什么？]]></title>
    <url>%2F171226MyYear2017.html</url>
    <content type="text"><![CDATA[马上要跨入本世纪第 19 个年头了（可怕不可怕……），大家都在忙着写总结和计划。 年终总结写什么，取决于想得到什么。 如果想记录一年都做了什么，那很简单，按时间记账就行。如果想盘点一年的得失，就需要费一点心力，思考哪些事情比较重要，自己从中获得了什么、失去了什么。 如果想给自己一个交代，总结过去就好。 如果想许自己一个未来，那值得再琢磨琢磨。 一天有一天的所得，一辈子有一辈子的教训。越是大时间周期的回顾，提取的信息应该越凝练。人能清醒地写年终总结的机会真的不多（也就二三十来次？）年末提供了一个强制的时间点去做盘点，以便搞清楚这一年有哪些新收获，最希望在来年谨记？有哪些切肤之痛，希望未来不要再经历？有哪b些或主动或被动的改变，希望来年继续？ 一年一次的总结，也可以看成是一次内存整理：「卸载」那些无用、低效的想法和习惯，「加载」来年需要的认知和能力。 今年是出乎意料的一年，以没有料想过的方式，学习到一些被忽视已久的知识。虽然作品寥寥，倒是更懂自己了。 来到 2018 的门口，先放下背包，倒出这一年中收集的种种，仔细考虑哪些要丢弃，哪些需要重视起来，哪些要且行且珍惜。 需要卸载 会带来巨大认知失调的惯性 让别人的目标凌驾于自己的目标之上 自我剥夺价值感 陈旧的人设 需要保持 简单的生活方式 反碎片化 从知识源头获取信息（比如，跟踪人而不是五手信息） 以问题驱动思路，以试验驱动行动 需要加载1. 进入新环境、新领域、新角色时，需要清内存，重建数据库 2. 正确看待人性的复杂 尤其不要低估人与人之间的差异 提升快速识别人的判断力，以及其他直觉 观察互动模式如何形成 设定关系的止损点 3. 爱自己 通过情绪快速识别问题 划定灵活而坚定的个人边界 优先处理自己的核心矛盾，保护内在动机 4. 建立「初心」的快捷方式，多拷问目标 5. 减少 90% 主流信息输入方式，在最优信息上增加十倍投入 6. 以身份和项目为导向，聚焦和持续输出 祝大家新年快乐！每天都有新收获]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>2017</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DL笔记：用 python 实现梯度下降的算法]]></title>
    <url>%2F171226DLN7-GradientDescentinPython.html</url>
    <content type="text"><![CDATA[回顾上回讲的梯度下降算法，想实现梯度下降，需要不断更新 w： $$ \Delta w_{ij} = \eta \delta_j x_i $$ 具体步骤如下： 初始化权重变化率为 0 ：$\Delta w_i = 0$ 对训练集中的每一个数据： 做正前传播计算：$\hat y=f(\sum_iw_ix_i)$ 计算输出单元的 error term：$\delta=(y-\hat y) * f’(\sum_iw_ix_i)$ 更新权重变化率：$\Delta w_i= \Delta w_i + \delta x_i$ 更新权重 $w_i = w_i + \eta \Delta w_i /m$ 重复 e 次训练 epochs 代码实现 初始化权重变化率为 0 1del_w = np.zeros(weights.shape) 正向传播计算 1output = sigmoid(np.dot(x, weights)) 计算输出单元的 error term 12error = y - outputerror_term = error * output * (1-output) 更新权重变化率 1del_w += error_term * x 更新权重 1weights += learnrate * del_w / n_records 重复 epochs 1234567891011121314151617181920for e in range(epochs): del_w = np.zeros(weights.shape) for x, y in zip(features.values, targets): # Loop through all records, x is the input, y is the target # Calculate the output output = sigmoid(np.dot(x, weights)) # Calculate the error error = y - output # Calculate the error term error_term = error * output * (1-output) # Calculate the change in weights for this sample # and add it to the total weight change del_w += error_term * x # Update weights using the learning rate and the average change in weights weights += learnrate * del_w / n_records 完整代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import numpy as npfrom data_prep import features, targets, features_test, targets_test# Defining the sigmoid function for activationsdef sigmoid(x): return 1 / (1 + np.exp(-x))# reserve seednp.random.seed(42)n_records, n_features = features.shapelast_loss = None# Initialize weightsweights = np.random.normal(scale=1 / n_features**.5, size=n_features)# Neural Network hyperparametersepochs = 1000learnrate = 0.5for e in range(epochs): del_w = np.zeros(weights.shape) for x, y in zip(features.values, targets): # Loop through all records, x is the input, y is the target # Calculate the output output = sigmoid(np.dot(x, weights)) # Calculate the error error = y - output # Calculate the error term error_term = error * output * (1-output) # Calculate the change in weights for this sample # and add it to the total weight change del_w += error_term * x # Update weights using the learning rate and the average change in weights weights += learnrate * del_w / n_records # Printing out the mean square error on the training set if e % (epochs / 10) == 0: out = sigmoid(np.dot(features, weights)) loss = np.mean((out - targets) ** 2) if last_loss and last_loss &lt; loss: print("Train loss: ", loss, " WARNING - Loss Increasing") else: print("Train loss: ", loss) last_loss = loss# Calculate accuracy on test datatest_out = sigmoid(np.dot(features_test, weights))predictions = test_out &gt; 0.5accuracy = np.mean(predictions == targets_test)print("Prediction accuracy: &#123;:.3f&#125;".format(accuracy)) 00 的 DeepLearning 笔记 DL笔记：机器学习和深度学习的区别 DL笔记：Neural Networks 神经网络 DL笔记：Linear regression 线性回归 DL笔记：Activation Function 激活函数 DL笔记：Cost Function 损失函数 DL笔记：Gradient Descent 梯度下降]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>ArtxCode</tag>
        <tag>DeepLearning</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大哉问04 - 为什么要学编程？]]></title>
    <url>%2F171223-Why-Learn-Programming.html</url>
    <content type="text"><![CDATA[工欲善其事，必先鼓其志，然后利其器。 —— 00 很多次失败的学习经历告诉我，最终能不能学会一样东西，跟聪不聪明没太大关系，而是看这件事到底有多生死攸关，或者有多意义重大。 学编程，对大龄、非专业的我来说，更是如此。动机因人而异，不管黑猫白猫，能加满油箱的就是好动机。 我找出了 5 个比喻，来说服自己为什么要学编程： 数字化生存的工具 人机交互的语言 复杂系统的训练营 创作的可供性源头 心流的容器 1.数字化生存的工具 距离尼葛洛庞帝写出「Being Digital」已经过去 22 年了。我们真的已经生活在数字化的世界中。 世界很复杂。 人们通过「降维」，抽取并控制最基本的单元要素，把事物抽象成数理形式、逻辑，再进一步抽象成 0 和 1，从而获得了重构/再造世界的能力——这是强大的杠杆，使得效率暴涨、网络成型。 为什么能够做到？得益于我们抽象事物、提取共性、找到基本单元的能力。付出的是理解、灵活性和转化成本。 数字化生存的三个阶段概念和形式的数字化。那些以虚拟概念、形式逻辑为核心的领域，比如金融，比如文字，比如音乐，早已经完成数字化。 实体的数字化。O2O、自动化生产、智能家居、物联网，它们不仅仅是网红概念和风口，也是数字化卷积横扫物理世界的汹涌进程。物理世界被慢慢驯服的同时，构建虚拟化世界的技术 VR/AR/MR 们也快速发展——毕竟人们渴求对世界的完全「控制」，即便这种控制只停留在视觉层面。 人的数字化。先是 ID 化，完成人与人的互联。碳基质的人类迟早（已经）意识到肉身的局限，就会开始去修改自己的出厂设置。基因技术，纳米计算，脑机接口……机器不会毁灭人类，因为人类会率先变成人机融合的可编程智能体。 人能够摆脱自然的桎梏，成为衣食无忧、没有天敌的物种，靠建造工具去改造环境，以适应自身的需求。要在越来越数字化的世界中生存，掌握改造周边环境的能力，或者说手握一本操纵现实和驱动生产的「指南」，确实很有必要。 何况，它还能让你找到一份工作。因为越来越多的工作内容，都转变成了建造和管理数字世界。 那么应该何时完成进化？ 比你所在的行业/领域早一步完成。如果它正处在数字化进程的早期，那就赶紧开始吧。 总之 学编程，是为了提高数字世界的生存效率。 2.人机交互的语言 人机交互是我过去多年的工作内容，希望未来也是。 在人工智能的前夜，需要很多类似交互设计师、体验设计师这样的 AI 清道夫，帮助机器完成它们还比较笨拙的「沟通」工作。黑暗的前夜什么结束，我们不知道，可以肯定的是，只会越来越快。 当算法越来越智能，人与机器的交互大概会沿着两个方向发展： 在机器更擅长的领域，推动自动化。很多原本需要人干预的、相对机械的事情，都会逐渐自行运转——比如数字化生产、自动驾驶等等。 在人更擅长的领域，推动人机合作。比如综合智能、文艺创作、理解和共情他人、面对面服务这些领域，机器如何帮助人完成工作，人和机器之间的「伙伴式」互动，是我更感兴趣的人机交互领域。 「人机交互创作」，应该会成为一个有意思的领域，而且它会让编程语言改头换面——又或者是增加其他的方式，比如编程手势，编程舞蹈，编程表情？ 总之 学编程，是为了让人和机器更好地沟通。 3.复杂系统的训练营 如何构造复杂的系统？运用编程的思想，并且在沙盒里实践。 再复杂的系统，都可以始于 「Hello world」。然后增加一条运算，增加一个循环，增加一个函数， 增加一个对象，增加一个 API，增加一个库，增加一个逻辑层，增加一个编译器，增加一个物理模组……处理好的部分就封装起来，眼不见心不烦，可以专注搭建下一个模块。如果随着现实需求的增加，发现造出来的「轮子」不好用，还可以拆了轮子重造。 罗马不是一天建成的，Minecraft 也不是。并非每个人都能承受物理世界推翻重建的高昂成本，但是每个人都能开 Sandbox，调通程序以后再 Git Push。 你看吸金无数的在线游戏，在虚拟世界的沙盒里，硬生生地再造了无数个传奇。 你看横空出世的比特币，在虚拟世界的沙盒里，硬生生地再造了一个金融系统。 学编程，是为了训练构造复杂系统的能力。 4.创作的可供性源头 音乐家以音符为符号，用乐器演奏。画家以画笔为工具，在实体材料上作画。 当我们把思想降维成文字，便拥有了生成新想法的可能；把建筑降维成骨架和砖块，我们拥有了建造形态万千的建筑的可能；把音乐降维为旋律、节奏、音色、和声，我们拥有了创造新作品的可能。 当然，这都只是「可能」，想要创造出鲜活而有深度的新事物，只有一个途径：在实践中改进，永不停息。 我想强调的是，一旦把事物拆解到原子/比特层级，就可以完全重组——一生二，二生三，三生万物，这释放了多少可供性！ 代码本身是语言，是驱动系统为你创作的语言。音符和乐器合一，纸和笔合一，建筑场所和构件合一——这是多么不可思议的创造环境，表达、构造、呈现的载体合一了！ 总之 学编程，是为了能操控素材，创造属于自己的时间晶体。 5.心流的容器 再怎么数字化生存，再怎么提高效率，也不能被轻易地被物化，这是人要守住的界限。人之为人，还是应该多以自身的福祉为出发点。 幸福是什么？对我而言，幸福就是「忘我但趋于有序」的状态，或者说，就是在创作中的心流状态。 写作是低成本的心流获取方式，而且自带生产属性。同样是用语言表达，编程也容易产生心流，而且改造现实的能力更强。写文字和写代码，都是心流体验的容器。 但是在获得心流之前，需要大量的练习。 via Flow (psychology) - Wikiwand) Csikszentmihalyi 这张心流的图示，大家可能都很熟悉了。只有当技能水平和任务难度都高的时候，心流才容易产生。编程就是一种需要专注、难度可控、反馈及时的活动。在心流中构建作品，还有什么事情比这个更值得投入吗？ 总之 学编程，是为了拥有进行创作的心流容器。 最后在门口徘徊挣扎了 4、5 年，总算是磕磕碰碰上路了。 00 的编程学习笔记和项目都会记录在 ArtxCode 公众号上面，欢迎围观和一起学习。 先学为敬。 HackYourself 大哉问系列 小哉问：年终总结写什么？ | 00’s Adventure 大哉问03 - 什么是赚钱之道？更新你的个人商业模式 | 00’s Adventure 大哉问02 - 如何爱自己？拟一份爱的宣言 | 00’s Adventure 大哉问01 - 什么样的时间观值得拥有？ | 00’s Adventure 用问题对话虚无 —— HackYourself 大哉问系列 | 00’s Adventure]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>大哉问</tag>
        <tag>Coding</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DL笔记：梯度下降 Gradient Descent]]></title>
    <url>%2F171222DLN6-GradientDescent.html</url>
    <content type="text"><![CDATA[阿扣：上一次我们了解了损失函数。为了找到使损失函数（比如用 SSE 计算）最小的 w (权重) 和 b (偏置项)，我们需要先了解一个重要的方法：梯度下降。 阿特：听起来像坐滑滑梯~ 阿扣：是有那么点意思。 阿扣：想象一下，我们对网络中的一些权重做了很小的改变，这些变化会让输出也有相应很小的变化： via Neural networks and deep learning - chapter 1 然后拿这些微小的变化，跟目标值对比，看看误差是变大还是变小了，然后不断调整权重值，最终找到最合适的 w 和 b。 阿特：那要怎么找到这些值呢？ 阿扣：下面有请「梯度下降」 Gradient Descent。 阿特：终于能坐滑滑梯了…… 阿扣：坐这个滑滑梯可能有点晕 😄 。我先给你打个比方。想象一下，你在一个山峰的山顶，想用最快的速度到达山脚。 阿特：坐缆车可以吗？ 阿扣：缆车，不存在的……只能靠走的。要往哪边下山呢？我们会选一个看起来「下降」最快的路径： 朝这个方向走一段后，我们再看下一步往哪个方向走，「下降」最快。 一直重复这个过程，就能最快的速度下到山脚。 阿特：是这么个道理。 阿扣：这个方法，就是「梯度下降」，在机器学习中很常见。所谓「梯度」，其实是指「变化率」或者「坡度 slope」，就是多变量函数的导数。 阿特：导数？！你说的是微积分里面那个导数吗？ …… 瑟瑟发抖.gif 阿扣：别紧张，先听我讲，回忆回忆。 阿特：好吧。 阿扣：你还记得怎么表示函数 f(x) 的导数吧？很简单，就是 f’(x) 。 阿特：嗯嗯，记得。 阿扣：所谓「梯度」，其实就是函数在某一点上的变化率，根据微分的知识，变化率可以通过这一点的切线求得，而切线其实就是函数的导数：f’(x)。 来，跟我念一遍：求梯度 = 求变化率 = 求导数 阿特：求梯度 = 求变化率 = 求导数 （假装自己听懂了） 阿扣：了解了「梯度」，然后我们来看看「下降」又是怎么回事。 切线代表函数在某个点的变化率。在上面这个图中，x = 2 位置上的切线，斜率是 &gt; 1 的。说明如果继续往 x = 2 的右边滑去，在曲线上的值就会变大。比如当 x = 3 时，y = 9。 但是我们想要到曲线最低的地方去，因为那里可以让误差（也就是 cost ）最小。所以，应该沿着梯度「相反」的方向滑动，也就朝着是 x = 2 的左边滑去。这就是「下降」的含义。 阿特：沿着「上山」最快的反方向走，就能最快「下山」。啊原来这么直白…… 阿扣：对呀，原理并不复杂的。 这个视频讲解了线性回归和梯度下降的关系，来看看吧！ Linear Regression Answer - YouTube 阿特：这个视频不错，讲得挺清楚的~ 阿扣：我们来复习一下。用一个函数 f(h) 表示 x 和 y 的关系。x 和 y 其实是已知的，它们来自真实的数据集。我们的目标是求出 w 和 b，使得计算出来的 $\hat y$ 最接近实际的 y 值。为了得到某种类型的 y 值（比如只有 0 和 1 两种输出），我们会使用类似 Sigmoid 这样的激活函数，对 f(h) 做一下转换。 阿特：哦，我说怎么有点难理解呢。因为以前碰到 x 和 y，它们都是未知数，现在它们变成了已知数，真正的目标其实是求 w 和 b！ 阿扣：没错！这是深度学习算法中一个需要调整的认知。 怎么得到 w 和 b 呢？用损失函数。如果损失函数的值大，说明模型预测得不准。我们要找到让损失函数的值最小的 w 和 b。更具体说，我们要找到 w 的变化幅度 $\Delta w$，每次调整一小步，看看误差 E 是不是变小了。 为了求出 $\Delta w$，我们引入「误差项」$\delta$ ，它表示 误差 * 激活函数的导数。然后用「误差项」$\delta$ 乘上学习率 $\eta$ （用来调整梯度的大小），再乘上 x，就是每次应该调整的权重值 $\Delta w_{ij}$ 阿扣：比如说，如果激活函数是 Sigmoid 函数。 $$ f(h)=\frac {1}{1 + e^{−h}} $$ $$ f’(h)=f(h)(1−f(h))$$ $$ \Delta w_{ij}=\eta(y_j-\hat y_j)f(h)(1−f(h))x_i $$ …… 咦？人呢？ 喂！别跑，还有好几个知识点没讲呢！…… 补充：求多个变量的偏导数如果只有一个未知数，求梯度只需要计算导数。如果有多个变量，求梯度就需要计算偏导数。偏导数其实并不复杂，只需要掌握链式求导法则，就能进行大部分的计算。 $$ \frac{\partial}{\partial w} p(q(w)) = \frac{\partial p}{\partial q}\frac{\partial q}{\partial w} $$ 比如，损失函数 C $$ C = \sum(wx + b - y)^2 = \sum((wx + b)^2 + y^2 - 2y(wx + b)) = \sum(x^2w^2 + b^2 + 2xwb + y^2 - 2xyw - 2yb) $$ 对 w 求偏导 $$ \frac{\partial C}{\partial w} = \frac{1}{N} \sum(wx + b - y)x $$ 对 b 求偏导 $$ \frac{\partial C}{\partial b} = \frac{1}{N} \sum(wx + b - y) $$ Ref Deep Learning Nanodegree | Udacity Neural Networks and Deep Learning | Coursera Gradient Descent with Squared Errors Gradient (video) | Khan Academy An overview of gradient descent optimization algorithms 00 的 DeepLearning 笔记 DL笔记：机器学习和深度学习的区别 DL笔记：Neural Networks 神经网络 DL笔记：Linear regression 线性回归 DL笔记：Activation Function 激活函数 DL笔记：Cost Function 损失函数]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>ArtxCode</tag>
        <tag>DeepLearning</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DL笔记：Cost function 损失函数]]></title>
    <url>%2F171220DLN5-CostFunction.html</url>
    <content type="text"><![CDATA[阿扣：阿特，还记得训练神经网络的目标其实是什么吗？ 阿特：我记得好像是要找出最合适的权重(weights)，使得输出结果尽可能接近真实值。 阿扣：Hin 棒！你说的没错。说回到训练神经网络，我们需要在训练中及时了解训练效果如何，是不是朝着训练目标在一点点靠近。如果偏离目标，就说明训练模型可能在「犯错」，就要纠正过来。 阿特：那怎么知道模型是不是在「犯错」呢？ 阿扣：我们会找一个度量标准。一个常见的度量方法是计算误差的平方和（SSE, sum of the squared errors）： $$ E=\frac{1}{2}\sum_\mu\sum_j[y^\mu_j - f(\sumi w{ij}x^\mu_i)]^2 $$ 阿特：你……欺负人 &gt;.&lt; 阿扣：别着急，我们来拆解这一坨是个什么东西。先看看各个字母的含义： 这个等式里面，有三个求和项（就是这个翻转了 90° 的 M： $\sum$ ）。 最右边的求和项 $\sumi w{ij}x^\mu_i$ ，表示我们训练出来的权重 w 乘上输入值 x 得出的目标值 $\hat y$（也就是我们给数据打算的标签），然后用这些结果跟实际的数据中的 y 值做比较，看看偏差有多大。 现在你理解了最右边的求和项了吗？ 阿特：大概意思是我们从数据中预测出来的 y ？ 阿扣：没错，我们先把这一坨替换成 $\hat y$，简化一下公式： $$E=\frac{1}{2}\sum_\mu\sum_j[y^\mu_j - f(\sumi w{ij}x^\mui)]^2\\downarrow\E=\frac{1}{2}\sum\mu\sum_j[y^\mu_j - \hat y_j]^2$$ 阿特：世界清静多了~ 阿扣：我们再来看右边这个求和项。j 表示有 j 个隐层节点，把每个节点的误差平方 $[y^\mu_j - \hat y_j]$ 计算出来。现在只剩下最后一个求和项了，它表示把 u 个输出节点的误差加起来。这样就得到了总体误差。 00 的 DeepLearning 笔记 DL笔记：机器学习和深度学习的区别 DL笔记：Neural Networks 神经网络 DL笔记：Linear regression 线性回归 DL笔记：Activation Function 激活函数]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>ArtxCode</tag>
        <tag>DeepLearning</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DL笔记：Activation Function 激活函数]]></title>
    <url>%2F171218DLN4-ActivationFunction.html</url>
    <content type="text"><![CDATA[回顾: DL笔记：机器学习和深度学习的区别 DL笔记：Neural Networks 神经网络 DL笔记：Linear regression 线性回归 阿扣：阿特，今天我们来了解一下深度学习中的激活函数(Activation functions)。 阿特：又是函数……为什么要了解这个哦…… 阿扣：在机器学习中，我们经常需要对输出结果打上「是」或「否」标签。比如对一张输入的图片，模型要判断图片里面有没有包含汪星人。 上一回我们提到的逻辑回归，可以用来减少预测值和真实值之间的误差。 阿特：那要怎么做呢？ 阿扣：我们来用符号描述一下问题： x：训练数据中的 input y：训练数据中已经做好标记的 output w：逻辑回归的 weights b：逻辑回归的 bias 模型的输出：$\hat y = \sigma (wx + b)$ 阿特：老朋友 wx + b 阿扣：好眼力。它就是一个线性模型。别忘了，我们想让输出只包含两个值：是，否。一般我们会用 1 表示「是」，用 0 表示「否」。 阿特：就是我给模型图片 A，它说「0」；给图片 B，它说「1」；……这样？ 阿扣：没错~ 所以我们把结果的输出全部转换成或 0 或 1 的值。激活函数就是用来帮助我们实现这种转化的。 上面我们用到的激活函数叫做 Sigmoid 函数。它帮我们做到了： 如果输入值 z 是一个大的正数，函数的输出值为 1； 如果输入值 z 是一个大的负数，函数的输出值为 0； 如果输入值 z = 0，那么输出值是 0.5 阿特：也就是说，不论我给什么样的整数，最后都会返回 0 或 1 的结果？ 阿扣：没错！这样我们得到分类的结果，或 0 或 1。在深度学习中，这种把输出转化为我们想要的形式的函数，我们叫它「激活函数」： 激活函数的主要作用是提供网络的非线性建模能力。如果没有激活函数，即便有再多的隐藏层，其整个网络跟单层神经网络也是等价的。加入激活函数之后，深度神经网络才具备了分层的非线性映射学习能力。 上图就是其中的一种激活函数：sigmoid 函数。 阿特：这么说，激活函数不止一种？ 阿扣：对呀。下面我列了一些常用的激活函数，作为今天的补充资料吧。现在可能还看不到，先混个脸熟就好。 阿特：好的先刷脸。 Sigmoid$$ sigmoid(z)= \frac{1}{(1+e​^{−z})} $$ Sigmoid 函数取值范围为(0,1)，将一个实数映射到(0,1)的区间，可以用来做二分类。 Sigmoid 在特征相差比较复杂或是相差不是特别大时效果比较好。Sigmoid 的导数最大值为0.25。这意味着用来进行反向传播时，返回网络的 error 将会在每一层收缩至少75％（梯度消失问题）。对于接近输入层的层，如果有很多层， weights 更新会很小。 Tanh$$tanh(z)=\frac{e^z-e^{-z}}{e^z+e^{-z}} $$ 也称为双切正切函数，取值范围为[-1,1]。tanh 在特征相差明显时的效果会很好，在循环过程中会不断扩大特征效果。 ReLU$$ReLU(z) = max(z,0)$$ ReLU (rectified linear units) 是现在较常用的激活函数。如果输入 &lt; 0，ReLU 输出 0；如果输入 &gt;0，输出等于输入值。 ReLU 计算量小（不涉及除法），一部分神经元的输出为 0 造成了网络的稀疏性，并且减少了参数的相互依存关系，缓解了过拟合问题的发生。 ReLU 的缺点是，梯度较大时，ReLU 单元可能大都是 0，产生大量无效的计算（特征屏蔽太多，导致模型无法学习到有效特征）。 Softmax$$ softmax(z) = \frac{e^z{j}}{\sum^K{k=1}e^z{_k}}$$ Softmax 函数将 K 维的实数向量压缩（映射）成另一个 K 维的实数向量，其中向量中的每个元素取值都介于(0，1)之间。常用于多分类问题。Softmax 把分数转换为概率分布，让正确的分类的概率接近 1，其他结果接近 0。相比 Sigmoid，它做了归一化处理。 Ref Deep Learning Nanodegree | Udacity Neural Networks and Deep Learning | Coursera Neural networks and deep learning Andrej Karpathy’s CS231n course 深度学习笔记(三)：激活函数和损失函数 - CSDN博客]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>ArtxCode</tag>
        <tag>DeepLearning</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大哉问03 - 什么是赚钱之道？更新你的个人商业模式]]></title>
    <url>%2F171216HowToMakeMoney.html</url>
    <content type="text"><![CDATA[大哉问系列讨论完时间和爱，是时候来想想这个重大课题了。 这篇文章不是经验之谈，而是迟来的反省，也是下一步的行动大纲。 财富迷思为什么要积累财富？为了避免话题泛化，这里的「财富」，主要指物质财富、个人的资产。 有钱当然好。可是到底为什么好？这个问题我们真的有想过吗？到底是什么让我们有持续的动力去追求财富？这是破除迷思的第一个问题。因为赚钱的前提不是方法，而是欲望。 财富可能至少有三方面重要作用： 提高生活质量：让自己和家人更自如地生活 缩短成长周期：换取时间，用于自我成长 获得更多可能性和选择权：贫穷真的真的会限制想象力 钱越多越好，这毋庸置疑。但是赚钱的目标应该定在哪里合适呢？毕竟人生有限，只花在挣钱上也太枯燥了。大多数人的财务目标大概都会是：实现财务自由。 什么是财务自由？财务自由有客观标准吗？500w？1000w？众说纷纭啊…… 财务自由应该由具体的数值定义吗？我觉得很难。需要找一个定性但可操作的定义。 这个问题已经有非常多人思考和讨论过了，我比较认同这个目标： 不需要被动出售自己的时间。 换个说法，大概意思是时间都只花在完全由自己选择的事情上面。 赚钱的瓶颈？大部分人（包括我自己）是如何挣钱呢？——批量出售自己的时间（一般是以月为单位）给雇主，然后换取基本固定的薪水——无论干得怎样，薪水的浮动都不大。 这下子赚钱的天花板就出现了，因为每个人的时间都极其有限。 怎么突破瓶颈呢？一个方法是做薪酬更高的工作。于是我们去增强职场技能、提高工作效率、跳槽到更好的岗位等等，都是在想办法提升单位时间的报酬。 不过这样也容易掉入时空限制中的「空间」陷阱——「空间」局限意味着影响范围是有限的。一个人的劳动实际上只卖给了一个「空间」：就是这个公司、这个老板。无法 scalable，自然就会遇到瓶颈。（管理很多人是一种 scalable 的办法） 思考财富的单位？想最大限度地保留自己的时间自主权和使用权，该怎么办？ 可以考虑用空间换时间，而不是用时间换金钱。 怎样用空间换时间呢？——把每单位时间的产出，卖给更多人。 这里有两个变量：单位时间的产出，和更多人。 增加单位时间的产出，可以让 1 小时可以写更多好文章、生产更好的产品、打造更完善的系统；也可以尽可能延长产出的寿命，畅销多年而不需要大规模维护。 同时出售给更多愿意购买的人 这样，我们思考获得财富的单位，应该是有价值的结果，而不再是「月薪」，不再是一去不复返的时间。 赚钱的三大途径赚钱的方法何止千千万，但是从本质上讲，大概有三类：生产，服务和交易。 比如，制造可售卖的商品属于生产，搭建一个付费 APP 是生产；提供专属的理财咨询属于服务；炒币和投资房产属于交易。 那么上班属于哪一类？其实属于服务，因为肉身必需出现，而且离实际购买的消费者比较远，工作报酬受契约约束，而不是实际产出的市场价值本身的体现。 再深入一步，让我们想想这三大途径的特点： 方式 投入 产出 买单 瓶颈 生产 原料，生产设备/技术/流程，销售 产品 顾客 生产率，获客成本 交易 资金/成本，决策信息，时间差 价格差 需方 时机，关键信息，资本 服务 时间，技能 交付物 雇主 时间，技能，消费频次 我们的目标是提高赚钱能力，一个思路是从单一途径到覆盖三种途径，另外一个思路是想办法突破每个方式的瓶颈。 一、优化生产什么是生产？有完整、有价值、可购买的产出。 我们大多数人有可能从来没有从事过正经的「生产」工作，因为我们可能没有想过，或者无法独立提供完整的产出。是的，从来！……细思极恐啊！ 但其实绝大多数人都有个人生产的能力。 比如，门槛较低的内容生产——以文字、语言、视频等方式产出内容。内容生产的「原料」是什么？是经验，是思考，是感受，是对他人有帮助的对话。生产设备/技术/流程包括什么？构思，收集，整理，编写，修改，设计，发表，互动……瓶颈是什么？没有擅长/有积累的可持续创作的话题，拖延，没有读者…… 这些问题很难解决吗？似乎不是，都有很多办法，而且身边容易找到有经验的人。最大的瓶颈大概是一没有开始，二没有持续，三没有改进。 尽早尝试适合自己的个人生产方式吧，早积累，早收获。 升级1：产品化产出可以分为两种：需要值守的，无需值守的。 如果每次生产都需要自己在一旁守着，时间还是被占用了啊。所以生产的第一个升级目标是：产品化。产品化意味着有明确的人群和需求定义，让生产流程和产出都遵循一定标准，以保证产出的稳定，成为可出售的「产品」。比如把零散的知识和文章整理成一门课程，录制一次，后期就不需要投入太多精力维护。 想办法让生产过程自动化，构建属于自己的生产系统，这大概就是个人商业模式的核心。 升级2：关注生产效率生产的第一大指标（或者说瓶颈）就是生产效率。认真思考影响生产效率都有哪些因素。有没有可能通过购买的方式提高生产率？另外要注意，所谓效率，一定与时间周期有关，是否给自己设定了合理、可产生回报的生产周期? 升级3：选择人群和经营渠道谁会购买你的产品？他们在哪里聚集？你在那里是否有影响力？如何获取信任？如何与他们互动？ 升级4：企业化一个人再怎么提高效率也是有限的。下一步升级就要靠更多人参与了。以公司经营的方式维持产品的生产、运营和增长，将个人商业模式往公司商业模式迁移。所谓企业家，就是找到资源的更优组织方式，为大家的利益解决问题的人。 二、优化交易成功的交易，大概是提前锚定价格差，寻找价值洼地并持有，并在合适时间出售。 从今天开始，经常问自己一个问题： 什么会在未来很值钱？ 投资那些未来很可能增值的资产，可能是公司股票，可能是房产，可能是古董，可能是火星矿产，也可能是——人，尤其是，自己。 好的交易，关乎资本大小，但更重要的是决策信息，而最最关键的是，时机。 好的决策来自思考质量和经验。建立起自己的思考模型，积累特定领域的知识和投资经验，这些都需要时间投入。选择合适的交易时机，更是需要了解人性的弱点和各种认知偏差，因为投资本来是件由概率这只大手所操控的事件，而概率实在太反直觉了。 想要获得更高收益，原理其实并不复杂： $收益 = 本金 * (1+复合年化收益率)^{年数}$ 所以，要学好概率，练好头脑，控制风险，培养耐心。 好吧，如何开始，交易的本金从哪里来？没有太多选择的话，只能从生产来。而且最好保证有持续的生产收益，作为交易的本金，而不是只依靠交易作为唯一的赚钱途径——因为那样太容易影响交易的心态和判断。 三、优化服务服务其实是最特殊的挣钱方式，必需通过本人和服务过程去完成。因为在三种途径里面，这是最消耗时间的，所以更加应该找到优化的方式。 提高服务的收益的一个可能是，组织一个服务平台，聚集服务供需双方，把服务转化成生产。不过这又属于生产的话题了。 既然时间无法复制，那就只能打提高单位时间的服务收益的主意了。影响收益的，似乎最终可以归结为一个因素：稀缺性。 而稀缺性又由两方面影响： 需求有多迫切，是不是高频、刚需。这就需要研究雇主/买主的需求了。比如招聘的公司处在什么阶段？最需要什么样的人才？ 独特的核心竞争力组合。找单一领域的专家总是相对容易的，找到复合型大咖难度就高很多，同时横跨多个高速发展的领域，只能是炙手可热了。 所以，尽早投资在需求会持续增长的服务领域，并且培养自己的独特竞争力、跨界能力，其他就交给时间吧！ 财富积累的放大器善用一些已经被反复验证过的原则，能够帮助我们放大为获取财富所付出的努力。 铁律：生产率 &gt; 收入 &gt; 负债尽可能让个人生产率提升的速度，超过收入增长，远远超过负债的增加。 这几乎就是个人积累财富的全部秘密了。这个不等式出自下面这个视频： 三十分钟说清经济机器是怎样运行的 出自 Ray Dalio 大佬的视频把经济的底层规律总结得深入浅出。也许很多大学四年的经济学教育，还没有这十分钟的视频内容深刻且有效。墙裂推荐，值得每半年复习一次。 善用过去的积累不要觉得自己是从零开始。 如果你在职场有几年经验，不要忽视得到过的职业锻炼：自律，沟通和表达能力，学习能力，合作能力，自我/上下/平级的管理能力，等等。把它们通通用在生产和交易上，并且持续打磨这些技能。能服务好别人的人，更懂得如何生产出好的产品。一直练习交易的人，更容易发现应该在哪些领域持续打造自己的核心竞争力。 去发现那些在某些领域遍地都是、但是在另一个领域稀缺的东西，从中套利。 尊重时间的复利经常回顾指数增长的曲线吧，那是我们的目标曲线——无论是财富增长也好，个人成长也好。 via Top 3 Steps for Becoming an Exponential Organization | DARE2 不要忽视、低估积累期、平台期的长度和难度，但要想办法加快增长速度，尽快到达「奇点」。 用财富换幸福在积累财富的跑道上，不要忘记我们的目标和初心。赚钱可能没有你想象那么难，它可能没有你想象那么重要。（前提是你已经得到了它） 实现财务自由是为了什么？获得自由的时间要用来做什么？这才是真正重要的问题。 努力赚钱之余，千万不要忘了发现和保护内在动机，去坚持做那些（现在）不但不能帮你赚钱，还需要你补贴钱或时间去做的事情，因为那些才是你的心头所好啊！我们这么努力，还不是为了能跟那些事情长相厮守在一起？ 最终的最终，我们换取的可能都是用于创造心流的环境。如果现在就有这样的条件，保留一部分时间去体验创作的心流，还有什么理由不开始呢？ 最后总结下来，道理其实都十分简单明了，不过 7 个要点： 财务自由指不需要被动出售自己的时间，这是赚钱的阶段性目标 思考财富的单位应该是有价值的结果，而不是时间周期 生产、交易、服务是挣钱的三大途径 生产优化：让生产过程自动化，构建属于自己的生产系统 交易优化：形成有预见性的预判，寻找价值洼地并持有，并在合适时间出售 服务优化：满足高频、刚需的需求，不断积累出独特的核心竞争力组合 利用四大财富放大器：财富不等式，过去的积累，时间的复利，财富换幸福 以及需要经常复习： 一个问题：什么会在未来很值钱？ 一个图表：指数增长 一个视频：经济是如何运行的 好了，我想到的是这些了。 最后，对自己说：想明白了就去践行吧。]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>CriticalThinking</tag>
        <tag>大哉问</tag>
        <tag>Love</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DL笔记：Linear regression 线性回归]]></title>
    <url>%2F171213DLN3-LinearRegression.html</url>
    <content type="text"><![CDATA[阿扣：今天带你了解一下线性回归。 阿特：🙄 听起来就不是什么容易懂的东西……为什么要了解线……什么，线性回归呢？ 阿扣：什么机器学习啊深度学习啊，最终目的之一不就是根据已有数据做出预测，回归和分类都是「做预测」的主要手段。在下面这张图中找找看，线性回归在机器学习中的位置： 阿特：如果说目的都是做「预测」，回归分析和分类有什么不同呢? 阿扣：回归得到预测的具体数值，比如股市的行情、未来的气温值。而分类得到一个「声明」，或者说对数据打上的标签。 阿特：那什么是线性回归呢？ 阿扣：线性回归是最基础的回归类型，它的定义是这样： 在统计学中，线性回归（Linear regression）是利用线性回归方程的最小平方函数，对一个或多个自变量和因变量之间关系建模的一种回归分析。这种函数是一个或多个回归系数的模型参数的线性组合。 阿特：好吧，看不懂……不过我主要不明白的是「回归」的意思，要回哪里哦…… 阿扣：初中时学的解方程还记得吧？方程左边有 X，求方程右边的 Y： ax + b =y 。 阿特：这个还是记得的。 阿扣：回归分析假设 X 和 Y 之间是有奸情哦不对是有关系的，用于了解只有一个自变量 X 时，因变量 Y 的变化。 鬼话版：回归分析用来估计模型的参数，以便最好地拟合数据 人话版：「回归」的目的呢，就是找出一个最能够代表所有观测数据的函数，来表示 X 和 Y 的关系。这个函数只有一个变量，所以是类似这样的一条直线： 阿特：好像我记得那种方程在坐标轴上就是用一条直线来表示。不过怎么基于这条直线做预测呢？ 阿扣：其实不是基于这条线，而是 「找出」这条最符合 X 和 Y 的关系的线 (line of best fit)，认定这就是它们之间的「关系」，然后去做预测。 我们先来用符号把这个 X 和 Y 的关系表达式写出来。A 表示我们手上有的数据集，比如你每天的能量摄入和体重值，哈哈哈，然后可以用它来预测你什么时候会变成个胖纸~ 阿特：紧脏…… 阿扣：来看看这张图，我告诉你每个字母代表什么： X 是每天的能量摄入，y 是体重。我们想预测你的未来体重 $\hat y$ (给字母加个帽子一般表示它的预测值)，于是用 能量输入 乘以一个权重(weight) W，加上一个偏置项(bias) b，就是计算体重的函数了。 $$WX + b = y$$ 阿特：好像蛮简单的。 阿扣：是啊。这个式子以后我们还会无数次看到，是老朋友来的。 关于回归分析，再多说两句。 阿特：我有预感不止 20 句…… 阿扣：它有三个主要用途： 因果分析：确定自变量对因变量的影响的强度。比如计算剂量和效应，销售和营销支出，年龄和收入之间的关系。 预测影响：预测影响或变化的影响，即因变量随着一个或多个自变量的变化而变化多少。典型的问题是，「增加一个单位 X， Y 能增加多少？」 趋势预测：预测趋势和未来价值。比如，「从现在起6个月，黄金的价格是多少？」，「任务 X 的总体成本是多少？」 阿特：好像很强大，那它有什么缺点呢？ 阿扣：有两个主要的缺点： 只适用于本身是线性关系的数据 对 outliner 敏感 比如上图右上角的几个点，偏离平局值比较多，我们叫 outliner。出现这种情况，我们可以试试其他的回归分析类型，或者放弃回归分析，用其他的算法了。 Name 名称 因变量个数 自变量个数 Simple linear regression 简单线性回归 1 1 Multiple linear regression 多元线性回归 1 2+ Logistic regression 逻辑回归 1 2+ Ordinal regression 序数回归 1 1+ Multinominal regression 多项式回归 1 1+ Discriminant analysis 判别分析 1 1+ 如果需要预测的结果依赖于多个变量，可以用多元线性回归，比如： $$y = m_1x_1 + m_2x_2 + b$$ 我们用一个三维平面来表示这个二元线性回归： 阿特：那么多回归类型，不会都要掌握吧？ 阿扣：嗯，我们接触比较多的是逻辑回归(Logistic regression)。下回给你讲讲逻辑回归要用到的激活函数吧。 阿特：🐵 Ref 迴歸分析 - Wikiwand 線性回歸 - Wikiwand What is Linear Regression? - Statistics Solutions]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>ArtxCode</tag>
        <tag>DeepLearning</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DL笔记：Neural Networks 神经网络]]></title>
    <url>%2F171209DLN2-NeuralNetworks.html</url>
    <content type="text"><![CDATA[回顾 - DL笔记：机器学习和深度学习的区别 阿特：听说深度学习的思想受到神经网络的启发，那是什么玩意儿？ 阿扣：神经网络包括生物神经网络和人工神经网络。在生物神经网络中，每个神经元与其他神经元相连。它接收其他神经元的输入，当电位超过了某个阈值（threshold）而被「激活」时，会向相连的神经元「发射」（fire）信号。 阿特：那跟机器学习有关系吗？机器没有生命啊…… Perceptrons 感知机阿扣：参考生物神经网络，在计算机科学中，我们将独立的计算单元看做神经元。感知机 (Perceptron) 是神经网络的基本单位。每一个感知机都完成类似「给我一个数字，我告诉你它是正还是负」这样的简单任务。 比如说，我们把神经元看做包含一个 0 到 1 之间数字的小球： 神经元里面的数字叫激活函数 (Activation)。当数字超过某个阈值，比如说 0.5 时，我们就说这个神经元被激活了，它会输出 1 作为信号。如果神经元包含的数字小于 0.5，那它就输出 0，表示没有被激活。 这个神经元就是一个感知机。 一个感知机接收若干二进制输入 $x_1,x_2,…$，然后产生一个二进制输出： 阿特：这小球长得倒是有那么一丢丢像神经元…… 阿扣：在这个最简单的系统里，包含： 输入：这个神经元接收到的其他神经元的信号 判断器：激活函数 输出：1 表示 yes「发射」，0 表示 no「不发射」 阿特：艾玛，这也叫简单？ 阿扣：它其实是这个意思： 阿特：好吧我错了……让我晕一晕 阿扣：其实主要看蓝色的字就好。神经元怎么计算输出呢？我们引入「权重」(weights)，它表示从输入到输出的重要程度。权重的和 $\sum_j w_jx_j$ 如果大于阈值 $v_k$，就输出 1。 每一层神经元因为拥有上一层神经元的「经验」（上一层的输出），所以可以做出更抽象的「决策」。当我们把许多这样的神经元按一定的层次结构连接起来，就得到了人工神经网络（Artificial Neural Network）。 阿特：ANN，那我可以叫它 安？ 阿扣：你喜欢咯…… 其实所有的深度学习的神经网络，都可以抽象成三个部分： 除了输入和输出层，中间的层都叫隐层。深度神经网络就是隐层数量很多的神经网络，深度学习就是从多层神经网络中，自动学习出各种 pattern。 阿特：666！能不能 input 废纸 output 比特币呀？ 阿扣：……吃药时间到了 利用深度神经网络进行学习阿扣：总结一下，对神经网络来说，输入层是数据集/变量，隐层是变量之间的关系（包含变量权重），形成高一级别的「模式」传递给下一个隐层，最后确定输出层的结果。 阿特：为什么我总是听说「训练」神经网络好让它「学习」呢？ 阿扣：训练神经网络的目标，其实就是计算和调整权重 weights，使得模型输出结果最接近真实的数据集。 阿特：好抽象哦…… 阿扣：举个例子，我们要预测房价的走势。假设知道房子大小可以预测房价，这个关系就可以用一个神经网络节点（node）来简单估计。 如果我们知道很多房子的信息怎么办呢？这时候就需要很多的节点，这些节点构成神经网络。房子的多种信息作为输入，房价的预测值作为输出，中间层（可以有多个）是用来计算出前面一层信息的权重，得出一定的模式，传导给下一层，直到最后得出预测值 y。 via: Neural Networks and Deep Learning | Coursera 阿特：好像有点明白了，让机器自己学习中间隐藏起来看不见的「规律」！ 阿扣：再举个例子，图像识别是深度学习最广泛的应用之一，我们给系统看一张图，它能告诉我们这张图里有没有汪星人： 阿特：哇，原来机器在背后做了这么多事情，我还以为机器都很聪明呢，原来它们只是比较勤奋哈哈哈 阿扣：你得到了它~ Ref Neural networks and deep learning Deep Learning Nanodegree | Udacity Neural Networks and Deep Learning | Coursera]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>ArtxCode</tag>
        <tag>DeepLearning</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DL笔记：机器学习和深度学习的区别]]></title>
    <url>%2F171206DLNote1-ML-DL-Basic.html</url>
    <content type="text"><![CDATA[via The Difference Between AI, Machine Learning, and Deep Learning? | NVIDIA Blog Nvidia 博客上的这张图很好表示了 AI, Machine Learning, Deep Learning 三者的关系。人工智能是一类非常广泛的问题，机器学习是其中一个重要领域和手段，深度学习则是机器学习的一个分支。在很多人工智能问题上，深度学习的方法突破了传统机器学习的瓶颈，因而影响力迅速扩大。 什么是机器学习？ 00 试着翻出一些机器学习相对权威的定义，看看它们有什么共同点： Definition Translation Source Key words The field of machine learning is concerned with the question of how to construct computer programs that automatically improve with experience. 机器学习聚焦于一个问题：如何构建随着经验而自动改进的计算机程序。 Tom Mitchell in Machine Learning 会自我改进的程序 Vast amounts of data are being generated in many fields, and the statisticians’s job is to make sense of it all: to extract important patterns and trends, and to understand “what the data says”. We call this learning from data. 从数据中提取重要的模式和规律/趋势 The Elements of Statistical Learning: Data Mining, Inference, and Prediction 模式提取 Pattern recognition has its origins in engineering, whereas machine learning grew out of computer science. However, these activities can be viewed as two facets of the same field… 模式识别和机器学习是一体两面 Bishop in Pattern Recognition and Machine Learning 模式识别 Machine Learning is the training of a model from data that generalizes a decision against a performance measure. 机器学习是通过用于决策的数据去训练模型，并达到某些运行标准 Jason Brownlee in What is Machine Learning: A Tour of Authoritative Definitions and a Handy One-Liner You Can Use 通过数据训练模型 简单来说，就是机器通过一系列「任务」从「经验」（数据）中学习，并且评估「效果」如何： 为什么叫做「学习」呢？一般编程语言的做法，是定义每一步指令，逐一执行并最终达到目标。而机器学习则相反，先定义好输出，然后程序自动「学习」出达到目标的「步骤」。 机器学习可以分为： 监督学习：给出定义好的标签，程序「学习」标签和数据之间的映射关系 非监督学习：没有标签的数据集 强化学习：达到目标会有正向反馈 机器学习擅长做什么？当然是替代重复的人工劳动，用机器自动从大量数据中识别模式——也就是「套路」啦。知道「套路」后，我们可以干嘛呢？ Classification 分类，如垃圾邮件识别(detection, ranking) Regression 回归，例如股市预测 Clustering 聚类，如 iPhoto 按人分组 Rule Extraction 规则提取，如数据挖掘 比如垃圾邮件识别的问题，做法是先从每一封邮件中抽取出对识别结果可能有影响的因素（称为特征 feature），比如发件地址、邮件标题、收件人数量等等。然后使用算法去训练数据中每个特征和预测结果的相关度，最终得到可以预测结果的特征。 算法再强大，如果无法从数据中「学习到」更好的特征表达，也是徒劳。同样的数据，使用不同的表达方法，可能会极大影响问题的难度。一旦解决了数据表达和特征提取问题，很多人工智能任务也就迎刃而解。 为什么需要深度学习？但是对机器学习来说，特征提取并不简单。特征工程往往需要人工投入大量时间去研究和调整，就好像原本应该机器解决的问题，却需要人一直在旁边搀扶。 深度学习便是解决特征提取问题的一个机器学习分支。它可以自动学习特征和任务之间的关联，还能从简单特征中提取复杂的特征。 Ref What is Machine Learning: A Tour of Authoritative Definitions and a Handy One-Liner You Can Use - Machine Learning Mastery 机器学习 (豆瓣) Tensorflow：实战Google深度学习框架 (豆瓣)]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>ArtxCode</tag>
        <tag>DeepLearning</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大哉问02 - 如何爱自己？拟一份爱的宣言]]></title>
    <url>%2F171204HowToLoveYourself.html</url>
    <content type="text"><![CDATA[这是一个困扰我已久的问题。 以前，朋友会跟我说「你不够爱自己」。除了愕然，好像多少有些认同，可是再进一步也不知道该做些什么。最近这大半年近距离接触了心理咨询，每次看到「爱己才能爱人」这个几乎是所有情感问题解药中的配方出现，也就时不时会想起这个问题。 可是，「爱自己」这简单的三个字，到底要怎么做？ 烦恼之源阿德勒说，所有的烦恼都来自于人际关系。我想，他说的人际关系，既包含与他人的关系，但首先是与自己的关系。在所有人际关系问题的表象之下，根源也许都是我们与自己的关系出现了紧张。 我们容易焦虑。且不说在焦虑的时候，「自己」在不在场，有没有提供应有的安慰。更棘手的是，这些焦虑的来源，往往就是我们自己。 所以我们感到痛苦，想要逃避，不断寻求一种来自外部的肯定，确认自己是有价值的、好的、受欢迎的、值得被爱的。在困顿无助的时候，因为自己给不出，所以时时想伸手向外寻求安抚。 我们甚至不知道自己要什么，不与自己耐心对话，而是下意识地、急不可耐地抓过一些能彰显某种身份的标识装扮在身上，尝试告诉自己和世界，我是一个怎样的人，你们应该怎样对待我。 阿德勒给出的解药是：人只有在觉得自己有价值的时候，才会有勇气。而价值不由「做了什么」来提供，那是有条件的价值。如果我们能以「存在」的视角来看待自己，认可存在本身就是价值，就能使自我的关系更加和谐。 跟别人的关系，再亲密也好，也有可能或主动或被动终结。但是自己跟自己相处一辈子，无法欺瞒，无法离弃。处理好跟自己的关系，真真是人生必修第一课。 如果用一种比喻形容你和自己的关系，会是什么？ 对「如何爱自己」这个问题，这会是一个好的开始。 从爱他人学着爱自己「爱自己，就给自己买 xxx」 这大概是时下最流行的广告语。如果爱自己只是愿意花钱，只是时时放过自己，那未免也太容易了，我怎么一直没学会呢？ 可能因为，爱是一种需要付出艰辛努力和持续练习才能获得的能力。 如果一个问题我没法理解，就会用「类比和迁移」的办法。比如，先去想想我是怎么喜爱某个兴趣的，怎么把这种喜爱转换到自己身上。 但是行不通。因为「爱」是一个关系和相处问题，不能缺少人这个因素，无法只靠逻辑去求解。 似乎只能选择与你关系最亲密的人作为对象，把经验迁移过来： 你如何去爱一个人？ 当你有要爱的人，就会变得勇敢和愿意付出。想想你会如何把最好的事物和感情交付给所爱的人？尤其当这个人需要你保护和付出时，比如你已经为人父母，选择小孩为对象来类比和迁移经验，就再适合不过了。 有时候问题就是这么吊诡——当我们不会爱别人，我们可能就不会爱自己；当我们不爱自己，就没法很好地爱别人。到底从哪一端开始？就从现在所处的位置开始吧，以一个新的角度看待与自己的关系。 爱是一种练习什么是爱？弗洛姆说：爱是一种能自觉地为被爱者的发展和幸福而付出一切努力的代称。 让我们暂时把这句话作为「爱自己」的总纲领吧。 可是只有纲领还不够，我们还要细细去追问，我们可以如何爱人，我们应该如何爱自己。以下的铺陈，不是已经掌握的能力，而是「爱他人和爱自己」的详细理解，是行动纲领，是愿景，是坚持不懈的练习目标。 忠于自己世间有千万种勇气，最不能丧失的一种，叫做「直面自己」。这是对爱情也不能让步的。 每个人都需要面对自己过去生命里的困顿、失落、挫折。有时候这些负担太沉重，不希望它们如影随形，所以我们选择打造一个面具，或者任由「超我」去规划和引导一条偏离原本轨迹的人生航线。越是掩埋过去，离真实的自己好像就越遥远。失去真实，力量就会耗费在与自己的斗争中，无暇照顾其他。 接受对方的一切，只要那是真实的。——这大概是爱他人和爱自己的第一原则 台湾作家陈雪有一段话说得好： 爱是即使在孤独中依然可以付出力量，爱是：我珍爱你的脆弱孤独，你的别扭，你的生硬，你的艰难，爱是正因为我知道我可以穿透那些硬壳看见最脆弱的你，那无意间暴露在我眼前的，使我想要细心爱怜。 使人相爱的最终是安全和信任，而不应该是幻想成分居多的期望。 因为爱你，所以信任你，希望你在我身边可以做自己，像草木一样自如。因为爱你，所以想要陪你去细细区分，哪些是内心真正认同的；哪些是过去的伤害所结的伤疤，不想去触碰；哪些习性反应是即使伤口早已愈合，却还是习得性回避的东西。 因为爱自己，所以给自己安全和信任，而不是持续地声明种种期望。时时留心公平地对待本我/自我/超我，不过分关注超我，因为那样反而滋长它。接受本我，不去对抗一些出厂设置。让自我积极探索，回答「我是谁」的问题。 来自底层、最为无条件的信任，只能自己供给。接受任何面貌的自己，不推诿，不辩解，不自我攻击。在主动成长之前，不要求，不期待，然后才会放胆去探索。放弃要求并不意味着放任自流，因为你相信自己会选择合适的道路，会对自己负责，会匹配得起生命本身应有的重量。 尊重因为爱你，所以视你为一个独立而完整的人。相信你有能力解决属于你的问题，探索出一条未知但属于你的道路。我作为一个旅伴，不去动那些想改变你的念头，即便觉得那些改变可能对你比较好——因为只有你能决定哪些是真正的好，哪些改变你愿意发生。你是自己的主导者，别人不能代替你成为自己，谁也不行。如果你愿意，如果你向我表达，我很乐意陪你一起探索。 因为爱自己，我视自己为一个独立而完整的人。别人不能代替我成为自己，谁也不行。 对自己负起全部的责任。 我对自己说。 理解开始喜欢一个人时，最直观的疯狂和努力大概就是「了解」。 了解对方的喜好，看什么书和电影，喜欢吃什么，去过的地方，值得骄傲的经历，以后的打算……日常再琐碎的细节，都会被仔仔细细、反反复复地探究。我们期望通过这些探究，建立起关于对方的庞大数据库，以便加快关于这人的一切信息的处理速度，识别出各自模式，生成与对方的相处模式——了解慢慢变成了理解。而人又是变化的，所以理解这个工程并没有停歇的一天。 因为爱你，想用一辈子的时间去理解你，成为关于「你」的专家。我想，当我真正理解你，这段关系的任何走向、任何形式和任何结果，我应该都能接受。因为我会明白你怎么一步一步走到这一天。理解最终带来的是自由吧。 但是理解很难。 我们常常用「想象」、「推测」代替理解。理解需要通过真实场景下真实发生的言语行为，以及隐藏在表象之下的弦外之音、模糊的线索去深入同理、思考、判断、修正。 因为爱自己，面对自己时选择慢下来，不逃避，有耐心。 人最擅长自欺欺人，所以真正的理解总是多少伴随着恐惧、失落、争执、误解、孤独。就是因为得来不易，所以这样的心意才显得可贵。比起一时的眉目传情、心意相通，尝试去理解的努力会让人更接近爱，那是一种练习，一种付出，一种耕耘。 在成为他人的专家之前，祝我们都成为自己的「专家」。 初心爱上一个人，总是有初心的，不论自己能不能说得清楚（大部分情况都说不清楚）。 那份初心，大概都会来自某种与众不同。 喜欢你，是因为你敢于坚持某些东西，敢于跟普世保持距离，敢于在某些大家可能忽视的方面做个异类。喜欢你，是因为你拥有独特的生命力，呈现出独特的生命状态。 因为爱你，所以珍视这些与众不同。希望你能继续保护好那些你不曾妥协、拼命守护的东西，那些在经历起伏后，会感慨好在自己守住了的美好而脆弱的东西。 因为爱自己，我也要慢慢找出自己一直在努力守护的东西。我们有那么多东西可以妥协，也不得不妥协，偏偏就是这些如此弱小的东西，我们花费了几乎所有要来保护。感谢自己守护住了一些纯粹和好奇，面对新的处境时不后退，努力学习和适应，才有了今天写这篇文章的自己。 因为爱自己，我会继续打磨三观，让初心跳动到每一个当下，让自己可以时时为它代言。 相处比爱更难的是理解，比理解更难的是相处。安心、长久的陪伴，前提是双方不会想逃离。如果一味严肃、苛责、不会表达、不愿交流，谁都会被吓跑的。 因为爱你，我愿意倾听，尽力去感受你的情绪和需要，理解发生了什么，你需要面对的是什么，给予温和但有力量的回应，然后才是一起分析和解决问题。不应该指责你做得不够好，因为已经看到了那么努力的尝试。你已经足够努力了，我也不会做得比你好，不过如果你愿意，我们可以一起再试试看。 因为爱自己，所以事事应该先安慰和鼓励自己——情绪平复以后，问题我会自己解决好的。我不是一个生性敏感而丰富的人，倾听/沟通/共情都需要大量练习。对别人对自己都是，要保持练习。 因为爱你，应该尽量在相处中让你时时都感到「放松」。首先放下自己的期盼和要求，相信你不是不重视我，只是需要空间先处理好自己的各种事物，先跟自己好好相处。 所以，跟自己的相处之道，大概也是尽量让自己「放松」。「放松」不是一种命令，甚至无法成为目标，因为它是一种悖论式的存在。真正的包容，也包容不包容；不要求放松，可能就能放松下来。一旦放松，有趣也就会发生。 过程天长地久还是曾经拥有？ 死亡这个事实一早就劝诫我们，生命的过程远远比结果重要。 爱可能始于一个激动人心的确认和开始，有可能终结于一个无法释怀的离别。但那些都不是爱的主体。爱的主体是两人的关系，建立在经年累月的相处和理解之上的关系，即使不在身边内心也会留有对方位置的关系。爱既不是最终的结果，也不是开篇的承诺。爱其实存在于关系建立和变化的全程。所以它一定不如预想的跌宕起伏，因为生活的大多数时光总是平淡的。但爱就是在一起，或身或心。 喜欢你，是因为你身上有达成某些结果的能力，而不是因为你口袋里装着这些结果。所以，有自我疗愈和成长的能力，比成熟更重要；有对美的理解和坚持，比颜值更重要；是否能鉴别有趣的问题并愿意费心思索，比聪明重要；看待财富的观念和赚钱能力，比有多少钱重要…… 既然爱是过程，何必计较结果。向死而生的人类，在生命流逝的过程中，暂时无视死亡的结果，转而积极地探索可能性，才创造出了种种奇迹。 因为爱你，所以我选择 being in the present，尽可能心无旁骛地陪伴，让有你的时光加倍值得回味。 因为爱自己，所以时时跟自己在一起，明白此刻正在经历什么，全身心地投入，未来不迎，当时不杂，既过不恋。 因为爱自己，所以明白并不是我不好，也不是世界充满险恶无情，而是还没有修炼到很快找到或切换到一个最适合的角度去看待当下。当熟练之后，更多的时间精力就能从警惕、自我保护、应激中节省出来，去好好欣赏路途的景致，结识同样寂寞但心怀好奇的旅伴，去感受这样的旅途带给我什么样独特的感受。 当我真正开始爱自己感谢今年出现在我生命里我喜爱的人。让我知道自己还有能力去爱，让我有动力成为更好的自己。 感谢今年出现在我生命里我避之不及的人。让我懂得珍惜自己身上那些弥足珍贵的东西。让我懂得人生有限，应该把最美好的自己，留给合适的人和事。 爱真的不是放肆，也不是克制，而是深思熟虑、身体力行的努力，可能称不出重量的努力。 爱不应允幸福，爱是原原本本回到自己身上。问问自己，在这个人/自己身边，能否有勇气清楚看待自己，不屈从，不顺应，不自欺，但也不畏惧改变。 最后，用卓别林给自己的诗来正式开启爱自己的旅途吧： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162当我真正开始爱自己，我才认识到，所有的痛苦和情感的折磨，都只是提醒我：活着，不要违背自己的本心。今天我明白了，这叫做「真实」。当我真正开始爱自己，我才懂得，把自己的愿望强加于人，是多么的无礼，就算我知道，时机并不成熟，那人也还没有做好准备，就算那个人就是我自己，今天我明白了，这叫做「尊重」。当我开始爱自己，我不再渴求不同的人生，我知道任何发生在我身边的事情，都是对我成长的邀请。如今，我称之为「成熟」。当我开始真正爱自己，我才明白，我其实一直都在正确的时间，正确的地方，发生的一切都恰如其分。由此我得以平静。今天我明白了，这叫做「自信」。当我开始真正爱自己，我不再牺牲自己的自由时间，不再去勾画什么宏伟的明天。今天我只做有趣和快乐的事，做自己热爱，让心欢喜的事，用我的方式，以我的韵律。今天我明白了，这叫做「单纯」。当我开始真正爱自己，我开始远离一切不健康的东西。不论是饮食和人物，还是事情和环境，我远离一切让我远离本真的东西。从前我把这叫做「追求健康的自私自利」，但今天我明白了，这是「自爱」。当我开始真正爱自己，我不再总想着要永远正确，不犯错误。我今天明白了，这叫做「谦逊」。我当开始真正爱自己，我不再继续沉溺于过去，也不再为明天而忧虑，现在我只活在一切正在发生的当下，今天，我活在此时此地，如此日复一日。这就叫「完美」。当我开始真正爱自己，我明白，我的思虑让我变得贫乏和病态，但当我唤起了心灵的力量，理智就变成了一个重要的伙伴，这种组合我称之为，「心的智慧」。我们无须再害怕自己和他人的分歧，矛盾和问题，因为即使星星有时也会碰在一起，形成新的世界，今天我明白，这就是「生命」。]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>CriticalThinking</tag>
        <tag>大哉问</tag>
        <tag>Love</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大哉问01 - 什么样的时间观值得拥有？]]></title>
    <url>%2F171126TimePerspective.html</url>
    <content type="text"><![CDATA[我们自己虚构了一些问题,然后又炮制了一些答案。 ——西蒙娜·德·波伏娃 HackYourself 大哉问系列第一篇，我们来讨论「时间」。 为什么要选择这么虚无的话题呢？我在想，人大概有三大限制：时间，空间，认知资源。从这三个角度重新思考我们这种脆弱又作死的物种，大概会挺有意思。 虽然一直身处于奔流的时间长河中，但是我们对时间的汹涌却（常常）浑然不觉。面对时间这种无人可以掌控的东西，不禁想问： 我们应该持有什么样的时间观？ 时间观是关于时间的观念，关于时间和自己的关系，如何理解时间，如果依据时间做出种种决策，如何对待时间…… 这里讨论的不是时间管理。毕竟，如果对时间本身都还没有自己的理解，凭什么说人家已经是「朋友」，又怎么去管理它呢？ 心理学家津巴多对「时间」做了三十多年的研究，他呼吁我们认真对待自己所持有的时间观念： 一个健康的时间观，能让你以人生的长度来决定如何做最优化的决策。一个平衡的时间观，是高度的积极的过去观，中等偏高的积极的未来观，以及温和的选择性地享乐但不冲动反应的现在观。换言之，拥有一个平衡的时间观，就是为自己的过去骄傲，有自信；对未来有高期望但并不好高骛远，对于当下的自己，适当地享受生活，但既不冲动也不是随叫随到的无计划性。 ——津巴多 给时间重新找一个比喻对我而言，时间是什么？ 除了从小被教育的「时间就是金钱」，除了日渐步入「Time famine」的深渊，我对时间最大的印象大概就是「无情」了，像器物一般的无情。 意义/行动标尺与无限的时间相比，人太弱小太可怜，不得不沿着单向、不可逆的时间轴往前奔走。如果不是因为生命的时间有限，谁会在意生存、变化、权力、美、爱、有没有后代？印刻在出厂设置中的生命长度，让（有自我意识的）生命体开始珍视自己，有了尽力让生命存在、焕发的意念，也就滋长了种种欲望。所有的欲望，都是「生命有限」这个事实的形容词。 因为生命短促，人才会孜孜不倦地追求目标和意义，好让这短暂的时间之旅的残存能够消散得慢一点。 看起来好像是时间定义了生命，其实，是生命所的持续时间让人有必要以人的尺度来定义时间：一万年对人来说不重要，一豪秒对人来说也不重要。 我们太习惯以人活着能够经常体验到的时间单位去观察万事万物，也太习惯以满足当下的需要为理由来消耗时间。这同时也提醒我们，只需要稍微转动一下时间标尺的角度，我们观察世界的框架可能就会大有不同： 如果有一辈子的时间来做某件事会怎样？ 如果某件事只会持续 1 秒，我对它的态度会有什么不同？ 如果我与某个人共有 +∞ 的时间（一直相处）会怎样？如果共有时间为 0 （没有交集）会怎样？ 可能性的培养皿时间可能是全能的神 最大/唯一武器。 因为无限，所以造物主根本不需要呕心沥血去「设计」生命的所有细节，而是将一切都交给时间，给定初始值，无限演化下去。不论过程中出现了什么，生命轮回也好，沧海桑田也罢，生机勃勃也好，万籁俱寂也罢，都没有所谓，都只是演化过程的一个片段。 没有秘诀。 上帝甚至不需要全知全能——只要交给无限的时间就好。只要时间足够长，可能性就不会穷尽。 我们常常说：「我没有时间了」、「时间不够」、「你有空吗？」…… 有趣的是，时间本身不包含任何东西。时间只是度量单位，只是「容器」。我们问「你有时间吗？」，是不是好像在问：「你有厘米吗？」、「你有分贝吗？」。里面什么都没有。 真正的内容，是时间单位内我们投入的注意力、能量、情感、行动等等。我们不拥有时间，我们只拥有注意力、能量、情感……时间只是培养皿，想要培养出有机体，需要加培养液，不是吗？ 有意义的时间观 什么样的时间观能带来更大收益？ 这是一个倾向性很明显的问题。我们似乎得先考虑： 什么是「收益」？它一定是「结果」吗？（结果可能只是资源，不是目标本身） 要在多大时间尺度/周期内考虑？ 时间被如此定义，是因为生命体的有限。那生命又是个什么东西？ 生命似乎是物质的有序和有规律的行为，它不是完全基于从有序走向无序的倾向，而是部分基于得到保持的现存秩序。……生命有机体如何避免衰退为惰性「平衡」状态呢？通过新陈代谢。……新陈代谢的本质是使有机体成功消除了它活着时不得不产生的所有熵。 —— 薛定谔，「生命是什么」 生命体的伟大之处，在于（一定时间内）抵御了混沌无序的倾向，制造出（或者说吸收了）「负熵」。 如果回归到这一层含义，对人有意义的「收益」，是不是也可以理解为「有意义的秩序」？ 暂时抛开时间周期的问题，来想想那些时间感消散的时刻。比如说，专注地处于心流状态的时候，在类似做梦这种意识混沌的时候，我们感受不到时间的流逝。身处这些时刻，是不是反而能更真实、直接地触摸到生命本身？ 回到上面的问题：怎样才算最理想的时间收益？对我而言大概是： 在有意识的所有时刻里，都生机勃勃：投入、沉浸、痛并快乐、见过去所未见，体验一个生命可能抵达的深度。更重要的是——最终塑造出自己，并且留下能延续一段时间、传递某种深度的载体。 那么，可以如何去调控时间以及对时间的感觉？如何放大时间的价值？ 似乎有两种办法：融于当下，或者穿越时间。 融于当下，是指让时间感消失——沉浸到时间里面，让更多的时间处于聚焦/有序而不是耗散状态。也就是说，吃饭时就心无旁骛，与伴侣共处时就交心会意，思考时就清理杂乱的欲望，悲伤时就不要阻止眼泪……努力让真正重要的事情的「过程价值」大于「结果价值」。毕竟，我们全身心经历的是每一分每一秒，应该更多地为全程的福祉考虑，而不只是获得结果的那一刹那的高峰体验。 穿越时间，是指留下能够抵御时间侵袭的「晶体」，可以是文字、记录、作品、人生信条等等，它是你拼尽全力，从混沌无序中凝练出来的「恰好」和「最好」，它们是（哪怕只有一丢丢）有意义的秩序，可以穿越（哪怕只有一丢丢）时间长河而不被冲刷得面目全非。 修炼生命力于是，时间似乎是焕发生命力的养料和工具套件。 让我们把时间当做意义过滤器。哪些事情哪怕只有 1 秒，我们也会珍惜？哪些信息，出现在时间的源头？哪些内容，能真正穿越时间的洗礼？什么目标，值得用大时间周期去追逐？ 让我们把时间当做培养皿。在时间这个容器中，我们到底需要倾注些什么？希望锻造出什么？投入产出是否匹配？怎样把其他资源转化为时间资源？如果花的每一分钱，都值时间价值；如果花的每一分钟，都超出经济价值，那大概就是世界上最好的投资。 让我们把时间当做生命过程本身。在时间流逝中，尽可能去抵御熵增，提炼有意义的秩序，印证我们的存在和延续——不只是基因和生命体的延续，还是探索精神、思考深度的延续，是对自然和美的敬畏的延续。 这么看来，其实重要的不是时间能送我们到达哪里，真正应该珍惜的，是时间给了我们修炼的机会——修炼一种在任何情境下都让自己避免熵增、有所获益的能力，这种神奇能力，大概就是生命力。 生命那只随机的大手会把我们降落在哪里，没有人知晓。但不论跌落在哪里，都要生生不息，甚至能留下穿越时间的智慧晶体。 这是生命的责任。 Ref 津巴多时间心理学 生命是什么]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>CriticalThinking</tag>
        <tag>大哉问</tag>
        <tag>时间</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用问题对话虚无 —— HackYourself 大哉问系列]]></title>
    <url>%2F171112-HowToAskGoodQuestion.html</url>
    <content type="text"><![CDATA[我们自己虚构了一些问题,然后又炮制了一些答案。 ——西蒙娜·德·波伏娃 「人都是要死的」 经过低产的一年，HackYourself 准备恢复（双）周更的频率。 欢迎围观 00 的新坑：大哉问系列。 什么是「大哉问」？ 林放问礼之本。子曰：“大哉问！礼，与其奢也，宁俭；丧，与其易也，宁戚。” ——论语 八佾篇第三 大哉问（据说）出自论语，意思是「这是一个非常棒的问题」、「你的问题意义重大啊」。 这会是一个自问自答的系列。正如「学什么」比「怎么学」更重要，「问什么问题」比「如何回答」更重要。在之前的读书会尝试过「以问题驱动」的读书法，效果不错。加上之前有过「问题作为人生地图」的思考，所以有了大哉问系列的想法。 人生的种种困惑、迷茫、无力、混沌，只会随着复杂度指数上升的世界而加重。用问题作为线索，与趋于无序、混乱的环境展开对话，也许是一条通幽的小径吧。 为什么要多问好问题？ 为什么与问人类如何作出好决策相比，我们更不愿意问人类如何找到好目标？——马奇 人生好像总是有无穷的问题等待解决。 问题永远解决不完，这其实不是困扰。真正会造成困扰的，是我们没有意识到：要解答哪些问题，在某种程度上可以自主选择。用主动的姿态去探索问题，更是一种选择。 管理大师马奇的发问提醒我们，好问题多么可贵 —— 跟解决方案（决策）相比，更稀缺的是问对的问题（目标）。 最大化资源配置先用一个功利的视角来解读。 多问好问题的隐含前提是：人的寿命太短，精力太宝贵。 每一个问题都可能是时间和精力的黑洞，如果我们自己不选择要面对、要解答的问题，马上就会被一大堆问题塞满——它们可能来自雇佣你、跟你做时间交易的 boss，来自无数生命力顽强的模因（Meme），来自无孔不入想让你做出购买决策的广告，来自不停侵犯个人边界的重要或不重要的他人，来自其实与你完全无关但是能逗乐大脑的垃圾信息…… 如果把精力和注意力比作可以调动的资源，在滔天的信息洪流之中，我们脑子里工作记忆这一丁点儿资源，实在太过贫乏，必需得像个守财奴一样死死守护它。 资源配置的目的，无非是更好地转化为产出、达成目标。在这里，「目标」是一个大坑。每个人看似都在为生活奔忙，可是每当夜深人静扪心自问：我每天到底都在干嘛？ 嗯，我到底在干嘛 —— 也是一个问题。 如果能经常自己给自己设定问题，作为「产出/目的」的重要记录和反馈，并且有意识地、主动尝试着寻找答案，「精力」这笔账是不是就没那么糊涂？ 构筑意义，抵抗无序和虚无再来切换一个不那么功利的视角。 人生本无意义。不停追问意义，这大概是人的生理缺陷。 意义无法按图索骥找到，也不能靠机缘偶遇，而是一点一点提炼和构筑出来的。 让好问题成为人生线索，通过经常追问各种各样的问题，我们会更清楚自己是什么样的人、看重什么、被什么打动、受什么困扰。这也是打磨三观，寻找意义和自我的过程。 What Do I Stand For? 我为谁（什么）代言？？这是绝对不能交给他人来回答的问题。 面对这种终极问题，谁不想回避呢？学校也从来不教该如何解答这些问题。可是它们就是阴魂不散啊，似乎每一次逃避，都往虚无多走了一步。到底有没对错？应该坚持什么？每天的所作所为何以为继？ 万事万物都有一个宿命般的终点：无序。要用有限的生命和稀缺的注意力对抗无序，可能真的没有太多办法，我会试着用问题编制「有序」的骨架，用沉浸和心流附着成为「有序」的血肉。 在问题的牵引之下，希望我们都能迭代出令自己满意的答案，交出人生答卷。当然，给自己设计人生问卷，更为重要。 留下一些有趣的痕迹既然问出了问题，总是会试着去思考、试验、回答。有趣的问题，会激发行动，聚集同好。 如果一直只是做一个思想和内容消费者，似乎也不太有意思，为什么不留下一些痕迹呢？ 如果能把这些问题的思考、迭代过程记录下来，大概也是对自己一个很好的交待吧？ 什么是好问题？这本身就是个需要迭代思考的好问题。 如果只是为了装 x，很容易问出一些「终极问题」，比如「美是什么？」 在维特根斯坦看来，这些问题本身不成为问题。因为定义和解释是语言的范畴，只是一种语言的单向逻辑，它解决不了语言之外的问题。意义是终极解释，而「美」不存在语言上的终极解释。那些过于倚重范畴的问题、容易变成文字游戏的「终极」问题，我实在驾驭不来，还是少碰为好。 怎样识别好问题呢？一个思路是用归纳法，去搜集各种各样的问题，选出好的，然后总结出特征。 好问题的特征00 先凭自己的经验和直觉，尝试总结好问题的特征： 描述清晰 不容易回答，值得 go deep，能激发更高、更抽象层级的思考 指向有潜力的探索方向，牵引出有价值的回答，激发行动和带来改变 开放式，没有唯一答案，不同背景经历的人可能会有迥异的答案 或者是时代的大问题，或者是超越时空的普适性问题 可能不会单独出现，而是一组相关问题 好问题的栗子Edge 网站每年都会提出一个 Big question，激发知识界的集体思维碰撞，今年已经是第 19 年。作为好问题的参考再合适不过： YEAR ANNUAL QUESTION 2017 What Scientific Term or Concept Ought To Be More Widely Known? 2016 What Do You Consider The Most Interesting Recent [Scientific] News? What Makes It Important? 2015 What Do You Think about Machines That Think? 2014 What Scientific Idea Is Ready for Retirement? 2013 What Should We Be Worried about? 2012 What Is Your Favorite Deep, Elegant, or Beautiful Explanation? 2011 What Scientific Concept Would Improve Everybody’s Cognitive Toolkit? 2010 How Is the Internet Changing the Way You Think? 2009 What Will Change Everything? 2008 What Have You Changed Your Mind about? Why? 2007 What Are You Optimistic About? 2006 What Is Your Dangerous Idea? 2005 What Do You Believe Is True Even Though You Cannot Prove It? 2004 What’s Your Law? 2003 What Are the Pressing Scientific Issues for the Nation and the World, and What Is Your Advice on How I Can Begin to Deal With Them? 2002 What Is Your Question? … Why? 2001 What Questions Have Disappeared? What Now? 2000 What Is Today’s Most Important Unreported Story? 1999 What Is the Most Important Invention in the Past Two Thousand Years 1998 What Questions Are You Asking Yourself? 在「为未知而教，为未来而学」一书中，作者提出了很多关于教育的好问题。他倡导多提出「有生命力的问题」。 哲学家威廉·詹姆斯在「The Will to Believe」一文中，区分了「有生命力的假设」与「无生命力的假设」。有生命力的假设，指一个人在对自己而言具有真实性的问题中所发现的、值得尝试的各种可能性。 「有生命力的问题」与之类似，指能够为对话提供焦点和重要意义的一些探究性主题。教育者可以通过多种方式来引导： 提供中心线索，包含一系列广泛的探究主题，学习者可以对此进行长时间的探究。 围绕着大概念而非答案来组织教学。比如：植物不同于动物，它们没有感觉系统，植物的各个部分怎么「知道」应该往哪里生长呢？ 提出增殖性问题，让学习者积累一定经验后继续提出相应问题。比如： New Middle East 有可能实现吗？（地理） 人类基因组计划：是福是祸？（生物） 参与第一次世界大战那一代人为何在 20 年内又发动了第二次世界大战？（历史） 人为什么要结婚？（社会学和人类学） 什么是爱？（社会学、生物学、心理学和历史学） 奥运会是否改善了我们的价值观？（跨学科） 找到问题的焦点。从提供一个问题的焦点开始：提供一个主题、题目或者对象，具有真实性和启发性。 解决问题天生伴随着「提出问题」或「发现问题」。这一步教育的缺失，还是得靠自己来弥补。 关于什么是好问题，你有什么想跟大家分享的吗？欢迎留言。 如何让好问题成为指引普利策奖得主、诺贝尔物理学奖获得者 Isidor Rabi 说，大部分目前在孩子放学回家后都会问一句：「你今天学到什么了吗？」但他的妈妈当年问的是： 你今天有没有提出一个好问题？ 提问大概跟学习任何技能都一样，需要大量练习。如果能提出 100 个问题，总能选出最好的 10 个吧？多提问，常常反思是否提出了好的问题，提问这门「手艺」也会精湛起来。 提出问题仅仅是第一步，我们的目的是让问题真正起到穿针引线的作用。 筛选问题当我们试着列出一些问题，很快就会发现，这些问题的层次差别很大。 有的思考几分钟就能有大概的思路，有的可能穷极一生也给不出满意的答案。00 暂时以输出为目标，用问题思考周期粗暴地替代问题的复杂度/深度，将问题分成用 周/月/年 时间来思考的不同类型。 比如「编程思维有什么特点？可以如何改善生活？」可能需要至少一个月来思考和实践。 那么可以把平时收集的问题列表，标记上「周」或者「月」（如果可以作为年度主题就另外考虑了），如果以月为单位，看看能不能拆分为几个以周为单位的小问题，排出优先级，一周一个。 大哉问系列打算聚焦在这样的问题： 思考和实践周期在 一周 ~ 五年 的问题 对知识体系、立场、思考本身有迭代作用 个人已有相关困惑和经验积累，待梳理总结 可以启发近期的行动 琢磨筛选好问题之后才是关键的一步。除了大块的工作时间之外，把问题作为最高优先级的事项：频繁加载问题到脑子中，让注意力尽量聚焦，围绕问题去收集信息、展开思路、建立连接、形成观点，等等。 怎样做到频繁加载问题呢？现在注意力实在太涣散了。我们可以尝试设定一些 Triggers： IF THEN 周日午/晚饭后 挑选下周的问题，写在卡片上 出门/通勤 带上问题卡片，写下思路 跑步/散步 热身时加载问题，变跑边整理思路，回来写下笔记 周六 整理成文 （注：跑步和散步对我特别有效，可能不适合大部分人） 输出如果没有输出，等于没有思考过。 思考得再深入，也需要反馈。于是必需将思考做阶段性整理和输出，用来评估自己对问题的理解程度，收集大家的反馈，如果能有观点的碰撞就更好了。 用于收集反馈和评估的问题： 这个问题是否激发了比较深度的思考？ 思考、实践过程中我有哪些新收获？ 如何转化为观念和行动上的改变？ 发现了哪些待探索和深入的领域？ 输出过程中遇到哪些问题？ 这到底是不是一个好问题？ 其他人有什么思路？ 最后 Judge a man by his questions rather than by his answers. ― Voltaire 伏尔泰 HackYourself 大哉问系列启动，欢迎提出你的好问题~ Ref Edge.org 为未知而教,为未来而学 5 Characteristics of a Good Question 美是什么？是否存在客观的美？ 以及如何问出一个美的问题？ - 知乎 知乎上的好问题有哪些？]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>CriticalThinking</tag>
        <tag>大哉问</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DeepLearning-3：如何在 Docker 里切换 Python 版本]]></title>
    <url>%2F171021-DL3-How2UsePy3InDocker.html</url>
    <content type="text"><![CDATA[​在 DeepLearning-1：神经网络和 Docker 入门 一文中，我们介绍了 Docker 环境的安装和使用。 然后，00 遇到了 Python 的经典问题：Python 2 还是 Python 3？TensorFlow image 默认安装的是 Python2，如果想在 Jupyter Notebook 里使用 Python3，怎么办呢？ 在 TensorFlow 的 这个 Issue 可以看到，2017年5月已经支持用 tag 提供不同的 image。比如 tensorflow/tensorflow:latest-py3 就可以（安装并）打开 Python3 环境。 结合目录映射的需要，输入命令完成映射并在 python3 环境下打开： 1docker run -it -p 8888:8888 -v ~/WorkStation/DeepLearning101-002/:/WorkStation/DeepLearning101-002 -w /WorkStation/DeepLearning101-002 tensorflow/tensorflow:latest-py3 然后用docker ps -a查看所有 image，然后使用命令 docker rename CONTAINER ID XXX，将默认的 Python2 的 image 重命名为 dl，将 Python3 的 image 重命名为 dlpy3： 123CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESf46533729239 tensorflow/tensorflow:latest-py3 "/run_jupyter.sh -..." 11 minutes ago Exited (0) 6 minutes ago dlpy3f7178713446b tensorflow/tensorflow "/run_jupyter.sh -..." 42 minutes ago Exited (0) 15 minutes ago dl 以后就可以根据需要，打开不同 Python 环境的 image。 docker start -i dl 打开 Python2 环境： docker start -i dlpy3 打开 Python3 环境： 参考 Docker Image with Python 3? · Issue #3467 · tensorflow/tensorflow Support python3 on Docker image tensorflow/tensorflow:latest · Issue #10179 · tensorflow/tensorflow]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Deep learning</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[菜鸟数据科学入门03 - NumPy 数组基础和基本操作]]></title>
    <url>%2F170929-DSNote3-NumPy-basic.html</url>
    <content type="text"><![CDATA[为什么用 NumPy？NumPy 是一个用于科学计算的基础 Python 库（安装说明）。它可以让你在 Python 中使用向量和数学矩阵，以及许多用 C 语言实现的底层函数。 简洁优雅 当下大部分数据的组织结构是向量、矩阵或多维数组，NumPy 最重要的一个特点是 N 维数组对象（ndarray）。 效率高 方便地计算一组数值，而不用写复杂的循环。 灵活兼容 除了擅长科学计算，NumPy 还可以用作通用数据多维容器，可无缝对接各种各样的数据库。 敲门砖 在数据科学中，有效的存储和操作数据是基础能力。如果想通过 Python 学习数据科学或者机器学习，就必须学习 NumPy。 在 Notebook 中导入 NumPy： 1import numpy as np 什么是数组数组是将数据组织成若干个维度的数据块。 Array : data about relationships 一维数组是向量(Vectors)，由一个整数索引有序元素序列。 二维数组是矩阵(Matrics)，用一对整数（行索引和列索引）索引元素。 N 维数组(Arrays)是一组由 n 个整数的元组进行索引的、具有相同数据类型的元素集合。 创建数组NumPy 的核心是数组（arrays）。 用 array 创建数组 123In[]: np.array([1, 4, 2, 5, 3])Out[]: array([1, 4, 2, 5, 3]) 在 NumPy 数组中，数据类型需要一致，否则，会尝试「向上兼容」，比如生成一个包含浮点数的数组，输出时每个元素都变成了浮点型： 123In[]: np.array([3.14, 4, 2, 3])Out[]: array([ 3.14, 4. , 2. , 3. ]) NumPy 还可以用循环生成数组： 12345In[]: np.array([range(i, i + 3) for i in [2, 4, 6]])Out[]: array([[2, 3, 4], [4, 5, 6], [6, 7, 8]]) 用 full 生成一个 3 行 5 列的数组： 12345In[]: np.full((3, 5), 3.14)Out[]: array([[ 3.14, 3.14, 3.14, 3.14, 3.14], [ 3.14, 3.14, 3.14, 3.14, 3.14], [ 3.14, 3.14, 3.14, 3.14, 3.14]]) 用 arange 等距填充数组： （arange 是 Python 内置函数 range 的数组版，返回的是一个 ndarray 而不是 list） 12345# Starting at 0, ending at 20, stepping by 2In[]: np.arange(0, 20, 2)Out[]: array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18]) 用 linspace 线性填充数组： 12345# Create an array of five values evenly spaced between 0 and 1In[]: np.linspace(0, 1, 5)Out[]: array([ 0. , 0.25, 0.5 , 0.75, 1. ]) 用 random 生成随机数组： 1234567# Create a 3x3 array of random integers in the interval [0, 10)In[]: np.random.randint(0, 10, (3, 3))Out[]: array([[2, 3, 4], [5, 7, 8], [0, 5, 0]]) btw 数组索引从 0 开始 数组切片NumPy 中的切片语法：x[start:stop:step]，如果没有赋值，默认值 start=0, stop=size of dimension, step=1。 (上图最后一个图形，arr[1, :2] 应该是 (1,2) 一行二列矩阵？？） 12345array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])In[]: x[::2] # every other elementOut[]:array([0, 2, 4, 6, 8]) 123456789array([[12, 5, 2, 4], [ 7, 6, 8, 8], [ 1, 6, 7, 7]]) In[]: x2[:3, ::2] # all rows, every other columnOut[]:array([[12, 2], [ 7, 8], [ 1, 7]]) 复制数组切片 123456789x2 = array([[99 5 2 4] [ 7 6 8 8] [ 1 6 7 7]) In[]: x2_sub_copy = x2[:2, :2].copy() print(x2_sub_copy)Out[]:[[99 5] [ 7 6]] 数组转置和轴对换reshape: 123456In[]: arr = np.arange(15).reshape((3,5)) arr Out[]: array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]) 转置（transpose）是重塑（reshape）的一种特殊形式，返回源数据的视图而不进行复制。 1234567In[]: arr.TOut[]: array([[ 0, 5, 10], [ 1, 6, 11], [ 2, 7, 12], [ 3, 8, 13], [ 4, 9, 14]]) 连接和拆分数组用concatenate连接数组： 12345678In[]: grid = np.array([[1, 2, 3], [4, 5, 6]]) np.concatenate([grid, grid])Out[]: array([[1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6]]) 123456# concatenate along the second axis (zero-indexed)In[]: np.concatenate([grid, grid], axis=1)Out[]: array([[1, 2, 3, 1, 2, 3], [4, 5, 6, 4, 5, 6]]) 用 vstack合并到数据行， hstack 合并到数据列 12345678910In[]: x = np.array([1, 2, 3]) grid = np.array([[9, 8, 7], [6, 5, 4]]) # vertically stack the arrays np.vstack([x, grid])Out[]:array([[1, 2, 3], [9, 8, 7], [6, 5, 4]]) 拆分数组的函数包括： np.split, np.hsplit, np.vsplit 12345678In[]: x = np.arange(8.0) np.split(x, [3, 5, 6, 10])Out[]: [array([ 0., 1., 2.]), array([ 3., 4.]), array([ 5.]), array([ 6., 7.]), array([], dtype=float64)] 使用 mask 快速截取数据传递给数组一个与它有关的条件式，然后它就会返回给定条件下为真的值。 12345In[]: norm10 = np.random.normal(10,3,5) mask = norm10 &gt; 9 maskOut[]:array([False, True, False, True, False], dtype=bool) 123In[]: print('Values above 9:', norm10[mask])Out[]: ('Values above 9:', array([ 13.69383139, 13.49584954])) 在生成图形时也非常好用： 12345678910import matplotlib.pyplot as plta = np.linspace(0, 2 * np.pi, 50)b = np.sin(a)plt.plot(a,b)mask = b &gt;= 0plt.plot(a[mask], b[mask], 'bo')mask = (b &gt;= 0) &amp; (a &lt;= np.pi / 2)plt.plot(a[mask], b[mask], 'go')plt.show() 在程序中用条件式选择了图中不同的点。蓝色的点（也包含图中的绿点，只是绿点覆盖了蓝点），显示的是值大于零的点。绿点显示的是值大于 0 小于 Pi / 2 的点。 广播 Broadcasting当不同 shape 的数组进行运算(按位加/按位减的运算，而不是矩阵乘法的运算)时，(某个维度上)小的数组就会沿着（同一维度上）大的数组自动填充。广播虽然是一个不错的偷懒办法，但是效率不高、降低运算速度通常也为人诟病。 The term broadcasting describes how numpy treats arrays with different shapes during arithmetic operations. Subject to certain constraints, the smaller array is “broadcast” across the larger array so that they have compatible shapes.via Broadcasting — NumPy v1.13 Manual 广播的原理（via Broadcast Visualization）： 参考资料 NumPy.org Python Data Science Handbook 利用Python进行数据分析 Scipy lecture notes Enter The Matrix 使用 Python 进行科学计算：NumPy入门 Broadcasting — NumPy v1.13 Manual EricsBroadcastingDoc - SciPy wiki dump Broadcast Visualization — astroML 0.2 documentation]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data Science</tag>
        <tag>NumPy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[识别自动思维 —— HackYourself 避税手册之二]]></title>
    <url>%2F170910-hackyourself-cbt2.html</url>
    <content type="text"><![CDATA[好久不见。 HackYourself 避税手册第一篇中，提出了「信念税」这个话题。怎样更好地「避税」呢？今天我们来聊聊如何识别自动思维。 当你在读这篇文章时，一部分注意力会集中在阅读文字并且理解、整合信息上面。同时，你可能会产生一些快速的评价，这些思维可以称为「自动思维」。它们似乎是立即自动涌现的，通常迅速而简短，一闪而过。我们往往很难觉察到这些想法的存在，更不要说进行理性、客观的评估，所以大都会顺着它们做出惯常的情绪和行为反应——就像飞行器进入「自动导航」模式一样。 「自动思维」的形成，大都不经过意识的「审查」，一旦形成却又根深蒂固，潜移默化地影响着我们的判断、选择、行为。 请想象一下，现在有一个小球，要滚过沙坑。 第一次，沙坑上没有任何痕迹，小球可能可以沿很多路径滚过。 第二次让小球滚入沙坑，很有可能会顺着上一次的轨迹，并且进一步加深轨迹的深度。 反复几次，小球已经不太可能脱离轨迹滚动，而且一次比一次速度要快。 这就是路径依赖。 自动思维的「路径」一旦形成，大脑就会沿着阻力最小的路径「思考」，完全跳过原本可能需要的觉察、思考、审视阶段，直接作出习性反应。 回到自动思维起点，重新选择解释风格自动思维都是一些不再经过意识「审查」的想法。想要改变那些已经形成固定路径的想法「小球」的运动轨迹，必须先回到原点，在小球启动的时候，重新获得对它有意识的控制。 试想一个我们经常会遇到的情景：工作上有一件事情没有做好。 面对这个结果时，我们可能会产生很多想法。这时候「小球」其实有很多不同的路径可以选择： 解释风格 归因 态度/行为导向 具体的 我第一次做，经验不足，目标设定也有些过高，超出了我掌握的技能 继续学习和练习 笼统的 我没有能力做好 我真是个差劲的人 短暂的 最近身体不好影响了状态 恢复身体迎头赶上 长期的 我不是那种有信心、什么都能做好的人，一直都是这样 以后不要尝试算了 个人的 这个项目虽然不成功，我还是锻炼了 xxx 能力 想想这次的经验怎么复用 普遍的 这件事没有什么意义，一开始我就不看好 真是浪费时间浪费表情 从上表可以看到，如果对负面结果选择具体、短暂、普遍的解释风格，而不是笼统、长期的和个人的方式来解释，可以减少挫折和无助。 乐观的人一般会用长期的、笼统的、个人的方式解释成功，而用短暂的、具体的、普遍的方式解释失败。如果事事要求只做最好，就会抑郁：无法达到的预期，加上为失败承担个人责任的倾向，形成了致命的组合。 如何识别不恰当的自动思维我们每天会产生数量难以估算的自动思维，几乎每时每刻都有自动思维在进行，不可能也没有必要全部识别出来。那么，哪些自动思维值得识别？如何判断是否「恰当」？ 让我们先聚焦在那些引起较明显情绪反应、生理变化、行为变化的时刻，以及可能做出重要决策的时刻，这些时刻的自动思维较容易识别，也比较可能带来较大的影响。 情绪是一个非常好的线索，它提醒我们「此刻也许该暂停」。 当情绪上涌时，不妨试着做三件事情： 1.暂停比如说，Boss 刚刚布置了一项很有挑战的任务，让你在 3 天内完成。这时身体会不自觉地开始有一些反应，比如头皮发麻，脑子一片空白，内心有一群草原动物奔驰而过…… 在这样一个情绪节点，请尽可能先按下暂停键，把时空「冻结」住。 2. 识别情绪观察一下自己的第一反应： 刚才我产生了什么反应和情绪？ 身体有什么反应？是胸口发紧、太阳穴微微发热、眉头开始皱起？情绪有什么变化？是焦虑——觉得时间太紧不知道该从何入手，是不满——这么难的事情给到自己不公平有一点愤怒，还是恐惧——害怕把事情搞砸，别人会对自己有负面评价？ 3. 识别自动思维顺着情绪反应，我们也许可以抓出引起这些情绪的「自动思维」： 刚才我脑子里闪过什么念头？ 比如 这太难了 我可能没办法做到 如果我试了但是没有用怎么办？ 我很想拒绝但是担心拒绝会带来严重后果 当暂停成功后，识别出当下的想法，就容易产生 second thought。如果可以产生更多的想法，而且别急着站队，就可以让想法之间相互 pk，那些不那么合理的想法就会现出原形，让我们更容易做出恰当的评估。 比如说「这件事情太难，我做不了」，在这个节点，我们通过「冻结」时空，重新获得挑选解释的主动权。以前，我们可能会下意识地选择逃避，但是如果转念一想，意识到「这个项目是锻炼组织能力的好机会」，我们就可能更愿意接受挑战；如果想到「这个项目我一个人不行，但是如果 xx 能加入，我会更有信心」，我们就可能会开始考虑如何申请资源…… 识别练习当然，整个过程需要反复练习，毕竟我们对抗的是已经千百次滚过沙坑的「自动导航」思维小球。 怎样更好地练习呢？ 1.提高情绪的分辨率如果我们只能区分出「好」和「坏」情绪，情绪感知的分辨率过低，也就很难通过情绪觉察自己的状态，从而追溯出产生情绪的自动思维。 语言会限制思维。提高情绪分辨率的第一步，可以尝试扩充关于情绪的词汇和定义。 「心情词典」一书中介绍了 154 种情绪，例如： A B C ABHIMAN 由爱生恨 BAFFLEMENT 不知所措 CALM 冷静 ACEDIA 倦怠 BASOREXIA 亲吻渴望 CAREFREE 无忧无虑 AMAE 撒娇依赖 BEFUDOLEMENT 茫然 CHEERFULNESS 欢快 AMBIGUPHOBIA 非解释清楚不可 BEWILDERMENT 困惑 CHEESED 气恼 ANGER 愤怒 BOREDOM 厌倦 CLAUSTROPHOBIA 幽闭恐惧 ANTICIPATION 期待 BRABANT 作死 COLLYWOBBLES 肠胃焦虑 ANXIETY 焦虑 BROODINESS 求子心切 COMFORT 安慰 APATHY 冷漠 COMPASSION 同情 L’APPEL DU VIDE 虚空的呼唤 COMPERSION 多元之爱 AWUMBUK 人去心空 CONFIDENCE 自信 具体的情绪解读，可以翻一翻这本书。 当我们掌握更多细致描述情绪的词汇，对情绪的感知和识别能力也会得到提升。 2.将自动思维形象化尝试给想要调整的自动思维塑造一个生动的形象，比如，纸老虎、聒噪的青蛙、严厉的老师、无脸人之类的，诀窍是选择那种看起来很强大，实际上容易怂的形象，嘿嘿嘿。。。每次识觉察到自动思维又在默默推动小球滚过沙池，我们就可以尝试跟这个形象开始对话。 经过一些练习，你也许会发现这个形象越来越具体，也就越容易被识别出来，自己就不容易受它所代表的自动思维所控制。 3.写情绪日记很多时候，自动思维的惯性太大，不一定能够在发生的当下即时识别。于是有必要定期做一些回顾和反思。比如尝试写情绪日记。每天晚上花 5 分钟，想想过去的一天，自己经历了哪些情绪强烈的时刻？当时涌现了什么样的自动思维？下次再出现，如何更快识别出来？识别后如何应对？需要什么帮助和工具吗？…… 我们也可以尝试将自己经常会出现的（负面）自动思维列一个清单，作为「信念税单」，每天检查一下，今天有没有为这些信念「交税」。 现在就开始切换自动导航模式的练习吧！ 你有哪些常见的「自动导航思维」？识别它们的过程中，有什么感想和心得想跟大家分享？欢迎留言！ 祝各位避税顺利！]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>Psychology</tag>
        <tag>HackYourself</tag>
        <tag>Mind</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Time will tell]]></title>
    <url>%2F170723-time-will-tell-md.html</url>
    <content type="text"><![CDATA[昨天，跟咨询师一起整理了个人的近况和困扰，收获颇多。 很多时候，我们会因为一时失去焦点，模糊了初心、价值观和评判标准，而走入一座霾雾缭绕的迷宫中。什么是对的？什么应该坚持？哪些需要改变？虽然表象看起来纷繁复杂，但只要不失初心，气沉丹田，前路自然会显出轮廓。 今天继续反思最近的工作和生活，再次意识到，做生意和过生活的好多问题和解法，是一样一样的。 商业的本质和初心怎样判断一个公司是好公司？大概，遵循商业规律，能持续满足市场需求，就是一家好公司。那么，什么样的公司是值得尊敬的公司？ 之前跟朋友讨论过，创业成功的标准是什么？我认为是： 「 人 心 所 向 」 不仅仅要让客户满意，而且让几乎所有的利益相关者比如员工、同行、行业上下游，甚至包括竞争对手，都愿意支持你、拥护你，这就是战无不胜的「人心所向」。所以，马云在阿里巴巴一直强调：客户第一，员工第二，股东第三。因为，商业运作的基本逻辑，就是生产出巨大的价值（价值一定是面向某些主体的），然后从这些价值中获取其中的一小部分作为企业利益和发展资源。 于是，从外部来看，我们知道一个公司的目标是「造势」：通过组织资源、提供价值，做到「人心所向，大势所趋」。 那么，从内部看，怎样判断一个公司运作良好？ 我认为是看熵增还是熵减。 一个生命有机体在不断地产生熵，并逐渐趋近于最大熵的危险状态，即死亡。要摆脱死亡，要活着，唯一的办法就是从环境不断汲取负熵。一个生命有机体具有推迟趋向热力学平衡（死亡）的奇妙能力，就像是活有机体吸引一串负熵去抵消它在生活中产生的熵总量，从而使它自身维持在一个稳定而又低熵的水平上。 —— 薛定谔 「生命是什么」 类比生命有机体，一个创业公司如果还有活力，那么它应该会有明确的创业动机或愿景，还在不断的运动拓展，同时有强烈的不死意愿。 存活的目的是进一步生长。生长是熵减的过程。对公司而言，首先需要一个稳定而有序的团队结构，然后需要找到能够复制和 scale 的业务模式。如果想长期拥有竞争力，还必须有一套有序犯错的多元化基因库。初创公司能够在竞争激励的商业环境中存活，靠的是差异化生存。而差异来自包容和创新。 简单来说，就是看一个公司有没有向着更有序的趋势发展。 不过，也有例外——公司发展最迅速的阶段，往往最混乱。那句话说得好（原谅我忘记出处了）： 什么是健康？健康就是要病不病的边缘状态。 当公司飞速发展的时候，可能内部看起来无比混乱，但是却使外部产生熵减，比如市场份额快速扩大、口碑扩散、替代传统技术和方式等等。也就是说，为了在外部快速获得熵减的「势」，可以一定程度容忍内部的熵增。当然，不要以为所有的混乱无序，都反映了业务快速增长，它可能只是生命体衰竭的先兆。 外部人心所向，内部有序熵减，可以作为判断一个公司健康状况的标准，也是一个公司应该努力的目标——而不是仅仅盯着财务数据（虽然能更直接反映短期健康状况）。 于是又冒出另一个问题：我们要在多长的时间周期内，做好创业这件事？做一家 2 年内的风口网红公司，跟做一家 20 年后依然存活而且受人尊敬的公司，策略完全不一样。把事情放在更大的时间周期内来考虑，格局自然大不同。而评估标准就更简单了：较大的时间周期内，目标利益群体会不会用脚投票（比如客户来买单、人才来加入、同行来合作）。 于是再冒出另外一个问题：做一家能存活的公司，做一家好公司，做一家受人尊敬的公司，它们之间有先后次序吗？按常理来看，应该先生存，后发展。但是换个角度想，一开始就做受人尊敬的事，兢兢业业地为客户提供更大的价值，这些事难道不会带来商业利益吗？ 创业和工作，还是要回到初心。 凡是真正值得做的事情，就值得慢慢做。因为啊，慢慢来，比较快。 个人的期许与方向回到每一个个体，迷茫时怎么判断自己是不是走在所谓「正确」的道路上？上面的逻辑依然好用： 外部人心所向：我是否获得持有类似价值观的群体的认可？ 内部有序熵减：我是否获得可以增值的能力，比如洞察力，学习能力，分析和解决问题的能力，创造和表达能力，等等 对公司而言，跟目标利益群体保持长久持续的关系，可以作为评估标准。商业逻辑，天下大同。但是个体却千人千面。对个人而言，可参考的标准是什么？ 好像只能基于每个人自己的价值观和偏好，来寻找这个所谓的「标准」。 对我而言，应该是能创作出或美好或有趣的作品吧。然后，用自己的作品去吸引那些价值观近似的人，与他们产生紧密的连接。 我讨厌认知负荷——所以做设计真的很容易开心。洁癖这个词太简单粗暴，他们大概是一个对「秩序」很敏感的人群。认知负荷也是一种熵增，思维混乱是熵增，作息不规律是熵增，做事毫无目的性是熵增…… 「有序和无序」大概是我这辈子的人生课题。我希望那些没有什么美感的东西能尽量简单，甚至成为 API 接口，好让我们节省精力，用在更需要创造力的地方——用于创造那些或有序或无序的美的过程中。 对我而言，判断一个人是不是同路人，看看 ta 有多喜欢美好的事物、有没有创造出尽可能美好的事物就知道了 —— 美好的事物，都是通过艰辛努力获得的熵减的成果。 什么东西足够「美好」呢？要我说啊，那些不符合最小化生存成本、自身脆弱却又能抵御时间侵袭的东西，大抵都会是相当美好的东西。 时间是最好的判官，虽然有的公司能借着风口起飞，但是百年老店才是影响几代人的生意。 时间是最好的判官，在个体能够感受的范围内，最长也最公正的尺度是一生。一辈子里面，真正给自己留下记忆，给别人带来益处的事情，都会有哪些。当然，有的人还能影响和帮助往后数千年的人，这种价值无法估量，弥足珍贵。 当我们纠结、焦虑的时候，不妨试着抽出三条时间线： 第一条，叫做「生命长河」。 在我们自己的生命之河中，眼前都只是一个切片。一天的事放在一个月的周期来看，大概就不算什么。一时的事放在十年的周期来看，并没有我们想象得那么重要。真正重要的，是做这件事的姿势，该不该保持十年，值不值得用十年或更长的时间去保持。 第二条，叫做「迈尔斯通」（Milestone -.-）。 如果只看到长河的终点，可能容易因为路途遥远而丧失了勇气。马拉松的冠军们，大都不以终点为目标，而是会不停地设置看得见的标识物为目标：下一个路口、下一个补给站、下一个拐弯、下一个树荫……所谓日拱一卒，不期速成。棋盘才摆开，不要想着终局，先把下一个要吃掉的小兵盯好。 最后一条，叫做「刹那永恒」。 过去和未来都不可期，只有当下最真实。当下的一心一念，会影响一言一行，也会影响那个昵称可能叫做「薛定谔」的未来的模样。 让我们面对生命长河，聚焦在看得见的下一个界碑，全神贯注地走好现在这一步。]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>Psychology</tag>
        <tag>HackYourself</tag>
        <tag>创业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法作曲历险记01-简史]]></title>
    <url>%2F170713-algorithmic-composition-1.html</url>
    <content type="text"><![CDATA[AC 和 ACArt &amp; Code （AC）是 00 新开的坑，记录对一个陌生但好玩的领域的学习历程。算法作曲(Algorithmic Composition) 是 AC 中的 1 号 AC 坑……欢迎围观我在大雾中摸索、游荡。也欢迎老司机帮我带带路~ 算法作曲 顾名思义，不是由人来作曲，而是经由设定好的算法，通过机器自动生成乐曲。 先别震惊，也别反感。我并不觉得机器会威胁人在音乐、艺术创造领域的优势。之所以研究算法作曲，纯粹出于对这两个领域的兴趣 —— 尤其是两个看似矛盾、对立的领域，碰撞在一起，一定有很嗨的火花吧！ 音乐虽然在表象上是流动音响的时间艺术，然而，从其基础理论设计与数学逻辑同构并进行符号化组织的角度来看，似乎没有任何一门艺术，天生能比音乐拥有更强的可计算性。 ​​​​——黄雷基 算法作曲的前世、今生和未来——回溯) 站在坑口大概往里看了一眼，真是深不见底啊！基础乐理得学吧，作曲知识得学吧， DSP 得略懂一些吧，算法大概得了解吧，机器学习/深度学习得看看吧，工具和软件得试着用吧，前沿的项目得研究下吧…… 一把年纪了怎么这么想不开？大概是年纪大了，更加觉得应该多花些时间在（起码看起来）好玩的事情上面呢！ 系列第一篇，一起来回顾一下算法作曲并不长的历史。 算法作曲简史1952 年，28 岁的列哈伦•希勒（Lejaren Hiller􏶃）告别了杜邦公司，怀揣一大笔奖金重返校园。在美国伊利诺伊大学，这位 23 岁就拿到博士学位的化学家，开始了对合成橡胶的研究。 也正是在同一年，第一台完全由美国大学研发的冯•诺伊曼式计算机 Illiac 正式亮相伊利诺伊大学。 得天独厚的希勒得以接触到电子计算机，并用它来计算统计意义上理想聚合分子的大小。他无意中发现，如果将控制变量由几何数变为音符，同样的计算机代码可以用于对位法谱曲。一向对音乐颇有兴趣的希勒开始不务正业，试着利用计算机来谱曲，他不仅在闲暇时间开始攻读音乐硕士学位，还把自己的助手——化学师里奥纳德•艾撒克逊（􏹴􏹵􏰉􏻺􏹛Leonard Isaacson）一同拉下了水。 1956年，在美国计算机协会（ACM）的一次会议上，希勒做了一场关于计算机创作音乐的报告。听众的反应不一，有趣的是，计算机专家们大多对此持非常开放的态度，音乐家们则显得更为谨慎，而很多其他领域的学者们却认为他完全是在胡说八道。 不管怎样，希勒的第一个作品在 1957 年诞生。 为了纪念用来作曲的计算机 Illiac，他为这支弦乐四重奏取名「依利亚克组曲」（Illiac Suite），这也是历史上第一支完全由计算机生成的音乐作品。他们基于产生——测试的方法创作，首先使用 Markov 链模型来产生有限控制的随机音符，之后利用和声与复调的规则测试这些音符，最后选择符合规则的材料，修改、组合成传统音乐记谱的弦乐四重奏。 【找乐曲】 该作品分为四个乐章： 第一乐章：计算机生成的不同长度的固定主题旋律 第二乐章：使用变奏的规则生成的四声部音乐 第三乐章：通过计算机对节奏、动态和演奏法的不同处理生成的音乐 第四乐章：通过衍生算法和马尔科夫链的不同模型及概率生成的音乐 希勒从此彻底投入计算机音乐创作的怀抱，他转入音乐系任教，成立实验性的音乐工作室。 随后希勒又开拓了他的很多个「第一次」，如最先进行乐谱打印，最早使用物理模型合成技术等，创作了「算法」系列，「计算机康塔塔」，「HPSCHD」等一系列计算机作曲的音乐作品。 从此之后，在计算机快速发展的黄金年代，算法作曲也在世界各地的领域先驱们推动下快速发展。 1960 年，俄罗斯研究者 R.Kh.Zaripov 发行了全世界第一篇关于用「Ural-1」计算机进行算法音乐作曲的论文 An Algorithmic Description of a Process of Musical Composition。 1960 年，法国工程师、作曲家 Pierre Barbaud 成为欧洲第一个使用计算机作曲的作曲家。 他创作了「7!」，在有限状态机 (Finite State Automata) 和随机矩阵 (Stochastic Matrices) 的帮助下，将一系列规则运用到 12 音体系中，以此为调性和序列音乐风格建模。 1965年，发明家 Ray Kurzweil 首次公演了一首用计算机来创作的钢琴作品，这台计算机能够对各种不同的乐曲进行模式识别，并且可以分析和使用这些模式去创造新的旋律。 1974年，第一次国际计算机音乐会议召开（ICMC）。 随着计算机相关技术的发展和普及，越来越多的人关注到这个科技与艺术奇妙结合的领域，于是在那个新生流派争奇斗艳的先锋实验年代，各式各样的作曲算法涌现出来。 然而直到美国作曲家大卫·科普(David Cope) 开发的「音乐智能实验」系统(Experiments in Musical Intelligence，简称 EMI，1981 年开始研究) ，1987 年在国际计算机音乐年会上第一次公开展示初期成果那时起，计算机音乐与传统音乐之间的桥梁才逐渐架设起来。 Cope 最初只想编写一个能够描述自己作曲风格的计算机程序，并用来记录自己作品的发展轨迹，不过很快他将目标转向了那些已故大师们，希望能用软件创造出带有不同大师风格的音乐作品。该系统所采取的方法涉及音乐文法和建立风格数据库等， Cope 将这样的工作称为 recombinancy —— 在现存的音乐上加入新的、符合原有逻辑的演绎，从而创造出新的作品。 比如 David Cope 用 EMI 创作的维瓦尔第风格的十二首管弦乐作品：「星座」。下面将要听到的这首是 「金牛座」（视频也是用算法自动生成的） 1993年，美国科学家 John Al Biles 运用交互式遗传算法，设计了名为 GenJam 的交互式创作演奏系统。该系统能在现场演奏者的 4 或 8 小节演奏后单独生成一个类似风格的新旋律，也能与演奏者进行合奏，在演奏者演奏的同时生成并演奏一个新旋律。 随着计算机制谱、乐器数字接口、信号处理、声音分析等技术的研究和应用逐渐兴起和深入，计算机音乐已经成为一个跨学科、跨媒介、跨文化的艺术形式和科学领域。 这么好玩的坑，要入吗？ Reference 倪朝晖. (2015). 算法作曲理论与实践. 西南师范大学出版社 算法作曲的前世、今生和未来——回溯) Illiac Suite | musicainformatica.org Hoffmann, P. (2009). Music Out of Nothing? A Rigorous Approach to Algorithmic Composition by Iannis Xenakis. https://doi.org/http://dx.doi.org/10.14279/depositonce-2292 The History of Algorithmic Composition]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>AlgorithmicComposition</tag>
        <tag>算法作曲</tag>
        <tag>Art</tag>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[警惕信念的苛捐杂税 —— HackYourself 避税指南之一]]></title>
    <url>%2F170624-hackyourself-cbt1.html</url>
    <content type="text"><![CDATA[人每天会产生多少想法？ 别着急回答。 试着闭上眼睛 30 秒，什么都不干，「观察」一下脑子里会出现些什么念头。 准备好了，闭上眼睛。 留意到自己的念头了吗？ 大部分人会惊诧于这 30 秒内产生的念头竟然有那么多，而且杂乱无章。 没错，在醒着的大部分时间里，我们持续产生着各式各样的念头。据未确切考证的说法 [1]，人一天中产生的念头多达六七万个。这些念头闪过，却基本不会觉察它们的存在。 想想看，假设你开了一家大公司，有六七万人给你打工，但是你根本不知道他们都从哪里来。幽灵一般的员工们快速地来回穿梭，看似在工作，实际上只是机械地做着动作，你搞不清他们在做什么、公司是如何运作的。 够可怕吧？这恰恰就是我们的常态——每分每秒都在产生念头，看似我们在「制造」和「控制」它们，实际上却被它们「影响」然后「不自觉地行动」。而且，念头也有「阶级」之分。有些念头催生了其他念头，属于坐享权力和影响力的「源头信念」。 也许我们没有意识到，每天都在为一些念头（尤其是源头信念）付出巨大的代价。某些信念让我们反复做出类似的决策，导致类似的结果，甚至形成一再重复的模式，反复上演相似的历史。比如从来没法坚持做好一件事，比如每个月都刷爆信用卡，比如感情上一直遇到渣男…… 如果总是把结果轻描淡写归结为「一时糊涂」、「运气不好」等等，可能没有想过、也不愿意承认，这些结果往往源于一些未经审视的信念。不会有任何提醒，也没有半张收据，就像税赋一样，吸血于无形之中，然而你每天每月每年都在交，甚至要交上一辈子。 时隔半年，HackYourself 回归的第一个系列，00 想跟大家聊聊信念的苛捐杂税——我们在为哪些念头付出沉重代价，如何合理避税以便早日实现「精神的财务自由」。 小税可逃，大税难免想逃税也需要界定一个范围，毕竟小税可逃，大税难免。 什么是「大税」呢？比如属于时代的信念税——历史局限性，这可是连重构学科体系的大佬们都无法突破的的框架： 时代信念税，往往一交就交大发了，世界商业版图都从此改变： 错过一个时代不说，还会被后人耻笑： 如果说「大税」交的是历史周期的税，那么「小税」又包含什么呢？让我们从群体历史周期回到个体历史周期。 从童年开始，我们已经对自己、他人以及世界形成了一定的看法，其中一些最核心的信念被认为是绝对真实和正确的。这些影响个体价值观、判断和行为的观念，关于自我最核心的观念，是避税指南系列想要探讨的重点。 认知语言学家莱考夫在「我们赖以生存的隐喻」一书中，语重心长地指出，我们的概念体系基于隐喻构建，抽象思维很大程度上是隐喻的，我们通过隐喻派生的推论为基础来生活。这些隐喻如此根深蒂固，我们根本都察觉不出它们的深刻影响。比如，「争论是战争」这一隐喻，贯穿在日常对「争论/讨论/辩论」等概念的理解和行动中： 他攻击我观点中的每一个弱点 我粉碎了他的论点 和他争论，我从来没赢过 你不同意？好吧，反击啊！ 他击破了我的所有观点 …… 我们对每一句话都习以为常，用起来自然得根本意识不到争论也许有其他的形式和比喻，比如像跳双人舞，比如像打乒乓球。 我的一位朋友在婚姻中被婆媳关系折磨得发疯，一家人的无数冲突，可能都源于婆婆一直灌输给她丈夫的「信念」：一定要制服媳妇，让她听话、服服帖帖，不会骑在自己头上。多么经典的战争和控制权争夺的隐喻啊！生活在这种隐喻构建的观念和场景中，亲密关系从何构建？ 常见的个人信念税我们倾向于认为，大多数人持有相对正面和现实的核心信念，比如「大多数事情我能够胜任」、「我是有价值的人」，负面的核心信念只在遭遇一些应激事件导致内心痛苦时才表现出来。但只要稍微认真审视一下，或多或少会发现，一些隐蔽的信念在持续发挥着影响。即便优秀富有成效的人，也可能是受类似「我不被接受」之类的负面核心信念所驱动。 认知疗法之父 Aaron Beck 将核心信念分为三类[2]： 无能类核心信念（Helpless Core Beliefs） 我不能胜任我做事毫无效率任何事我都做不好我很无助我易受伤害我贫苦我失控我是有缺陷的人 （例如，我比不上其他人）我不够好 （成就方面）我是失败者…… 不可爱类核心信念（Unlovable Core Beliefs） 我不可爱/不讨人喜欢/不受欢迎/没有吸引力我是多余的我被人忽视我与人不同我真坏（所以其他人不爱我）我不够好（所以其他人不爱我）我必定被拒绝我必定孤独…… 无价值类核心信念（Worthless Core Beliefs） 我毫无价值我不被接受我是废物我不道德我很危险我有罪…… 一眼看上去，大部分的核心信念好像都跟我们关系不大。 真的是这样吗？ 想想，你为什么会把工作上的一件小事做得比别人好？ 是真正乐于其中吗？还是害怕做不好会有后果？还是别人的称赞会让自己觉得有价值？为什么别人的称赞如此重要？为什么别人实际上没有做出的称赞成为了动力？……继续追问下去，有没有出现上面提到的核心信念？ 想想，你为什么会把工作上的一件小事做得不如别人？ 是不知道该怎么做吗？是觉得无聊不想做吗？是做得比别人慢吗？……继续追问下去，有没有出现上面提到的核心信念？ 再想想，你为什么会在意跟别人比较工作成果？ 是因为薪水吗？是因为不想被批评吗？是因为能获得成就感吗？……继续追问下去，有没有出现上面提到的核心信念？ 也许我们从来没有追问过核心信念，所以也不知道它们会造成怎样的影响和损失。 比如，在「我不够好（成就方面）」这样一个核心信念下，会有怎样的想法和行动？可能会将某种成就作为人生准绳而忽视其他重要的东西，可能会容易迷信权威，可能不敢表达自己的观点，可能很功利，可能容易半途而废…… 这些信念导致的损失，就像名目繁多的税费，看似不存在，实则难以估量，说不定就是贫富差距的罪魁祸首。 当然，还有数不清的非核心信念（假设）也在慢慢氧化我们，比如： 读过的书越多，掌握的知识就越多 道理懂得越多，人的判断力越好 房子应该存够首期再买 东西越便宜越好/越贵越好 朋友多说明人缘好，人缘好说明人好 做完的东西越多越好代表效率越高 …… 真的真的是这样吗？我也不知道。 欢迎留言，分享你交过的信念税。 下一篇开始，我们探讨如何识别出潜在信念，找到合理避税的突破口。 Ref [1]. 我们赖以生存的隐喻 [2]. Beck, A. T., Freeman, A., &amp; Davis, D. D. (2015). Cognitive Therapy of Personality Disorders. Guilford Publications. [3]. The 70,000 Thoughts Per Day Myth? - Neuroskeptic [4]. 25 Famous Predictions That Were Proven To Be Horribly Wrong]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>Psychology</tag>
        <tag>HackYourself</tag>
        <tag>Mind</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[17° 读书会笔记[6] - 设计的准则]]></title>
    <url>%2F170415-design-principle.html</url>
    <content type="text"><![CDATA[17° 读书会第 6 本书：设计的准则 阅读时间：2017-03-19 ~ 2017-03-25 这本小书不是要扼杀创造力，也不是要将其简化为一堆原则，它并非妨碍好设计发生的方程式，而是希望制止对设计专业复杂性缺乏了解的状况。大脑应该负责运用合适的方程式去实现预期的结果。 读前问题 设计中的「准则」起到什么作用？ 作者认为无形因素和有形因素如何怎样影响设计？ 设计的语义、句法和语用分别指什么？ 哪些准则对我的启发最大？ 读后思考马西莫·维涅里（Massimo Vignelli，1931—2014）是意大利国宝级设计师，现代主义设计的开拓中坚，二十世纪下半叶视觉传达发展进程中具有深远影响的人物之一。他的设计领域涵盖了包装、产品、家具、展示设计到公共标识。 1966年，维涅里同其他设计师共同创办了 Unimark International，这家设计所很快便成为了世界上最大的设计公司之一，并为众多世界知名企业设计了身份标识，如美国航空、美国布鲁明代尔百货公司、福特、IBM等。这一时期，维涅里最著名的设计作品是纽约地铁线路图。1971年，维涅里离开 Unimark，与妻子莱拉一起在纽约创办了维涅里设计事务所，被视为设计界的全能常青树。 这本书提供了对平面设计中「标准」的思考，有助于更好地理解版式设计的基本原理。 设计是一种规则，是带有其自身规定法则的创造性的过程，围绕其目标，以最直接且最具有表现力的方式控制着结果的统一性。 跟前面几本书一样，维涅里也提出了他对设计的定义。Paul Rand 认为设计是处理关系，原研哉认为设计是对生活意义的表达，Papanek 认为设计是为了达成有意义的秩序而进行的有意识而又富于直觉的努力。维涅里的定义更加带有「原教旨主义」的意味，认为设计是创造（严肃的）规则。 规则是一组自我设定的准则，规范着我们的实践。混乱、复杂的设计揭露同样混乱、复杂的头脑。 维涅里将设计作品中凝练的规律视为最高准绳，厌恶多余、粗鄙、杂质、混乱。他认为设计如果没有规则，将是混乱的，是一种没有责任心的活动，这就是「无规矩不成方圆」吧~ 准则反应了设计师在长期的设计实践中，对「如何做出更好的设计」的种种试验和反思：哪些问题重复出现？哪些因素影响效果？哪些做法总是奏效？当设计师在「经验」和「理想的设计效果」中建立起强关联，就会将「经验」升级为「准则」。 维涅里把设计的准则分成无形因素和有形因素。 无形因素 作用 语义学 设计追寻意义。全方位多角度地理解设计主体，并且在设计主体与发送端和接收端之间，以对双方都有意义的方式建立联系。 句法学 在遣词造句和设计语言表达中控制语法的正确使用的准则。 语用学 设计所传达的意义应该被理解 规则 规则是一组自我设定的准则，规范着我们的实践。 适度性 在适当的范围内进行探索，指导我们选择正确的媒介、正确的材料、正确的比例、正确的表达方式和色彩与肌理 模糊性 多元，物体以不同方式真实存在的可能性 历史、理论与批评 从时代-运动-表现方式-设计师-设计作品中寻找「为什么」和洞察 现代主义 对于生产过程以及产品最终目的的认识，是一种意识形态的反应 设计为一 设计的规则是唯一的，可以被运用于许多不同的设计主题中，它高于并超越任何风格 视觉的力量 就一件设计作品而言，至关重要的是它应该充满了视觉张力，并以其独特的呈现来实现设计意图 智慧的优雅 引导我们走向一切创造性活动最佳解决方案的线索，是思维的终极目标 永恒性 探索客观价值，不追逐潮流，以恰当的方式反映内容 责任感 设计的结果应该能够独立存在，并且无需借口、解释、致歉 光 光塑造了一切「表现」 任意性 为了追求自由，以任意性抵制规则是错误的，而自由是有条件与界限的，反之则是混沌、任性、朝生暮死与肤浅的 语境 设计与被设计对象的终结目标之间的相互关系 影响 “影响”以深入且形成性的方式作用于思维，而“灵感”则偏向具有朝生暮死的本质 营销 获得市场成功需要愿景、勇气与决心，而不是市场调研与焦点族群的掣肘，好设计需要勇气 在有形因素部分，维涅里仔细阐述了平面设计和版式设计中的一些黄金规则，包括书籍网格的使用、字体尺寸、色彩、装订等等。他极力主张简化设计元素的复杂性，通过少量的样式传达出意义、平衡、优雅。 在人人喧嚣当中，沉默反而是会被关注的。空白空间提供了宁静——那就是我们版式设计的精髓。 相比无形部分，有形部分的规则多少让人觉得枯燥而没有新意。正是这种近似刻板的准则，让我们感受到维涅里对设计的「混乱」充满担忧。他将「随意」导致的复杂和混乱作为设计的大敌，热爱那些大道至简的底层规律。 对于「规则」，受限于历史、环境、载体、目的等，规则可能不再适用。但是对「什么是优雅的设计」规律的追求，所有设计师都应该永不停歇。 最后，用书中最后一段话作为结尾： 我爱系统，而藐视偶然的巧合。 我爱模糊性，因为在我看来模糊性意味着多重的含义；我爱矛盾，因为它使事物保持发展，能避免预设某种僵化的含义，也避免停滞与压迫。 正如同我爱处于变化中的事物那样，我也乐于看它们存在于一个参照系之中——这种关照方式始终如一地保证了我自始至终是负责每一处细节的那个人。 我爱设计，这就是原因。]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>设计</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DeepLearning-2 语言模型和 N-gram]]></title>
    <url>%2F170312-deeplearning-week1.html</url>
    <content type="text"><![CDATA[语言模式是自然语言处理的一个基础概念。我们可以从语料中得到「语言模型」—— 即句子的概率，可用于： 发现错别句子 发现新短语 生成句子（如模仿汪峰写歌） 机器怎样理解自然语言呢？有两种思路： 学习语法：词性、句子成分，但不能保证语义，如，火星追杀绿色的梦 概率统计：齐夫定律（词频 $\propto \frac{1}{rank}$ ：频率最高的单词出现的频率大约是出现频率第二位的单词的2倍，而出现频率第二位的单词则是出现频率第四位的单词的2倍），香农的信息论 概率论基本原理概率空间：所有可能的结果。概率中的原子结构是基本事件，不可分割，不重叠；分子结构是事件（基本事件的集合）。事件的概率，可以理解为所选取的基本事件在整个空间里占的面积比例。 联合概率 P(A,B)：两个事件同时发生，比如掷两次筛子，可能有 $6^2$ 种结果。 条件概率 P(B|A)：A 条件下 B 发生的概率。从一个大的空间进入到一个子空间（切片），计算在子空间中的占比。$P(B|A) = \frac{P(A,B)}{P(A)}$ 概率语言模型 计算句子的概率： $P(S) = P(w_1,w_2,w_3,…,w_n)$ 用处：句子错误检查、输入法候选、生成有用的句子等等 统计：随着空间膨胀，数据变稀疏，样本有效性降低 对句子做最简化的处理，先考虑只有两个词的句子，根据条件概率公式，它的概率等于第一个词的空间占比，乘以第一个词的概率空间中第二个词的占比：$P(w_1,w_2) = P(w_2|w_1)*P(w_1)$ 最初级的语言模型（Unigram），可以人为地假设词之间是独立的： $P(w_2|w_1) \approx P(w_2)$，于是这个句子的概率约等于两个词的频率相乘： $P(w_2,w_1) \approx P(w_1)*P(w_2)$ 如果把两个词的句子扩展为三个词：$P(w_1,w_2,w_3) = p(w_1,w_2)p(w_3|w_1,w_2) = p(w_1)p(w_2|w_1)*p(w_3|w_1,w_2)$ 以此类推： $P(w_1,w_2,…wn) = \prod{i} P(w_i|w_1w2…w{i-1})$ 这样做的话，对每个词要考虑它前面的所有词，这在实际中意义不大。可以做些简化吗？ 我们可以基于马尔科夫假设来做简化。 马尔科夫假设是指，每个词出现的概率只跟它前面的少数几个词有关。比如，二阶马尔科夫假设只考虑前面两个词，相应的语言模型是三元模型。引入了马尔科夫假设的语言模型，也可以叫做马尔科夫模型。 马尔可夫链（Markov chain）为狀態空間中经过从一个状态到另一个状态的转换的随机过程。该过程要求具备“无记忆”的性质：下一状态的概率分布只能由当前状态决定，在时间序列中它前面的事件均与之无关。 比如对上面公式做一个 i-k 的简化： $P(w_1,w_2,…wn) \approx \prod{i} P(wi|w{i-k}…w_{i-1})$ 物理意义上说，上面的公式意味着每次看到 i 时，只要关注 i 前面的 k 个词，这就是 N-gram 模型的思路。 作业作业 1：$P(w_1,w_2) = P(w_2|w_1)*P(w_1)$ 没有减少参数个数，为什么？ 作业 2：在自己选取的数据集合上建立 Bigram 模型，并使用该建立好的模型生成句子。 其他技巧：进入 docker 容器的 shell 环境 docker exec -it container_id /bin/bash Ref 齐夫定律 蒙特卡罗方法入门 - 阮一峰的网络日志 Language Modeling - Course notes for NLP by Michael Collins, Columbia University Language Modeling with Ngrams 4 - 1 - Introduction to N-grams- Stanford NLP - Professor Dan Jurafsky &amp; Chris Manning - YouTube 马尔可夫链 - Wikiwand sunoonlee 同学的笔记 DeepLearning101/zhatrix/DeepLearning101]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Deep learning</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DeepLearning-1：神经网络和 Docker 入门]]></title>
    <url>%2F170304-deeplearning-week0.html</url>
    <content type="text"><![CDATA[一、神经网络简介人工神经网络：在输入层和输出层中间加入多个隐层。 Top-down approach to AI ：西蒙为代表的符号学派 形式化方法，将知识表示为符号 运用逻辑进行推理 对自然语言、图像问题基本毫无办法 Bottom-up approach to AI：神经网络，从最底层（神经元）开始构建 神经网络的历史 40年代：概念雏形（没有学习算法） 50年代：可用的学习算法 - 感知机 1969年：Minsky 泼冷水 70年代：BP 算法，训练多层神经网络 90年代：SVM 支持向量机「打败」神经网络 2006：深层网络理论、实验上有所突破 2012：ImageNet，大幅提升结果（错误率 15.3%） 深度学习框架很多，不需要纠结使用哪种框架： Tensorflow：Google 开源主推，是最流行的框架，文档齐全。底层是 C++ ，如果对性能要求不高，用 Python 开发的效率更高 MXNet：亚马逊主推 Caffe：图形领域，自然语言处理稍弱 Torch：Facebook 主推 二、Docker 环境安装和配置Docker 是什么？容器化技术的实现，可以理解为一个轻量级的虚拟环境。 之前 00 被 Python 的版本和各种包虐过，所以折腾了 Virtualenv 的方法，一个项目新建一个 Python 环境。那么 Docker 跟 Virtualenv 的区别是什么呢？ Docker completely isolates the TensorFlow installation from pre-existing packages on your machine. The Docker container contains TensorFlow and all its dependencies. Docker 有一个 Image 的概念，可以理解为别人已经制作好的环境（类似安卓手机装机软件），把 Python + TensorFlow + Jupyter Notebook 打包好。 Docker 安装和配置步骤第一步：下载 Docker Community Edition for Mac安装。 用 docker version 可以查看版本： 1234567891011121314151617kidults-NMB:~ kidult$ docker versionClient: Version: 17.03.0-ce API version: 1.26 Go version: go1.7.5 Git commit: 60ccb22 Built: Thu Feb 23 10:40:59 2017 OS/Arch: darwin/amd64Server: Version: 17.03.0-ce API version: 1.26 (minimum version 1.12) Go version: go1.7.5 Git commit: 3a232c8 Built: Tue Feb 28 07:52:04 2017 OS/Arch: linux/amd64 Experimental: true 使用 Docker 时，命令行相当于客户端，服务器端在安装完成后需要启动。 第二步：到 Docker hub 找到 TensorFlow Image ，以此为模板构建自己的容器。参考 Using TensorFlow via Docker，用 run 命令加载 TensorFlow image： docker run -it -p 8888:8888 tensorflow/tensorflow 开始下载后，发现速度非常慢： 参考小伙伴的 Docker Hub Mirror加速Docker官方镜像下载 笔记，使用镜像下载。在 Mac 上配置加速器很简单，右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Advanced 标签下的 Registry mirrors 列表中加入镜像地址: http://d43d99f5.m.daocloud.io Copy，点击 Apply &amp; Restart 按钮使设置生效。 再次运行docker run -it -p 8888:8888 tensorflow/tensorflow，速度飞了起来~ 下载成功后，可以在浏览器看到 Jupyter Notebook 界面： Docker 常用命令 关闭 docker：control+c 查看运行状态：docker ps 把本地目录映射到容器：docker run -it -p 8888:8888 -v 原路径:目标路径 tensorflow/tensorflow 查看历史容器：docker ps -a 12345kidults-NMB:my_venv kidult$ docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESf4eaa7828ac5 tensorflow/tensorflow &quot;/run_jupyter.sh&quot; 7 minutes ago Up About a minute 6006/tcp, 0.0.0.0:8888-&gt;8888/tcp priceless_mccarthyb09563e0479b tensorflow/tensorflow &quot;/run_jupyter.sh&quot; 52 minutes ago Exited (0) 7 minutes ago silly_chandrasekhard669d764de48 tensorflow/tensorflow &quot;/run_jupyter.sh&quot; About an hour ago Exited (0) 52 minutes ago relaxed_davinci 恢复历史容器：docker start -i id (ID只需要写前几位) 删除容器：docker rm id 重命名容器：docker rename CONTAINER ID XXX(重命名为 dl) 在容器里安装包：!pip install xxx 参考 junjielizero 同学的笔记，优化了几个步骤： 创建跟 github 同步的容器： 1docker run -it -p 8888:8888 -v ~/Workspace/DeepLearning101/:/Workspace/DeepLearning101 -w /Workspace/DeepLearning101 tensorflow/tensorflow 给 docker 启动命令起别名 把课程容器改名为dl，然后新建别名 alias dsdl=&quot;docker start -i dl&quot; 在 iTerm2 运行 dsdl，按着 Command 点击链接 localhost:8888 即可打开项目 三、词频统计作业 统计 happiness.txt 的词频 思路：读取文件 → 用 jieba 分词 → 清除非中文字符 → 用 counter 计数 → 用 sorted 排序 读取文件 123loadfile = open('happiness.txt', 'r')text = loadfile.read().decode('utf-8')loadfile.close() 用 jieba 分词 1words = jieba.cut(text) 清除非中文字符 re.match(pattern, string, flags=0) If zero or more characters at the beginning of string match the regular expression pattern, return a corresponding MatchObject instance. Return None if the string does not match the pattern. 123for word in words: if re.match(u'([\u4e00-\u9fff]+)', word): segments.append(word) 用 Counter 计数，用 sorted 排序 Counter 用法 collections.Counter([iterable-or-mapping]) A Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values. sorted 用法 sorted(iterable[, cmp[, key[, reverse]]]) Return a new sorted list from the items in iterable. cmp specifies a custom comparison function of two arguments which should return a negative, zero or positive number depending on whether the first argument is considered smaller than, equal to, or larger than the second argument: cmp=lambda x,y: cmp(x.lower(), y.lower()). The default value is None. lambda 表达式用法 通常在需要一个函数但是又不想命名一个函数时使用，即匿名函数。比如实现一个可以求list中所有元素和的函数： 123from functools import reduce l = [1,2,3,5,-9,0,45,-99] reduce(lambda x,y:x+y,l) 在这里，用 Counter 统计字典中词的出现次数，以 lambda 取字典中的 value 值（key 是 x[0]，value 就是 x[1]）用 sorted 方法按降序排序： 1sorted_list = sorted(Counter(dict).items(), key=lambda x:x[1], reverse=True) 最后，完整的代码和结果如下： 123456789101112131415161718192021222324# -*- coding: utf-8 -*-import jieba # for splitingimport re # for regular expressionfrom collections import Counter # for stat# Read fileloadfile = open('happiness.txt', 'r')text = loadfile.read().decode('utf-8')loadfile.close()# Split words into a dictdict = []words = jieba.cut(text)for word in words: if re.match(u'([\u4e00-\u9fff]+)', word): dict.append(word)# Sort the listsorted_list = sorted(Counter(dict).items(), key=lambda x:x[1], reverse=True)# Print resultfor i in sorted_list[:10]: print " '%s' : %d " % (i[0], i[1]) 结果： &apos;的&apos; : 22848 &apos;是&apos; : 4123 &apos;在&apos; : 3538 &apos;他&apos; : 2522 &apos;了&apos; : 2288 &apos;人&apos; : 2089 &apos;他们&apos; : 1811 &apos;和&apos; : 1746 &apos;有&apos; : 1478 &apos;我&apos; : 1433 Ref Python开发生态环境简介 Installing TensorFlow on Mac OS X tensorflow/tensorflow - Docker Hub Using TensorFlow via Docker Docker学习笔记(2)–使用Docker Hub Mirror加速Docker官方镜像下载 配置 Docker 加速器 Speed Up Your Terminal Workflow with Command Aliases and .profile fxsjy/jieba: 结巴中文分词 Lambda 表达式有何用处？如何使用？]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Deep learning</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[17°读书会笔记[4]- 为真实的世界设计]]></title>
    <url>%2F170225-design-for-real-world.html</url>
    <content type="text"><![CDATA[如果所有的医生都抛弃了外科的普通实践，而专注于皮肤病、整形手术和美容，后果会怎样呢？设计职业的行为与此好有一比。 17° 读书会第 4 本书：为真实的世界设计 - Victor Papanek 阅读时间：2017-02-16 ~ 2017-02-25 读前问题 作者为什么要写这样一本书？ 设计观是什么？ 什么是设计的社会和道德责任？ 设计师应该更多关注什么问题？ 想为真实世界设计，怎么做？ 读后思考「为真实的世界设计」是帮助我塑造设计观的一本书。什么是设计观？我的理解是起码要回答四个基本问题： 什么是设计？为什么设计？为谁设计？什么是好设计？ 17°读书会的前三本书都在探讨设计的定义： Design is a relationship between form and content. —— Paul Rand 所谓设计，就是将人类生活或生存的意义，通过制作的过程予以解释。—— 原研哉 而我最喜欢 Papanek 在这本书中的定义： 设计是为了达成有意义的秩序而进行的有意识而又富于直觉的努力。 有意识意味着理智、思考、研究和分析。设计最根本的工作是改造人类的环境和工具，大而言之，就是改造人类自身。一个设计师能够带给其作品最重要的能力就是辨别、剖析、定义和解决问题的能力。 「有意义的秩序」比 Paul Rand 的「关系」更进一步，阐明了什么是理想的关系；相比原研哉多少有点艺术化的定义，更聚焦于设计的本质。为了认识那些总是在变化而又高度复杂的存在，我们常常试着通过寻找其内在的秩序解决。 除了设计的定义，这本书还讨论了为什么设计、为什么设计、什么是好的设计。书的主旨是，倡导设计师应该为世界上的大多数人设计，而不是为一个相对较小的国内市场设计。要为人的「需求」（needs）而不是「欲求」（wants）设计。作者立场鲜明地批判为了操纵视觉刺激而进行的设计。 虽然这本书写于上世纪 70 年代，但是在今天看来，令作者痛心疾首的问题依然存在甚至愈演愈烈，这本书也值得我们一再回顾。 什么是设计的社会和道德责任？通过设计，人类可以塑造产品、环境甚至是人类自身，所以设计师必需了解自己的行为对未来所产生的后果。 大多数工业设计师的哲学都建立在五个 Myth 的基础上： 大批量生产 废弃 大众「需要」 设计师没有支配权 质量不再重要 然而这些都是未经审视、作茧自缚的习得性现象。 这个时代，我们面对的问题是什么？每天的活动是什么，跟什么互动最多，受什么困扰？如果设计还停留在古典主义或者包豪斯或者 xx，那么当下的问题如何解决？工业设计起源于商品的大批量生产，它过去的理念和方法未必适应于今天。 为真实世界设计，也是为时代设计。 年迈的老人需要什么样的设计？孕妇和胖纸需要怎样的设计？全世界那些觉得被社会疏远而倍感孤独的年轻人需要什么？公路运输又需要什么样的设计呢？治病救人的医疗器械需要什么的设计？从事高级研究项目的人需要什么样精巧的装置？ 如果我们意识到设计师有足够的能力（通过影响人类所有的工具和环境）在大规模生产的基础上进行谋杀，我们也就会明白设计师身上巨大的道德和社会责任。所有的设计都是某种教育，设计师试图教育他的制造商客户和市场上的人。 一些新兴国家的设计师并没有像我们那样，把设计才能都用在为富人追求个人满足、为企业追求利润上，我们作为设计师的责任正在于此。 设计师应该更多关注什么问题？Papanek 从一个特别宏观的角度分析了人的根本「需求」： 人类探究自身的终结，意味着人类实现了其存在的所有潜能，意味着他们征服了人生的「局限三角」：一边是人类必须生存于其中的外部环境；其次是人类拥有的素质，或其适应能力，也就是借以存活之物；其三就是死亡的事实。所有的努力和抗争都是要解除这几点对我们的包围。 但是反观我们日常在做的设计，都在做些什么呢？ 我们已经生活在「用完即走」的即抛型消费文化中许多年，为了促使人们反复购买，消费品不再以历久弥新、设计精良为目标，反而越来越迎合更短的生命周期，设计出很多会迅速抛弃到垃圾箱里的用品。 想要解决这个问题，需要设计师们在设计过程中反复考虑，物品的价格是否体现了其短命的特征，以及这些物品被丢弃后会发生什么？ 从另外一个角度去思考，废弃的一个源头是不是「私有」？如果用「租借」替代「拥有」，废弃将大大减少。（作者在上世纪七十年代就看到了「共享经济」的未来~） 人的注意力都是极其有限的，设计师的注意力也是。设计师的工作一般已经被一种以市场为导向、为利润所驱使的体制规定好了。当我们为已经很富足的商品继续打磨它们宜人的外型、贴心的使用流程，也就少了一份精力去关注那些困扰更多人却没有人考虑、没有人动手去尝试的问题。很多问题虽然看起来很难，但真正的问题不是不可解决，而是没有人关注和开始思考。 当然，并不是所有问题都能通过设计解决。很多问题会因为设计的干预而变得简单一些。对设计师来说，这意味着一种新的角色，他不再是企业掌握的工具，而成为使用者的支持者。 作者提出一些被忽略的设计领域： 为第三世界设计 为智障者和残疾人设计教学和训练设备 为药品、外科、牙科和医院设备设计 为实验研究设计 为维持边缘状况下的人类生活而进行系统的设计（南极/海底/小行星） 为打破陈规而设计 那么，想为真实世界设计，怎么做？ 面包和理想都很重要。 设计师既不能完全被商业组织圈养，也不能幻想着改变世界。但是可以时常反思自己在设计中立场、思考的角度、解决的问题，是在为什么样的人群提供帮助。然后，抽出一定的时间和精力，动手去设计真实世界需要的解决方案。 1970 年，我倡议开展一场新的斗争。就像雷蒙德·罗维和其他设计师在 20 世纪 20~30 年代拜访潜在客户，向他们展示工业设计师能做什么意义。年轻的设计师可以到发展中国家，到门诊部和医院去跟人们说他能做什么。拿出自己 1/10 的时间或者 1/10 的收入，去解决一些因贫穷所需要解决的问题，去帮助那 75% 的需要它的人，在这段时间里不为钱而设计。 也许到医院去推销设计师能力不一定现实，但是每周用 1~2 个小时去思考和改进给老年人使用的工具，比如眼镜、厨具、药瓶，是我们可以开始尝试的事情。 你还想到哪些为真实世界设计的倡议呢？欢迎留言~]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>Reading</tag>
        <tag>设计师</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[17°读书会笔记[3]-设计中的设计]]></title>
    <url>%2F170127-design-in-design.html</url>
    <content type="text"><![CDATA[17° 读书会第 3 本书：设计中的设计 - 原研哉 阅读时间：2017-01-15 ~ 2017-01-26 读前问题 原研哉对设计的理解是什么？跟 Paul Rand 的定义有什么异同？ 「信息建筑」的思维方式是什么？ 无印良品的设计哲学是什么？设计和生活的关系是什么？ 东西方对设计的理解有什么异同？日本的设计理念有什么独特之处？ 设计师如何培养感觉能力和洞察力？ 设计的元问题原研哉是日本中生代国际级平面设计大师、日本设计中心的董事、无印良品艺术总监。作为从业二十多年并且具有世界影响力的设计师，原研哉一直在尝试回答「设计到底是什么」这个问题，又或者说：如何设计「设计」？ 要回答「设计是什么」，可以先尝试从设计的起源和发展过程中寻找答案。 设计产生于二十世纪初工业化这个大时代背景，并且很好地融入到商品生产过程中。为了补偿机器生产粗制滥造对传统美感的践踏、对生活品质的侵袭，人们呼唤适应时代的审美和物品。现代设计的概念由此诞生。包豪斯引发的设计运动，在工业化大生产的基础上，以实现功能为目的，努力寻求设计的造型，可以视为现代设计的发端。 日本、美国、欧洲各自历史背景不同，经济发展轨迹不同，因此设计在社会中所产生的机能也很不一样。但是二十世纪后半叶，主要动力来源都是经济。设计在产业社会中不可或缺。当技术取得进步，为生产和交流提供出新的可能性时，设计总会担当起探索最佳答案的角色。 谈及艺术与设计的区别，原研哉认为区分它们并没有多大的实际意义。艺术是艺术家在面对社会时的意志表达，其发生的根本立足点是作为个体的个人。而设计基本上没有自我表现的动机，其落脚点更侧重于社会。解决社会上多数人共同面临的问题，是设计的本质。在问题解决过程——也是设计过程中产生的那种人类能够共同感受到的价值观或精神，以及由此引发的感动，就是设计最有魅力的地方。 在原研哉的设计世界中，设计跟生活紧密关联。他认为设计绝不仅仅是制造技术，设计是从生活中发现新问题的行为。创意并不是要让人惊异它崭新的形式和素材，而应该让人惊异于它居然来自看似平凡的日常生活。不断开发出这些创意才是真正的设计。 所谓设计，就是将人类生活或生存的意义，通过制作的过程予以解释。 这个定义回归到设计的意义，敦促设计师们去思考更为底层的问题，并且反应在设计的过程和结果之中。 17°的第一本书是 Paul Rand 的「设计是什么」，他对设计展现出一种「思辨」式的思考：应该是什么，不应该是什么。而日本的设计大师们更多是在进行「探询和阐释」，比如原研哉用设计解释生活的意义，比如黑川雅之用设计「提问和告白」（见「设计修辞法」一书）。Paul Rand 认为设计的定义应该指向行动，设计是「处理关系」，原研哉则劝诫设计师们把设计指向生活意义的阐释，从看似平凡之处深思出新意，动态地去回答「人与生活」的关系的问题。 反思我们的工作，大部分时间并没有真正在做「设计」。我们不愿花时间多想问题到底是什么，处理这个问题的意义何在，只是急匆匆地把常见的样式搬过来搬过去，拼凑出一个自欺自人的样子，然后继续心安理得地戴着「设计师」的帽子自鸣得意。 用构建信息建筑的思维方式做设计在设计实践中，原研哉试图建立一种信息建筑的思维方式，让平面设计不仅能作用于人的视觉，而且能够触动人的所有感官。 设计传达并非仅发生在一个二维平面中，而应该像一个建筑，有不同的层次和功能区划，叠加在一起形成有机的空间，对人的感受和行为形成影响。设计师在设计中要组合各种信息，建筑一个信息集合体。 所谓印象，就是通过感觉器官接受外部刺激，并把这些刺激和人脑中原有的记忆组合、联系而生成的结果。设计行为，则是以这种组合而成的印象为前提，并且有意识地干预这一组合过程的行为。我们把这一过程称为「信息的构筑」—— 有目的、有计划地去干预印象的生成过程。 日本文化向来对「感觉」异常重视。通过营造纯粹而富有仪式感的环境，释放感官的潜力，敏感地捕捉到纤细甚至稍纵即逝的感觉，从而完成与生命的对话。在文学修辞领域，佐藤信夫提出「修辞立其感」的理念，如何用文字唤起人们的「感觉」。在设计领域，原研哉则提到用综合的感官刺激构筑人们的「印象」。 品牌的灵魂从何而来？原研哉是无印良品艺术总监，书中用了一个完整的章节介绍他对无印良品品牌的思考和实践。 无印良品品牌创立于 1980 年，受极简主义审美意识的影响，商品造型简单、朴素且价格适中，给人感觉新鲜而且纯粹。它的商品群就是一个优雅而质朴的生活提案，提出了一种符合都市新生代人群的生活方式。 相比无印良品的品牌发展，我更好奇的是，一个品牌的灵魂如何形成？从原研哉对无印良品理念的阐释，我们可以看到，仅仅给出「极简」、「干净凝练」这种感官层面、结果层面的词汇，无法让物品拥有一种集体的灵魂。 品牌感觉需要「生长」，而不是披上一件另外制作的外套。给出这个核心生长点也许就是最难的「设计」。一个有生命力的生长点，应该源自一个更为宏大的问题，是时代和环境对人的发问，这个问题埋藏在很多人的内心却不自知。对于一个生活物品的品牌而言，这个问题可能是「我对生活的向往是什么？」「这个时代需要什么样的生活态度？」「什么样的物品是人和生活环境互动时最好的载体？」 无印良品的理想，是生产出来的商品一旦被消费者接触到，就能触发出一种新的生活意识，这种生活意识最终启发人们去追求更为完美的生活样式。 在回答这些问题时，无印良品洞察到，大部分的商品都在引导消费者形成「这个就好」「非它不可」的观念，不断激发人们追寻一些其实并不必要的东西：更多、更物化、更有存在感、更狭隘的忠诚…… 所以无印良品提出要给消费者一种「这样就好」的满足感，看似弱化了自我意识，但也许更接近真正的自由。 原研哉对无印良品的概念提案是「虚无」（Emptiness）。但是虚无并不意味着空无一物，而是再提升了一个层次，用虚无的包容，呈现出一个看似空无一物，却能容纳百川的容器。商品不是生活的主角，它更加应该扮演承载人与生活意义的载体这种角色。 形式追随哲学看「设计中的设计」，跟看「A Designer’s Art」的感受完全不一样。 西方的设计，问题发端来自社会变革，人与时代的矛盾。设计更偏理性，规律和真理永远是题中之意。 东方的设计师，则用非常纤细的感受，去捕捉那些隐藏生活日常背后的宏大问题。在日本文化中，相比自然，人是渺小的存在。问题发端来自人与环境的矛盾。因此更需要回归人的尺度，去不断思考人和周遭环境的关系，短暂而变幻莫测的人生以及它在生活中种种映射的关系。 也许，从某种程度而言，形式追随的并不是内容，不是功能，而是对核心问题的探索和回答。有什么样的价值观，就会思考什么样的问题，得出什么样的哲学理念，最终反映在人的言行中，凝练在物品和容器的塑造中。 设计师如何培养感觉能力和洞察力？在原研哉看来，设计不是一种技能，而是捕捉事物本质的感觉能力和洞察力。 给一件事物下定义或用文字记述下来并不见得就是对其有所了解。如果能够先将已知的事物陌生化，然后再尝试挑战其真实性，才有可能深入了解它。 我们观看世界的视角与感受世界的方法可能有千万种，只要能够下意识地将这些角度和感受方法运用到日常生活中，就是设计。 设计师的核心能力，首先不是视觉表达能力，而是发现事物间原本已经存在、但是被视而不见的「新」关系。 2000 年，原研哉策划了一个叫做「 Re-design 二十一世纪的日常用品再设计」的展览，收集了三十二名来自日本的设计者，对日常用品比如卫生纸或火柴进行重新设计的提案。原研哉希望通过这个展览，为大家展示设计的魅力，唤起对生活的重新思考。设计师们从生活日常的一个小小物品，回溯到原点，重新审视我们周围的设计，以最平易近人的方式来探索设计的本质。从无到有，当然是创造；但将已知的事物陌生化，更是一种创造。 佐藤雅彦与出入境章 面出薰与火柴 深泽直人与茶包 展览中的作品不但从创意上让人拍案叫绝，更令人感动的是，设计师把对平凡物品的细致入微的观察，转换为一次对人的需要的深刻体察，对人和环境、人和物品关系之间的一次重构。 怎样培养这种敏锐的感觉和洞察？书里并没有太多着墨，不过原研哉已经阐述了很多他对设计的理解，我尝试归纳为以下几点： 做生活的观察者和提问者人与生活的关系，几乎体现在每一个物品上。每时每刻我们都有数不清的机会去感受、发现和思考。开门时门把手的触感和握感，起居室透过窗帘形成的光影，饭碗捧在手里传递的温度，打扫卫生时抹布够不着角落的费力感觉…… 每当我们意识到应该重新思考人与物品的关系，能够问出一个又一个被当做理所当然的问题，也许就能更清楚了解自己向往一种怎样的生活状态。 发现那些视而不见的连接宋代禅宗大师青原行思提出参禅的三重境界： 参禅之初，看山是山，看水是水；禅有悟时，看山不是山，看水不是水；禅中彻悟，看山仍然山，看水仍然是水。 设计的思考和实践，大概也是这么一个过程吧。在 Re-design 展中，很多日常物品在设计师的手中「互换灵魂」，带给我们新的感动。设计师如果能解析出不同物品的灵魂，并且富有诗意地促成它们的交错、融合，生活该是多有乐趣和惊喜的游乐园。 从信息平面到信息建筑如果设计总是局限在一个狭小平面，设计师的目光也会越来越狭窄。让我们回到「干预印象的生成过程」这一本质，将设计活动的隐喻变为「构筑信息和行为空间」，从人的「五感」出发，思考应该如何构建一个丰富的「建筑空间」，能够充分调动人的感官，实现信息和意义的传达。 最后17°读书会第一个月的主题是「重新思考设计」。读完东西方两位设计大师对设计的解读，深感自己对设计理解依然浅薄。 设计是什么？ 路途遥远，希望大家带着这个问题一路前行。]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>Reading</tag>
        <tag>设计师</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[17°读书会笔记[2]-A Designer's Art]]></title>
    <url>%2F170119-a-designers-art.html</url>
    <content type="text"><![CDATA[17° 读书会第 2 本书：Paul Rand: A Designer’s Art 阅读时间：2017-01-05 ~ 2017-01-12 读前问题 「设计是什么」提及的话题，有哪些在这本书做了更深入的探讨？ 设计和装饰的关系是？和艺术的关系是？ 「好看」和「有用」的关系是？它们矛盾吗？ 应该如何处理形式和内容的关系？ 设计师应该解决什么问题？ 设计师应该具备哪些能力？如何锻炼？ 读后思考为什么设计是处理关系？Paul Rand 在「设计是什么」中，提出他对设计的定义： 设计是处理关系，好的设计处理内容和形式之间的矛盾。 为什么他会提出这个定义呢？「A Designer’s Art」更详细的阐述了他的设计理念。 平面设计师通过词语、图像等创造新想法，主要解决视觉传达的问题。如何解决呢？他们组织原本没有联系的需求、想法、词汇、图像，从而产生出意义。设计师的工作，就是选择相互协调的元素，并且让他们变得有趣。 在平面设计中，元素的同质性很高，且容易区分。可以想象，在设计师的创作过程中，需要不断变换元素组合以产生各式各样的新结果 —— 关系变了，意义也会跟着改变。 我试着从「秩序」的角度理解「关系」。 无序意味着没有线索和结构。有序是一种贡献，通过一己之力找到了不同部分的关系，贡献了连接不同模块的「秩序」。要做到连接，意味着不能只局限在某个模块内，而是要成为连接器。 设计关乎新观念、新意义的创作和表达（尤其是平面设计），所以设计更多聚焦于概念，而不是制造。相比起一个瓶子是怎么制造出来的，设计师更关注要制造什么样的瓶子。 设计和装饰、和艺术的区别是什么呢？装饰并不一定是设计，它有可能只是简单叠加元素，而没有更深度地整合内容和形式。艺术更注重表达，去除功利性质的表达，是为想法理念找到最佳的形式；而设计更强调要去调和内容和形式之间的冲突，让两者合而为一。 形式和功能 Ideals ought to aim at the transformation of reality. – William James 在设计中，形式和功能相结合，是一个整体而不是分离的目标。如何既好看又有用，本身就是设计所追求的结果。设计师的能力正体现在此：在给定的空间内游刃有余地操控不同要素。这里说的空间，可能包括广告、书籍、包装、产品、标识、电视广告等等。 如果我们割裂形式和功能、概念和执行，就不可能创造出真正美的物品。 从这里延伸出一些我比较感兴趣的问题： 当人们追求功能以外的美感时，他们在追求什么？ 为什么美感会重要？美学到底在多大程度上有意义？ 当有用尚且难达到的时候，应该多大程度上追求和坚持好看？ 追求好看是否不经济？好看和好用真的矛盾吗？ 当一个物品不再是平面，而是一个复杂产品甚至系统，该怎么做？ 是否可以参考建筑设计？为什么我们在建筑上发展出那么多形式和表现？ 以上的问题，书中并不一定给出答案，但是能启发自己问出好的问题，这也是读书的额外收获吧。 设计师应该解决什么问题？设计师并不只是简单地调整元素，而是要体验、感知、分析、组织、符号化、综合。 设计师不但要观察、反复思考，还要了解所在领域技术的进展，他创造发明出新的方法和技艺，探索材料的可能性。 设计师主要会面对三类材料： 规定的： 产品、副本、标语、logo、格式、媒体、生产过程 形式的： 空间、对比、比例、和谐、韵律、重复、线条、重量、形状、颜色、质量、体积、数量、材质 心理的： 视觉感知和视错觉，受众和设计师自身的本能、直觉和情感 但是以上材料经常是模糊、缺乏、无趣、不便于视觉解读，于是设计师首先要做的工作是：重新叙述和定义问题。 如果没有做好这一步，设计师可能会产出无趣的设计，更具体的说： 用平庸无奇的表现方式，解读和表现陈腔滥调的观念 没有协调好形式和内容 没有正确解释特定空间内的问题 The problem of the artist is to defamiliarize the ordinary. – Paul Rand 艺术家要剥去陈腐、平庸、无趣的外衣，为创作赋予勃勃生机。 这也是设计师应有的追求。 设计的语言和可能性在书中，Paul 探讨了多种设计的「语言」：符号，条纹，重复，颜色，拼贴和蒙太奇。 某种程度上，做出好的设计，跟讲出优美的语言有相似之处。我们学习语言的单位——词汇、短语，我们学习语言的规律——语法，然后依据规律把语言单位串联成富含意义的句子、段落和篇章。在平面设计中，我们试验形状、样式、颜色等等，依据视觉的规律把元素拼接成富含意义的组合或者图像。 那么在其他设计领域中，「语言」又是由哪些要素组成呢？在建筑设计中，有城镇、邻里、住宅、花园和房间等模式；在界面交互中，有对话框、输入框、按钮、滚动条等模式。了解基本的「词汇」后，还需要理解如何组织它们——也就是，找到元素和元素之间的最佳「关系」。可能性既产生于新的「词汇」，也产生于新的「语法」，在不同的语境下，还会交错出新的意义。 在这本书中，探讨了一些平面设计的模式，但是在今天看来，总让人感觉有些单薄。也许我们可以从其他设计师、其他设计领域继续探索这个话题： 好设计的造型元素 形式综合论 建筑模式语言（上下）]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>Reading</tag>
        <tag>设计师</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[17°读书会笔记[1]-设计是什么]]></title>
    <url>%2F170105-read-what-is-design.html</url>
    <content type="text"><![CDATA[17° 读书会第一本书：设计是什么 - Michael Kroeger 阅读时间：2017-01-01 读前问题 Paul Rand 是怎么理解设计的？ 他为什么会这样理解设计？ 这对他的作品和经历可能产生了什么样的影响？ 对比自己之前对设计的理解，跟他差在哪里？ 他对设计新人提出了哪些建议？为什么？ 哪些建议对我来说很有启发？ 改变了过去什么样的观点？可以怎么应用？ 从刻意练习的角度出发，如何从 Paul Rand 身上学习？ 读后思考Paul Rand 保罗·兰德（1914-1996），美国最杰出的商标设计师、思想家及设计教育家，他为 IBM、ABC、UPS 所设计的商标无人不识，堪称经典，乔布斯称他为史上最伟大的平面设计师。 设计是什么？Paul Rand 在多次与同行、学生的交谈中，阐述了他对设计的理解。 Design is a relationship between form and content. 设计是形式和内容的关系表达。内容就是想法，形式就是你如何处理想法，你怎么做它。该用颜色？或用黑白？大一点？小一点？三维还是平面？用时髦流行或是严肃的素材？ 设计就是关系 （Design is relationships）。设计是一个关系系统。这里的关系涵盖了一个问题的所有面向，包括你和画布间的关系，你和美工刀、橡皮擦或绘图笔的关系，还有设计元素之间的关系。设计也是一种比例系统，指的是尺度大小之间的关系。 这就是做设计的起点。你得去建立一种关系，必须以某种方式和某件事情产生关联，好让你从中得到某个线索。每样东西都有关联，这永远是问题所在。在你把某样东西摆下去的那一刻，你就创造了一种关系。这类关系没有止境，这正是设计很难臻于完美的原因之一。因为你做的每一项动作，都有无穷无尽的犯错可能。 Paul 对设计的定义体现了一位平面设计师的特质。作为一名平面设计师，内容总是设计的核心对象。平面设计重在处理平面系统内多种要素的关系：属性关系、比例关系、距离关系等等。出现在平面内的任何要素之间，会衍生出交错的关系，如何处理这些关系，是优秀作品的关键。 这种思路，如果迁移到其他设计领域，是否适用？ 如果把平面这个载体换成用户界面，会发现平面增多了，在不同场景和时间点上，有不同的「平面」，需要处理更多元素之间的「关系」，而且，还要处理使用者和元素之间的关系 —— 因为元素不再是静止不变的，它们很可能由使用者的行为触发，根据使用者的行为和选择呈现不同的形式。 在这个前提下，设计是关系的定义依然起作用。但是，它更为复杂了，既需要应对随时变化的情境，又需要处理更多维、更多元素之间复杂交错的关系。按照 Paul 的定义，设计师越来越难应对问题的复杂程度，或者说，难以满足交互的特性。 好的定义为什么重要回想以前自己对设计的定义，跟书中提到的「设计是一项计划」类似。Paul 批评这种定义缺乏行动的指向性。定义必需可以把你带向某处，它必需能激发某种东西。 得到定义并不难，我们可以使用很多种不同的描述。不过，每件事情都是相对的，某人觉得湿的东西，对其他人来说或许是干的。如果仅仅阐述，或者做一些同义反复的文字游戏，意义何在？真正有意义的定义，是提供一个新的框架，赋予系统内的要素一种有机、有意义的关系，并且能够触发行动 —— 不仅提供理解，而且知道下一步应该往哪个方向做点什么。 设计不止是一种态度，它应该创造出一些新的秩序。在 Paul 看来，甚至艺术也不仅仅是表达。他很认同 John Dewey 对艺术即体验的理解，我们不应该把艺术从它应该在（或产生）的地方隔离开来，艺术应该在卧室里、厨房里，而不是只在美术馆里。 美学和设计是同样的东西。美学是设计的研究，是关系的研究。 让自己有所作为，去解释和理解你正在做的事，而不是光读书。 在 Paul 的基础上，我尝试把「行为」也纳入到设计需要处理的要素当中。更进一步，在更为宏观或者说模糊的设计语境下，我认为设计不仅是关系的表达，而且是一种求解过程。面对越来越复杂的系统，我们之所以要提前做出设计，是因为想找出在当前情境，也就是在各种要素的关系和限制之下，问题的最优解是什么，并且把它呈现出来。 基于以上，这个阶段我对设计的理解是： 设计表达内容、形式、行为之间的关系，解决它们之间的冲突，是找到和实施当前最优解的过程。 于是，对我而言，设计是问题的求解过程。 给初学者的建议Paul 给设计新人最重要的建议是：思考。 在谈话录中，他提出一个又一个犀利的问题，把回答者步步推向更接近问题核心的地方。 思考是设计过程中的第一要务。去思考要解决的问题，而不是设计本身。设计是思维的产物。 Paul 对当时的设计教育表示不满，因为教育者并没有引导学生思考更为本质的问题。学生必须知道他们到底在做什么。 提及工具问题，Paul 认为，会用电脑，会操作所有系统和软件，这和你身为设计师，了解自己正在做什么这个问题比起来，根本微不足道。学设计时，最需要的是清晰的头脑和清晰的思路。 从问题开始，忘了问题，让问题自己浮现或让解决方案自己浮现，然后重新加以评估。这就是设计的过程，或者说，创意的过程。 一旦真正思考到问题的本质，我们就会发现，设计没有过时的问题。 如何持续练习，做出改变Paul 的这些建议，我们可以怎样运用呢？ 关于学习和思考 学习任何一个领域，先思考本质问题，找到一个可以指向行动的定义 用步步逼近的问题引导自己思考 关于做出好的设计 一开始就把设计看成系统，不仅包括设计的对象和元素，还包括使用者、载体和设计工具 抽象出系统的要素，仔细思考它们之间的关系，识别冲突和矛盾 要逐渐形成自己对「最优」关系的理解和判断 不要沉迷于工具，先搞清楚自己在做什么，问题是什么 多多实践 Paul 提到的设计过程：提问-酝酿-解答-评估 多多思考那些不会因为时间和空间而改变的问题，因为那才是设计的本质问题 最后，用 Paul 的一句警示作为结尾，提醒自己，作为一名设计师应该有的责任和追求： 重点不是离开，重点是待在里面而且把事情做对。人会想要离开，是因为他们待在里面的时候不知道自己在做什么。]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>Reading</tag>
        <tag>设计师</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[菜鸟数据科学入门02 - IPython 基础]]></title>
    <url>%2F170103-ipython-basic.html</url>
    <content type="text"><![CDATA[一、为什么要用 IPython？IPython (Interactive Python 的简写) 是一个强大的交互式 Python Shell，由 Fernando Perez 在 2001 发起。它的目标是提供 “Tools for the entire life cycle of research computing.” 如果说 Python 是数据科学操作的引擎，那么 IPython 就是交互式的控制面板。 IPython 的优点： 交互式和批处理功能 提高编写、测试速度，执行结果立即可见，方便调试 同时保存脚本和计算过程，可重复可互动 丰富的数据可视化工具 能在本地计算机上对远程服务器中的数据进行分析 兼容 markdown 语法，满足数据分析、课程教学、博客写作等需求 Python Scientific Ecosystem IPython 只是为 NumPy、Scipy、Pandas、Matplotlib 等包提供一个交互式接口。其本身并不提供科学计算的功能。这些工具组合在一起，形成了可以匹敌如 Matlab、Mathmatic 这些复杂工具的科学计算框架。 二、Shell or Notebook?使用 IPython 有两种方式（前提是已经安装好 IPython）。 在命令行中使用在命令行中输入 ipython，进入 IPython 环境： 12345678910Python 2.7.10 (default, Jul 30 2016, 19:40:32)Type &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.IPython 5.1.0 -- An enhanced Interactive Python.? -&gt; Introduction and overview of IPython&apos;s features.%quickref -&gt; Quick reference.help -&gt; Python&apos;s own help system.object? -&gt; Details about &apos;object&apos;, use &apos;object??&apos; for extra details.In [1]: 在 Jupyter Notebook 中使用Jupyter Notebook 是基于浏览器的 IPython shell 图形界面，非常适合用于开发、协同、分享甚至是发布数据科学研究成果。Notebook 以 JSON 格式保存整个交互式会话，可以兼容 Python 代码，文本标记语言如 Markdown，图片，视频，媒体内容等。 IPython Notebook 在 Python 社区中越来越普遍，特别是在科学研究与教育领域，很多课程/博客/书籍都是用 Notebook 写的。 安装 Jupyter 后，在命令行输入 jupyter notebook，进入 IPython 环境 1234[I 15:28:38.305 NotebookApp] Serving notebooks from local directory: /Users/kidult/Workspace/PresentWrok/OpenMind/2016.OM.DS/my_venv[I 15:28:38.305 NotebookApp] 0 active kernels[I 15:28:38.305 NotebookApp] The Jupyter Notebook is running at: http://localhost:8888/[I 15:28:38.305 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation). 浏览器会打开本地的 Jupyter 控制台，新建或选择 .ipynb 后缀文件打开，就可以看到 Notebook 的页面了： 三、Notebook 基本结构和操作在 Jupyter Notebook 中，基本的操作单元是 cell： 每个 cell 由 In和Out，即输入和输出部分组成。在这里，IPython 实际上生成了名叫 In和Out 的 Python 变量，把操作历史存储起来，以便随时调用。_可调用上一个输出，_X可调用 Out[X] 的输出。 IPython 中的 cell 支持 Markdown 格式，所以很适合用来生成带源码和运行结果的文档。 Notebook 中常用操作 命令模式 (按 Esc 键进入) 键盘 命令 操作 ↩ 回车 进入编辑模式 ⇧↩ shift+回车 运行 cell，选择下一个 cell M M 键 切换为 Markdown 格式 A A 键 在上方插入 cell B B 键 在下方插入 cell D,D 按两次 D 键 删除所选 cell H H 键 显示快捷键 编辑模式 (按 Enter 键进入) 键盘 命令 操作 ⌘] command + ] 缩进 ⌘[ command + ] 取消缩进 ⌘Z command + Z 撤销 ⌘⇧Z command + shift + Z 重做 ⌘↑ command + up 键 跳到 cell 开头 ⌘↓ command + down 键 跳到 cell 结尾 四、实用功能Tab自动补全在输入命令时按下 tab 键，可以查看补全选项： 用 ? 查询文档比如，要查询 len 的用法，只需要输入 len? 123456789In [2]: len?Type: builtin_function_or_methodString form: &lt;built-in function len&gt;Namespace: Python builtinDocstring:len(object) -&gt; integerReturn the number of items of a sequence or mapping. 另外，用 ?? 可以查看源代码，比如输入square?? 123456789In [8]: square??Type: functionString form: &lt;function square at 0x103713cb0&gt;Definition: square(a)Source:def square(a): &quot;Return the square of a&quot; return a ** 2 魔法命令通过%lsmagic即可查看，以下为部分命令： 命令 命令说明 %hist 查询输入的历史 %reset 清空 namespace %time 显示 Python语句的执行时间，包括 cpu time 和 wall clock time %timeit 显示 Python语句的执行时间，但是这个命令会多次执行相应的语句（可以指定次数）%timeit %bookmark 用于存储常用路径 %cd 进入目录命令 %env 显示系统环境变量 %pushd dir 将当前目录入栈，并进入dir指定的目录 参考资料 Python Data Science Handbook IPython.org 学习IPython进行交互式编程和数据可视化 使用IPython有哪些好处？ - 知乎 为什么要使用IPython？ - 简书]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data Science</tag>
        <tag>IPython</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[菜鸟数据科学入门01 - 工具包概略]]></title>
    <url>%2F170101-data-science-toolkit.html</url>
    <content type="text"><![CDATA[数据科学是什么？为什么要学习数据科学？ 来不及解释了，先上车 -。- 开车之前，为接下来的系列文章做准备，先来罗列一下 Python 科学计算生态中常见的工具包。 IPythonIPython 为 NumPy、SciPy、Pandas、Matplotlib 等包提供一个交互式接口，它本身并不提供科学计算的功能。这些工具组合在一起，形成了可以匹敌如 Matlab、Mathmatic 这些复杂工具的科学计算框架。 不同的工具包，在数据分析的不同阶段各显神通： NumPyNumPy 主要提供基础的数组数据结构和矩阵运算。 快速高效的多维数组对象 可执行向量化计算 提供线性代数等矩阵 可集成 C 代码 SciPy基于 NumPy 提供了大量的科学计算算法（信号处理、最优化求解等等），解决标准问题。 数值积分和微分方程求解 扩展的矩阵计算功能 最优化工具 概率分布计算和统计函数 信号处理函数 Pandas提供 data frames 数据结构，便于处理真实数据集。 易用、高效的数据操作函数库 执行 join 以及其他 SQL 类似的功能来重塑数据 提供包括 dataframe 在内的数据结构 支持各种格式（包括数据库）输入输出 支持时间序列 Matplotlib擅长数据绘图，绘制交互式可视化图像。 提供一套和 matlab 相似的命令 API 十分适合交互式绘图 可以作为绘图控件嵌入 GUI 其他常用工具包 Seaborn：统计绘图 StatsModels：统计模型 scikit-learn：机器学习 建立在 NumPy，SciPy 基础上 通过统一接口来使用，可以迅速在数据集上实现流行的算法 包含许多用于标准机器学习任务的工具，如：聚类、分类和回归等 Requests：网页数据抓取 Beautiful Soup：解析网页数据 Flask：轻量级的 web 框架 sqlite3：轻量级数据库接口 Pyspark： Spark 的 Python 接口 nltk：自然语言处理 networkx：社交网络分析 theano：深度学习]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>Python</tag>
        <tag>Data Science</tag>
        <tag>可视化</tag>
        <tag>Visualization</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hack myself @ 2016]]></title>
    <url>%2F2016summary.html</url>
    <content type="text"><![CDATA[又到了年底交卷的时候。 今年基本上就干了两件事：创业+创客 创业 媒体和创业者们可能过分地标签化和戏剧化创业这件事了，其实对每个人来说，是完全不同的经历。 在预期之内的是，有太多的第一次。跟安稳打工的节奏相比，确实有不少新收获： 开始理解商业，理解做生意的本质是价值生产+资源配置 知道一个公司基本的运作方式，更全面地接触到产品运营、生产和销售各个环节 强化了行业的视角和内外部资源整合的意识 明白从 0 到 1 需要思考和做的事情跟以前不一样 音视频剪辑、公众号运营、IAP 踩坑、行政后勤等等技能 get√ 虽然，这些收获并不意味着成功。每天都需要做很多判断和决策，然而最难的是分辨出（甚至是能否意识到）到底什么最重要，毕竟创业的本质是用极少的资源，搭建出可以自行运转的系统。 在预期之外的是，创业提供了一个特别好的审视自己的机会： 到底更看重什么，只是嘴上说说的都不叫价值观，身体力行的才算 擅长什么，不擅长什么，在逃避什么，需要补什么 跟别人合作的方式是什么，存在什么问题 思考的习惯是什么，应该如何改进 创客 Mini SoundBot - Youtube 参加 MIT Fab Academy 的血泪史就不多说了，已经用一系列文章记录下来。 完成课程后最明显的变化，是每当看到一般的实体商品，基本上都有大致的思路知道该怎么把它做出来。 其他痕迹 原公众号改名为「HackYourself」，提升产出质量，一年原创文章 43 篇 新开公众号「你丫全栈」，完成产品经理的用研手册系列，一个月拿到原创 改进学习方法和工具，积累 160 张卡片 读书 50 本，维持正常水平 主题与问题最近常常回想起 2011 年，人生中最煎熬的一年。 以前总觉得这一年过得很灰暗：入行不到三年，在三个城市孤独奔波，在三个岗位之间摇摆不定，良师益友各奔东西，前所未有地无法认同自己，身体也变得很差。 而最近突然发现，其实那是被厚待的一年：慢慢找到喜欢做的事情，遇到了这十年（也许是五十年）最牵挂的人。也许就是因为还没有做好准备，老天才安排一次特别的经历，提醒我去正视问题，重新开始。 于是 2012 年的主题是灾后重建。往后每年都有主题，2013 年是设计，2014 年是团队，2015 年是跨界。 每一年，都有一些收获。去年开始尝试留下更多的作品。而今年则开始提出问题，让问题牵引注意力，激发思考。 跟能量一样，注意力也是趋向涣散的。寻找了很久，终于找到把注意力从无序变得有序的线索 —— 问题，或者有趣或者重要或者折磨人的问题。 新年「计划」详细的新年计划是注定要落空的，时间管理总是自欺欺人的，目标管理精力管理关系管理也都是治标不治本。它们通通都犯了一个错误：妄图在下游治理污染。 真正的污染源，在上游。它就是注意力。 不加选择的知识冲动就像不分对象的性冲动一样，都是下流的标识。—— 尼采 管好注意力，才是开源节流的正道。如何管好注意力？靠意志力没有用，靠工具也很难，基本上，用「管理」、「制止」、「解决问题」的思路，都不太行得通。得用「生长」的思路，给注意力一条藤蔓，让它自己缠绕和自我增强。这条藤蔓，就是 —— 问题。 在复杂性占据主导地位的市场中，计划经济注定要失败。在信息过载的时代，系统而精确的学习计划注定要失败。 告别新年计划，我只留给自己两个年度关键词，两个年度「问题」，并且在接下来的 365 天，不断重复问自己是否正在积极寻找解答。 2017 年，00 的两个关键词是：心理学和极客。 明年今日，携作品见。]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>2016</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品经理的用研手册10 - 沟通的秘密武器]]></title>
    <url>%2Fpm-ur-handbook10.html</url>
    <content type="text"><![CDATA[在本系列开篇时，我们提到产品经理的两大核心工作：决策和沟通。 在详细讲解了用户研究如何帮助产品经理做决策、应该具有什么样的理念、有什么具体的方法之后，我们来聊聊用户研究如何帮助产品经理进行沟通。 产品经理的日常沟通包括： 向上沟通：沟通战略、目标、决策，汇报进度、效果等 项目团队沟通：规划和实施解决方案，调配资源，解决问题，推进进度 与用户沟通：获得反馈，提供服务，维护关系 与合作方沟通：合作，谈判，互通有无 如果这些沟通中涉及到「用户」，可以怎样做？ 向上沟通如果跟老板沟通用户相关的话题时，需要注意什么？先来看两个（令老板）忧桑的对话： 1 老板：项目进度如何？这个月底可以完成吗？ 小白：在进行中。（兴奋地）上周我跟 4 个用户聊了聊，有很多收获，第 1 个用户说 xxxxxxxx …… 老板：…… 2 老板：为什么要做这个功能，有什么数据支持吗？ 小白：用户反馈里有很多用户提到，而且开发起来也不难 老板：…… 这两个对话中，老板都没有得到他想要的信息。 其实，老板们一般都对用户了如指掌，或者认为自己了如指掌，你最好确保自己的理解尽量接近老板的水平，并且掌握一些他没有了解到的信息。另外，老板们不会浪费过多时间在定性数据上，除非形式特别容易打动人（如精心制作的视频）。先让我们来想想，老板们关心什么？需要什么？他为什么会关心用户的问题？ 因为能够辅助决策，对生意、业务有实际帮助 因为能获得对人的深刻洞察 发现反常识但是重要的信息 想想看，在关于用户的问题上，你能不能为老板提供这些情报？ 另外，在跟老板沟通用户相关的问题时，可以试着按老板的思路去逐步提供信息： 老板需要什么 你怎么说 做决策 先给出结论，再根据对方的反馈进一步展示更具体的信息 优质信息 抽取出模型，比如清晰合理的用户分类，并且辅以客观数据 思路 说明你如何通过试验（假设验证是什么）解决问题 团队内部沟通团队内部沟通是产品经理日常工作的重头戏，也是盛产段子的地方…… 关于用户的争论，几乎会出现在大大小小的会议和讨论中，出现在产品经理和设计师的争执中。观点和感受，每个人都有，每个人都不一样，但是只有形成共识，才能推动问题解决、项目前进。 与团队共享对用户的理解产品经理在日常工作中通过「望闻问切」积累的用户理解，有助于团队提高沟通效率、打造出更出色产品。但是前提必需是让团队的其他人了解这些工作，并且对关键信息形成共识。 比如，产品的核心用户群是谁。如果仅用几个泛泛的词汇去概括，什么「高端」、「小白」、「屌丝」，那么每个人只能凭自己的理解随意解读，表面上大家在讨论同一个问题，实际上各说各话，团队只会陷入到混乱的循环中。如果能够将用户的关键特征具体地描述出来，让大家可见、可讨论，逐渐将分歧变为共识，那么团队的沟通效率可以成倍提高。 共享对用户的理解，还可以有各种不同的方式，用户故事视频、用户反馈卡片、工作坊、观察活动等等，都可以多尝试，找到最适合团队的形式。 如何与设计师沟通跟老板不同，设计师喜欢了解用户使用的情境信息和具体的行为细节，让他们在理解人的基础上做出设计决策。如果是经验尚浅的产品经理和经验尚浅的设计师，容易因为局限于各自对用户的浅显理解，以说服对方采纳自己的做法为目标。 看看下面这个对话，是不是有些熟悉？ P：这个设计不好，用户不理解 D：为什么会不理解？进来的用户就是要干这个的呀 P：反正我看不太懂，如果我都不懂，那用户肯定更迷茫了 D：你现在都不在真实使用的场景，只看一眼自然理解不了 …… 在上面的对话中出现的，基本都是一些个人的理解，缺少相关场景和细节的描述，双方也没有寻找共识、解决问题的态度和实际提议，这样的对话几乎只能无限循环下去。 实际上，一切皆假设，即便是以前有效的经验，也未必适用当前的情境和眼前的问题。成熟的产品经理和设计师，会更多从用户分类、具体场景、目标和行为偏好出发，去考虑合适的方案。 D：这个版本没有设计单曲循环功能，因为用户主要都是白天零散时间使用，估计这个需求不大 P：嗯，这个假设合理。不过 A 类用户的使用场景还需要进一步确定，晚上睡前使用的用户似乎比例越来越大 D：有没有具体的数据呢？以后哪种场景会更重要？ P：我们准备安排一次调研，这个版本我们先加一个反馈入口吧 D：可以考虑。这个反馈入口的主要目的是？…… 在团队中的讨论，「寻找共识」和「解决问题」永远都是最重要的，为团队穿针引线的产品经理，要承担起为团队提供「锚点」的重任。 如何与用户研究员配合如果团队中有专职的用户研究员，那真是一件值得庆幸的事情。毕竟，严谨、有效的用户研究，需要花费大量的时间精力，产品经理自己做用研，可能会缺乏以下经验： 研究设计，选择合适的研究方法 执行系统、完整用研活动 现场主持和引导 定性数据的整理和深入分析 数据统计分析，有效性检验 产品经理应该充分跟用研同事合作，一起寻找问题的答案。尤其要参与问题定义、研究设计、结论讨论的过程，还应该尽量参与一部分直接跟用户互动的活动。 向用研同学提需求的时候，应该注意些什么呢？ 清楚定义想解答的问题 给出较具体的背景信息，为什么问题很重要 跟用研同学一起确定研究范围：可以解决哪些问题，无法直接回答哪些问题，对预期的研究结果有共识 提供自己对问题和用户的理解，应该重点对什么样的用户进行调研 如果产品经理并没有参与调研，而是直接拿到一份用户研究的报告，如何判断里面的观点和结论是否靠谱呢？ 比较简单的办法，是看「问题」、「假设」和「验证」三者的逻辑和表述是否合乎逻辑，尤其是对问题的界定是否清晰。一次好的用户调研，首先是能达到研究目标，解答问题，或者给出充分的决策信息。其次是有清晰的问题解决思路和执行步骤，比如研究设计是怎么做的，样本如何选择，执行中采取哪些措施避免常见问题，数据统计方法是什么，等等。 与用户沟通不论是有用户分类快照，还是有完整的用户角色，都帮助产品经理在解决疑问时，更有针对性地找到目标用户，然后深入了解他们的目标、生活形态、偏好，帮助做出更好的产品。 与用户沟通时，应该注意哪些信息，如何更好地引导用户表达出我们感兴趣的信息，可以复习产品经理的用研手册07 - 用研四式之「问」中提到的询问技巧： 产品经理的用研手册系列到此完结，感谢阅读！ 如需转载本文，请联系 uegeek@gmail.com 产品经理的用研手册01 - 朦胧的用户，懵懂的你 产品经理的用研手册02 - 你真的懂用户吗？ 产品经理的用研手册03 - 成也需求，败也需求 产品经理的用研手册04 - 做问题求解者，先对症后下药 产品经理的用研手册05 - 用研四式之「望」 产品经理的用研手册06 - 用研四式之「闻」 产品经理的用研手册07 - 用研四式之「问」 产品经理的用研手册08 - 用研四式之「切」 产品经理的用研手册09 - 精益的本质：一切皆假设 产品经理的用研手册10 - 沟通的秘密武器]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>设计师</tag>
        <tag>产品经理</tag>
        <tag>用户研究</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品经理的用研手册09 - 精益的本质：一切皆假设]]></title>
    <url>%2Fpm-ur-handbook9.html</url>
    <content type="text"><![CDATA[在本系列的开篇「朦胧的用户，懵懂的你」)中，我们讨论过用研为什么无用。其中一个重要原因是，互联网产品的更新迭代速度以周、甚至以天计，可是用户研究项目从立项、方案设计、执行、分析到结果，动辄数周，这种节奏难以匹配需求。为了快，大家更倾向于用「试错」的办法，而不是充分论证再行动。 这种「试错」的方法，最近几年越来越流行，它有一个新名称，叫「精益」。这么看来，用户研究难以适应互联网的节奏，跟「精益」的思路背道而驰。是这样吗？ 用户研究与精益创业表面上，用户研究和互联网快速迭代、精益式的做法相互矛盾，但是 00 的观点却相反：它们的核心思路是一致的。 对用研的误解用户研究最核心的并不是各种眼花缭乱的方法，而是研究的内核、解决问题的根本思路：先「假设」后「验证」。 为什么那么多人觉得用研难而无用？因为难的不是操作，而是面对一切问题首先承认自己无知、需要从头去验证的根本态度。有了这种态度，才会严肃对待「假设」、「试验」、「信度和效度」。只不过，严谨的代价是时间和精力等各项成本投入。 对精益的误解在「精益」快速普及流行过后，不少人打着「精益」的旗号继续在低效试错，给原本盲目的做法披上了一件光鲜的外衣。于是有不少人开始批评精益的思路。这依然是对精益的误解。 精益的本质，也是「假设」-「验证」的循环。 快速试错只是精益的表象，缩短「假设」-「验证」的循环才是精益的精髓。因为盲目试错的过程中，我们其实不知道自己在试验的到底是什么，缺乏「假设」的「验证」，等于没有验证，最终无助于找到对的方向。 一切都皆假设对创业团队而言，对从 0 到 1 的产品而言，用户群、需求、解决方案、体验目标，一切都只是未经验证的假设。 比如，有这样一个产品定义： 对希望提升睡眠质量、获得深度放松体验的用户，在睡前及放松场景，提供一个手机 APP，播放舒缓的音乐和催眠引导语，帮助用户深度放松，提高休息质量。 一旦仔细拆分开来，可以发现，其实每一部分都不是「事实」，而是待验证的假设： 对希望提升睡眠质量，获得深度放松体验的用户 —— 用户需求假设 在睡前及放松场景，—— 场景假设 提供一个手机 APP，播放舒缓的音乐和催眠引导语， —— 解决方案假设 帮助用户深度放松，提高休息质量。—— 体验目标假设 我们太容易把假设当成了洞察。作为一个猜想，全心全意期待的，就是被验证，不论结果是被证明还是被反驳。 用户研究如何助力精益创业？在价值观层面，只要突破对「研究」所抱有的冗长、龟毛、小题大做的刻板印象，回归到研究的本质，就能更深入地理解「精益」的内涵。 在方法论层面，只要明确了「一切皆假设」「一切待验证」，「望闻问切」的用研四式全部都可以指向实际问题求解，不再为了「严谨」而用研，而是为了「解答和验证」去做用研。 假设和验证总是成对出现，不可分离。有了假设，我们才知道待验证的是什么，在观察时才有重点、在收集反馈时才知道轻重缓急、在主动询问时更容易直切主题、在试验时能少一些认知偏差。 亲爱的产品经理们，请每天都问一问自己： 我的假设是什么？ 哪些重要问题其实仍待验证？ 如何用最小行动去验证？ 用户需求假设如何验证可验证的东西，首先必需得是可以准确描述的。 你可以清楚地描述产品的用户群体如何分类，每一类有什么特征吗？在哪里可以找到一定规模的用户？请回顾本系列第二篇文章你真的懂用户吗？。通过目标区分用户，通过对场景的描述建立用户快照。 在建立了初步的用户快照的基础上，我们反复对用户进行「望闻问切」，即观察、倾听反馈、主动询问、做试验，来验证和修正用户快照，最终得到更接近真实的用户角色和用户画像。 接着，你可以清楚描述用户的需求吗？在用户提供的场景故事中，反复提炼需求，尤其是真正有价值的需求。 相比需求是否存在，更加难以判断的是需求的市场规模。我们可以尝试通过一些侧面信息来辅助分析。 需求有多迫切？对整个生活的影响有多大？ 异质人群（不同社会阶层、年龄、生活状态）是否都反映出类似的诉求 搜索指数和关键词热度，流量的上下游来源和去向 国内外已有的解决方案，数量和程度 类似行业成熟市场的规模，或其他区域同类市场的规模 欢迎大家多补充这一部分的经验。 判断了市场规模之后，还需要估计触达用户的成本、建设渠道的成本。在触达用户之后，还得考虑说服用户接受、购买解决方案的成本。 场景假设如何验证相比用户和需求假设，场景则容易验证得多：去现场观察，直接向用户询问。 请回顾本系列第 5 篇和第 7 篇，用研四式中的「望」和「问」，每次实际接触用户时，都收集具体的使用场景、抽取出共性，并且结合用户快照中的场景假设，去做对比。 解决方案假设如何验证解决方案真的能解决问题吗？通过观察（望）和做实验（切），能很好回答这个问题。尤其注意观察那些能反映出解决方案是否有效的数据指标，是否符合预期？ 如果发现了现实和预期不符的疑点，进一步倾听用户怎么说（闻），以及向用户询问（问）他们的感受和态度。 有时候，我们提供的解决方案也许是有效的，但是不具备独特性，容易被取代。 还有的情况是，解决方案是有效的，但是用户并没有直接付费的意愿，那就需要调整商业模式，找出「羊毛出在猪身上」的可行通路。 更进一步，商业模式可行，还需要把生产成本控制在收益之下，或者能够找到进一步降低成本的路径。 体验目标假设如何验证这是最难验证的假设。 体验很重要，但是到底有多重要？跟实用性目的相比，孰轻孰重？它会怎样影响用户的认知和传播？ 也许，这就是产品经理工作中真正艺术的部分。 让自己文艺起来吧，让自己成为洞察人性的高手吧，产品经理们！ 如需转载本文，请联系 uegeek@gmail.com 产品经理的用研手册01 - 朦胧的用户，懵懂的你 产品经理的用研手册02 - 你真的懂用户吗？ 产品经理的用研手册03 - 成也需求，败也需求 产品经理的用研手册04 - 做问题求解者，先对症后下药 产品经理的用研手册05 - 用研四式之「望」 产品经理的用研手册06 - 用研四式之「闻」 产品经理的用研手册07 - 用研四式之「问」 产品经理的用研手册08 - 用研四式之「切」]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>设计师</tag>
        <tag>产品经理</tag>
        <tag>用户研究</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品经理的用研手册08 - 用研四式之「切」]]></title>
    <url>%2Fpm-ur-handbook8.html</url>
    <content type="text"><![CDATA[今天我们来介绍用户研究「望闻问切」第四式，也是最好玩的招式：做试验。 如果说用户研究的目的无非是解答疑惑、辅助决策，那么是不是也可以跳出「假设-验证-判断」的循环，直接测试用户的反应和行为，直接获得判断？ 答案是肯定的。 做试验的目的，是用较低的成本去测试想法的可行性和接受度，以及从中发现可能会遇到的问题。 人心难测。互联网变化如此之快，有时候我们可以通过逻辑和分析得出结论，但是更多时候需要把手伸到水中一探深浅。前面花了那么多时间望、闻、问，这回终于可以来真的了。 测试态度和概念当我们有一些新的想法，尤其是一些比较具体的点子，不知道用户会如何看待，想在开始做之前快速收集一些想法。这时候除了去找用户聊，还可以直接在产品或者用户论坛中拟造一些信息，吸引用户的注意，获取他们的反馈。 第一招，以假乱真的泄露版。 2004 年愚人节，Google 对外发布了拥有 1GB 存储空间的免费邮箱 Gmail，被大家当做笑话，也引发了无数讨论。到了第二天，大家才发现只是来真的，Gmail 一炮而红。 第二招，先建城门后建城。 功能太复杂来不及开发？但是又想提前收集反馈？没问题，入口先摆出来。但是注意不要玩火自焚，承诺最终还是要以某种方式兑现的。 比如 2015年火起来的计步 App Walk up ，记录每天的步数，然后可以在虚拟的世界地图内前进，抵达不同的城市。因为挤牙膏般的开发进度，不得不先放出入口，再慢慢开发。这个过程中可以收集大量的反馈。 测试新版本的使用体验每当产品有较大改动时，产品经理都免不了神经紧绷：如果上线后效果不好怎么办？如果骂声一片怎么办？ 那么就尽早做用户测试，尽早反馈。 这里所说的测试，跟前面介绍过的可用性测试基本类似，只是不必等到开发完成才开始找用户测试，而是在概念阶段、设计阶段、开发阶段，就可以用一些「假」的原型或者半成品给用户试用，只要能够让用户明白这只是初步一些想法，希望了解他对这些想法的意见。 阶段 展示 测试什么 雏形 线框图 用户对产品的理解和需求，主要模块的设计和衔接是否合理 设计 界面原型 用户对流程和界面的理解，界面可用性 开发 Demo 版本 真实的使用体验，有哪些 bug 测试 可上线版本 产品上线后的效果，整体可用性 在设计开发阶段，还不需要完整、严谨的测试，只需要快速了解用户意见、找到明显问题的「迷你测试」： 测试不同方案的真实效果在产品设计开发过程中，总是有各种各样的纠结，特别是两个方案摆在一起，不相伯仲，改选哪一个？说到这里，A/B test 终于要出场了。 大家对 A/B test 的直观印象是：有 A、B 两个方案，分别放在线上，测试看哪个效果好，最终就采用哪个。 每当有重要页面的修改和流程上的优化，通过灰度发布到 1% 或者 5% 的用户，看实际数据的变化（访问时间增加、留存提高、下单率提高等），决定此修改到底是 100% 发布还是被砍掉。听起来简直是完美的解决方案，对不？ 但是事情远没有这么简单。A/B test 的本质，是受控的对照组科学实验。通过严谨的实验设计、采样样本代表性、流量分割与小流量测试等方式来获得具有代表性的实验结论，并确信该结论推广到全体样本仍然可信。 什么是「可控」？变量是定义清晰、完全受人为控的。 假设有一个因变量 Y（比如购物车结算率），它的变化会受到 A、B、C、D、E、F、G 等 7 个自变量的影响（如何确定只有这些影响因素？），且这种影响无法通过确定的函数来表示。我们现在设计了两个方案，想提高 Y，怎么通过实验验证哪个方案更有效呢？可以接受的做法是，进行若干组试验，让 A 的值变化，而其他自变量全部不变，若 Y 也产生变化，说明 A 的改变起到了效果。 但是如果现在有两个方案，一个改动了 A、C、D，一个改动了 B、D、G，就无法证明是哪些因素影响了 Y 的变化，也就无法判断到底哪个方案更优。 A/B test，难就难在识别所有自变量，并且控制单一自变量的变化。数据不全、脏数据、随机事件、建模人为因素等等影响，都会影响 A/B test 的结果。要解决这个问题，对采样、聚类、流量分割等要求非常的高，而且要检验统计结果的有效性。 所以在现实应用中，A/B test 多用于测试界面元素/控件变化对结果的影响，因为这些因素容易分离和控制。大部分实验只能带来个位数百分比的改进，或者甚至是分数百分比。 A/B test 是好东西，但是要真正用好，需要特别注意实验设计和数据统计： 测试不是万能不论是用户测试还是 A/B test，都无法完全反应客观现实。即便通过 A/B test 提升了某个按钮的点击率，但是它依然不能解决产品的深层次问题。通过测试，我们也许可以知道哪个方案更受欢迎，但却无法解释反常识的结果。测试只能让我们「知其然」，想要「知其所以然」，还是需要配合其他的招式，用心解读。 那么，什么时候该「问」，什么时候该「切」？ 如果重在探究背景和原因，用「问」；如果需要快速测试行动结果，用「切」。当然，另外一个重要的考量因素是执行的成本，面对面调研要花费较多的时间获取和分析数据，灰度试验需要把多个方案都实现出来，选择哪一种，投入产出比会更高？最终还是要靠经验去做成判断。 产品经理的用户用研四式「望闻问切」就介绍完了。 下一篇探讨用户研究与精益方法的关系。 如需转载本文，请联系 uegeek@gmail.com 产品经理的用研手册01 - 朦胧的用户，懵懂的你 产品经理的用研手册02 - 你真的懂用户吗？ 产品经理的用研手册03 - 成也需求，败也需求 产品经理的用研手册04 - 做问题求解者，先对症后下药 产品经理的用研手册05 - 用研四式之「望」 产品经理的用研手册06 - 用研四式之「闻」 产品经理的用研手册07 - 用研四式之「问」 产品经理的用研手册08 - 用研四式之「切」]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>设计师</tag>
        <tag>产品经理</tag>
        <tag>用户研究</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品经理的用研手册07 - 用研四式之「问」]]></title>
    <url>%2Fpm-ur-handbook7.html</url>
    <content type="text"><![CDATA[在用研四式的前两式「望」和「闻」中，我们还没有实际接触用户。今天介绍最经典的第三式「问」，我们要主动出击，获得丰富的一手信息。这也是绝大多数人对用户研究工作的直观印象：做面对面的调研。 我们先回顾一个老段子，感受一下用研第三式「问」的威力： 某日，老师在课堂上想考考学生们的智商，就问一个男孩：“树上有十只鸟，开枪打死一只，还剩几只？” 男孩反问：“是无声枪么？”“不是。” “枪声有多大？”“80~100分贝。” “那就是说会震得耳朵疼？”“是。” “在这个城市里打鸟犯不犯法？”“不犯。” “您确定那只鸟真的被打死啦？”“确定。” 老师已经不耐烦了，“拜托，你告诉我还剩几只就行了，OK？” “OK。鸟里有没有聋子？”“没有。” “有没有关在笼子里的？”“没有。” “边上还有没有其他的树，树上还有没有其他鸟？”“没有。” “方圆十里呢？”“就这么一棵树。” “有没有残疾或饿得飞不动的鸟？”“没有，都身体倍棒。” “算不算怀孕肚子里的小鸟？”“都是公的。” “都不可能怀孕？”“……，决不可能。” “打鸟人的眼有没有花？保证是十只？”“没有花，就十只。” 老师脑门上的汗已经流下来了，下课铃响起，但男孩仍继续问:“有没有傻的不怕死的？”“都怕死。” “有没有因为情侣被打中，自己留下来的？”“笨蛋，之前不是说都是公的嘛！” “同志可不可以啊！”“……，性取向都很正常!” “会不会一枪打死两只？”“不会。” “一枪打死三只呢？”“不会。” “四只呢？”“更不会!” “五只呢？”“绝对不会！！！” “那六只总有可能吧？”“不可能！” “好吧，那么所有的鸟都可以自由活动么？”“完全可以。” “它们受到惊吓起飞时会不会惊慌失措而互相撞上？”“不会，每只鸟都装有卫星导航系统，而且可以自动飞行。” “恩，如果您的回答没有骗人，”学生满怀信心地回答，“打死的鸟要是挂在树上没掉下来，那么就剩一只，如果掉下来，就一只不剩。” 老师，卒。 通过提问，几乎可以得到任何想知道的信息。 当遇到一个具体问题，如 xx 现有的用户有哪几个典型类别，他们对产品的满意度如何，近期我们要做哪些改进? 现在内容的分类有点乱，用户不容易快速找到想要的内容，怎么优化？ 根据已有的经验和数据，也许无法解答这些问题，这时可以考虑进行一次用户调研。 其实用户调研的形式、有没有按照严谨的操作执行，都是次要的。真正重要的是，有没有用较真的态度去对待困扰我们的问题，认真地尝试解答问题，然后在此基础上去规划下一步的行动，而不是盲目地一边看似解决问题，实则一边制造新问题。 如何制定调研计划所谓调研计划，就是思考问题如何求解，需要哪些步骤。 1.问题是什么开始的开始，得先搞清楚我们要尝试解答的问题到底是什么。这一步的重要性怎么强调都不为过。提出清晰、具体的问题，是产品经理的职责。 清晰地定义问题，问题也就解决了一半。 这是属于哪种类型的问题？ 在本系列第四篇文章「做问题求解者，先对症后下药」中，我们介绍了两种问题分类维度：产品所处的生命周期，以及问题的收敛/发散属性。 那么，现在想要解答的问题，属于哪个类型？是新产品定义过程中，用户价值验证的问题？还是产品增长过程中，用户在使用过程中遇到困惑从而影响转化率问题？如果要诊断收敛型问题，就不能只收集定性数据。如果需要更丰富的一手资料帮助理解发散型问题，就要留有充足的调研时间。 2.假设是什么，待验证的是什么问题提出来以后，进一步写下已有的假设，以及待验证的部分。 比如，如果问题是「对已有用户进行分类」，那么你假设的用户分类是什么？为什么？划分维度有哪些？哪些方面是明确已知的，哪些是待验证的？ 如果问题是「用户需不需要专辑评论功能」，你的假设是什么？是「通过一定的内容发布机制，可以培养活跃用户的参与感」？是「获取用户主观评价才能帮助专辑质量的改进」？还是「可以从文字内容提取用户的喜好」？为什么？不确定的因素有哪些？如何通过调研给出进一步的数据以验证？ 3.如何解答已有资料、相关理论有哪些? 需要收集哪些数据，从哪里收集，怎么收集? 会用什么方法处理和分析数据，用到什么理论框架? 4.实施过程准备阶段：比如，设计问卷、访谈提纲、用户招募等，由谁负责，时间安排如何。 数据获取阶段：比如，主持活动、入户调研、问卷发放和回收等，都需要做哪些具体的事情，由谁完成，什么时候完成。 分析阶段：比如，哪些人应该参与，计划有哪些输出，何时完成。 理解性/定性数据收集虽然这种方法总被冠以「定性研究」、「质性研究」等不明觉厉的名称，但是来到用户跟前进行面对面调研，本质就是通过跟用户愉快地聊天，获取我们感兴趣的信息。换句话说，就是让用户讲出自己的「故事」，从中获得洞察。然后，再通过故事里面出现的场景和细节，去分用户析动机、需求、痛点等，从而推导解决方案。 找什么样的用户？如何找到？又到了复习建立用户快照的时间~ 请翻出卡片模板，结合要解答的问题，去描述调研的目标用户： 在招募用户之前，你可能需要一个甄别问题列表或者问卷，把符合条件的用户筛选出来。 至于如何找到用户，就要靠之前的积累了：用户的联系方式、微信群、用户池、社交平台，等等。 如何跟用户聊天？首先，需要准备好一个问题列表，把需要询问的问题，按一定的逻辑组织好。 比如，我们想了解用户通过听音频来放松的场景，那么可以把问题列下来： 睡前场景 晚上一般几点回家？回到家后会做些什么？ 一般几点睡觉？睡前会做些什么？大概多长时间？有没有一个“标志/仪式”代表准备要睡觉了？ 上床之前会做些什么？会使用哪些东西？怎么使用？心情如何？ 在手机上做什么？会打开哪些app？做些什么？多久？ 睡眠质量如何？如果好有什么秘诀？如果不好遇到什么问题？具体情形是怎样的？有哪些感受？ 其他场景 一天中还有什么时候比较劳累、疲惫，需要放松？ 都是在做什么的时候/之前之后？在什么地方？跟什么人一起？什么状态？ 一般用什么方式去放松？效果如何？ 印象中很放松的体验是怎样的？什么时候体验到的？ 音频需求 平时会有哪些听音频的场景？ 为什么需要听音频？用什么听？整个过程是怎样的？持续多久？ 听什么内容？怎么找这些内容？喜欢什么样的内容和形式？ 可以详细介绍一两个听得最多的电台/节目/歌单/谈话吗？ 最常使用什么app 听音频？怎么使用的？有些什么习惯？最喜欢什么内容/功能？ 有睡前听音频的习惯吗？怎么听？听多久？有没有不满意的地方？ 然后找到符合条件的用户，邀约到见面的地方。这个地点最好是安静、舒适、私密的空间。 在开始聊天前，向对方说明来意，介绍过程和时间，如果需要录音，需要征求对方同意。 询问的技巧以用户感觉舒服的方式提问 尽量以适合讨论的问题形式抛出话题，保持讨论流畅地进行。不一定完全按照大纲顺序提问，可以根据讨论灵活调整，根据用户的叙述，自然地引出相关问题。例如询问到多平台使用习惯，用户开始提到手机上使用的一些情况，可以顺势引导到手机方面的问题。 不评价，以引导为主 让用户完整表达其观点和看法，不要急于打断用户的话； 不要对用户的描述做太多评价或者「挑战」用户； 不过多发表自己的观点，鼓励用户多表达自己的看法； 不要急于提问，尽量不打乱用户讨论的节奏。 追问行为、细节、原因、感受 鼓励细节。比如用户提到「我每天都登录」，这时可以追问「一般会在什么时间登录？通过什么方式、什么入口登录？」 多问为什么，探究行为和态度的原因。比如，「我一般忽略这个选项」，可以追问「为什么呢？是……还是……原因呢？」。用户说「这个功能应该有」，可以追问「你觉得这个功能是必需的对吗？如果没有……如果有……」 从描述中挖掘问题。比如用户认为「我觉得它不够智能」，可以追问「那在你看来，什么样是比较’智能’的呢？」 适时回应和总结 对用户的描述，可以适当进行回应和总结，将主要意思复述一下，帮助用户更清晰、完整地表达，也减少理解的偏差。 在访谈结束后，注意及时整理访谈记录和小结。 诊断性/定量数据收集收集定量数据，主要有统计数据和问卷两种方式。 统计数据上报在产品中埋点统计数据，最能反映全体用户的实际行为和表现。 在提出统计需求之前，先尝试回答两个问题： 什么样的数据能反映什么问题？ 有什么例外？ 如果没有经验，产品经理容易提出让工程师无法下手的统计需求。什么是合格的统计需求呢？边界明确，没有含糊，能让工程师明确要如何取数据。注意提供四个方面的描述： 人群边界 统计哪些渠道？网站 or App or 其他？需要限定地域吗？或是使用过某个功能的用户？需要去重吗？ 如何抽样？全部用户，or 随机抽样 or 分层抽样？ 具体数量？需要多少用户的数据？ 时间边界 抽取数据的开始和结束时间？ 是否需要按时间周期划分？ 行为边界 需要抽取什么样的行为数据？如何精确定义这个行为？ 是否存在重复的数据？如何去重？ 如何呈现 用什么格式？要怎么划分数据？ 存放在哪里？ 问卷问卷的设计、投放、统计分析，又是一门学科。召唤身边的用户研究员吧！或者继续关注你丫全栈后续的文章 :P 用研最重要的招式「问」就介绍到这里。下一篇是望闻问切的最后一式：「切」。 如需转载本文，请联系 uegeek@gmail.com 产品经理的用研手册01 - 朦胧的用户，懵懂的你 产品经理的用研手册02 - 你真的懂用户吗？ 产品经理的用研手册03 - 成也需求，败也需求 产品经理的用研手册04 - 做问题求解者，先对症后下药 产品经理的用研手册05 - 用研四式之「望」 产品经理的用研手册06 - 用研四式之「闻」 产品经理的用研手册07 - 用研四式之「问」 产品经理的用研手册08 - 用研四式之「切」]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>设计师</tag>
        <tag>产品经理</tag>
        <tag>用户研究</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[这儿有一份严肃的设计书单，2017，要不要一起读？]]></title>
    <url>%2F161218-designer-reading-list.html</url>
    <content type="text"><![CDATA[这几天，在翻看过往的读书记录。转做设计已经快 5 年，虽然也陆续读了一些书，但总是有想读而没读的，有读过觉得不如不读的，也有读过来不及回味的 —— 可是，为什么没有在第一年就认真筛选最好的书，把它们都看了呢？明明一年可以做到的事，为什么花了五年仍然没有做好？ 如果现在给当初的自己开一个书单，会是什么样？ 选书标准这个书单的出发点，是想用工作多年后的反省和经验，选出在前 3 年就该看的设计类书籍。目的不是解决工作中的实操性问题，而是建立对设计的系统理解，当遇到实际问题时，知道要去哪里找答案。 选书的主要标准： 领域经典，常看常新 探索领域中的「大问题」 广度优先，尽量涉及体验设计的各方面 未绝版/有电子版，中英文版都有的优先 不会包括哪些书： 3 年内一定会过时的书 讨论的主题比较狭窄 讲工具的书（去看视频吧） 半天可以翻完的书 顺便介绍一下，00 是哪根葱？ 互联网老腊肉，前微信设计师，互联网早读课最早发起人之一 豆瓣忠实用户，读过 327 本书， 书评 26 篇， 笔记 313 篇 主题学习者，运营公众号 HackYourself/你丫全栈，受欢迎的读书笔记包括： 重启学习系统，做个知识炼金术士 GEB —— 一次关于有序与无序的探寻之旅 报告：前方没有上帝出没——读自私的基因[上] 给自恋物种的三副猛药——读「人类简史」 书单这份书单分为设计观、设计理论、互联网体验与界面设计、面向未来的设计四个部分。 设计观部分，帮助我们在思考设计问题之前，寻找到自己看待设计、求解设计问题的立足点。怎么找到这个立足点呢？需要先回答「设计是什么」、「为谁设计」、「设计如何发展」这三个根本问题，从而形成对设计的底层理解。 接着，设计理论部分，从早期的平面设计、装饰艺术溯源，导出基本的设计法则，然后探讨人的认知和心理如何影响设计。 然后再到互联网体验设计，从认知原理开始，在设计过程、信息架构、体验度量、情感化设计这几个领域，选择最有代表性的一本书，并且代入精益的视角去整体看待互联网产品的体验设计。 最后一部分，设计的反思，以及去探索正在兴起的设计领域和设计话题。 设计观1.设计是什么 - Michael Kroeger + Paul Rand: A Designer’s Art 首先，由平面设计大师 Paul Rand 出场，借着他与设计学生的对话集，开始去思考设计的元问题：设计是什么？1995年2月，亚利桑那大学杰出学人计划邀请保罗．兰德客座讲学，带领学生思考设计前该知道的所有事。这本书的内容便是这段讲学期间的摘录。从平面设计初学者该懂的事、该看的书，电脑对设计的帮助，与客户的沟通，到设计是什麽，透过精辟的问答，道出最一针见血、最直指核心的答案，机锋处处却有深富教育性与启发性。 有余力的顺便再读一读 Paul Rand 谈设计和设计师的经典之作「A Designers’s Art」。 2.设计中的设计 - 原研哉 了解过西方设计大师的设计观，再来看看东方的设计大师怎么谈设计。 在原研哉看来，设计不是一种技能，而是捕捉事物本质的感觉能力和洞察能力。所以，设计师要时刻保持对社会的敏感度。在「设计中的设计」一书中，他正是以这一想法为中心展开论述。 3.为真实的世界设计 - Victor Papanek 「为谁而设计」？ 以正三观的一本经典。推荐给自认为在做设计的人。很难想象这是一本写于 1970 年的书，而且直到今天，书中提及的那么多问题依然存在，甚至更为严重。什么更值得去做？设计师应该具有怎样的神经、视野和能力？世界那么大，问题那么多，请永远心存敬畏，关心他人，意识到我们的责任和能力，在纷繁的表象中，去尽力回答那些可能只在夜深人静时候才会浮现的、可以不断自我拷问的问题。 4.现代设计史 - David Raizman 想要去到未来？那么先回一趟过去吧！ 通过这本设计史中的经典，了解设计的前世今生，才能明白这是一门什么学科、什么手艺、什么生意。 设计理论5.设计的准则 - Massimo Vignelli 如果你会设计一样东西，你就能设计任何东西 由设计大师马西莫·维涅里带领开始设计理论的入门，再适合不过了。 这本书分为两部分。「无形」部分讲解了基本的设计概念和理念。「有形」部分则涵盖了设计师工具包中许多可见的设计部分，例如标准纸张尺寸，网格，边距，基本字体，类型大小关系，比例，纹理，颜色，装订等。 6.秩序感——装饰艺术的心理学研究 - E.H. Gombrich 设计理论，不能不读贡布里希。 这本书是对人类探求时间与空间中秩序与节奏的广泛研究。本书所列举的各种文化背景中装饰艺术的代表作，表现了人类的一种意趣，这种意趣可在人类创作的戏剧、诗歌、舞蹈、音乐及建筑中找到。这种人类的基本特性需要从我们自身的生物遗传中才能找到解释。贡布里希以其特有的清晰、学识的深度，以及对各种学科的广泛兴趣，解决了美学最基本的问题。 7.点线面 - Wassily Kandinsky or 艺术与视知觉 - Rudolf Arnheim 设计理论，也不能不读康定斯基。 康定斯基是现代抽象表现主义艺术的实践和理论先驱，既是伟大的艺术家，也是杰出的理论家。「点线面」一书，最早作为包豪斯学校的形式课程讲义出版，是现代主义艺术的经典文献。如果觉得太过抽象，可以配合「艺术与视知觉」找点感觉。 书中阐述了视觉所具有的倾向于最简洁结构的趋势、视觉图式细分的发展阶段、知觉的动力特性及其他各种适用于所有视觉现象的基本原则，以使读者能够更清楚地看到形状、颜色、空间和运动等要素都可以作为一个统一的媒介呈现在艺术作品中。 8.The Elements of Typographic Style - Robert Bringhurst or Thinking with Type - Ellen Lupton - thinkingwithtype.com 这两本书是排版中的经典（当然，是英文排版），平面设计师案头必备之工具书。不仅可以了解 Typography 相关的一切基础概念，还能学会从文字中看到空间，星系，宇宙。 9.设计的法则 - William Lidwell 从经典中稍微回归现实，用更加全局的视角整理已经看过的理论基础，归纳实践中可用的准则。 这本书采用字典式编排，左页包括法则简短的定义、进一步的描述、范例，以及法则使用的指导方针。注解列在文本的右侧，提供细节与参考资料。右页包括图例与相关图解，使读者对法则有更直观的进一步了解。 10.设计心理学1 / The Design of Everyday Things 接下来的四本「畅销书」就不过多介绍了。 11.设计心理学2 / Living With Complexity 12.设计心理学3 / Emotional Design: Why We Love (Or Hate) Everyday Things 13.设计心理学4 / The Design of Future Things 14.This is Service Design Thinking : Basics - Tools - Cases 设计师面对的问题（或者说系统）越来越复杂，只需要处理一个平面上元素关系问题的日子一去不复返。是时候用系统的视角、用服务的视角去重新审视设计的理念和方法了。 互联网体验与界面设计15.认知与设计 - Jeff Johnson 设计始终围绕人，而「人」的局限（主要是认知局限），是求解设计问题的「钥匙」。 看再多的设计经验分享，你都无法推测出「经验」是怎么来的，以及有没有理据。不如看一看这本书，界面设计中 80% 的具体问题和困惑，都可以从中找到一些线索和启发。 在开始实践之前，或者在实践中遇到的各种界面设计细节、可用性问题，都可以回来翻一翻这本书。 16.About Face 4: 交互设计精髓 - Alan Cooper 交互设计经典。不仅全面系统地讲述了交互设计的过程、原理和方法，讲解了人与界面的关系，更重要的是详细剖析了「完整」的设计过程，以用户为中心的设计到底怎样一步一步开展。 17.信息架构：超越Web设计（第4版）- Louis Rosenfeld 在没看这本书之前，人人都以为自己知道「信息架构」。 这是一本严谨又热情的书，严谨的部分很实在地介绍了信息架构的基本概念、方法、案例等；热情的部分简直是本书的bonus，作为一个新兴的、跨学科的、价值待证明的领域，作者用自己丰富的经验，用絮叨又幽默的语气，向我们述说着这个行当面临着哪些挑战，哪些组织的哪些层级的哪些人，会提出怎样的挑战和疑问，作为一名靠谱的信息架构师，应该以什么样的态度去面对和回答这些问题。——真的，没事别乱提信息架构。 18.用户体验度量：收集、分析与呈现（第2版） 有时候觉得，「用户体验」真是个大而无当的词。做体验设计，怎么也回避不了一个问题：你的设计到底有什么作用/价值？如何量化用户体验对有效提高产品的使用质量至关重要。 这本书详尽地介绍了如何有效且可靠地收集、分析和呈现典型的用户体验度量数据：操作绩效（正确率等）、用户体验问题（频率和严重程度）、自我报告式的满意度及生理/行为数据（眼动追踪等）。同时对「综合性量化度量数据」等问题进行了专门介绍，而且结合案例等形式对当前与用户体验相关的新内容（如用户体验对NPS 的影响）进行了说明。 19.怦然心动——情感化交互设计指南（修订版）- Stephen P. Anderson 业界对设计的要求，早已超越了简单的可用性。当界面可用已经是标配时，如何进一步满足并超越用户的预期？这需要我们进一步深挖情绪和情感的宝库，成为引导用户积极情绪的魔术师。 本书阐述出了当人们访问网站，打开软件，购买实体产品和被某人吸引时的心理状态，并且非常深入地用心理学的方法解释了刺激和触发人类行为的因素。书中提供的众多方法，让我们可以创造出更加持久和深刻的用户体验。 20.精益设计 - Jeff Gothelf 设计如何适应越来越快的互联网开发节奏？ 本书作者根据精益创业法的理念归纳出了行之有效的精益设计方法，让设计团队可以用更低的成本、更高的效率设计出更好的用户体验。本书重点介绍了如何利用精益设计来改善用户体验，让团队摈弃为设计而设计的心态，通过迭代来增进认识，提高效率，并以成果为基础进行设计。 面向未来的设计21.Speculative Everything - Dunne Anthony Dunne &amp; Raby是 Critical Design 批判性设计大师，著名的 A/B 宣言就出自这对设计夫妇之手，而这本书正是「A/B宣言」全面的叙述。 到底什么是设计？到底什么是设计师？设计师对自己和对社会的责任有什么不同？设计是否依然重演着每个时代设计都要走过的变迁？如何看待设计的「幼稚病」？设计师该何去何从？ 通过这本书，设计师将打开一扇新的大门。 22.设计未来 : 基于物联网、机器人与基因技术的UX - Jonathan Follett 未来已经到来。 从集群机器人到嵌入表皮的计算机，再到可生物打印的器官，这一切都会在未来几年开始出现。在这一文集中，设计师、工程师和研究人员分别探讨了他们为突破性技术进行体验设计的不同方法。设计不仅为如何运行和利用技术提供了框架，也把技术置入了一个更广阔的背景，这个背景包含与技术相互作用的整个生态系统，以及非预期后果的可能性。 重新出发吧，设计师们！ Q&amp;A为什么没有「用户体验要素」、「别让我思考」这么经典的书？ 它们不太符合「探索领域中的大问题」的标准，或者差不多用半天可以翻完，而且你很可能也看过了。 为什么没有中文作者著作？ 比较难挑出 3 年后一定不会过时的书。 为什么 xxx 和 xxx 那么经典的书没有入选？ 这个书单不是「最优」书单，它的目的是，在 1 年内让你打好坚实的基础。很多书可以根据自己的需求替换。 有些书很厚，怎么读得过来？ 设想一下，如果只给 2 个小时，你会怎么读？ 你会找出重点去读。什么才是重点？你关心的问题、想要回答的问题就是重点。用问题去牵引自己读书，而不是从第一页翻到最后一页，怎么会读不过来？ 英文不好怎么办？ 逼自己读，或者买中文版，又或者今年先去提高英语。 你推荐的书怎么都这么不接地气？ 因为这样比较能抵御时间的侵蚀，毕竟目的是想打下能用 10 年的基础，而不是救 10 天的急。 为什么你总是读不完书单？看着上面的书单，会有一点激动吧？这么多好书等着我们呐！ 不过，作为过来人，00 很清楚这个书单的下场：收藏以后，不会再打开。更好一些的结果是，下单买回了书，但是翻完目录以后就再也没有打开。 这些坑，我都踩过。不然，上面列的书早该读完了（只读了 60%，时间浪费在另外一些不那么值得读的书上面）。 大概有三点原因。 动机不足。为什么要读这些书呢？隔壁老王一本不读，不是也过得好好的？如果我们不会对问题好奇、被问题困扰，也就没有必要读这些书了。过去的经验告诉我们，困扰我们的问题早就有人遇到过，而且极有可能给出了漂亮完整的答案，为什么我们只是干坐着呢？ 能力不足。看书多累人呀，看英文书更是要命，何况一年还要看 20+ 本！可是总有人能每周看完一本书，每看一本书都有收获。这不是书的问题，是阅读方法和习惯的问题。 缺少提醒器。大多数时候，我们愿意看书，也能看懂，只是是缺少一个「诱导」，提醒「现在该去看书了」。想想看，跟书一起竞争我们注意力的，可是永不停息的微信朋友圈和勤奋过人的大 V 们呀！ 这里有付费的解药以下是广告以下是广告以下是广告 只是来拿书单同学们请闭眼（或离开）。 00 想召集对书单感兴趣的小伙伴，一起实践花了一年改造的阅读和学习方法，在 2017 年把上面的书单读完。如果你也想用 1 年的时间，回炉重造，打下能用 10 年的设计基础，欢迎参加 「17 涉毒」设计读书群，一起攻克那些让人半途而废的老问题： 老问题 怎么破 不知道该读什么 按主题精选经典设计书籍 选书买书浪费时间 帮你全部挑选/下载好 读了没用 用问题和输出倒逼阅读 坚持不下来 老司机和小伙伴陪你一起读 怎么读加入到社群中，大家一起读书。两周读一本，一年共 24 本。 如果总说读书没有收获，原因大都是「为了读而读」。如果总说读书读得慢，原因大都是「无法区分重点」。如果总说读书读不懂，原因大都是「不知道问题是什么」。 我们用「为解答问题而读」来打破这个死循环： 读书前，列出想通过阅读回答的问题（如果列不出问题，00 会帮你） 读书时，针对这些问题记笔记、在群里讨论（集体学习，同侪压力） 读书后，输出对问题的思考和回答（重要的不是逐页读完，而是能在过程中开始思考、寻找答案） 如果对每一本书能认真地回答 1~2 个好问题，一年能回答 20 ~ 50 个好问题，难道还会说没有收获吗？ 在这个过程中，我们会用 Worktile 进行集体协作（书籍共享、进度跟踪、wiki、讨论），用简书输出各自的笔记。 抱歉，这是收费的你可以获得： 书单中 25 本书的电子版，帮你节省原书总价约 3000 元，以及四处找书、买书的时间（英文原版书籍美元汇率按 7.0 ，英镑汇率按 8.8 计算） 一年良好的读书氛围和讨论氛围 00 一年的读书笔记 如果你愿意，帮你养成高效的读书习惯 费用： 599 元/人在校学生两人一起报名可半价，即两人费用总共为 599 元（只要证明两人都是在校生）。 声明：本活动不设体验环节，不提供退款服务，不开发票，报名前请务必考虑清楚。 报名方式：添加 00 的微信 kidult，注明「读书报名」。 最后每一年，真正能够跟好书相处的时光其实非常短暂。 标记想读的书越来越多，收藏的书单一个接一个，每次下单后发誓要好好读，结果拿到书以后兴奋地翻完第一章，书签就一直停留在那里，迎接着又一个新年。 明明知道书里的某个角落，藏着自己苦思而不得其解的答案。明明很想安静下来，专注在文字和思考之中。可是需要花费多少心力，才能从奔流不息的微信和微博中挣脱出来，静静坐下，进入另一个世界。 多说无益，坐言起行。 2017，17 读。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>Reading</tag>
        <tag>交互设计</tag>
        <tag>产品</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品经理的用研手册06 - 用研四式之「闻」]]></title>
    <url>%2Fpm-ur-handbook6.html</url>
    <content type="text"><![CDATA[产品经理的用研第二式：「闻」。换个说法，就是努力倾听。 很多产品的成功，其实并不来自于产品经理的灵光一现，也不是所谓的市场壁垒、技术壁垒，反而是最笨、最慢的方法，比如说，长期认真地根据用户反馈打磨产品。 关于倾听用户，流传最广的故事，是张小龙在打磨 QQ 邮箱和微信产品时总结出来的 10/100/1000 法则： 当我们询问用户之前，用户就主动地反馈对产品的看法，是特别珍贵的机会，让我们接触到真实的声音，从而发现改进机会。 当然，反馈的用户往往只占少数，如何利用这部分的反馈找到产品开发资源的投放点，也是产品经理功力的体现。 用户为什么会主动反馈？遇到问题一般来说，90% 的用户反馈涉及的都是使用过程中的种种问题。他们都是真实的用户，恼火的用户。这些反馈最直接地反映出产品没做好的地方，或者是跟用户预期不相符的地方。针对这些反馈，产品经理需要马上行动起来，去解决问题，以及去改善和用户的关系。 认同和参与除了 90% 的问题反馈，还有一部分特别宝贵的活跃用户，他们因为对产品和社群的认同，主动参与到产品建设中，提想法，提忧虑，提建议。这样一部分用户就像提供了一个快捷入口，让我们有机会去观察他们的生活状态，从他们身上验证产品的价值点，并且找到提升用户参与感的办法。 感想和感谢最让人欣慰的，来自那 1% 的用户，他们表达了对产品的感谢，会说出曾经的困境，与产品相识的过程，和关于改变的故事。他们是产品最忠实的用户，如果能给他们超出预期的回应，就能建立起最牢固的关系。 在看反馈的时候，不要被直白甚至难听的词语吓到。仔细地体会抱怨的点，去感受他们的情绪，想象他们的处境，与他们共情。这样更容易发现产品现存的明显问题并解决。当然，别忘记通过用户的反应，去验证当初设计时的预判。 如何收集和处理用户反馈收集用户反馈，只有一个方法——到他们会出现的地方去： 自有渠道：网站、App、客服、邮箱、社区、产品论坛 社交媒体：微信、微博、贴吧等 舆情监控工具 线下的真实场景 （除了收集自己产品的反馈，还可以看看竞品的反馈） 如果可能，尽量亲自回复反馈。尤其注意对言辞激烈的负面反馈的处理。比如，我们来看印象笔记在微博上回复用户抱怨的例子： 从时间上可以看到，印象笔记的客服团队响应还是很快速的，马上摆出了解决问题的姿态，随后也跟进并安抚了用户。在跟用户之间沟通的时候，可以用非暴力沟通的技巧去回应： 回复了用户之后，我们改做什么？有 bug 改之，这是自然。但是对于问题类、需求类的反馈呢？比如 我不知道怎么提现 为什么数据账单不可以下载？ 我想要 xx 功能 我们来看看某理财 App 内「不知道怎么提现」这个问题。用户并没有留下更具体的信息，这时就要根据经验，尽量把各种可能都罗列出来： 是没有找到操作入口吗？ —— 在任务节点的信息和引导设计需要改进 是误解了产品规则吗？ —— 比如需要先赎回到个人账户再体现，用户不清楚这个规则 是因为提现过程不符合预期吗？ —— 比如已经操作了，但是没有马上到账 然后去仔细走一遍用户可能经过的路径，代入他们的视角，去看看是否真的存在问题。 当遇到直接提出了解决方案的用户反馈时，也可以回顾一下本系列第三篇「产品经理的需求观」中把解决方案还原成需求的方法： 并且用需求评估的方法，来判断这个需求的重要程度： 不过，很多时候，仅凭用户反馈的只言片语，并不能很好地还原问题。比如，通过反馈是否可以获得以下信息？ 具体的使用场景 问题是如何产生的？跟哪些行为和操作有关？ 是什么使用户不爽？ 用户的目的是什么？他提出了什么样的解决方案，或者预期？ 如果无法回答，也许就需要准备好希望用户进一步提供的信息清单，然后做一次用户回访，向用户进一步询问。 下一篇，我们介绍关于如何询问的用研招式，最重要的第三式：问。 如需转载本文，请联系 uegeek@gmail.com 产品经理的用研手册01 - 朦胧的用户，懵懂的你 产品经理的用研手册02 - 你真的懂用户吗？ 产品经理的用研手册03 - 成也需求，败也需求 产品经理的用研手册04 - 做问题求解者，先对症后下药 产品经理的用研手册05 - 用研四式之「望」]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>设计师</tag>
        <tag>产品经理</tag>
        <tag>用户研究</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品经理的用研手册05 - 用研四式之「望」]]></title>
    <url>%2Fpm-ur-handbook5.html</url>
    <content type="text"><![CDATA[接下来的四篇文章，给产品经理们介绍四个最有效的用户研究招式：望-闻-问-切。 望，指观气色；闻，指听声息；问；指询问症状；切；指摸脉象。合称四诊 望对应的是观察用户行为，闻对应的是倾听用户反馈，问指的是主动询问或挖掘，而切的意思是做试验。 今天先来介绍第一式 —— 望。 让我们重温一个经典的故事： 当 Sony 引入 Boom Box 概念的时候，他们召集了一些潜在的消费者，组成焦点小组来讨论这个新产品应该是什么颜色的：黑色或黄色。经过这一组潜在购买者的讨论之后，每个人都认为消费者应该更倾向于黄色。这次会议以后，组织者对小组成员表示了感谢，并告诉他们在离开前每个人可以免费带走一个 Boom Box 作为回报。那里有两堆Boom Box：黄色和黑色。 结果是，每个人拿走的都是黑色！ 这是一个「身体很诚实」的忧桑故事。 人们时常言行不一。在调研时，用户可能会跟你说，「我觉得这个功能挺好的」，但是实际操作时就是不用。当「言」和「行」同时出现时，行动往往比语言更能反映人们的真实想法。所以，观察，或者更准确一些说，观察行为，是理解用户最基本的「招式」。 观察的目的主要有以下几个： 了解用户真实的行为 获得更丰富的场景信息 发现之前假设/预判不合理的地方 知道用户在使用过程中的表现，遇到哪些障碍，真实反应是怎样，有哪些应对策略 行为观察又可以分为到现场观察和通过数据观察。 观察现场行为1. 现场观察真实的行为一定是发生在某个具体的场景之中的。到现场去观察人的行为，可以获得最真实、最直观的感受。 比如，因为要做移动支付相关的设计，需要观察用户去便利店充值交通卡的过程。 当我们带着这个目的来到便利店，选好一个便于观察的位置。这时候，推门进来一个人，应该注意看哪些东西呢？ 使用者的背景被观察的使用者可能的年龄、职业，通过着装打扮推断大概的生活状况，从面部表情和肢体语言感受 ta 当前的情绪。 行动步骤被观察的使用者做了一系列什么动作？哪些行为引发了后续行为？ 比如，顾客进门以后，先观察店内环境（在哪里充值、人多不多），然后排队，排队时会做什么事情，接着是询问充值事宜，然后掏卡，放卡，付款，确认，拿卡，离开。 在这个过程中顾客和周围发生了哪些互动？ 与店员的互动：如询问是否能充值，回答充值金额，确认卡的摆放放置 与充值机的互动：寻找充值机，摆放卡片 与付款方式的互动：店员收现金，或者拿出手机使用微信支付 行动细节比如，在使用微信支付时，用户和店员各自的操作： 用户：询问是否可以使用微信支付，掏出手机，寻找并打开支付界面，递手机被扫，付款确认，收起手机 店员：回答关于支付界面的问题，收银系统操作，准备扫码枪，收回扫码枪，收款确认，告知顾客 行动时的情绪和态度除了具体的行为之外，还需要注意伴随行为的情绪和态度。比如，被观察者有什么表情，反应了什么情绪；说了什么话，语气语调如何；提了什么问题，为什么产生困惑；整个过程出现了什么样的情绪变化，进店和离店时的情绪对比。 观察的结果观察结束后，记录下核心的发现： 用户都做了什么事情 操作中会遇到哪些障碍 哪些因素对行为和体验有影响：如店员的帮助，店内手机信号是否良好，光线对扫码识别的影响等 还存在哪些未被很好满足的需求 观察了多个个体后，尝试总结他们的特点、行为共性 在现场观察中，我们容易观察到用户在实体空间内的行为、服务体验等，但是如果涉及到比较复杂、长时间的屏幕操作，就难以深入观察，需要用到类似可用性测试的方法。 2.测试环境下观察：可用性测试可用性测试是一套成熟的方法，帮助我们找出现有设计中的可用性问题，以便对症下药，提升使用体验。 ISO 标准中对可用性的定义： The extent to which a product can be used by specified users to achieve specified goals with effectiveness, efficiency, and satisfaction in a specified context of use. 可用性测试跟完全没有干扰的现场观察不同，一般会在人为安排好的环境下，让使用者操作一系列任务，然后评估有效性（任务完成率）、效率（完成时间）、满意度（自我评估问卷）。 跟现场观察相比，可用性测试有很多优点： 能观察到我们感兴趣的用户行为，而不是随机的行为 测试过程不被干扰 可以详细记录整个过程 有一系列标准衡量可用性的程度 可以与用户有深入的互动 完整而严谨的可用性测试大概需要 1~2 周时间，整个过程大概包括以下的主要步骤： 关于具体操作，这一篇就不再展开了，感兴趣的同学可以翻看「妙手回春-网站可用性测试及优化指南」和「Handbook of Usability Testing」两本书。 刚开始接触可用性测试，会觉得很复杂。好消息是，并非所有的测试都要按照完整的步骤进行。实际上，不同的步骤背后有不同的目的。如果我们只是想快速看看用户（没有任何限定条件）在某个界面使用某个功能的时候会不会遇到明显问题，那直接找两个朋友，给他们一个任务，试着操作一下，基本上也能达到快速测试的目的。 但是如果要得到较严格的可用性测试的结果，必需要精心控制以下环节： 如果想得到更靠谱的测试结果，召唤身边的用户研究员吧！ 观察行为数据除了观察行为本身，还可以观察行为的结果——数据表现。 在我们日常收集的用户数据中，有一部分是关于行为的数据，比如访问、浏览、点击、停留、中断、离开，这些行为会产生可观的数据，如果仔细观察，能发现不少问题。 通过数据观察行为的关键是，「你的问题是什么？」「你对什么感兴趣？」 比如说，我们最常关注点击量，用户对某个功能或界面元素的点击次数。这个时候，我们想知道的其实是什么呢？ 首先是行为密集度。点击代表了使用频次，这反映用户了兴趣或者关注点。当然，点击越多，不一定代表用户一定喜欢，也有可能是设计不合理造成的结果。 其次是行为变化趋势。某个核心行为，比如播放音频的次数，是否如我们预期的那样持续增长？增长多快？增长来自于哪里？意味着下一步需要采取哪些行动？ 再次是行为序列转化率。某个核心行为，前置的步骤有哪些？如何转化？转化比例如何？存在什么问题？ 不过，统计数字会撒谎，在相信数据之前，还应该尽量搞清楚数据的「底细」，比如： 数据反映的是什么 这个数据如何收集，有哪些组成成分，是否有遗漏 基准比率是什么，样本规模是否 ok 总数或平均值之类的数据，会损失非常多的情境信息 总而言之，数据会留下很多疑点，比如某个数据为什么完全不符合预期，某个数据为什么产生这样的变化。数据只能反映客观结果，但是需要结合其他方法去解读。 下一篇，我们介绍用研四式的第二式：闻。 如需转载本文，请联系 uegeek@gmail.com 产品经理的用研手册01 - 朦胧的用户，懵懂的你 产品经理的用研手册02 - 你真的懂用户吗？ 产品经理的用研手册03 - 成也需求，败也需求 产品经理的用研手册04 - 做问题求解者，先对症后下药]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>设计师</tag>
        <tag>产品经理</tag>
        <tag>用户研究</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品经理的用研手册04 - 做问题求解者，先对症后下药]]></title>
    <url>%2Fpm-ur-handbook4.html</url>
    <content type="text"><![CDATA[产品开发和运营过程中，每天都会遇到各种各样的问题。 有些问题，可以借助用户研究来帮助解答，有的则不行。先搞清楚病症和药方，才好对症下药，不然狂吃感冒药，也是治不好抑郁症的。 提示1：本文不涉及「如何解答」 提示2：用户研究不「直接」解答，而是「帮助」找到答案 不同阶段的问题产品的生命周期，无非「生、老、病、死」几个阶段。 生产品从 0 到 1 的过程。 对初创公司而言，这是生死攸关的过程。大公司是在执行已被验证的商业模式，初创公司是在探索未经验证的商业模式。这个阶段的未知和不确定性太多，其中有几个重要问题，可以通过用户研究得到辅助决策信息。 1.用户定义你的产品为什么样的用户提供服务？第一步，需要给出核心用户的假设。 回顾「产品经理的用研手册02 - 你真的懂用户吗」一文，我们知道，用目标和行为划分用户类型最为有效。然后，可以通过拆解用户不同层次的目标以及典型场景，来描述目标用户群体。 2.核心价值和解决方案产品能否成功，核心中的核心就是：为用户提供了什么样的价值？ 微信为什么成功？因为在移动场景快速普及的时候，它提供了联系人、信息、服务的 即时可得性。 初创产品，最需要打磨的就是这个核心价值点，而不是品牌、不是界面。需要从有产品想法的开始，就去思考什么样的人是你的目标人群。下面来看一个视频： 中欧教授龚焱：初创公司为什么会失败 视频中反复强调的一点，不要假设用户痛点已知；不要假设产品解决方案是正确的。 通过自己的圈子、社交网络，以及去到所假设的目标用户集中的地方，找到对产品原型感兴趣的人，了解他们被哪些点所打动，他们的目标、困惑，他们的生活状态。然后判断这个价值是大是小，你能多好地提供这种价值。 在产品初期，人群越明确，提供的解决方案越具体，资源越容易集中。 下面进入栗子时间。 假设我们要做一个产品，帮助大家解决这个问题： 减压放松 听起来这是个不错的价值点，谁不需要减压放松呢？不过，减压放松的方式有千万种，听音乐、蹦极、发呆、看书、泡澡、买买买…… 人在不工作的时候，可能做的 80% 的事情都是为了放松减压。所以，只是说放松减压，这不是真正提供给用户的独特价值。 那回到现实，我们不太可能承包一个公园去做蹦极，做个 App 还是可能的，于是解决方案变成： 放松减压 App 抱歉，并没有什么改进，只不过承认自己做的是一个 App。 这时候，我们尝试把人群假设、需求假设、使用场景假设、解决方案假设（产品形态和平台限制等）、体验假设加入进来，就可以这样描述： 针对工作、生活节奏快，容易产生心理不适和问题的人，提供一个遇到高压场景前缓解压力的手机工具，帮助他们快速放松，更放松而专注地面对挑战。 又或者是 针对压力大、身体不好而有睡眠障碍的人，提供一个睡前自助式的催眠音乐播放工具，帮助他们更快更容易进入睡眠状态。 是不是清楚多了？找到符合这些描述的用户，跟他们深入聊一聊，让他们看看产品原型。 不过你可能有点担心，这样会不会局限了产品的规模？别贪心，在前期，先做好最有把握、定语最多的这个细分市场。站稳脚跟后，再慢慢地通过丰富产品线，把定语们一个一个去掉。 3.产品市场前景的评估这一步很难做，不确定因素太多了。有一些可供参考的思路： 找到对初始产品最热心、付费意愿最高的人，分析他们的目标是独特的还是普遍的； 找到对初始产品态度冷淡的人，问问他们为什么不感兴趣，分析这些原因是否普遍，改变成本有多大； 聚合和总结最典型的使用场景，频率多高，是否是一种未来的趋势，是否容易受其他因素影响而变化； 如果想要触达一定规模的用户，主要方式有哪些，成本如何。 老「老」在这里的含义是成长，growth。这是一个产品经理职业生涯中最常处在的阶段。产品成长，意味着用户数量、影响力、收益的增长。如何帮助产品成长，是产品经理最重要的职责。 满意度 在提供核心价值的前提下，不断提高用户满意度、扩大影响力，是产品增长的正道。 测量用户满意度，研究影响满意度的因素并持续改进，是用户研究的核心课题之一。 活跃度 光满意还不够，得常来呀！什么样的产品让人流连忘返，爱不释手？什么是用户参与产品共建、内容贡献的最优方式？这些都是用户研究关心的问题。不同类型的产品，活跃因子都不一样： 工具性产品，可能是在使用时的快感，达成目标的成就感 内容型产品，可能是能让人发现更大的世界，或者更好地了解自己 电商平台，多快好省，挑花眼才是乐趣 社交产品，不论多独特，都能找到臭味相投的一群，不再孤单 不同产品，基因不一样，脸面自然也不一样。没有一招鲜吃遍天的绝技，必需根据行业和产品形态，深入到一线场景中去。 病和死「病」是指产品遇到了生死攸关的问题。最明显的例子莫过于用户大批流失、收入等核心指标持续下降。这个时候就要认认真真地研究「为什么」了。 人总有一死，产品也是。数码相机取代了胶卷，智能手机取代了功能机。或趁早转型，或理性地对待沉没成本，也是产品经理可能会遇到的课题。 收敛型问题和发散型问题用研为解答问题提供两种类型的信息：诊断类信息和理解类信息。 收敛型问题这种问题一般可以客观地描述出来，有唯一的答案，常用「是什么」的方式表述，比如： 用户的行为路径是什么 有两个选择，喜欢 A 还是 B 某个数据怎么样，比如下载量 竞品的表现如何 用研可以为收敛型问题提供诊断类信息。常用的方法包括：数据统计，问卷，竞品分析等。 收敛型的问题，需要有足够的定量数据支撑。如果现阶段团队不具备一些技术实现能力，比如 数据埋点和统计的能力 发放和回收网络问卷的能力 上线不同测试版本并且比对数据 那么期望通过用研回答这些问题，是不现实的。 发散型问题发散型的问题一般没有唯一确定的答案，需要通过丰富的上下文情境信息，启发对问题的思考，获得洞察。这类问题常用「为什么」和「如何」的方式表述，比如： 如何定义需求 如何定义目标用户 为什么数据没有达到预期？ 为什么用户在这里遇到问题？ 为什么对产品不感兴趣？ 用研为发散型问题提供理解类信息。常用方法包括：深度访谈，焦点小组，其他的特定活动如卡片分类等。 对于发散型问题，最好留有充足的时间，用来收集丰富的定性数据，因为定性数据必需深入接触到个人才能获取。如果你期望 两天内获得充足的定性数据 通过样本有限的定量数据，做出确凿的诊断 自己不参与分析，通过执行研究的人给出答案 那都是不现实的。因为定性研究的周期天然较长，目的是在充分的理解中产生洞察，而不是客观诊断。 很多人会质疑用研的有效性：一场 8 个人的焦点小组就能决定产品决策吗？ 当然不能，因为这种形式收集的是情境信息，让决策者了解问题的方方面面，帮助他们产生洞察，最终做出合理决策。洞察来自于人的解读，而不是对数据的呈现。 小结 在求解问题之前，先问问自己，这是什么类型的问题？属于产品发展的哪个阶段？是发散的还是收敛的？需要什么样的信息辅助决策？适合用什么方法收集数据？ 下一篇开始，我们介绍最常用的四个用研「招式」。 如需转载本文，请联系 uegeek@gmail.com 产品经理的用研手册01 - 朦胧的用户，懵懂的你 产品经理的用研手册02 - 你真的懂用户吗？ 产品经理的用研手册03 - 成也需求，败也需求]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>设计师</tag>
        <tag>产品经理</tag>
        <tag>用户研究</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品经理的用研手册03 - 成也需求，败也需求]]></title>
    <url>%2Fpm-ur-handbook3.html</url>
    <content type="text"><![CDATA[如果你根本不知道自己在讨论什么，那么对其强求精确是毫无意义的。 —— 冯·诺依曼 我们用「产品」这个词来表示那些试图满足一系列复合期望的产物。复合意味着它们来自许多人。找到谁是这些「人」，是明确需求的一个主要部分。上一篇，00 分享了一些如何分类和描述用户的经验： 接下来，我们将要走进需求的沼泽，深入产品开发险恶的腹地，看看需求这个妖孽如何把众多产品经理拖入泥潭之中。 需求很关键，可现实往往是，人们不知道自己想要什么；而且，产品经理不知道人们想要什么；雪上加霜的是，产品经理不知道人们不知道他们想要什么……产品开发再高效也好，都是一种浪费。认真探索需求，我们才不会做出然并卵的产品。 关于万恶的需求，有两个最最关键的问题： 能清楚回答第一个问题，是合格的产品经理，能正确回答第二个问题，才是好的产品经理。 需求是什么从前，有一只狡猾的妖孽，叫做「需求」。 它长着一张模糊的脸，而且是一张会千变万化的脸，最善于迷惑那些苦苦寻找它的人。不同的人看到这个妖孽，描述出来的样貌都不一样，似乎从来没有人能识别它的真面目 —— 还是说，它就没有真面目？（摊手） 区分需求和解决方案人们之所以经常被需求妖孽所迷惑，还因为他/她/它经常跟另外一个妖孽「解决方案」互换躯壳，所以懵圈的人们经常追着「解决方案」喊「需求」。为了早日让需求妖孽现身，我们需要练就一双区分它俩的废眼，哦不，慧眼。 举个栗子 在编辑模块中，用户需要一个预览页面 在抓需求妖孽的时候，一不留神，我们会在急忙之中抓过来一只解决方案妖孽，睁眼瞎地指着它说：呔！这就是需求，快给我拿下~ 这个例子中，预览页面就是被误捉的解决方案妖孽，而需求妖孽还在附近不知道哪个角落悠闲地游荡着。 捉错妖孽，会给我们制造很多麻烦： 误解实际的需求 带着过多假设和预判去思考 错过更佳的解决方案 在这里，00 介绍一个识别两只妖孽的简便方法。 需求妖孽往往这样长着这样的嘴脸： 我想【达到什么目的】 需求一般应该带有更多关于状态、行为、态度的描述。 解决方案则往往可以这样描述： 我要【有什么特点的东西】 它已经开始描述对象是什么样子。 来来来，下面进入栗子时间。我们活捉一只妖孽，听听它说了些什么。 我想要一个循环播放的按钮 嗯哼？ 开始描述对象了。这厮是解决方案妖孽！ 别着急把它推开，每当我们发现又捉错了妖孽时，不妨对它进行逼问，它会老实告诉你需求妖孽的藏身之处。逼问的方法很简单，只有三个字 ——「为什么」： S 妖：我想要一个循环播放的按钮 你：为什么？ S 妖：我想循环播放歌曲 你：为什么？ S 妖：我想连续播放喜欢的歌曲 你：为什么？ S 妖：你是复读机么？…… 我想在睡前连续播放喜欢的歌曲 你：为什么？ W 妖：妈呀救命这是复读机妖……我希望在不能/不想人为操作重复播放时，我喜欢的歌曲能够连续播放 逼问过程中，需求妖孽自动现形了！这就是歪歪歪复读机大法。 在更具体的需求描述中，类似场景信息如「睡前」、体验预期如「不想人为操作」、隐含需求「播放喜欢的歌曲」等，都会浮现，这对具体的方案设计提供了更多决策信息。 更多关于用户需求的挖掘和分析，请留意本系列后续的文章。 区分用户需求和业务需求好了，需求妖孽总算抓到了。 不过这厮可不是省油的灯，一不留神，它又使出分身术，变成两个妖孽：一个叫用户需求妖，一个叫业务需求妖。用人间的话来说，用户需求是「用户想要什么」，业务需求是「我们应该怎么做」。 难道用户想要的不就是我们应该做的吗？是，也不是。 用户想要的是结果，我们应该做的是保证得到这个结果的所有环节，包括用户看到的每一个界面、从他们那里得到的输入数据、帐户生成和标识、数据存储和传输、计算、请求、加密等等等等，全部都是业务需求。 业务需要达到一定的使用量、访问量、购买量、转化率，这些需求都跟用户需求有关，但实际要做的远不止用户所表述的需求。用户并不需要注册，但是业务需要获取和保存用户信息；用户不需要统计上报自己的数据，但是业务需要数据辅助分析和决策，等等。 你的团队，如何处理业务需求和用户需求的关系？ 需求值不值得做需求捉妖过程对产品经理来说，已经足够有挑战了，但真正的好(da)戏(keng)还在后面。 产品开发的资源永远有限，哪些该做？哪些该先做？ 关于值得不值得的问题，实质是 ROI （投入产出比）的问题。如果能算清「用多大成本实现了多大价值」这笔账，做出合理的判断应该不难。 困难的是，这笔账似乎永远都是一笔糊涂账。 我们来尝试理理思路。 帮助用户实现价值，业务和产品就有价值，从而获得收益。假设这个推论成立，那么问题可以描述成：哪些需求可以放大用户价值？想一想平时我们离不开的产品，它们带来了哪些价值，为什么离不开？00 总结了一个判断用户价值的简易公式： 需求强度人们有多需要一个东西，由两个问题决定： 有多痛/痒？ 有多稀缺？ 痛痒的问题，其实就是我们常说的是否「刚需」。但是刚需也因人而异，比如说，VPN 对我来说是刚需，对我妈则不是。那么怎么可以更好判断出痛点/痒点呢？ 一个角度，是从使用者自身出发，分析这个需求的四个特性： 价值：比如，多大程度上帮我省钱省时间，实现人生目标 预期：比如，买个旅行机票，帮我把签证都办了 可陈述程度：比如，美颜只是显性的，万人迷是隐性的 已满足程度：这个就不用距离了 另外一个角度，则是从外部同类产品的比较来看，著名的 Kano 模型： 根据满意程度和重要程度划分功能需求： 及格线：大家都有的你没有，就会被骂辣鸡 备胎线：恰好达到行业平均水平，也只是个可以当备胎的良民 粉丝线：人无我优，远超期望，用户一接触就会内心惊呼「卧槽」，然后路转粉，粉转脑残粉 以上是痛/痒问题。稀缺问题则比较好理解。市场上有哪些同类或类似的解决方案？你的产品有多独特？用户通过什么渠道接触到？这些渠道你有多大的份额、影响力、把控能力？物以稀为贵，稀少的东西，总是能加强痛点和痒点。 使用频率判断出需求强度以后，还需要考虑使用频率。典型的例子是旅行市场，需求巨大，但就是频率太低，活跃度和留存率都不好做。考虑使用频率，可以从用户比例和场景频率两个维度出发。 多大比例用户想要？ 需求场景的频率如何？ 这两个问题虽然很难得到准确的数据，但是仍然要想办法估算。上一篇文章介绍的用户快照这个时候就能够派上用场。 如果与实现用户的行为目标强相关，使用频率应该较高。比如，电商平台的购物车功能 如果最重要的用户类型需要它，使用频率相对较高。比如，某直播平台最重要的用户类型是游戏玩家，那么主播的游戏等级可能就变得重要 典型场景的客观发生频率较高，使用频率应该较高。比如，用来 p 朋友圈图片的工具 典型场景在用户生活中地位重要，使用频率相对较高。比如，每天上下班要在地铁里呆上两小时，看书听歌看视频的频率就会更高。 花了这么长的篇幅分析了如何判断用户价值，这只是 ROI 的 R （Return）部分，至于 I （Investment）的分析又是另一门学问。毕竟这个系列写的是用研手册，产品经理专职范畴内的难题，就不继续展开了。 警惕伪需求需求妖孽之所以是妖孽，不但因为行踪诡秘，而且容易被冒名顶替。伪需求们是资源的黑洞，怎么填都填不满。如何识别伪需求呢？它们一般会以这些面目出现： 伪装成解决方案。这个上文已经仔细分析过。 伪装成常见场景。作为果粉 + watch 黑，00 一直觉得 Apple Watch 把边缘场景成功伪装成常见场景。在一个手机不离身的时代，手表真正能替代手机的场景有多少呢？ 伪装成大部分人的需求，实际上只是枝节需求。如果不清楚自己产品的用户类型，不清楚哪类用户是最重要的，这种伪装就容易蒙混过关。比如当年已经做出来但没有最终上线的微信朋友圈滤镜功能。滤镜多好啊，大家都需要，Instagram 是成功案例，新浪微博有，QQ 空间也有，为什么不做呢？微信一定能做出强大好用的滤镜，但是，微信为什么要提供一款滤镜功能呢？大家发朋友圈的动机到底是什么呢？如果没有好友关系的沉淀，丰富有趣的互动方式和氛围，就算在微信里面再造一个 Instagram 又有什么意义呢？ 伪装成可以脱离商业模式而存在。这是最可怕的伪装。没人不喜欢 Kano 模型中远超预期的功能，但是这些功能为什么往往大家都没有提供？原因多半是：不经济，不可持续。 关于折磨人的需求，就讨论到这里。 下一篇我们介绍用户研究主要能解答什么类型的问题。 如需转载本文，请联系 uegeek@gmail.com]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>设计师</tag>
        <tag>产品经理</tag>
        <tag>用户研究</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品经理的用研手册02 - 你真的懂用户吗？]]></title>
    <url>%2Fpm-ur-handbook2.html</url>
    <content type="text"><![CDATA[​如果你错过了本系列的第一篇，请戳：​​​ 产品经理经常会被问起一个问题： 你们产品都是哪些人在用？ 这时候，很多产品经理只能支支吾吾的挤出类似「女性」、「25-30岁」、「白领」几个无力的词汇，发现自己其实描述不清楚谁是目标用户。 不同产品的用户，少则几百，多则数亿，每个人看起来都不太一样，应该怎么理解和描述他们呢？ 先抛开产品和用户不谈，想一想我们是如何认识世界的。 为了认识植物和动物，把它们分成不同的种、属、科；为了更深入品尝天朝的美食，分成八大菜系；为了理解不同的音乐，分成摇滚、民谣、爵士等不同风格；为了在电商网站更容易找到商品，出现了庞杂的分类…… 为了增进理解，我们最常干的一件事情是：分类。 用户如何分类？那么，接下来的问题是：如何有效分类？ 答案是：找到合适的维度。 八大菜系有地缘和饮食文化传统作为区分，那么用户应该按什么维度划分呢？ 最容易想到的，当然是人口统计学信息：性别、年龄、职业、收入、地域等。这些信息容易获取，容易描述。 可是容易获得不代表容易使用。比如，一款健康饮料的主要用户群是 25-30 岁之间的女性，然后呢？意味着什么？写公众号推送的时候，要多用粉红色的图片吗？…… 那么，用「高端」、「低端」划分呢？问题是，怎么准确定义「高端」呢？高端是收入高、什么都懂、喜欢高逼格的设计吗？即便条件都满足，如果你做的是一款功能强大的 VPN 客户端，是根本没需要也没时间钻研的「高端」人士需要呢，还是一群为了追踪麻豆 twitter 更新的疯狂高中生更需要？ 再想想，还有哪些用户属性对产品决策有帮助？ 分类维度 用户属性 人口统计学信息 性别、年龄、职业、地域 接触产品的渠道 设备、操作系统、平台、网站、App 需求动机 需求、使用动机、留存原因、产品选择偏好 使用行为 使用场景、操作习惯、使用频率、付费意愿 操作经验 使用功能的广度和深度、同类产品使用时长 在互联网产品设计中，更加关注用户如何看待、使用产品，如何与产品互动，这是一个相对连续的过程，人口属性特征并不是影响用户行为的主要因素。真正区分用户如何使用和看待产品的，是目标和行为。 目标我们最关心用户产生的各种行为，比如会不会购买、用多长时间浏览、是否能顺利使用某些功能，等等。而驱动行为的，是目标。毕竟，行为只是手段，目标才是终点。 比如，知识型工作者，每天会遇到相对独立的信息片段，需要快速记录、存储起来，方便日后查找。那么他们会需要一个记录工具，会在常用的设备上有类似的使用行为。 如果我们能首先关注用户的目标，就能够更好地解读用户需求，以及不同用户群体之间的差异。 不过，目标有时候也很容易让人困惑，比如： 我想买到最便宜的站立办公台 我想有人帮忙打扫卫生，而我只要舒服地躺在沙发上 我想迎娶白富美，走上人生巅峰 你会发现，这些目标的层次不同。有些目标，我们知道该怎么有针对性地提供解决方案。但是类似走上人生巅峰的目标，我们则不知所措。 那么，如何更清晰地描述目标？ 诺曼在「情感化设计」中，将设计目的分为本能、行为、反思三个层次。Alan Cooper 据此划分出用户目标的三个层次： 1.行为目标用户在使用某个具体产品时进行操作的动机，在他们心目中期望的结果。因为行为的处理过程，会影响本能和反思的反应，因此，行为目标是决定产品整体体验最为显著的因素之一。比如，以下这些可以称为行为目标： 在回家之前清理办公桌 基于数据做出明智的商业决策 买到想要的东西然后离开 发朋友圈之前修饰照片 行为目标是产品行为、任务、外观和感觉的基础。 2.体验目标体验目标表达了人们在使用产品或者与产品交互时所期望的感受。它让人们关注于产品的视觉和听觉特性，以及互动过程中的感受。比如： 有乐趣 感觉酷、时髦或者放松 保持注意力集中，很清醒 一切尽在掌控之中，感觉棒棒哒 3.长期目标长期目标描述用户的长期期望、动机和自我形象的特征，表达了用户的个人渴望甚至是人生目标，是深层的驱动力和动机。它通常超越了产品设计的情境，能够解释为什么用户要尽力完成各种行为目标。比如： 过美好的生活 成就一番事业 成为某个方面的行家 让周围的人喜欢并尊敬我 现在，我们可以区分这些目标的层次了 我想买到最便宜的站立办公台 —— 行为目标 我想有人帮我打扫卫生，而我只要舒服地躺在沙发上 —— 体验目标 我想迎娶白富美，走上人生巅峰 —— 长期目标 在对待目标这件事情上： 不合格的产品经理直接无视，已经在画交互图； 普通产品经理首先关注行为目标，能否帮助用户达成行为目标，直接决定了产品的基础价值； 文艺产品经理关注体验目标，比如上面打扫卫生的例子，用户在意的并不是打扫得多干净，而是躺在沙发上啃啃薯片就能看着家里变干净的快感； 神级产品经理直抵人生目标。什么样的产品用起来时尚时尚最时尚？ 典型使用场景通过行为目标、体验目标和长期目标，我们能基本区分出不同的用户。但是这还不够，目标相同的人，一定有类似的行为吗？也不一定，因为具体行为由场景触发，而场景包含了更丰富的信息： 时间：用户一般在什么时间段，或者什么事情的前后使用产品？ 地点：用户在什么场合、通过什么设备和什么渠道接触和使用产品？ 目标：用户的行为目标、体验目标和长期目标分别是什么？ 行为：为了达成目标，最核心的行动步骤有哪些？ 痛点：这个过程中，有哪些让人难受、不符合预期的地方？ 策略：为了达成目标，用户会采取什么样的做法提升效率和效果？ 用户快照卡片模板我们把用户目标和典型使用场景的要素串联起来，拼成描述用户快照的模板： 典型用户小 P 123456789101112131415小 P 使用产品的主要目的是【行为目标】。 他一般会在【场景1时间】【场景1地点】访问产品， 进行【行为】。 这个过程，他希望【体验目标】， 但是他发现【痛点】， 一般他会【策略】。 小 P 可能还会在【场景2时间】【场景2地点】访问产品， 进行【行为】。 这个过程，他希望【体验目标】， 但是他发现【痛点】， 一般他会【策略】。 经常使用产品，能让小 P 感觉【长期目标】 典型用户小 D 典型用户小 E …… 练习：假设我们根据目标和行为模式，把某电商的用户分成三种类型： 完成任务型（老公被委派买日常用品的任务） 体验乐趣型（经常淘出好东西的购物推荐达人） 明智决策型（为买到性价比高的跑步机的发烧友） 试着用卡片模板，写出更详细的用户快照。 为什么是快照而不是模型、角色或其他？这样的用户描述，我把它称作用户快照。 快照得来成本低，包含较丰富的信息但可能不全面，甚至有失偏颇 —— 毕竟只是一瞬间的捕捉。 它可能有偏差，甚至是错误的。这个快照只是一个假设，有待验证。所以它不能成为用户模型、用户角色、用户画像，因为，这个过程并没有加入真实的用户信息，很多理解和描述还有待验证。 有了快照，只是给出了比「女性」、「25-30岁」、「白领」更具体、实用的用户描述，但这仅仅是第一步，对用户的描述只是真实世界的一个映射。在瑞典军队中，有一条广为流传的原则： 当地图（映射图）和实际地形不同的时候，永远要相信实际地形。 所以，在有了用户快照之后，我们需要做更多的事情： 在接触到较完整的用户信息时，看看如何将其归类，验证快照是否合理 尽可能接触不同类型的用户，提取他们的目标，修正用户分类 做完整的 Persona，将快照作为假设，进行定量数据聚类检验 …… 如何分类和描述用户的经验，就分享到这里。 下一篇我们讨论需求，模糊的需求，折磨人的需求。 如需转载本文，请联系 uegeek@gmail.com]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>设计师</tag>
        <tag>产品经理</tag>
        <tag>用户研究</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[产品经理的用研手册01 - 朦胧的用户，懵懂的你]]></title>
    <url>%2Fpm-ur-handbook1.html</url>
    <content type="text"><![CDATA[一入产品深似海，无奈苦逼无处说。 产品经理都是操心的命，背锅的主。一个成功的产品经理，需要搞砸过多少项目，坑害过多少设计师和工程师，还得练就在失败后活埋自己再自掘坟墓原地满血复活的 bug 招。 产品经理的苦，来自理想与现实的差距，来自决策的压力，来自未明的模式，来自资源瓶颈和死线，来自跟设计和开发的鸿沟……在各种不确定和不明朗当中，有一种痛，无声而绵长，杀人于无形，它叫做： 这种互联网式的 SM 故事每天都在上演。 每每我们被自己的这种初恋斯德哥尔摩综合症感动时，真该有人来当头棒喝：被虐三遍还不知悔改，活该天天初恋……面向对象做产品，如果这个「对象」一直是朦胧的，我们也只好像包办婚姻中的小媳妇一样懵懂。 从情窦初开到阅人无数，「搞懂对象」是必修课。「搞懂对象」的其中一个办法，叫做「用户研究」。 曾经遇到过不少产品经理（包括我），在分析需求时一筹莫展，在决策时苦于缺少依据，在给老板汇报时捉襟见肘。时常因为拿不出令人信服的理据，缺乏高情商和煽动性，在推进项目时不免感到阻力重重。 这些苦头，我都尝过。我是创业团队的产品经理，曾经是微信的设计师、网易和腾讯的产品经理、也在网易担任过用户研究员。这个系列，写给想进一步了解用户研究的产品经理，尝试解答以下问题： 用研可以帮助产品经理解决哪些问题？为什么产品经理要做用研？ 怎么更有效地分析用户和需求？ 有哪些简单实用的用研思路和方法？ 团队没有研究员，产品经理如何低成本地做用研？ 产品经理绕不开的槛不论处在产品发展的哪一个周期，产品经理最重要的工作，是为了达成产品目标所做的各种「决策」和「沟通」。 从战略、业务方向，到产品概念、细节设计，每天都需要做出数不清的大小决策，并且把这些决策同步给团队其他成员，推动产品目标实现。 残酷的现实是，在各种决策过程中，产品经理经常被诟病「拍脑袋」、「想不清楚」、「智商下线」，自己很多时候也会觉得底气不足： 到底做这个决策的依据是什么？ 有时候能说出个所以然，有时候简直抓瞎。 在商业产品的语境中，想要达成诸如流量、收入、市场占有率等目标，总也绕不开「持续为用户创造价值」这个命题。于是，很多决策都会围绕用户需求和用户价值展开。比如 我们为一群什么样的用户服务？从哪里触达到这些用户？为他们提供了什么价值？这些人为什么会选择我们的产品？什么样的功能和服务能满足他们的需要？他们在使用产品的过程中会遇到什么问题？…… 产品经理是用户需求和价值生产过程之间的桥梁。所以，能深入理解用户是对产品经理的基本要求。 怎样理解用户？如果没有乔帮主式的天赋，只能通过大量的练习，通过频繁地接触和研究，不断加深对用户的理解。好消息是，练习的机会很多，它们其实就是产品经理每天被拷问的种种问题，比如： 目前对购买转化率影响最大的环节是哪个？如何优化？新上线的评论功能使用量很低，问题出在哪里？如何吸引更多的讲师来到内容平台发布课程？…… 除了大量的决策，产品经理的另一个工作核心是对内和对外的「沟通」。 在团队内部，产品经理发起和推进项目，并且向团队各种角色同步关键信息，比如，告诉设计师需要设计什么样的流程和界面，告诉工程师要实现什么样的功能、获取哪些数据。 但是在这个过程中，很容易因为沟通不充分产生各种误解和摩擦。设计师认为产品经理没有仔细分析用户需求，工程师认为产品经理提出了冗余的功能——应不应该做、怎样做、什么时候做好，团队花费大量时间站在各自的角度去辩论，而不是想办法一起提高效率、解决问题。 如果有适当的用户研究，可以帮助大家聚焦到问题和解决方案上，减少无目的、反复的需求论证。 同时，在对外沟通中，如果产品经理更了解用户，就能更好地跟用户互动。在外部合作时，结合双方用户群体的重合度、用户需求的特点，更容易找到合作点，实现利益最大化。 为什么用户调研没有用？可是，广告不等于疗效。 在现实中，风风火火立了项，找了不少用户热热闹闹做了一通调研，可是最后好像只留下一个并没有什么新鲜结论的调研报告。渐渐地，大家开始觉得用户研究货不对板，食之无味，弃之可惜。 为什么？ 首先当然是成本太高。 互联网产品的更新迭代速度以周、甚至以天计，可是用户研究项目从立项、方案设计、执行、分析到结果，动辄数周，这种节奏难以匹配需求。为了快，大家更倾向于用「试错」的办法，而不是充分论证再行动。 用户研究之所以耗时长，分工过细和缺乏研究训练也是很重要的原因。产品经理与用户研究员之间要经过反复的沟通，确定研究需求、研究目的。执行过程中，产品经理和相关人员没有参与，导致研究员要花费大量时间解释和重现过程，以及说明结果的推导。如果产品经理更了解用研的方法，参与重要过程和结果的讨论，就能大大缩短研究周期，也可以迅速运用研究结果。 用研无用的第二个原因，是缺少对决策有直接帮助的结果。目的不明确的用研项目，很容易流于形式，只给出一些表面的描述，但是无法辅助决策。而产品经理更清楚需要做出什么决策，以及需要哪些信息、数据支持。由产品经理去发起用研项目，更容易得出可以实际运用的结果。 第三个原因，是研究的初衷本身就不对。用户研究的目的，主要是发现「未知」，从而获得新的理解、做决策的新证据。但是在很多情况下，用户研究被用作「证明」已知，比如「证明」改版后的效果，「证明」某个功能是有需求的。 李明远曾经写道： 大部分公司，在做产品和决策以前都会安排调研，不论是模仿还是原创，这很正常。但不少是带着潜在的预期假设去调研，这就麻烦了：如果你已知结果、去选择缔造该结果的调研对象去研究分析，然后通过解读一些已经成为事实的局部现象，那你的调研结果一定就是你已经知道的、之前想要的，几乎不会有例外，很多人是带着自己知道的结果去证明自己想的应该是对的，这不是调研，调研是对已知事实部分有未知结果和发展的（是帮助形成思路、启发而不是具体决定的），是用于防止决策错误和片面思维，而不是单纯以此形成决策的。 正是因为存在种种问题，产品经理更加应该亲自参与用户研究。因为做用研的本质是：解答问题。不是说不需要用户研究员，产品经理自己上就得了。关键在于，产品经理是对问题最「痛」的人，必需参与到问题求解的过程中。或者用一套比以前更系统的办法寻找答案，或者跟用研同学一起更高效地完成。 产品经理做用户研究如何避坑没错，广告不等于疗效，但是说葡萄酸可能只是因为姿势不对。 既然用户这道坎无法绕开，那我们就试着用更正确的姿势去做好。 当然，产品经理最重要的工作不是做出专业的研究，入坑之前不妨参考如下建议： 谨记目标：获得辅助决策的一手信息 理清问题，识别自己的基本假设，是最重要的步骤 过程可能比结果更重要 尽量逻辑严谨，但不要事无巨细 无论团队中有没有专职的用户研究员，产品经理都应该参与其中。这个过程中，可以外包交给用研同学的部分： 研究设计 研究对象筛选和招募 研究执行 数据收集 结果统计 更多精力要投入在无法外包的部分： 确定研究目标 直接接触用户，获得综合的情境信息 解读结果 思考如何将结果用于决策 写给产品经理的用研手册系列作为一个产品经理，很容易找到介绍用户研究的内容。但是，那些内容要么是研究员写给研究员的，产品经理看得云里雾里。要么就是比较零散，不成体系，对一个问题产生兴趣后没有下文了。要么干脆是在简单地罗列各种方法，比如搜一下「用研方法」，一定能找到这种让人兴奋的图，感觉像发现了新大陆： 可是，对着图盯了十分钟，然后呢？一个一个方法去学习？学完以后，发现还是无从下手。以及，跟实际工作到底有什么关联？ 产品经理和用户研究员的困惑，我都深深体会过。所以，这个系列不会按照「用研方法分类-用研方法讲解-案例」的方式写。让我们从产品经理的难题入手，去看看用户研究到底如何帮助产品经理解答问题： 怎样算了解用户？如何对用户进行分类和描述？ 如何更有效地针对人群进行需求分析？ 哪些用研手段能解答什么类型的问题？ 用户研究最常用有效的「招式」有哪些？ 用户研究思维的本质是什么，如何配合快速迭代的节奏？ 用户研究结果如何促进沟通？ 欢迎关注 如需转载本文，请联系 uegeek@gmail.com 参考 用研无用？——对用户研究实践的思考 – 腾讯CDC 用户研究如何做才能为产品设计提供实质性的帮助？ - 知乎 用户研究需要注意哪些问题呢？怎样做好用户研究呢？ - 知乎]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>设计师</tag>
        <tag>产品经理</tag>
        <tag>用户研究</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最好的时代，最坏的时代：一个互联网职业迷茫症患者的问题清单]]></title>
    <url>%2Fbest-worst-era.html</url>
    <content type="text"><![CDATA[不久前，有一些关注了 HackYourself 的朋友问，你怎么不写产品设计相关的文章？ 并不是不想写，有时候身陷其中，反而不知道该从何下笔。HackYourself 解答我自己对成长和长时程问题的困惑。而对于我所在的这个行业，这个瞬息万变、野蛮生长的行业，这个日日起高楼、宴宾客、楼塌了的行业，这个不在乎你穿什么只在乎你有多少热情的行业，这个如磁石一般吸引着像你像我这些年轻人的行业，它带给我的困惑多得简直就像空气一样稀松平常。 我在互联网高速发展之初加入了这个行业。当时，产品有限，同行不多，可以找到的资料就那些，成功案例更是稀少——不是大家都做砸了，而是根本没有做过。 每天，都带着很多困惑去工作：关于岗位、关于工作内容、关于种种新知、关于人际、关于缥缈未卜的前途。因为有很多疑问找不到人解答，我甚至通过多次换岗的方式，来到问题跟前，让它近得可以看清脸上的纹路，然后去接受它的猛击，然后趴在地上去找答案。 结果是，部分困惑渐渐有了答案，而新的疑问还是源源不断。当迷茫症发作时，也有萌生过离开这个行业的念头。当然这些念头都被迷茫症的并发症所打消：越被虐，越喜欢被虐。于是，迷茫症+斯德哥尔摩综合症抖 M 患者，选择继续见证这个最好的时代、最坏的时代。 也许现在的你，同样有满脑子的不解，一肚子的不确定。何况今天的行业资讯，已经百倍于几年前 —— 你的迷茫症，一定不轻吧？ 你是产品经理吗？我曾经是产品经理。是创业团队轻松冥想的产品经理，是 QQ 空间数据挖掘的产品经理，是网易邮箱的产品经理。 在刚入行时，怎么也找不到产品经理的准确定义，还有接踵而来的各种问题： 产品经理的职责有哪些？产品经理到底需要具备什么能力？怎么培养？到底什么是好的产品经理？真的人人都可以是产品经理吗？新手产品经理怎样快速熟悉每一个业务细节？需求是什么？要怎么确定一个需求要不要做？怎样跟设计师和开发沟通？他们做的东西我都不太懂需求评审要怎么准备？怎样写需求文档？为什么没有模板？用户反馈好多，该怎么办？…… 好不容易熬完几个项目，有了一些感觉，新的问题又袭来： 项目的效果怎么评估？数据怎么统计？数据变化了怎么解读？数据没有达到预期怎么办？为了达成某个目标需要增加什么功能？团队资源很紧张，怎么安排优先级？项目怎么按进度完成？产品有哪些体验问题？怎么做用户调研？设计细节有很多问题，怎么提升？项目涉及的技术我不懂，怎么办？跟推广运营内容的同学怎么配合？需要跟外部合作引入资源，该怎么合作？怎样分解 kpi？还有两个月怎么让数据达标？…… 好不容易把常见的坑都趟过一遍，但是面对 0 到 1 的问题，还是手忙脚乱： 什么决定了一款产品的成功？产品的核心到底是什么？商业模式如何设计？如何验证？如何定义核心用户？如何定义最小产品？精益创业和 growth hack 都是怎么玩的？最小产品出来了，如何验证模式？迭代速度和版本节奏如何控制？怎么解决冷启动和流量获取问题？有限的资源怎么最大化利用？如何向市场和投资人讲故事？…… 产品经理都是操心的命，背锅的主。 一个成功的产品经理，需要搞砸过多少项目，坑害过多少设计师和工程师，还得练就在失败后活埋自己再自掘坟墓原地满血复活的 bug 招。 毕竟，产品经理都是被委屈撑大、被失败养胖的。 你是设计师吗？我曾经是交互设计师。是微信支付的设计师，负责智慧生活行业方案和 O2O 设计；是酷狗音乐交互团队负责人；是网易邮箱的交互设计师。 这是我最热爱的岗位。所以你有的困惑，我一定都有过： 交互设计是做什么的？怎么用一句话解释？交互设计有什么价值？交互设计师到底有没有前途？交互设计需要具备什么技能？怎么培养？为什么交互设计会沦为画线框图的？优秀的交互设计作品是怎样的？需要交付什么？交互设计师如何跟其他岗位合作？如何体现岗位价值？如何在项目前期参与？项目时间紧，没有时间做分析和调研怎么办？怎么进行项目评审？怎么能一次通过？如何分析用户需求、业务需求、设计需求？如何主导设计过程？如何引入其他角色参与设计？网页设计怎么做？客户端设计怎么做？移动端设计怎么做？后台怎么做？如何制定规范？如何推广和使用规范？…… 等到有能力设计复杂产品的交互、设计多个终端产品的体验时，发现更大的挑战正等着你： 如何组建设计团队？如何跟产品、视觉、用研、开发、测试团队配合？如何规范设计流程？如何推广用户体验理念？当体验超出屏幕，如何设计整体的服务体验？当使用场景发生在真实环境时，如何引导用户完成复杂流程？线下的体验如何设计和评估？如果无法控制线下体验的细节，怎么办？大到一个行业的服务解决方案要如何设计？跟多个团队、多种角色合作时，如何更好地发挥交互设计的价值？如何跟不同行业的合作方迅速建立深入合作关系？如何推广设计方案？新的交互平台出现了，新的交互范式会是什么？提供了什么样的可能性？…… 人+设计+技术，多么有趣而梦幻的组合！问题？再来一打！ 你是用户研究员吗？我曾经是用户研究员。在网易用户体验设计中心，服务过网易门户、有道云笔记、有道词典、网易邮箱、网易云阅读、网易微博等产品。 在那个年代，极少公司有用户研究的职位。不但要在稀少的前人经验上独自摸索、快速学习，还得肩负起普及用户研究和用户体验的责任。 用研能解决哪些问题，不能解决哪些？什么是定性研究，什么是定量研究？常用的用研方法有哪些？可用性测试怎么做？访谈怎么做？焦点小组怎么做？卡片分类呢？情绪版呢？入户调研呢？如何针对问题设计调研方案？怎样快速招募到符合条件的用户来做调研？什么是聚类分析、方差分析、统计检验？如何让人信服研究过程和结果？…… 相比起本职工作，更多的困惑来自这个岗位的特殊性： 项目迭代速度太快了，但是用研项目周期都很长，怎么办？研究结论提不出产品、设计马上可以执行的建议，怎么办？用研跟产品、设计的关系是什么？他们需要什么？应该如何配合？如何让团队其他角色参与到用研过程中？如何向没有相关知识的同事快速解释清楚用研的思路和方法？…… 作为弱势群体，用研的同学们一直都在求解行业的巨大难题：如何既靠谱又快速地解答问题？一旦注入科研思维，建立起更严谨方法体系，这个行业的发展一定会成倍加速。 你是为了毕业和工作迷茫的学生党吗？感谢毕业时那场金融危机，让我选择了这个行业。 求职时的忐忑，今天仍记忆犹新： 我的简历怎样才能让 HR 感兴趣？校招要么错过，要么笔试就挂，怎么办？听说这个岗位竞争很激烈，我有什么优势呢？每一次面试都超级紧张，怎么办？怎么找到实习机会？该选择外企/私企/国企/公务员？大公司/小公司？应该去哪个城市？…… 当年，主流手机系统还是塞班，Wikipedia 被墙，开心网红极一时，微信远没有诞生。 当我跟研究生导师说要去互联网公司工作时，他不解地问：一个网站有什么好做的？当时我答不上来，因为我不知道这个行业到底有没有前途，只知道我喜欢它，一天到晚泡在上面，虽然我并没有听过用户体验、交互设计这些名词。 剩下的，也都只是迷茫： 这个行业有前途吗？我能做什么？还会经历类似上一轮的泡沫然后失业吗？这个工作跟专业完全不对口，这 6 年岂不是白读了？产品经理是一个什么样的职位？我能做好吗？我这性格适不适合做产品经理？这个行业成功的前辈他们都是怎么做的？需不需要出国再深造一段时间？…… 别怕，今天我们有更多的同路人。 改不改变潮水的方向，并不重要。重要的是，真的身处其中，感受身上跳动着这个时代真切而紊乱的脉搏。 今天的这个行业，比以往任何时候都聚集了更多年轻而有抱负的头脑。 作为一个过来人，我没有成功的经验，何况经验每天都在快速贬值。但可以肯定的是，我们遇到过类似的困惑。部分有了解答，部分有了思路，部分仍然折磨着我。未来有更多的难题，需要我们一起去探讨。 当我苦思不得其解，当我迷茫不知道明天会怎样的时候，也希望有个人来拍拍肩膀，告诉我一个大概的方向，好把精力节省下来去对付真正的难题。 我已经没有机会对过去的我这么做，但可以尝试把曾经的困惑和现在的思考共享出来，递给未来的你。 欢迎你，迷茫症病友]]></content>
      <categories>
        <category>叽歪</category>
      </categories>
      <tags>
        <tag>设计师</tag>
        <tag>产品经理</tag>
        <tag>用户研究</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心智乐高 05 - 科学星球的入场券：双盲实验]]></title>
    <url>%2Fmindlego5-doubleblind.html</url>
    <content type="text"><![CDATA[从前，有一个星球。最初，它荒芜人烟，满是牛鬼蛇神。不知道从哪一天开始，星球上出现一些极具好奇心又不怕死的人。因为好奇，因为想解答心中那些挥之不去的疑问，他们开始冒天下之大不韪——撕破谎言，搞破坏，提出离经叛道的想法，自己试验和批评这些想法……渐渐地，这群好奇宝宝越来越多，赶跑了一批牛鬼蛇神，把星球建设地强大而富足。这个星球，就是科学星球。 因为科学星球的繁盛，吸引了不少移民。可是很多人都被拒绝了。也有一些人伪装成星球的居民混进去，但是很快就会暴露身份。黑市中开始流传各种消息，出售可以蒙混过关的假证件。其实，在信息公开透明的科学星球，有厚厚的一本移民指南，但是大家都看不懂。在外来移民的呼吁之下，星球发行了一批入场券，帮助大家准备移居。现在，我们来介绍其中备受欢迎的一张：双盲实验。 什么是双盲实验 A blind — or blinded — experiment is an experiment in which information about the test is masked (kept) from the participant, to reduce or eliminate bias, until after a trial outcome is known. If both tester and subject are blinded, the trial is called a double-blind experiment.– Blind experiment - Wikipedia 双盲是科学方法的一种，目的是避免研究结果受安慰剂效应或观察者偏向所影响。双盲 - 维基百科 在科学实验中，设计良好的实验一般会有两个相互比较的组别： 试验组：接受某种待验证的试验（如某种药物治疗）方案 对照组：除了待验证的变量以外，其他变量都与实验组相同 双盲试验中： 被试者不知道自己属于实验组还是对照组 试验者不知道哪一组是试验组，哪一组是对照组 双盲实验为什么重要双盲实验的设计，目的是尽量规避人的认知偏差。即便在最严谨的科学实验中，研究结果常常会受到诸如安慰剂效应或观察者期望效应的影响。 安慰剂效应（placebo effect），指病人虽然获得无效的治疗，但却“预料”或“相信”治疗有效，而让病患症状得到舒缓的现象。安慰剂效应于1955年由 Henry K. Beecher 提出，亦理解为“非特定效应”（non-specific effects）或受试者期望效应（subject-expectancy effect）。 观察者期望效应是认知偏差的一种。在科学实验中，由于观察者预期某些测试结果，于是无意识地以某种形式操纵了实验步骤，或错误解释实验结果以达至他们希望得到的结论。观察者期望效应能严重歪曲实验结果。 如果科学实验一直受认知偏差的影响，无法突破原有的认知边界，实验结果就无法起到拓展知识、变革现状的作用。从这个意义上讲，双盲实验是保证科学实验结果有效性的一套机制，也是激励科学实验自我优化和革新的一种推动剂。 Edge.org 网站每年都会提出一个 Big question，激发知识界的集体思维碰撞。 2011 的年度问题是 ： What Scientific Concept Would Improve Everybody’s Ccgnitive Toolkit? 进化生物学家，科普作家，「自私的基因」一书作者道金斯的回答是：双盲实验。他认为，如果民众缺乏独立思考的训练，容易被个人观点、偏见、奇闻异事所影响，而不是去寻找确凿的证据。如果掌握双盲实验的原理，即便不去实施真正的双盲实验，也能在以下方面提高个人的独立思考能力和判断： 我们不会期望从奇闻异事中得出严肃结论 我们将学会评估，一个重要的结论有多大可能性只是产生于偶然 我们会知道消除主观偏见有多么困难，而且它并不意味着不诚实或任何形式的静默。它让人们不再迷信权威和个人 我们将学会看穿顺势疗法和其他江湖郎中的把戏 我们将更全面地学习批判性思维习惯，这不仅将改善我们的认知工具包，而且可能拯救世界 如何用双盲实验改进思维习惯？阳志平老师在 「好思想，坏思想」系列中一再强调，好思想的首要判断标准是证据。最有力的证据来自设计良好的实验，而双盲实验就是最好的实验设计（之一）。 在区分「事实」和「观点」时，只要拿出双盲实验的标准一对照，就能发现绝大部分的「结论」、「研究」其实经不起推敲，很难判断研究者的认知偏差是否影响了研究结果。比如当看到一个数据时 保健品 X 令 45% 的使用者改善了睡眠质量 我们可以提出「数据五问」： 一问关键概念：使用了哪些关键概念，如「使用者」，「改善」，「睡眠质量」，都是如何定义的？ 二问关键指标：如何定义和衡量，如「改善睡眠质量」？ 三问效用范围：时-空-人三个维度 —— 多长时间范围内有效，是否受地域限制，适用于哪些人群？ 四问数据来源：是一手实验所得，还是二手数据，甚至出处不明？ 五问实验过程：如何设计的？如何取样的？是否有对照组？是否双盲？结果是否进行了统计检验？是否有类似实验佐证了结果？ 补充材料：Simposon’s Paradox分组和取样是双盲实验中关键的步骤。但是在这些步骤中很容易产生偏差，Simposon’s Paradox 就是其中的一种。 Simpson’s paradox, or the Yule–Simpson effect, is a paradox in probability and statistics, in which a trend appears in different groups of data but disappears or reverses when these groups are combined. It is sometimes given the descriptive title reversal paradox or amalgamation paradox. ——Simpson’s paradox - Wikipedia 当人们尝试探究两种变量是否具有相关性的时候，会分别对之进行分组研究。然而，在分组比较中都占优势的一方，在总评中有时反而是失势的一方。——辛普森悖论 - 维基百科，自由的百科全书 比如公司 A 和公司 B 都生产同一类药物。公司 A 的药物，在两组测试中分别得到 70% 和 40% 的有效性，公司 B 的药物则是 80% 和 50%。乍看之下，公司 B 在两轮中都胜出，但是实际上，公司 A 的有效总人数更多。 为了避免辛普森悖论的出现，就需要斟酌各分组的权重，并乘以一定的系数去消除以分组数据基数差异而造成的影响。 下面两张图片可以更直观地看到分组取样和整体取样对结果的影响： 参考资料 Blind experiment - Wikipedia Edge.org-2011 : WHAT SCIENTIFIC CONCEPT WOULD IMPROVE EVERYBODY’S COGNITIVE TOOLKIT? Placebo Effect, Control Groups, and the Double Blind Experiment (3.2) - YouTube 安慰剂效应 观察者期望效应 顺势疗法 Simpson’s paradox - Wikipedia Simpson’s Paradox - YouTube]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>心智</tag>
        <tag>科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心智乐高04 很傻很天真的贝叶斯定理]]></title>
    <url>%2Fmindlego4-bayes.html</url>
    <content type="text"><![CDATA[感谢大家对标题党 00 的宽容，这篇文章的完整标题应该是：很傻很天真 - 但是拥有迷妹万千 - 不黄很暴力 - 十分钟提高智商的贝叶斯定理。 上一篇心智乐高探讨了基本比率谬误（base rate fallacy），有盆友在留言中提到了贝叶斯。懵懂的 00 一时回答不出来，于是心智乐高第四篇，我们严肃正经地来八卦一下特别重要的贝叶斯定理。 等等，为什么我们要去了解一个数学定理……还是统计学定理？ 在你点返回、骂辣鸡、愤而取关之前，再看几条对贝叶斯的安利： 一个看上去很傻很天真的定理，却在学术和生活中意外的很强大很好用 你看不见它，它却无处不在，几乎所有需要作出概率预测的地方，它都阴魂不散 是机器学习的核心方法之一 关键时刻可以令你智商上线，用来保命，或者挣得巨额财富 （啊，简直 POI 根妹即视感！) 贝叶斯在生活中真的有用嘛？别着急，00 先代表广大宅男/宅女提一个问题： 我发给女神/男神的微信，只有一半会收到回复，她/他是喜欢我还是讨厌我？我们有发展的可能吗…… 然后我们来慢慢解答。 贝叶斯定理的由来话说 18 世纪 70 年代，有个一个牧师叫 Thomas Bayes，为解决一个「逆向概率」问题写了一篇文章。尝试解答在没有太多可靠证据的情况下，怎样做出更符合数学逻辑的推测。 所谓「逆向概率」是相对「正向概率」而言。正向概率的问题很容易理解，如“假设袋子里面有 N 个白球，M 个黑球，你伸手进去摸一把，摸出黑球的概率是多大”。但是实际场景中，这个问题往往是反过来的：“如果事先并不知道袋子里面黑白球的比例，而是闭着眼睛摸出一个（或好几个）球，观察这些取出来的球的颜色，我们可以对袋子里面黑白球的比例作出什么样的推测”。 贝叶斯推断与其他统计学推断方法截然不同。它建立在主观判断的基础上，也就是说，你可以不需要客观证据，先估计一个值，然后根据实际结果不断修正。 贝叶斯生前并没有发表他的文章，他的“朋友” Richard Price 在他死后去他的住处揩油，发现了这篇文章，并发表出来。 1812 年，法国人 Pierre Simona 将贝叶斯的理论进一步发展为条件概率，帮助人们在概率相关的决策过程中，通过新获得的观察结果来更正对概率的判断。 贝叶斯定理（Bayes’ theorem）告知我们如何利用新证据修改已有的看法。在事件 B 出现的前提下，事件 A 出现的概率，等于 A 和 B 都出现的概率，除以 B 出现的概率。用公式表示就是： 几个相关概念： 先验概率：在考虑观测数据前，能表达不确定量 p 的概率分布 后验概率：在考虑和给出相关证据或数据后所得到的条件概率 条件概率：事件 A 在另外一个事件 B 已经发生条件下的发生概率，表示为 P(A|B) 可能性函数/似然函数：一种关于统计模型中参数的函数，用于在已知某些观测所得到的结果时，对有关事物的性质的参数进行估计 这就是贝叶斯定理的含义：我们先预估一个「先验概率」，然后加入实验结果，看这个实验到底是增强还是削弱了「先验概率」，由此得到更接近事实的「后验概率」。 「AM I SICK？」贝叶斯定理的经典用法假设，有一种叫做「叶贝死」的病，人群中得病概率是万分之一，即 0.0001。然后，有一种测试可以检测你是否患有「叶贝死」病，准确率为 99.9%。你做了一次测试，结果被告知得病了！ 然后你的世界坍塌了，把这个不幸的消息告诉家人，开始准备遗嘱，甚至皈依了一个莫名其妙的宗教，好走完最后的日子…… 这个时候，你的智商不知道被谁通知上线了，让我们再找回检测报告，看看遗漏了些什么。 逃出生天之图解版我们知道，每当 1 万人中会有 1 个人患病，这也意味着另外 9999 个人没病。 再来看看检测的准确率。如果真正患病的人去做检查，那么 99.9% 的概率会被诊断出来。如果实际上没有患病的人，会有 0.1% 的概率会被误诊断。于是这 1 万人中，9989 人相安无事，总共有 11 人被诊断为「叶贝死」，但只有 1 人真正患病。 所以，你虽然被告知患病，但实际上真正患病的概率是：1/11 ，约 9%。 逃出生天之公式版把题目正经描述一下： 已知「叶贝死」的发病率是0.0001，即10000人中会有1个人得病。现有一种测试可以检验患者是否得病，的准确率是0.999，即在患者确实得病的情况下，它有 99.9% 的可能呈现阳性。它的误报率是 0.1%，即在没有得病的情况下，它有 0.1% 的可能呈现阳性。 现在张三的检验结果为阳性，请问他确实得病的可能性有多大？ 用贝叶斯定理进行计算，步骤是这样的： 令 S 表示患病事件，N表示未患病事件，Y表示检验结果为阳性事件。 我们想要计算的是，在检验结果为阳性的条件下，张三确实「叶贝死」的概率： 从题目中找到公式右边的三个变量： 将表格中的值代入上面公式可得 结果为：9% 女/男神到底爱不爱我正襟危坐这么久，终于可以回到正题胡说八道了。 我发给女神/男神的微信，只有一半会收到回复，她/他是喜欢我还是讨厌我？我们有发展的可能吗…… 世界上不知道有多少痴汉，每天在痴痴地等着某个微信好友头像出现新消息提示。每发出一条消息，心中就有一群问题如羊驼般呼啸而过：ta 在忙吗？会不会看不到我的消息？一分钟过去了他还是没有回我的消息，我要不要再等等？刚才那条消息会不会太无聊了啊我自己可能都懒得回我怎么这么蠢啊？不过说不定 ta 今天心情好或者正在无聊地等车呢？不知道其他人给他发消息他会秒回呢还是要等高冷的一小时？哎呀如果 ta 回复了我该说些什么呢？啊啊啊什么时候可以见到 ta？我们都认识这么久了 ta 对我到底有没有意思呢？………… 生活在这些问题中，实在是太可怕了。 自黑党的痴汉们，做痴汉也要做得有极客范。用贝叶斯定理来帮助我们 YY 吧！把羊驼们哄回羊圈，沐浴斋戒，摊开纸笔，写下通往未知和答案的神奇公式： P(喜欢一个人|回微信)：回复微信的情况下喜欢一个人的概率 P(回微信|喜欢一个人)：喜欢一个人时会回复微信的概率 P(喜欢一个人)：女/男神喜欢一个人的概率 P(回微信)：女/男神正常情况下回复微信的概率 假设你通过八卦、潜伏、收买人心、纯粹臆想等花式调研，获得了以下情报： 那么计算的结果是： 结论1：女神真难追啊！ 结论2：少年你想多了，这概率比 P2P 的投资回报率还低，还是乖乖回家提升自己吧！ 结论3：愚蠢的人类，用微信就想推断女/男神的心？有本事约去旅行看看？ 注：这部分纯属胡说八道，请勿作为指引！如路遇女/男神，还请勇敢壁咚 你贝叶斯了吗？贝叶斯定理，其实体现了一种概率观，它利用过往信息来逐渐逼近事件发生概率，这是一种启发式的统计学思考方式。 具有贝叶斯思维的人，并不试图刻画事件本身，甚至也不去假设那类事件是随机的，或者有一个逼近极限的总体概率。而只是从观察者信息补全的角度出发，先从以往经验中总结一个大致结果，再基于这个结果判断下次出现这类事件的概率，每次的结果会不断修正之前的判断，如此往复。这个过程反应的是我们知识状态的情况，而并非试图描述客观世界中事件发生的概率。 人类基因里可以给予我们的直觉只能指导我们如何觅食，躲避天敌，在危险的世界活下来。而一旦涉及到科学范畴，那些原始的直觉就不起作用了。想用更理性的思维分析周遭，就要摒弃固有的直觉，不断通过理解与学习建立新的直觉。 今天，你贝叶斯了吗？ 参考资料 Bayes’ theorem - Wikipedia 贝叶斯定理 - 维基百科，自由的百科全书 先验概率 - 维基百科，自由的百科全书 后验概率 - 维基百科，自由的百科全书 条件概率 - 维基百科，自由的百科全书 数学之美番外篇：平凡而又神奇的贝叶斯方法 贝叶斯推断及其互联网应用（一）：定理简介 - 阮一峰的网络日志 Everything You Ever Wanted to Know About Bayes’ Theorem But Were Afraid To Ask. - YouTube 医生说你得病、你就真的得病了吗？]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>心智</tag>
        <tag>统计</tag>
        <tag>贝叶斯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拖延这件小事，讨论一次就够了]]></title>
    <url>%2Fwoop-for-procrastination.html</url>
    <content type="text"><![CDATA[最近，你有没有尝试第 N 次发起一个计划？ 跑步、健身、学英语、画画、看慕课、冥想 …… 然后，妈妈说 你就是懒，每一次都是雷声大雨点小 韩岳父说 听过很多道理，仍然过不好这一生 心理学家说 当你写下「我要减肥十斤」计划瞬间时，大脑会自动脑补，既然你没有指定谁在什么时候以什么方式完成减肥任务，那么大脑干脆以为已经完成了。 今天，拖延症已经促成了一个产业的诞生。 每个人忙不迭往自己身上贴“拖延症”的标签，举起堂吉诃德的长矛，重复着西西佛斯式的路径：做，还是不做？ GTD、番茄钟、21 天习惯养成、人生整理法、清单法、收纳法…… 为了做到“做”这件事，我们把事情搞得多么复杂！不知不觉成了自己的“事儿妈”，追逐着五花八门的工具，在“如何管理自己”上面，消耗原本就稀缺的认知资源和心力，真正花在要做的事情上面的时间和精力反而变少，离“做到”渐行渐远。 到底怎么了？ 拖延是怎么回事？理解拖延，真的不需要从理论层面抽丝剥茧。回到客观的行为层面，拖延就是 6 个字： 积压待办事项 开始的开始，出现了一件需要做的事情，于是我们把它记下来，加入到待办事项中。完成这件重要的事情后，又来了一件事，把它加入到队列中： 不过，现实往往是，一不留神就往队列中塞满了事项：看朋友圈里推荐的视频，去淘宝买个东西，给朋友打个电话，换个床单，浇浇花……新事项添加的速度，远远大于事项完成的速度，更要命的是，重要的事情并没有开始去做： 宽进严出，事项就这么积压了。 还记得豆瓣的“想读-在读-已读”吗？想读一本书的成本，只需要用半分钟搜索出来并标记。已读的成本，往往是几天、几周，甚至还得写读书笔记和书评。标记想读的快感，来得多么容易！虽然没有开始读，但是大脑几乎觉得已经读过这一本书了。 廉价的欲望 + 薄弱的行动力，联手打造了拖延症。 解救拖延症的八字真言明白拖延的起因，对策就很好理解了，无非是“节源开流”，具体来说就是两点： 精简欲望 坐言起行 欲望因每个人的价值观而不同。想要成功的欲望强烈，就要接受自己拼了命往 to do 里面添加事项。精简欲望，只需要认真透彻地回答一个问题： 到底什么更重要？ 接下来我们讨论怎样成为“坐言起行”的行动派。 怎么行动？从执行意图到 WOOP行动科学的源头著作「改变」一书里，有一个核心观点：行为的改变，不需要以理解因果为基础。编写出可运行的程序，不需要知道硬件工作原理；去健身，不需要知道身体如何消耗能量。 心理学家 Peter Gollwitzer 注意到心理学理论从概念到应用这条难以逾越的鸿沟，但是心理学家仍然跟这条鸿沟死磕，试图用各种理论说服你，你懂了，你用了，你就自然能够提高行动力。但是，为什么一定要从正面交锋呢？Gollwitzer 1999 年发表论文 Implementation intentions: Strong effects of simple plans，提出执行意图方法。 相比仅仅说明了人们想做、实现什么事情的“目标意图”（例如“我打算减肥”），“执行意图”指的是如果预想的情景出现了，应该怎么做以实现目标。执行意图使用if…then…的句式。比如，“如果到晚上 11 点，我就回到卧室，坐到上床阅读 20 分钟，然后睡觉”。 要去开始行动，不必反复论证为什么要行动，只需要给大脑一个明确的指令 —— 用熟悉、生动的场景去触发行动。这就是执行意图的核心。 不过，执行意图也有一定的缺陷：乐观地预测行动，大脑会认为已经完成了行动，反而导致行动拖延。于是 Gollwitzer 的妻子 Gabriele Oettingen 写了一本 Rethinking Positive Thinking 来填坑。WOOP 便是整合了两人理论的行动工具，为拖延重症患者指了一条明路。 可以把 WOOP 理解为一套行动规则触发器： 用法很简单：在开启一个事项之前，把 WOOP 四步列下来，尤其把第四步的触发场景生动地想象出来。 可以用 WOOP app 帮助自己实践 WOOP 大法。 下面进入栗子时间~ 栗子：学编程学编程毕竟是一件相对复杂的任务，在第四步最好根据之前的进度，拆分出今天可以做的事情。 W - wish 我希望可以用 python 实现一些实用的功能 O - outcome 想象一下学会 python 后，我的同事遇到一个问题，想把一个网站上面关于“失眠“的用户评论抓取出来。我分析了一下，觉得并不难，用半天的时间帮 ta 写了一个脚本，完成原来需要人肉花 3 天时间才能做完的事情，而且以后还能再用上。 O - obstacles 我可能会遇到这些障碍 没有时间去练习 总是在看书，而不是动手写代码 有空写代码的时候，脑子已经很累了，难以集中注意力 没有持续练习 P - plan IF 早上起来，洗漱完打开电脑，看到浏览器界面 THEN 就去 Coursera An Introduction to Interactive Programming in Python (Part 1) Rice University 开始做第二周的 mini project IF 晚上吃完饭，先洗澡让自己清醒一点， THEN 去完成 Learn Python the Hard Way 的练习 38~40 复习 WOOP每天起床和睡前都复习一下 WOOP 欢迎加入行动派简单的道理往往容易被忽视。WOOP 也是，因为它太简单了，你甚至都不屑于去试一试。 你也可以选择继续跟拖延症死磕，买回一大堆讨论拖延症的书，看上百篇解析、诊断、指引、计划的微信文章，第 101 回制定完美的学习计划 —— 但是依然不去行动。 别再对讨论拖延症上瘾，别再迷恋那些加重认知负担的工具了。拖延症并不复杂，在熟练使用 WOOP 大法之前，不需要再浪费时间刨根问底。 从今天开始，改变“我要 xxxx”的口头禅，开始用 If…… then…… 造句，做个行动派吧！]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>拖延</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心智乐高03 - 基本比率谬误]]></title>
    <url>%2Fmindlego3-baseratefallcy.html</url>
    <content type="text"><![CDATA[基本比率谬误（base rate fallacy），是指对统计学上的基本比率不敏感导致的推论谬误。 基本比率对概率有重要影响。这很好理解：买矿泉水的人多呢，还是买香奈儿香水的人多？人群和需求概率明摆着，简直不是问题。但是人们往往会通过代表性来评估概率，忽视基本比率。代表性的意思是，通过比较 B 与 A 的相似程度来评估概率。例如，如果 A 能高度代表 B，人们就会认为 A 源自 B 的概率高。但如果 A 与 B 并不相似，人们就会认为 A 源自 B 的概率低。 例子1特沃斯基和卡尼曼提出一个假设：如果人们通过代表性来评估概率，基本比率就会被忽视。 他们设计了一个实验，向被试者简要概述了几个人的性格，这几个人是从100位工程师及律师的样本中随意抽取出来的。被试者需要通过对每个人的描述，来评估他是工程师还是律师。 在情境 A 中，受试者被告知这些被描述的 100 人中，有 70 位工程师、30 位律师。而在情境 B 中，被试者被告知这 100 人中，有 30 位工程师、70 位律师。情境 A 的被试者判断任意一个描述是关于工程师的而不是关于律师的概率，都应该高于情境 B。因为情境 A 中工程师更多，情境 B 中律师更多。然而，这些被试者在这两个实验情境中都得出了同样的概率判断。很明显，被试者认为某个特定的描述是针对工程师而非律师，他通过这两个典型职业的代表程度来判断，而没有考虑到其所属类别的基本比率。 在没有人物描述的情况下，被试者能判断某个人是工程师或律师的概率分别是 0.7 和 0.3，这与基础比率正好符合。然而，当某个描述存在，就算这个描述没有任何信息，基本比率还是会被彻底忽略掉。比如： 迪克是位30岁的男性，已婚，但无子女。他能力强，干劲足，承诺一定要在自己的领域功成名就。他很受同事的欢迎。 这个描述其实与迪克是工程师还是律师的问题完全没有关系，迪克是工程师的概率，应该与工程师占样本总人数的比率相同，就如同我们没有得到任何有关迪克的描述时一样。然而，被试者却将迪克是工程师的概率判断为0.5，并不关注工程师占总人数的比率是 0.7 还是 0.3。很明显，在没有任何证据和得到了一些无用的证据之后，人们的回应是不同的。在没有任何特定证据的情况下，基本比率能够被合理地应用；而在得知一些无用证据的情况下，基本比率就会被忽略。 例子2这个例子来自 「Smart Choices: A Practical Guide to Making Better Decisions」一书。 Jack 已经退休。那么他是图书馆员还是推销员？ 对这个问题典型的反应是：“哦，很清楚，他是一个图书管理员。图书馆员很可能会退休；推销员通常很外向很有活力。他是一个图书管理员的可能性至少有 90％。” 虽然听起来很合理，但其实完全错误。 这个逻辑的问题是忽略了基本概率：男性推销员比男性图书馆员多得多。事实上，在美国，男性销售员数量是男性图书馆员的 100 倍。在考虑“退休”这一事实之前，Jack 是图书馆员的可能性只有 1%。 接下来才轮到“退休”。假设一半的男性图书馆员都会退休，而推销员退休的比例只有 5%。即便这样，每 10 个销售员退休，才有 1 个图书管理员退休 - Jack 是一个图书管理员的比率提高到 10％。 最初的直觉告诉我们，这个概率是 90%。可见忽略基本比率会引起严重的偏差。 记得，凡事逃不过基本比率。 练习 假设同性恋染上 G 病的概率是异性恋的 9 倍，张三染上了 G 病，而我们对他的性取向一无所知。试问张三是同性恋的概率是多少？ 如果回答 90%，恭喜你又犯了基本比率谬误。 事实上，如果我们不清楚同性恋和异性恋占整个群体的比率（即基本比率），就无法回答这个问题。 为方便起见，我们假定群体有 100 人，同性恋有 10 人（占 1/10 ），异性恋有 90 人（占 9/10 ）。再假设异性恋染上 G 病的概率是 X，则同性恋染上 G 病的概率为 9X。我们可用下表表示各子群体的分布： 有 G 病 没 G 病 同性恋 10*9X 10*(1-9X) 异性恋 90*X 90*(1-X) 那么张三是同性恋的概率是： $$\frac{10·9X}{10·9X+90·X}=\frac{1}{2}$$ 来自直觉的概率判断（9/10），只有在同性恋与异性恋比例相等时才适用。假定群体有100人，同性恋、异性恋各50人，则可用下表表示各种子群体的分布： 有 G 病 没 G 病 同性恋 50*9X 50*(1-9X) 异性恋 50*X 50*(1-X) 此时，张三是同性恋的概率是 90%： $$\frac{50·9X}{50·9X+50·X}=\frac{9}{10}$$ 小结学好概率很重要啊！ 参考资料 Hammond, J. S., Keeney, R. L., &amp; Raiffa, H. (2002). Smart Choices: A Practical Guide to Making Better Decisions (unknown edition). New York: Crown Business. Pohl, R. F. (2012). Cognitive Illusions: A Handbook on Fallacies and Biases in Thinking, Judgement and Memory. Psychology Press. 丹尼尔·卡尼曼. (2012). 思考，快与慢. (胡晓姣, 李爱民, &amp; 何梦莹, Trans.). 中信出版社. Base rate fallacy. (2016, October 7). In Wikipedia.]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>心智</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心智乐高02 - 可得性偏差]]></title>
    <url>%2Fmindlego2-availability.html</url>
    <content type="text"><![CDATA[I soon learned that one wins awards mainly for winning awards: an example of what Bob Merton calls the Matthew Effect. It is akin also to the phenomenon known in politics as “availability,” or name recognition. Once one becomes sufficiently well known, one’s name surfaces automatically as soon as an award committee assembles. —— 诺贝尔奖得主、人工智能之父 Herbert Simon 可得性偏差 (Availability Heuristic）指人们会根据认知上易得的程度来判断事件的可能性。 由于受记忆力或知识的局限，人们在进行预测和决策时，大多利用自己熟悉的或能够凭想象构造而得到的信息，导致那些易见的、容易记起的信息所占比重过大，而忽略其他有助于形成正确评估的重要信息。例如，你会通过想象某个企业可能会遇到的各种难题来估测其倒闭的概率。 “会哭的孩子有奶吃”，我们那捉襟见肘的认知资源也是这么对待客观事件的。那些“浓妆艳抹”的事件、那些更容易提取的信息，总是更能捕获我们的注意力，从而导致概率误判。 认识可得性偏差可得性偏差最常见的 3 个来源是：近期事件，个人经历，生动的记忆。 因例子的可提取性导致偏差 （Ease of Recall）例子很容易提取的类别，会比频率相同但例子较难想到的类别显得更重要。熟悉度和显著程度会影响例子的可提取性。最近发生的事情可能会比之前发生的事更容易获得。例如，对交通事故的主观概率，会在你见到一辆翻到在路边的车后暂时升高。又比如，人们总是在刚刚经历了意外之后，才为自己买保险，但保险本应该为预见和抵御风险而准备，而不是事后诸葛亮。 因搜索集合的有效性导致偏差 （Retrievability）假设从某个英文文本中随机抽取一个词（含有3个或更多字母的词）。这个词更有可能是以 r 开头还是以 r 作为第三个字母？人们在回答这个问题时，会回忆首字母为 r 的单词（例如road）以及第三个字母为 r 的单词（例如car），然后通过想到这两个词的容易程度来评估相对频率。因为从记忆中搜寻单词的首字母要比搜寻其第三个字母更为容易，所以大多数人都判断以某个辅音开头的单词要比第三个字母为该辅音的单词多。但实际上，例如 r 或 k 的辅音字母，出现在第三个字母的频率都要比出现在开头的频率高。 想象力的偏差评估某类事件发生的频率，这类事件的实例没有储存在你的大脑中，但可以通过一定的规则构建一些实例。你通常会构建几个实例，并通过构建这些实例的容易程度来评估其频率或概率。 例如，通过想象某次探险中无法应对的意外事件来评估风险。如果能想到许多这样生动的意外事件，这次探险就会显得尤其危险，尽管想到这些灾难的容易程度并不能反映出它们实际发生的可能性。相反，如果没能想到某些可能的危险，那将要承担的风险就会被低估。 另一个有趣的例子，是鲨鱼和游泳者。圣地亚哥附近海域的死亡情况表明，平均来说，鲨鱼杀死一个游泳者，也会拯救十个人的生命。每次有游泳者死亡，溺水死亡的人数也会下降了几年，然后恢复到正常水平。但人们只会注意到鲨鱼攻击造成的死亡，因为它更为生动。 可得性偏差导致相关性错觉根据两个事件相互关联的强度，可以判断出它们同时发生的频率。当两个事件关联性强的时候，你可能会认为它们经常同时发生。当事件频繁地同时发生时，这两个事件之间的关联性会得以增强。所以，人们常常使用可得性（提取、构建和联想等）去估测类别的数量、事件的可能性或是事件同时发生的频率，但是这些判断往往并不准确。 识别和预防可得性造成的偏误，会导致我们做出不合理的判断。那么应该怎么识别出自己有没有可得性偏差呢？ 00 做了一套简单的提示卡片，可以时不时拿出来复习，或者在思考和决策时作为参考。 如需下载可得性偏差提示卡片的 PDF 版本，请关注公众号 HackYourself，输入“卡片1”，即可获得。 我的观点有哪些证据？我马上想到这些证据，是不是仅仅因为它容易获得？ 我做这个判断是不是因为最近发生了某些事件/意外？我对这些事件/意外产生了什么情绪？ 这个问题是否需要“记忆”和“个人经验”之外的更多证据？哪里可以找到这一类的证据？ 这件事情需要评估风险吗（比如飞机失事，投资，换工作）？我的判断依据中有哪些“画面感”很强的想象、记忆、媒体报道？哪里可以找到更多经过统计检验的客观数据？ 我之前的想法是根据零星的经验去推断吗？是否有自上而下可以覆盖问题全貌的框架？ 参考资料 Pohl, R. F. (2012). Cognitive Illusions: A Handbook on Fallacies and Biases in Thinking, Judgement and Memory. Psychology Press. Simon, H. A. (1996). Models of My Life (First Edition edition). Cambridge, Mass.: The MIT Press. Tversky, A., &amp; Kahneman, D. (1974). Judgment under uncertainty: Heuristics and biases. Science, 185, 1124-1131., 185, 1124–1131. 丹尼尔·卡尼曼. (2012). 思考，快与慢. (胡晓姣, 李爱民, &amp; 何梦莹, Trans.). 中信出版社. Availability heuristic. (2016, September 26). In Wikipedia. List of cognitive biases. (2016, September 28). In Wikipedia. List of fallacies. (2016, September 24). In Wikipedia.]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>心智</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心智乐高01 - 寻找智慧组块]]></title>
    <url>%2Fmindlego1.html</url>
    <content type="text"><![CDATA[在 HackYourself 前面两篇文章：「重启学习系统，做个知识炼金术士」和「知识炼金术士行动指南 1.0」中，我们探讨了“如何高效学习”，尝试从前人的学习方法中提炼出行动指南。 接下来的 Big question 是： 学习什么？ 在知识汪洋中潜游，其实并不是那么的舒适愉快。想一想无边无际的海域，令人精疲力竭的巨浪，知识以每一年半翻倍的速度疯狂繁殖，学无止境，时不我与。幸运的是，我们不必样样精通。 什么知识更重要？什么知识更历久弥新？—— 先去寻找“普世智慧”吧，那些经历了大时间周期的检验、在不同学科中大浪淘沙留下的知识。这也是查理·芒格一直提倡的“心智模型栅格”（Latticework of Mental Models)。 查理·芒格是美国伯克希尔·哈撒韦公司的副主席，是巴菲特多年的合作伙伴和搭档。芒格不但是一位成功的投资者，也被誉为最卓越的跨学科思想家。英语里称博识多才的人为Renaissance Man，即文艺复兴式的人。芒格无疑是这样的一位智者。 那些能成为智者的心智模型是什么呢？芒格认为，第一条规则是，必须拥有多个模型。你不可能在一个小小的垂直学科中发现人世间全部的智慧，因此这些模型必须来自各个不同的学科门类。如果你只能使用一两个，人的本性将会扭曲现实，直到符合你的思维模型。他认为，一个爱思考的人会从每个学科中找到非常出色的思维模型，在这些重要的想法中相互借鉴，产生融会贯通的理解。他的心智模型跨越了数学、物理学、化学、生物学、工程学、心理学、经济学和商学等学科。 可是，这太难了！连一个学科都只知道皮毛，怎么去做百科全书试的学习呢？好消息是，知识的分布其实并不均衡，每个学科最为核心的模型屈指可数，掌握不同学科一百个左右的模型，足以帮助我们分析各种情况，做出更好的决策。当来自多个学科的重要思路都指向相同的结论时，我们就会对所做的分析和判断更有信心。 什么是心智乐高？寻找这些重要的学科模型，或者说含金量高的知识组块，就是 HackYourself 心智乐高系列的目的。 为什么叫心智乐高呢？ 首先，“栅格”不是一个友好的词，读起来和想起来都拗口。而且它的意象偏平面化，是切割规整的多个小格子，缺少格子与格子之间的联系和整体性。而乐高一直是 00 非常喜欢的一套“哲学”：通过不同粒度“原子”，形成丰富多样的组块，进而快速搭建出三维空间中变化万千的“实体”。相比起“栅格”，“乐高”无疑更具象、更贴切。 乐高积木按照单位元件由大到小可分为四个系列：baby，quatro，duplo和标准lego，后者的大小是前者的一半，分别对应于1-18个月，2-3岁，2-6岁和4岁以上的四个年龄段的儿童。 年龄小，对乐高还不那么熟悉的人，先玩组块特别大的积木，然后再过渡到组块更小、可能性更丰富的套件。这跟我们的学习路径也非常吻合：先从了解学科的基本概念入手，对学科有全局但粗浅的认识，然后再深入到一个一个的模型和垂直领域，进行更精细的学习，并且用丰富的组块搭建出属于自己的知识体系。 所以心智乐高的第一篇文章，我们先对芒格的心智栅格做一次快速学习，并且列出一些进阶的“乐高积木”，作为这一系列文章要涉及的话题。 芒格的清单物理学物理是研究物质、能量以及两者之间相互作用的科学，也就是：研究宇宙如何运转。 均衡是物理学中的核心概念之一。均衡的定义是两种相对的作用力、力量或影响之间产生平衡的状态。当两个相向的作用力大小相同时，这个体系达到动态平衡。系统总是趋向于均衡。 均衡在经济学中也是核心概念之一，由马歇尔、萨缪尔森和威廉·夏普提出和完善。供需均衡，市场趋于稳定状态。如果价格、需求或供给有差别时，经济体将会运转，并回到自然的均衡状态。萨缪尔森认为股价会因其未来价值的不确定预期而波动。 均衡理论不仅是经典经济学的基础，也是现代投资组合理论的基础。但面对复杂系统时，标准均衡理论因其理性、机械而需要重新审视。一个系统既复杂又具有适应性的重要因素，是每个个体单元在与其他个体单元的互动中获得经验，并且通过改变自己来适应环境的变化。 123456心智乐高：- 牛顿定律- 动量- 量子力学- 临界质量- 均衡 生物学研究生物如何适应环境变化，如何在复杂系统中演化。 生态和进化是理解复杂学科的必要知识储备。 经济学家熊彼得认为，资本主义只能被看做一种不断创新和创造性破坏的过程。熊彼得的动态经济学过程由 3 个基本要素组成：创新、企业家和信用。经济体系的所有改变都源于创新。创新是应用新思想，将其转换为价值。 经济系统是复杂的适应性体系，系统中的个体基于与其他个体的互动以及与整个系统的互动来调节自己的行为。 松散的互动：众多平行的个体行为都取决于其他个体的行为以及行为产生的体系 不存在全局调控者：经济受个体间的竞争和合作调控 持续的适应：个体的行为、行动和策略、商品和服务，都要基于不断积累的经验不断修正 动态的不平衡 反馈在复杂的适应性系统中很重要。系统中的个体首先给出期望或模型，然后按照这些模型给出的预期来行动。每个个体的预测模型要与其他所有人的模型竞争，胜利才能存活下来。 Farmer 给出了股市表现的生物学解释大纲。资产相当于一个生物群体，自然选择发生在资产分配阶段。交易策略在不断进化，当新的策略被发掘后，资产会被重新分配。策略扎堆，利润就会降低。市场长期的进化，可以通过资金流进行观察。 123456心智乐高：- 自然选择- 进化论- 生态学说- 复杂自适应系统- 系统思维 社会学社会学研究人类在社会中如何行动（如何形成集体，怎样自我管理和相互交流），理解群体行为。社会学分化为经济学、政治学、人类学等。 21世纪初，社会学新的大一统理论浮现：复杂理论。其中自组织理论尤为受社会学关注，它研究人们如何聚集形成复杂体系，从而自我组织。克鲁格曼提出经济自组织。多样性是产生突变行为的自组织系统的重要特征。 集体能够产生优秀决策的要素：多样性和独立性。多样性保证大家从各方面思考问题，独立性保证错误不在同一方向积累成为系统错误。“当人们基于其他人的行为而不是通过自己的信息做决定，信息流（会导致多样性消失）产生了。这些信息有助于解释泡沫、时尚、流行和灾难。” 自组织临界状态。系统由一系列固着的、处于临界状态的亚系统组成，在某种情况下，慢慢地才能发现它们滋生的极端性。 1234567心智乐高：- 社会心理学- 社会达尔文主义- 自组织理论- 集体智慧- 道德风险- 公地悲剧 心理学心理学研究大脑，认知、情绪控制，研究人类如何学习、思考、交流和体验情感，如何处理信息和做决定，如何形成可以指导行为的核心信仰。 卡尼曼和特沃斯基试图通过心理学理论解释市场无效性的行为金融学。在「思考，快与慢」一书中，有大量对偏差和思维谬误的实验和讨论。比如关于知识幻觉，当人们对某一个预期或评估获得更多的信息，他们对预期的正确性的自信心的增速比预期的准确性要快得多。 心智模型 - 大脑喜欢模式。人类是模式化思维的动物，大脑几乎是一个信仰机器，需要解释那些无法解释的事物，通常会寻求模式化思维，否则不确定因素使人产生不安全感。我们不相信混乱和无序，即便是非理性思考得出的答案，也好过没有。另一个相关概念是心件（mindware），指人们解决问题时脑中出现的规则、策略、程序和知识。 多年来，心理学家对于认知过程被分为两种思维模式的想法很感兴趣： 系统1：能够产生快速和相关认知的直觉 系统2：慢而受规则约束的推理 系统 1 的直觉有效，存在两个前提：环境的规律性足够强使其可预测，有机会通过实践了解这些规律。专家可以接触到存储于记忆中的信息。直觉就是认知。 系统2失去对系统1的控制，主要是因为受资源条件限制。因此我们需要改善系统 2 思考的资源条件，即加深和扩大我们对相关信息的储备。 狐狸型预测者有 3 个认知优势： 他们从“合理的初始”概率估计值开始起步，他们有更好的“内部指引系统”，使其初始猜测更接近短期的基本概率 面对新信息，他们愿意承认错误并修正自己的观点。他们拥有良好的概率判断流程 他们能够感受到相互矛盾力量的存在，能够领会相关的类比 试图避免智力懒惰问题的人更为警醒，也更积极主动，较不愿意满足于接受表面上特别有吸引力的答案，对待自己的直觉感受更为严格。 123456789心智乐高：- 认知偏差 易得性启发式偏差 代表性启发式偏差 确认启发式偏差 ……- 谬误- 学习- 决策 哲学哲学是寻找智慧的学科。 形而上 讨论独立于身处时空之外的思想。本体论：有关存在的问题。现实的本质是什么？本体性的局限源于事件本质（如本身无法解释，是不可知的）。认识论：局限源于理解，无法解释是因为人的认知局限。 美学、伦理学、政治学 美学：美的定义 伦理学：对错，道德，人类行为活动、判断、价值观以及希望扮演的角色。伦理学探讨社会层面的对或错 政治学：探讨社会应该如何组织、法律应该如何实施以及人民与这些社会组织应该如何共处 认知学 了解知识的本质及其局限。什么事情是可知的，知识由什么构成，如何被接受，从不同事情上获得什么知识。信仰如何形成，消除思考的错误所产生的困惑。 复杂性并不是世界的自然本质，而是我们思考方式的一个分支 无序是对有序的误解 —— Alexander Pope 科学研究的本质：找到新的方法来描述观察到的情形 错误的解释源于错误的描述 —— Benoit Mandelbrot 维根斯坦认为，人类选择的词语赋予观察到的事物意义。你怎么看世界，世界就是怎样。 故事与统计，你相信哪个？统计学的两种错误：观察到并不存在的事物；没有看到真实存在的事物。 对故事的关注，更关注个体而非普遍性，更关注于动机而非行动，更关注于文字而非原始的数据。—— John Allen Paulos 实用主义：持有某种哲学思想会产生怎样的实际效果？“什么是信仰的现金价值？” 思想之所以正确，只是因为到目前为止，它与我们其他经验之间的关系良好 —— William James 12345心智乐高：- 美学- 伦理学- 政治学- 道德 文学对读什么做出正确选择，以及体验不同时空中他者的经历。 我们手头上已经有太多的东西要阅读，但是很可能把精力放错了地方。平时阅读的大部分内容，只是让我们了解更多的事实，而非加深理解。 跟读什么一样重要的，是怎么读。莫提默·艾德勒在「如何阅读一本书」中建议态度积极的读者在阅读过程中始终记住 4 个基本问题： 整本书讲了什么内容？ 细节是怎样的？ 这本书是否真实，是部分真实还是全部真实？ 这本书的目的是什么？ 艾德勒还详细介绍了分析性阅读和主题式阅读方法。与其仔细阅读一本书，不如比较性地阅读几本书，后者的收获会更大。 批判性思维能力是成功的基础。完善这种能力——发展深入、细致的分析思维，与深入细致的阅读密切相关。两者在双向反馈循环中相互加强。批判性阅读提升分析能力，同时，所读内容加入知识储备中，这非常有价值。 不过，知识、灼见和智慧不只是存在于非虚构类作品中。小说、诗歌、散文、戏剧、短篇故事等也能够极大丰富我们对生活的这个世界的认识，这些书籍对我们的想象力的作用远大于知识。想象类书籍传递的是经历。 12345心智乐高：- 批判性阅读- 写作- 语言和思维- 叙事和创作 数学数学是利用符号语言研究数量、结构、变化以及空间等概念的一门学科。 价值投资者认为，价格由资产价值决定。一只普通股的内在价值，是投资期内未来现金流净值的现值 概率 帕斯卡和费马形成概率论理论基础。概率本质上应该被看作确定性的程度。 贝叶斯定理：当我们根据新信息（似然概率）更新初始结论（先验概率）时，就获得了新的改进后的结论（后验概率）。也被称为“决策树”。不断通过有效信息减少可选项，逼近真值。 方差：关注系统趋势和系统内部趋势之间的差别。回归均值：特别高或特别低的数值逐渐向中间值靠拢的趋势。 概率、方差、均值回归帮助我们缩窄了市场中存在的不确定性，但没有消除它。 12345678910111213心智乐高：- 概率论和统计学 排列组合 平均值、中位数、众数 标准差和正态分布 离群值与自证预言 均值回归 相关与因果关系 大数定律 贝叶斯定理- 博弈论 囚徒困境- 复利 更多模型经济学： 123456789101112- 供给与需求- 效用- 稀缺性- 价格- 规模经济- 机会成本- 沉没成本- 边际成本- 比较优势- 价格歧视- 正、负外部性- 货币的时间价值 商业： 12345678- 规模- 流通- 成本- 品牌- 决策树- 商业模型- 收益递减- 复式记账 工程： 12345- 反馈回路- 冗余- 安全边际- 紧耦合- 断点 接下来，心智乐高专题将持续寻找并学习不同学科重要的模型和“知识乐高”，帮助自黑党们更好地 Hack yourself。]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>心智</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[知识炼金术士行动指南 1.0]]></title>
    <url>%2Flearning-guide-v1.html</url>
    <content type="text"><![CDATA[在「重启学习系统，做知识炼金术士」中，00 做了一次关于学习的主题学习，既从心理学和认知科学角度了解学习的本质和过程，也参考了学霸们的学习方法，然后归纳出几个高效学习的原则： 发现和提出问题比解答问题更重要 主动深度加工比信息量更重要 刻意练习比记忆时长更重要 融合、拓展和应用比理解更重要 道理都懂，那么问题来了： 开始学习新知识时，该怎么做？ 为了更加科学地耍流氓，00 梳理出一组问题和行动清单，作为不同学习阶段的“脚手架”，辅助实践。 不同知识粒度的学习虽然我们总想找到以一敌万的方法，但是稍微回顾一下过往的学习经历，很容易发现，学习一个学科、一个交叉领域、一个知识点、一项技能，其实需要不同的路径和方法。 粒度 例子 特点 方法 学科 统计学，认知科学 有相对清晰的边界和演化脉络，有研究范式 从经典文献出发，快速了解学科的重要学说和知识形成的里程碑，并归纳出核心的知识点或主题，以及当前研究热点。结构和模型很关键 交叉领域 人机交互，生物计算 有多个学科背景，但是处在融合期，新旧知识纠缠、更替速度快 首先从应用出发，反推父学科的重要模块，顺藤摸瓜去学习领域核心知识 知识点 认知偏差，隐马尔科夫模型 知识组块，有相对明确的核心概念 深度加工，尽可能与其他知识点建立联系，反复练习并且拓展应用场景 技能 Python，手绘，乐器 程序性知识为主， learn by doing 大量观察，提炼模式；设定标杆，反复操练；产出作品，及时获得反馈并调整 问题/行动清单学习本来就不是一件轻松的事情。与其纠结和低效，不如试着列一张清单，开始做。 I. 热身明确预期简要写出以下问题的回答： 动机何在？—— 赋予意义，通过音视频（如 TED，如看大师的作品）激发对领域的进一步热情 现状如何？—— 简单写下目前对领域的理解，之前的学习情况，理想和现实的 Gap 是什么？ 要改变什么？—— 学了之后带来哪些新视角，可以做什么，在生活中解决哪些问题？ 提出问题 —— 列出尽可能多的子问题并筛选和排序，思考对人生母题可能有什么贡献？ 搭建环境 根据知识粒度收集学习素材，原则：源头&gt;数量，材料&gt;方法，效率&gt;全面 WOOP 大法 （请参考「WOOP 思维心理学」） W：期望 O：想象最理想的结果发生的场景 O：最可能阻碍计划完成的因素有哪些 P：设定执行意图清单（if……then……） 建立或加入相关社群 选择输出方式和获取反馈的渠道 切忌陷入在热身阶段无法自拔，现在流行用一个词形容这种情况 —— 拖延症。 II. 建立“输入-编码-提取”闭环陈述性知识 — 主题式学习（关于陈述性知识和程序性知识，请回顾重启学习系统，做知识炼金术士） A. 提取领域知识脉络，识别学习路径 通过 wiki、wolfram、经典论文、多本书籍（从豆列开始）目录和概要，提取出粗略的知识脉络，然后在收集到的材料中，识别出较优的学习路径。比如在“关于学习”的主题学习中，可以按照这样的顺序看： 心理学教材里学习相关章节 教育心理学领域的专著 看综合学科体系视角的名人传记 具体的、不同学科的学习方法 B. 多种材料集中阅读 主题学习的要义之一就是对比。通过不同时期、不同人的观点对质，建立起知识的时空观，并且让更有生命力的学说和观点自动浮现。 对比阅读时一边做笔记，试着在勾画前找到中心思想，减少划线和高亮的内容，在空白处总结出关键概念，也可以记下想到的比喻、图像等，阅读完一部分或全部内容后，试着将笔记浓缩到包含知识间关系的一幅“地图”中。 C. 小黄鸭提问法 受“小黄鸭调试法”的启发，我们可以试着在知识学习和消化过程中，在手边（或脑海中）放一只小黄鸭，不停地回答它提出的问题。下面是可供选择的问题（需要持续增改）： 1234567891011121314151617181920212223242526272829303132333435它说了什么？ - 主要观点是什么？- 作者为什会这样想？- 有什么论据？- 逻辑是什么样的？ - 这些观点有多重要？ 它是什么？ - 我们从谁的视角来看、读、听？从什么角度、什么观点出发？- 我们如何得知自己已经知道了某事？证据是什么？这种证据是否可信？- 某种说法中，哪些部分是新的？哪些是旧的？之前接触过这种观点吗？- 为什么这种观点很重要？它意味着什么？- 假如不是呢？事情的另一面是什么样的？- 这件事情有何利弊？ 它是怎么得出/实现的？ - 不同事物、事件和人是如何彼此联系的？产生联系的原因是什么？效果如何？它们如何互相适应？- 推理/归纳/演绎的过程是怎样的？会产生哪些疑问？- 我们理所当然的想法是什么？- 还可以有哪些异想天开的选择？- 怎样才能将两个截然不同的想法整合在一起？- 真正的问题是什么？- xx 会如何思考这个问题？ 它如何拓展？ - 深度拓展：知识从何而来？结论来自何处？事物为什么以这种方式存在？- 横向拓展：与此类似的结论有哪些？异同？同一时期还有哪些其他发现？同一人还有哪些发现？同一领域还有哪些发现？- 纵向拓展：我知道知识从何而来，与哪些知识有关系吗？更宏观和更微观的相关知识有哪些？- 哪些知识是可以复用的？为什么？可以用在哪里？解释什么？解决什么？- 可以怎样将知识用到实际生活中？具体情境是什么样的？ D. 回答在学习前提出的问题和小黄鸭问题，并输出 我们很喜欢重读笔记或课本，因为看书比回顾做起来简单，但这会让我们误以为知识已经在自己的脑海里了。最直接的输出方式，是上一篇文章中提到的费曼技巧，比起写作，它更能检验是否真正理解和掌握了所学知识。 Oliver Ding 在信息架构专家Peter Morville的故事中提出专业服务人士的七种兵器，是一个非常值得参考的分层级输出体系： 通过实践，把新知识和旧知识共冶一炉； 通过写作，把经验和体会书面化； 通过讨论和交流，把知识社会化，获得建议和反馈； 通过准备演讲幻灯片，把知识系统梳理，形成骨架和模式； 通过演讲，在更正式的场合把知识社会化，传播到行业社群中，同时提升个人品牌； 通过书籍的写作，为知识系统的骨架添砖加瓦，将知识系统细化； 通过书籍的出版及发行，将知识系统转化为有形商品，进一步将知识传播到更广泛的社会层面。 E. 制定回顾计划和评估方法 每天和每周找一个相对重复出现的场景（注意，不是固定时间，执行意图需配合场景触发器使用），用来回顾新学习的知识。比如每天上下班通勤时，在头脑中重“画”一次笔记地图。 更多复习和评估的方法，可以参考下表（via 采铜）： 程序性知识 — 操练学习跟陈述性知识“在脑中学”不同，程序性知识强调“在做中学”。几乎所有的程序性知识，比如编程、运动、手艺、技术，都是一种“语感”培养的过程，即在大量操练中建立条件反射式的动作序列（组块）。 步骤其实很简单，关键还是“做中学”： 仔细观察新手和专家的区别 向若干专家取经 找出核心操练点，细致解构要素和过程（组块拆分） 寻找每一步骤更优的“算法” 在真实情境中刻意练习，通过反馈中修正 III. 融合操练陈述性知识和程序性知识是一种简化而理想的划分，其实有不少领域需要同时涉及这两种类型的学习。比如设计，既要理解人的需求、动机、行为，要对人-物系统做整体分析，要理解认知过程如何影响理解和行为，同时又要掌握的各种用于表达和制造的工具，把解决方案呈现并实现出来。这就需要频繁地融合操练： 对陈述性知识：使用费曼技巧，反复进行知识回顾和提取 对程序性知识：锚定标杆，自创方法，适度挑战，输出-反馈 反复迭代 创造应用场景，设计实践项目去操练（写作式；游戏式；设计式) 提取可复用模块，纠错，模型化 回顾热身阶段提出的大问题，适时调整目标 总结一图胜千言 如需完整版高清大图，请关注公众号 HackYourself，回复“指南”。]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>学习</tag>
        <tag>Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重启学习系统，做个知识炼金术士]]></title>
    <url>%2Flearning-about-learn.html</url>
    <content type="text"><![CDATA[话说从前，有一个妹子，从小跟你待在一起。她很有内涵，却总是让你捉摸不透，时不时还会因为她，挨家长的打。长大后，你俩渐行渐远。但你慢慢意识到，她才是那个对你心智成长帮助最大的人。有一天你幡然醒悟，不能再这样下去了，她就是你的终身伴侣，你得重新把她追到手。 当你尝试重新接近她，为她努力时，却发现事与愿违 —— 你其实并不了解她。她比世界变化得更快，似乎再也捉摸不透了。虽然她在你的生命中曾扮演重要的角色，但是你竟然没有去了解过她的身世，她的脾性，她喜欢哪些消遣，做什么更能得到她的关注，她能带给你哪些未曾想象过的东西，当然，还有她是如何无情地消磨你的时间、精力和情感的。Q 这个妹子，就是学习。 90% 的学习都是无效的。求而不得的背后，是长达数十年的懵懂。少年啊，凭什么以为不动半点脑筋就能追到世界上最有趣的妹纸呢？ 猛然回头，已不再是少年的顽童 00，打算开启一段新的求偶知之旅。这时候，一个迟到千年的问题突然袭来： 怎样可以轻松地 “骗” 妹子就范？…… 噢漏漏漏，应该是： 如何 Hack 学习？ 拆解问题，寻找方法要回答这么一个折磨人的问题，what’s your plan? What’s my plan? 这是一个好问题，特别好的地方就在于，它是一个问题。“如何 Hack 学习” 这个问题太大，那我们就从提更多的小问题开始。 学习的本质是什么？ 学习包含哪些活动？它们之间的关系是什么？ 认知过程是解密学习的关键吗？认知瓶颈如何影响学习？ 学习最大的障碍是什么？ 聪明人怎样学习？有哪些聪明人的经验可以借鉴？ 跨学科的大牛如何炼成：达芬奇，富兰克林，西蒙，芒格，艾柯…… 不同类型的学习方法有何不同？通用的学习方法有哪些？ 如何学习更高效（怎样是低效）？简单好用的工具有哪些？ 如何甄别好的学习资源？ 如何构建知识体系？如何快速有效地将新知识融入到已有体系中？ 如何问（好的）问题？ 一万小时和刻意练习是怎么回事？ 传统的教育和学习方式有哪些利弊？ 我亲身参与过哪些相对成功的学习项目？可复用的经验有哪些？ 学习一个学科、一个交叉领域、一个知识点、一项技能分别有什么不同？ 如何为自己设计学习方案 如何为别人设计学习方案 …… 这些问题，不能指望在一次旅途中全部找到答案，但它们是很好的出发点，启发下一步想什么、做什么。大概，需要每年来刷新一次回答的版本。 去年我有过两次主题式阅读经验，一次关于德国历史，一次关于中欧四国的历史文化艺术，从中深刻体会到主题式学习的魅力：丰富，而且高效。 于是故技重施，对学习进行了一次主题学习，步骤是： 快速聚集能找到的资料（书、课程、视频、文章） 对比挑选出好的资料并排序（先看什么或按什么主题横向阅读） 快速看资料，对应已经提出的问题做笔记 提炼观点和行动指南 这次主题学习的材料可以在这个豆列 - 关于学习的主题式阅读 v1 中找到，包括： [书] 心理学最佳入门（第2版） [书] 人类的学习 [书] 变构模型-学习研究的新路径 [书] 为未知而教,为未来而学 [书] 穷查理宝典 [书] 如何高效学习 [书] 深度学习的艺术 [书] 学习之道（第2版） [书] 青年与学问 [Mooc] Learning how to learn [视频] 5 TED Talks that celebrate lifelong learning [视频] The first 20 hours – how to learn anything [网站] 阳志平的网志 学习是怎么一回事？学习的本质是什么？快速找出权威教材和一些大师的定义，发现共同出现频率最高的词是： 改变 原来，用 1 分钟就可以得到的智慧，却用十多年的忽略换来了懵懂和低效。（当然，优质资料的筛选也需要时间） 学习是通过经历或练习所带来的行为上相对持久的改变。——「心理学最佳入门」 学习意味着从一种知识状态进入另一种知识状态，学习要使学习者的知识结构发生改变。——「变构模型—学习研究的新路径」 学习是在观察行动与结果联系的基础上，改变行动或行动规则。——马奇「经验的疆界」 00 再做了一点简化： 学习是一系列以改变为目的的探索活动 所以，以前打着“学习”旗号去看书看视频逛博物馆等等行为，都是耍流氓。我们就这么尴尬了许多年：获得了某个主题的信息，但没有去思考；或者思考了主题内容，却只是专注于主题本身，没有拓展运用；或者在其他地方运用了主题内容，但只是遵从教材或他人的要求，并没有发现真正的运用场合；即便思考了、拓展了、运用了，却没有激发起兴趣…… 这多么像杂乱无章的布朗运动啊！一直都以为在做功，实际上毫无方向，也无从积累，“只是让自己看上去很努力的样纸”。 学习需要带来改变，可能是行为，可能是知识结构，也可能是认识世界的立场和角度。毕竟，学习具有进化上的意义，让我们能够适应周围世界变化的环境，让我们从茹毛饮血的人猿，变成可以在月球上漫步、总结出元素周期表、破解基因密码的人，还可以通过学习“学习”本身来改进学习。 通过几个简单的问题，就可以判断学习是否富有成效： 新知识能回答心中某个疑问吗？ 这个新知识和自己有关吗？ 这个新知识能让我做出某种预测或行动吗？ Takeaway 以改变为目标，才是真正的学习。 学习过程的秘密教育心理学的创始人之一桑代克认为，学习由情境的可认同性和反应的可获得性来促进。人类的学习，主要不是观念的解释，或者实施推理，而是逐步选择适当的活动或判断来学习。 建构主义创始人皮亚杰认为，知识的获得是通过直接或间接的经验，而不是通过传递。 甚至抑郁也是一种学习。塞利格曼拓展了习得性无助理论，用因为过去重复失败的历史，不能从熟悉情境中逃离的倾向性来解释抑郁。 通过观察来学习是最普遍的学习类型之一，它由 4 个组成元素：注意，记忆，模仿，动机。我们来重点探讨一下学习中的核心过程：记忆。 记忆是一个接收、组织、存储和提取信息的动态系统，从感觉中接受信息，把信息置于可用的状态，组织信息并进行存储，之后再从存储物中提取出信息。 记忆为什么重要？看看这张图就明白了： 没有经过筛选、整理、编码的信息，难以再次提取。 用于理解记忆的经典模型包括： 信息加工模型：关注记忆在编码、存储、提取不同阶段所受到的加工。 加工水平模型：记忆会被保持多久取决于信息加工的深度，即理解意义作出的努力。 平行分布加工模型：记忆是一个同步发生的过程，记忆的建立和存储发生在延展开来的一系列脑的网络中。 在信息加工模型中，记忆的三个阶段，跟计算机的信息处理模型基本类似：输入 - 编码存储 - 提取： 感觉记忆：在所有感觉输入中，只关注一个刺激，信息通过感觉系统进入神经系统。 短时记忆 短时记忆保持着有意识并正在使用中的信息 工作记忆是对短时记忆中现存的信息进行加工的动态系统 工作记忆只能储存大约四个组块（chunk）的信息 我们会自动将记忆项合并为组块的形式。 一旦概念被组块化，它就只占用一个工作记忆插槽，同时变成容易遵循的成熟思路，并可以用来建立新的联系，剩下的工作记忆则被释放。组块就是让多个神经元共同运作的网络，专注的训练和重复可以建立强的记忆痕迹，从而创建组块。 组块化和复述，可以分别增加短时记忆的容量和持续时间。 长时记忆 陈述性记忆：构成知识的事实和信息的记忆，事实是已知并能陈述的。 程序性记忆：关于人们如何做事情的记忆（技能、习惯、条件反射），包括一系列步骤或程序。 长时记忆以语义网络的形式组织。把信息输入长时记忆最有效的方式，是通过精细复述（elaborative rehearsal) 赋予其意义，比如将新信息与已知事情联系在一起，或其他深层次加工方式，如蒸、炒、煮、闷、炖、焗、炸，哦漏漏漏，应该是拆分、对比、连接、综合、演绎……。 记忆的提取比存储更重要。影响提取的关键因素包括编码，存储结构，复述线索（可以是词语、意思、声音等，还包括记忆时的环境和情绪）。随着时间流逝，那些未被利用的信息建立起的脑内神经连接会消失，导致遗忘。对知识进行深入加工、有意义地编码、分散练习，可以减少遗忘。 咳咳，估计大家开始犯困准备走人了，那我们进入栗子时间： 试想，当我们的祖先在面对浩瀚星空时，想把星星们记下来，该从何入手呢？ 答案是：组块化！ 千万颗星星，可以一下子浓缩成数百个可以辨识和记忆的形状： 但是上百个形状还是很难记啊，怎么办呢？ 长时记忆的知识告诉我们：赋予意义，精细编码。于是，出现了狮子座、猎户座、天琴座、大熊座小熊座和这些星座动人的故事……不但便于记忆，还能流传千古。学霸祖先也是牛啊 ~ Takeaway 突破短时记忆瓶颈，关键在不同层次的组块化 对信息精细加工，用利于提取的方式编码 分散练习，多次提取，可以减少遗忘 聪明人如何学习？能力所限，这次还不涉及跨学科的大牛们，我们先看看当代“学霸”们都是怎么学习的。 Scott Young首先出场的是 1 年完成 MIT 4 年 33 门课程的学霸·杨。 上学时，除了全日制的上课学习，业余时间经营一家企业，每周写大约 7000 字的文章，健身以及主持一家演讲俱乐部，尽管如此，我仍然有时间和朋友聚会，享受周末的轻松愉快。 （ 完全是天妒人怨的学霸口吻嘛！） 学霸杨在「如何高效学习」中给出成为高效率学生的关键点：（1）能量管理（2）不要“学习”（3）绝不拖延时间（4）批处理（5）有组织 “整体性学习”（获取，理解，拓展，纠错，应用）是学霸杨倡导的理念，它有 3 个关键要素： 结构：知识间的联系和索引 模型：是简化的结构，把多个关键思想压至一处。 高速公路：结构与结构之间的联系。 五种信息类型需要采用不同的方法： 随意信息：赋予某种逻辑关系。联想法，挂钩法，压缩法 观点信息：难点在于寻找模式。图表法。 过程信息：建立背景概念+不断练习。内在化，比喻法，图表法，模型纠错。 具体信息 抽象信息：缺少与感官的直接联系。逻辑性很强，需要移到具体的层次。内在化，比喻法，模型纠错。越是抽象的东西越要注重练习 最值得推荐的是费曼技巧： 第一步：选择要学习的概念，拿一张空白纸，在最上方写下概念的名称。 第二步：设想你是老师，正在试图教会一名新生这个知识点。在自我解释那些你理解或不理解的知识过程中，你会理解得更好，而原先不明白的地方也得以理清。 第三步：当你感到疑惑时，回过头来，重新阅读参考材料、听讲座或找老师解答，直到你觉得搞懂了为止，然后把解释记到纸上。 第四步：简单化和比喻。如果你的解释很啰唆或者艰涩，尽量用简单直白的语言重新表述。 Takeaway 学霸杨完全是实践派，人肉识别出了有效的学习模式： 建立组块（结构和模型）和知识间的联系（高速公路） 主动的精细加工：联想法、挂钩法、图表法、内在化、比喻法…… 高强度、无法自欺地频繁提取：费曼技巧 Tim Ferriss学霸 Tim 是“每周工作4小时”观念的首创者和成功实践者。在全球范围内分身为企业家、作家、演员、武者和舞者。能说六门外语，通过远程工作经营一家营养品跨国公司。曾获中国散打全美冠军，保持一项探戈舞吉尼斯世界记录。旅居世界各地，四海为家。 Tim 的 DSSS 大法： 可以通过这个视频，了解学霸 Tim 如何解构那些让人惧怕的东西： Tim Ferriss: Smash fear, learn anything | TED Talk | TED.com 游泳：观察初学者和有经验者的区别，哪些行为是必要的、核心的，哪些是无用的、以为正确实则错误的 语言：材料优于方法，抽取一些简单但包含主要语法的句子，让当地人翻译 舞蹈：找领域专家询问技巧，列清单，对比清单的共性，拆解出最重要的元素，录像，观察录像 采铜很厉害的铜叔，总结出来很厉害的深度学习艺术：提问-解码-操练-融合 提问：好的长时程问题，让我们成为「建构者」。专家的知识多是围绕核心概念或大观点组织的，这些概念和观点引导他们去思考。 解码：1. 它说了什么？2. 它是什么？3. 它是怎么实现的？过程如何推导出结论？与已有材料做比较，与其他材料做比较。不要只是归纳，还要做延展。 操练：「获得反馈」是练习的一个最重要的原则之一，如果没有反馈，在练习时发生的错漏自己无法察觉和校正，再多的练习都是徒劳。方法包括写作式操练、游戏式操练、设计式操练。 融合：洞察出知识背后的「深层结构」。在表面上不相干的知识的背后，发现它们潜在的相似性、互补性和启发性，找到知识与知识间隐含的联系。学习高手常常会有意识地把不同领域甚至不同学科的知识摆放在一起，尝试去分析、比对潜在关联。 阳志平不解释。 请关注公众号：心智工具箱 （mindnote） 高效学习的一些原则看了那么多道理，让我们来尝试“组块化”，转化属于自己过不好一生的道理： 发现和提出问题比解答问题更重要乍看之下，知识如同星空一般浩瀚且无序。虽然可以通过不停地结构化去精简和压缩，但是至下而上去寻根溯源，效率太低，而且组块的排列组合可能性太多，让人无从入手。 而只有从问题出发，从人探索世界的真正动机出发，才能变果为因，通过观测角度瞬间为相关知识提供意义线索，串联出一条可探索的路径。 “真正的问题”价值在于，激励我们探究某个问题情境的多种表述方式，从中寻找能够提供真知灼见和解决问题的具体办法。 世界上本没有答案，问的人多了，答案就不得不现形。 —— 00 主动深度加工比信息量更重要还记得舌尖上的中国里的松茸、冬笋、火腿和毛豆腐吗？哪一道美食，不是经过充满想象力的加工，与时间一起发酵，最终得以流传。 食材并没有那么重要，数量更加不重要。因时取势，因地制宜，因材施用，不厌其烦地探索和改进加工方法，才是美食的秘诀。 恰巧，这也是学习的秘诀。 刻意练习比记忆时长更重要专注于学习的困难部分称为刻意训练 (deliberate practice)。 长时工作记忆是刻意练习的指向与本质。那些卓越的专家，能够将工作记忆与长时记忆对接起来，在进行钢琴、象棋等专业活动时，调用更大容量的工作记忆。刻意练习的任务难度要适中、能收到反馈、有足够的次数重复练习、学习者能够纠正自己的错误。 一种有效的刻意练习方法，是找到领域专家的“作品”作为标杆，可能是翻译家的译文、运动员的比赛录像、优秀的开源程序，先用自己的思路和方法做出来，再不断地跟标杆比较并改进。 融合、拓展和应用比理解更重要 如何让一滴水永不干枯？ …… 让它融入大海 知识更像一张绵延不绝的网络。让知识不消失的唯一办法，是让它牢牢嵌入到原有的知识网络中，与其他节点相联结，形成四通八达的“高速公路”。 用新知让生活更精彩，这是学习的唯一主题。知识必须能够在某种场合实际运用，才值得学习。为什么不试着让新信息和所调用的知识进行对质，从而产生更适合回答自己所提出问题的新涵义呢？ 最终，融合、拓展和应用，才是真正意义上的“知识炼金术”。 预告知识炼金术士上篇就到此。 下篇会对主题学习中所有材料提及的具体学习方法做提炼，按照 00 的理解，整理成尽可能通用的学习行动清单。 如需获取关于学习的主题式阅读资料清单，包括书籍介绍、购买链接、 Coursera 课程地址、TED Talk 地址、阳社长知识宝库等，请关注公众号 HackYourself，输入“主题学习”，即可获得豆列链接。]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>学习</tag>
        <tag>Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VR 中的体验要素]]></title>
    <url>%2Fux-in-vr.html</url>
    <content type="text"><![CDATA[对大部分设计师来说，VR 是一个全新的领域。VR 中关于 UX (User Experience) 的研究并不多。这个时候要提出类似 Web 时代的用户体验要素，还为时尚早。不过我们可以试着总结一下，影响 VR 中用户体验的要素可能会有哪些。 先想想这样一个问题： 什么样的体验，是好的 VR 体验？ 可以从哪几个维度去评估呢？ 00 试着先用两个维度来概括：舒适度和沉浸感。不一定正确、全面，只是作为梳理的线索，欢迎大家补充。 舒适度减少眩晕体验过 VR ，特别是早期设备的人，除了惊异于沉浸的体验之余，多少会感到不舒服 —— 有点眩晕，头盔挺沉的，手臂僵硬…… 舒适度是 VR 用户体验的第一要素（因为实在还说不上舒适）。“晕 VR” 目前还是普遍现象，相信随着对晕动症 (Motion sickness) 研究的深入和技术进步，在 VR 中的舒适感会持续提升。可以想象，VR 中的应用尤其是游戏，需要提供关于 3D、运动等舒适度的选项，帮助那些生理反应更敏感的用户调整到最优的个性化体验： 游戏 Smash Hit Plunder 中的 VR 舒适度选项 比如，在迷宫类的 VR 游戏中，可以提供运动时的 “关灯” 模式，降低运动时画面的亮度，甚至隐藏空间画面，只提供必要的指引信息，这样可以最大程度减少因为动画带来的眩晕感。 降低延迟延迟一直是 VR 中的技术难题。延迟来自信号传递、屏幕刷新和计算机读取延迟。主要指标是延迟率： VR 头盔显示设备的视觉观测与头部运动的匹配程度。分为帧间延迟和帧内延迟。帧间延迟指头部转动经过的画面中每一帧之间的处理与显示时间。而帧内延迟是指人头转的时候，构成画面帧的像素点在每一帧结束时会跳回原点，这时候，人眼的视觉暂留现象会保留上一帧和这一帧的图像，产生拖影现象。 在头显设备中，图像都来自即时渲染，所以延迟很容易被感知。从下图可以看到，VR 应用中，运动检测需要大约 200 毫秒，传输需要约 200 毫秒，渲染成像需要约 200 毫秒。如何降低延迟率，将是 VR 体验的关键。 沉浸感物体细节 VR 不是真实世界的镜子，但是用户在虚拟世界中的预期，绝不会低于真实世界。简单到一张桌子，一级阶梯，都应该具备相应细节，让人形成（至少是被建构的）“真实”的感觉。在 VR 场景中，不再能够像过去 2D 界面一样，通过“进入二级页面和返回”的方式，来限定画面展示和互动层级 —— 用户拥有更大的自由探索空间，向着任意方向移动，预期着看到所有可见物体的细节。 界面元素VR 中的界面元素，比如人物属性、按钮等，应该融入在 VR 场景中，或者集中展示在某个区域，而不能像桌面/移动端游戏中那样跟随着人或物品移动。 在 2D 世界中，界面元素是平面化的，但是在 VR 中，用户视野和视角很多样，所以菜单、按钮这些界面元素，也应该跟随视角变化，而不是生硬地把一块 2D 补丁甩在 3D 场景里。 目前，VR 设备的分辨率还不理想，菜单、按钮等界面元素需要适当放大，变得更显眼。 音效让人感觉身临其境的音效和音乐，是沉浸式体验的助推器。打造优质的 VR 体验，需要更专业的音乐人、音效师和技术（例如Wwise）参与进来。Oculus 也放出了音频的 SDK。后续的文章我们再深入讨论 VR 中的音效。 运动在 VR 的世界里，用户和环境之间障碍已扫除，界面的边界被完全打破，移动也就变得复杂起来。 不同场景下的运动方式不同，应该让用户坐着还是站立？应该让场景环境移动，还是让用户移动？运动空间如何设计？运动范围如何限制？怎么样的运动路径和范围，对人体尺度而言最舒适？这些都是需要仔细考虑的问题。 交互在 VR 时代，鼠标和点击操作对象都已成为过去。新的交互方式层出不穷：手柄、手套、光学追踪隔空手势、座椅、……大浪淘沙后，哪些方式会最终沉淀下来成为行业标准呢？现在下结论还为时过早，我们需要不断地尝试和测试。 这篇文章从舒适度和沉浸感两个维度出发，整理了 VR 中影响用户体验的要素：眩晕，延迟；物体细节，界面元素，音效，运动，交互等。当然，这只是一篇粗糙的整理和思考，希望大家一起讨论和完善！]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>交互设计</tag>
        <tag>VR</tag>
        <tag>Interaction Design</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VR 学习图谱]]></title>
    <url>%2Fvr-index.html</url>
    <content type="text"><![CDATA[关于 VR 的正确或不正确的废话，就不多说了。首先，用 100 分钟，最直观地了解 VR，激发对 VR 的全面热情。 想进入 VR 领域，从 2D 的界面设计转向 VR 设计，或者制作 VR 内容、成为 VR 开发者，该如何开始？ 产业相关的文章多如麻，但是对真正想行动的人来说，缺少一张地图：在 VR/AR 这个令人激动也有点小忐忑的旅程中，有什么值得我探索，我应该选择哪条路径，会遇到什么，需要学习什么。 下面是 00 为自己编制的 Beta 版地图，希望对你也有帮助。 1. 虚拟体验 生理沉浸 视差和 3D 成像 VR 中的人因工程 (Human factors in VR)：FOV、设备重量和佩戴方式、眩晕、延迟、疲劳 VR 体验要素 2. 内容和设计 VR UI 界面 设计元素 设计规范 VR 交互 平台特性 交互范式：NUI, Virtual Human Interaction, Gaze-based control 交互语言：选择、抓取、移动、旋转、开始结束 输入：手柄、手套、体感枪、座椅、跑步机、运动捕捉、手势识别、眼动、肌电模拟 输出 运动 动画 反馈 3D 环境物理 立体显示 3D 建模和设计：搭建场景、添加角色、道具建模、设置传动、UV贴图、绘制纹理、物理特效、粒子效果 材质和光照 摄影：视野、景深、散焦面、曝光 软件：Cinema 4D， Mayak，3D Max 等等 3. 开发 开发平台和语言 Google VR C++、Python 等等 Processing 游戏引擎Unity, Unreal, CryEngine WebVR核心算法 图形图像：反畸变、反色散、头部运动预测 外设交互 游戏引擎兼容 4. 硬件技术原理 运动追踪 3D 全息投影 数字光场 消费产品 头显：Oculus Rift, PS VR, HTC Vive, Gear VR 输入设备 生产设备 全景摄像机 运动追踪 计算平台 最后 A prototype is worth 1000 meetings Have fun!]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>交互设计</tag>
        <tag>VR</tag>
        <tag>Interaction Design</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[把一个人活成一个公司，你可能就不会那么迷茫了]]></title>
    <url>%2Fself-as-company.html</url>
    <content type="text"><![CDATA[工作几年了，好像看不到未来的方向，怎么办？准备毕业了，工作还没有着落，怎么办？想跳槽，想转型，不知道从何着手？人为什么要成长？人怎样成长？中年危机，怎么应对？ 这样的问题，看着就烦。 更烦的是，问题和答案之间，似乎隔了 1000 个知乎。 把一个人活成一个公司，并不是说你不够上进不够努力，需要一个充满竞争的环境激发狼性 blablabla…… 个人的难题，其实也是公司的难题。我们可以很客观地看待一个公司的发展，却很难清醒地审视自己。个人成长中的大部分问题，很难通过个人的视角去想清楚。所以，让我们试着强制转换一个视角，重新审视这些烦人的问题。 公司跟个人其实很像：需要找到存在价值，找到安身立命之本，需要遵循一定的规则，需要嵌入在社会大环境中。为什么有的公司成功，百年不倒，很多公司则熬不过一年？为什么有的人笃定踏实，有的人风风火火，到头来有的人功名成就，有的人碌碌无为，有的人收获智慧和幸福，有的人终生跟自己和全世界都过不去？ 把一个人比作一个公司，你可能就不会那么迷茫了。 做生意和过生活的本质这半年的创业经历，让我意识到，做生意和过生活的本质，其实是一样一样的，就是八个字： 价值生产，资源配置 公司只要在这八个字上，哪怕出现小到小数点后四位的问题，都会面临危机。 作为个人，我们又是如何对待这八个字（可以换成 “意义追逐，精力分配”）的呢？ 大部分人都会把钱作为最重要的资源，因为它直接影响生存和生活质量。我们用工作获得报酬，我们会去理财，学习资产配置。 等一等，这里好像有一个坑：钱到底是资源，还是消耗？ 这就是最常见的金钱误区：你是用钱来投资/再生产，以获取更大的回报呢，还是只用它来购买和消费——用完就用完了，无法增值，这跟一次性筷子没有区别啊！如果目的仅仅是挣钱来花，来应付生活开销，那么钱根本不是资源，更别说做好资源配置了。 真正高价值的资源配置，往往被忽视： 时间如何利用 注意力放在哪里 精力怎么分配 最高阶的能量——爱，何处安放？ 我们好像不是资源配置的好手，那么价值生产呢？ 不得不说，大多数人容易被工作折磨成为一个厌恶价值生产的人，因而也容易忽视自己的价值生产能力。因为已经形成 “工作 = 疲累” 习得性绝望：因为要花钱，要买房买车娶老婆，不得不任劳任怨忍辱负重地好好工作。这真是一个黑得不见边际的坑啊！ 让我们重新来看看花钱和挣钱这两件事的边界到底在哪里。 比如，你每个月花四分之一的工资在美妆上面。这件事可以有几种做法： 抹完就抹完了，没有任何感受 抹完以后整个人都好了，因为自我感觉良好，每天的状态都不错 抹完以后换了一个人（脸），找了配一脸的蓝/铝票，从此过上幸糊生活 抹完以后写出超专业的产品测评，成为时尚博主，每天无暇回复粉丝提问，干脆自己卖 抹完以后不但对所有产品如数家珍，而且非常了解其他消费者的需求和心理，而且跟不少品牌有合作，于是开了一个美妆社区，然后开了一个公司…… 这个例子有点极端，但基本上说清楚了消费和投资的区别。它们的区别，其实比我们想象中要小：任何的消费，都可以转变为生产的行为。买了一个无人机，不用时租出去；看了一场剧，写一篇剧评；去一次旅行，写出优质的游记或者组团代购……这些都是把纯消费变为具有生产属性的例子。 想过好日子，更多精力还是要放在价值生产上面。我们继续以公司视角来琢磨琢磨。 价值观驱动价值生产怎样能够生产更多？这是每个公司会问的问题。 有一个技巧回答关于 How 的问题，就是去问问 “Why”。 一个人怎样可以更有钱？不是直接告诉他怎么挣钱，而是让他对财富有灼人的欲望。如果马云把公司使命定义为“最好的电商平台”，而不是神马“让天下没有难做的生意”、“创造新的财富文明”，那阿里巴巴一定不会这么有“钱”。 为什么人会迷茫？为什么公司会发展不起来？首要原因还是发动机软得像棉花糖——价值观不清晰，底层动机缺失。 如果你是一个把“冒险”看得比“优雅”重要的人，就不会去做一些温吞精致的事情。如果你是一个觉得“乐趣”优于“成就”的人，就不一定会在看似已经有“成就”的平台获得“成就”。 好了，如果我没有明确的价值观怎么办？ 没关系，大部分人都不明确。价值观需要长时间的打磨。好消息是，每一天、每一件事、每一个有意识的想法，其实都在帮助我们塑造价值观，去留意它们，让自己的意识和肉身都参与其中。慢慢地，你会知道哪些信息会天然地吸引你，哪些书看着不累，哪些人很想结交，哪些事情做起来就是开心。 比如说，我相信规律比规则重要，美比规律重要，好玩比美重要，而好玩造就了多样性。相信这样的价值观，可能会总是抓不住重点，可能没法被主流认可，可能需要面对最终一事无成的尴尬……但没办法，我就是（让自己越来越）信啊。 不能把出厂设置当成商业模式什么是出厂设置？就是那些下意识的观念和行为，未经检验的想法。最大的“厂”，是家庭和学校；最经典的出厂设置，就是吃饭睡觉打豆豆、工作结婚养小孩。 什么是商业模式？就是公司和个人在价值观驱动下持续生产价值的运作方式。 打卡上班是最常见的个人工作模式，它的本质是用时间换取生存和发展的资源。但是，时间难道不是最宝贵的资源？机会成本如何计算？投入产出是不是合算？ 工作本身没有问题，问题出在换取资源后，我们都做了什么？无视它，消费它，还是用在刀刃上？（好讨厌，刀刃到底在哪里） 个人成长和公司扩张也非常相像。为什么有的人成长快？先想想为什么有的公司成长快： 在风口上，顺势而为 使命驱动，目标聚焦 模式正确，不断加强核心竞争力（正向商业循环，是价值和核心竞争力的双循环） 执行力 那么个人： 与时俱进，身处趋势产业和平台焦点 清楚自己要什么、什么不重要 资源配置合理，正向积累 行动力 说到底，商业比拼，拼的还是商业模式。个体的难题，难在探索个性化的模式。 这里就不再啰嗦了，填一填商业模式画布吧： 扮演好生态角色在所有信息、物品、人、公司、国家、星球都在密切连接的今天，必需拥有网络和生态的视角。 作为一个公司，在产业链扮演什么角色，怎样跟其他公司建立联系，怎样合作。 作为个人，在家庭中、在不同的社会群体中扮演什么角色，怎样发挥价值，怎样合作和交换。 在一切跟一切连接的时代，公司和个人的危机，可能来自所处圈层单一，而且角色边缘化。如果仅仅是角色边缘化其实还好，只要圈层多样，边缘反而可能意味着成为社群之间的桥梁，做到跨界，形成结构洞。 先想后做还是先做后想总结一下，从公司角度审视个人成长，有几个要点： 打磨价值观 建立能加强核心竞争力的模式 价值生产，资源配置 扮演好生态角色 然后，你开始去打磨价值观，去规划个人的模式，去获取资源，投入生产…… 抱歉，事情不是这样运作的。我们之所以一次又一次发问而得不到解答，一次一次受困于完美规划无法实行，也来自这种错误的“因果顺序迷思”。 价值观和模式都无法凭空设计。人的起点，只能是也必需是直观的感受和行动：先去做能做的事情 → 获得肯定和资源 → 调整为做更贴近价值观的事情 → 获取更多反馈和资源 → 投入再生产 —— 没错，就是资本主义的路子。 不是先规划后生产，而是先生产再调整。不是先爱后做，而是先做后爱。 说了差不多 1.5k 字的废话，而关于迷茫的答案只有一个字：]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
        <tag>个人成长</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hack Yourself - 我是自黑党]]></title>
    <url>%2Fhackyourself.html</url>
    <content type="text"><![CDATA[重新寻找 Hack 精神Hacker 一词，就不过多解释了，它早已超出专职以网络安全攻击谋利的黑客的范畴，甚至也不仅仅指那些热衷于解决问题、克服限制的人。 Hacker 的原意，是指用斧头砍材的工人，最早被引进计算机圈可追溯到 1960 年代。据说当时在麻省理工学院的学生通常分成两派：一派是 tool，意指乖学生，成绩都拿 A；另一派则是 hacker，常逃课，上课爱睡觉，但晚上却又精力充沛喜欢搞课外活动。于是，hacker 开始有了一个鲜明的精神外壳：独立思考，自由探索。 到了今天这个信息量可以把人碾死几百回的焦虑时代，保持独立思考，自由探索，虽然比一亿元小目标简单一些，但也已经足够奢侈。我们在日复一日变化多端却又机械的工作中，在看所有东西都像刷朋友圈的速度中，变得来不及思考，没时间探索，葛优躺过去，又是靠咖啡过活的一天。 好在，我们不是设定了程序就不可更改的图灵机，而是灵活可变的智能物种，而且拥有求解元问题的能力，最终有可能修改自己的“出厂设置”，改变那些写入基因、伴随成长、未经审视的直觉和下意识的反应。 这也是 hack 精神对犯着时间尴尬症、精力尴尬症、动机尴尬症的我们的意义： 跳出看似命定的框架，用第三人称视角去重新审视整个游戏，以便发现游戏规则，进而利用规则快速精进，更好地达到目的。 Hacking for making为什么要黑自己？为了什么要跟自己过不去？ 是因为酷吗？似乎不对，那是换一套马甲可以做到的事情。我想，一定是由一种比自黑要大得多的乐趣所驱使。 经过 MIT FabAcademy 半年的 Maker 自我教育，我大致知道了答案。 Hack，最终是为了更好地 Make Make 就是指造东西，任何东西。可以是一篇文章，一个程序，一个箱子，一个机器人，一幅画，一首歌，一道菜…… 动手做东西的乐趣，几乎是所有其他事情都无法比拟的。但是，在动手的过程中，会遇到非常多挫败。想得容易，动手难。开始容易，完成难。做一天容易，做十年很难。这个过程，会生出许多对自己的期待、无奈、不满甚至愤怒。 但是，明明尝试过其中的乐趣，为什么要放弃呢？嗯，就不放弃治疗，让感官享受来得更强烈些吧！ 那么，就试试 hack 自己吧。 Hack 什么只要对做出更好看好玩好用的东西有帮助，都是 HackYourself 关注的范围。反之，像护肤、理财、人际关系、产品测评、家国大事等等，都不是 HackYourself 能够写和应该写的。 HackYourself 不会写太多怎么 make 出东西的过程，而会把重点放在如何重构 maker 的代码，通过对“人”迭代，提升做东西的人本身，达到最终做出好东西的目的。 那么，要成为能做出好东西的人，需要升级哪些装备？ 黑心（思维）黑自己，首先得黑心。 心，指的是思维。（诶？思维不应该是脑吗？……不要在意这些细节，脑被抢走了……） 重新审视固有的思维模式，找出盲点，修 bug，释放内存，才能更快地运行程序。 思维谬误 认知如何产生 心智如何产生和运作 如何调节动机、情绪、行为 有哪些常见的有害的“底层假设” …… 黑脑（方法）方法即模式和过程，或者用流行的词来说，就是“算法” Hack 信息获取 Hack 高效学习 Hack 行动科学 Hack 通用“算法”（如经典模型） Hack 移植机器算法？ …… 黑手（技巧）最后是直接用于制作的各种技能和工具。对生产者而言，这是最好的时代，工具空前丰富，效率极大提升，渠道成本骤降。 Hack 设计（排版） Hack 编程 Hack 写作 Hack 语言 Hack 绘画 Hack 音频制作 Hack 视频制作 Hack 各种生产工具的使用 Hack 制作过程中各学科最小知识 …… 暂时想到这些，欢迎大家提供脑洞。 黑心党们，黑脑党们，黑手党们，要不要黑起来！ 最后，致敬我心目中最伟大的 Hacker，Designer，Maker]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>HackYourself</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GEB —— 一次关于有序与无序的探寻之旅]]></title>
    <url>%2Fgeb-note.html</url>
    <content type="text"><![CDATA[Gödel, Escher, Bach: An Eternal Golden Braid (GEB:EGB) 哥德尔，艾舍尔，巴赫：集异璧之大成 这是一本杰出的科学普及名著，通过对哥德尔的数理逻辑，艾舍尔的版画和巴赫的音乐三者的综合阐述，以精心设计的巧妙笔法，引人入胜地介绍了数理逻辑、可计算理论、人工智能、语言学、遗传学、音乐、绘画等学科领域中的许多艰深理论，而且构思精巧、富于哲学韵味。 要给一本看不懂的书写读后感，我感到很痛苦 —— 王小波说，人的痛苦，都来自对自己无能的愤怒。 这种痛苦很多时候表现在，只能读懂作者提出的挠人的问题，却看不懂推演和阐述。也许能读懂问题，已经是最大收获了吧。 一、形式逻辑之美让我们先从音乐的形式之美谈起。 赋格 (fugue) 是复音音乐的一种固定的创作形式，它的主要结构是：首先在一个声部上，出现一个主题片段（Subject），然后在其他的声部上模仿这个片段（Subject）。演奏主题的声部与新的声部相对应的乐句，形成相互问答追逐的效果。 看看这个视频就明白了： 格伦·古尔德《你是否想写首赋格》动画版 赋格 视频: 什么是赋格? 巴赫d小调托卡塔与赋格（图形版） 巴赫是当之无愧的赋格大师，「音乐的奉献」是巴赫在这方面最高成就的作品之一。它本身就是一部大型的、高度理智化的赋格，许多概念和形式彼此交织。要想理解有多个声部的赋格是多么耸人听闻，可以把即兴创作六个声部的赋格比作同时下六十盘盲棋，而且全部要下赢。 卡农可以看做是更严格单一的“赋格”，由一个单一主题与它自己相伴而奏，主题和副本之间构成和声。更复杂的卡农，在音高和速度上相互交错，还有主题转位，每当原来的主题跳上时，它就跳下，两者所越过的半音数目相同。最玄奥的是逆行 —— 主题依一定时间从后往前奏出。使用了这种技巧的卡农，俗称为“螃蟹卡农”。 巴赫螃蟹卡农视觉图解 赋格和卡农中的“规律”，即是数学中的“同构”。同构是保存信息的变换。两个复杂结构可以相互映射，并且每一个结构的每一部分在另一个结构中都有一个相应的部分。 在这里，音乐与形式合而为一了。规律产生韵律，音乐即形式，形式即音乐。 “有序” 在巴赫的赋格中体现得淋漓尽致。但“有序”是终极追求吗？美与和谐来自有序吗？智能是将无序变为有序吗？ 二、永恒的悖论，永恒的魅力荷兰版画家艾舍尔的许多作品，都源于悖论、幻觉或双重意义，让人着迷。 瀑布 画廊 变形 提到悖论，本书的另一个主角哥德尔出场了。 悖论有一个共同的祸根，就是自指，或称“怪圈”。企图从逻辑学中导出所有的数学，而且一定不能有矛盾，这是很多数学家的理想。但是 1931 年哥德尔发表的论文揭示出，没有一个公理系统可以产生所有的数论真理，除非它是一个不一致的系统。 哥德尔不完全定理：数论的所有一致的公理化形式系统都包含有不可判定的命题。 也就是说：没有什么是完备的。一个人不能抓着自己的头发把自己提起来，上帝也不能制造上帝自己。 悖论是一种死循环，而循环的无限性又让人捉摸不透、欲罢不能。 悖论与禅宗佛教禅宗的基本教条之一是：没有任何办法能刻划禅宗是什么。悖论是禅宗的一大特点。 人的心智处于困惑状态时，就会在某种程度上不合逻辑的运转。禅宗认为，只有跨出逻辑，摆脱理论，人才能跃入顿悟境地。 所谓顿悟，最简单的定义或许就是：超越二元论 二元论，就是把世界从概念上划分为种种范畴。事实上，二元论不仅是概念上对世界的划分，同样也是感知觉上对世界的划分。人类的感知觉，本质上是种二元现象。 在禅宗看来，二元论的核心就是词语 —— 普通的词。对词的使用必然导致二元化，因为每个词很明显地就是代表了一个概念范畴。一旦你感知到一个客体，就把它与世界的其余部分划分开了；人为地把世界分成部分，于是就远离了“道”。 词语把我们引向某些真理 （可能同时也引向某些虚假） —— 但肯定不能引向所有真理。如果依赖词语走向真理，就如同依赖一个不完全的形式系统而走向真理。无论一个形式系统多么强有力，都不可能给出所有真理。 数学家们的困窘在于：除了形式系统，还有什么可以依靠？ 而禅宗信徒的困窘则是：除了词语，还有什么可以依靠？ 禅宗采纳整体论，认为整个世界根本就不能被划分为一个个事物。划分世界就会误入歧途，就不能达到顿悟。顿悟状态意味着自我和宇宙之间的分界消解。这将是二元论的真正终结。 禅宗哲学似乎体现了这样一个观念：通向终极真理之路，会是充斥悖论的。 摒弃感知，摒弃逻辑、词语、二元化的思维。这就是禅宗的实质，主义的实质。这即是“无”方式——非智能，非机械，就是“无”。 禅宗并没有给出答案，而是明白最终没有答案 对有序的追寻，最终落脚到无序。探寻之旅越发的有意思了。 三、智能之谜鱼和鳞，艾舍尔（木刻，1959） 什么时候两个东西是一样的？ 这个简单的问题与智能的性质有着深刻的联系。 信号，意义，模式我们到底怎样认出一个信号的存在？ 任何消息是否本质上具有足够的内在逻辑？是人把意义赋予了材料，还是意义本来就在那里？作者认为，意义在多大程度上以可以预测的方式作用于智能，它就在此程度上是对象的一部分。 任何消息都分三层：框架消息，外在消息，内在消息。在使用任何规则之前，必须有另一个规则来告诉你如何使用这一规则；即，存在一个具有无穷多层次的规则体系，这就组织了任何规则的使用。但是大脑对消息的解码能力反驳了这一理论。 若智能是自然的，则意义是固有的 智能喜爱模式化，厌恶随机性。 如果我们把巴赫的音乐看成遗传型，把它想要激发出来的情感看成表现型，那么我们所感兴趣的问题是：遗传型是否包含了表现型的展现过程所需要的全部信息。若要恢复一条消息，需要在多大程度上理解它所处的环境？DNA 是否具有普遍的触发能力？在没有被置入适当的化学环境时是否仍能导出表现型？答案是否定的，但不是绝对否定。(- -)b 递归与智能谁也不知道非智能行为和智能行为之间的界限在哪里。但是智能的基本能力还是确定的： 对于情境有很灵活的反应 充分利用机遇 弄懂含糊不清或彼此矛盾的信息 认识到一个情境中什么是重要的因素，什么是次要的 在存在差异的情景之间能发现它们的相似处 从那些由相似之处联系在一起的事物中找出差别 用旧的概念综合出新的概念，它们用新的方法组合起来 提出全新的观念 程序设计中的递归枚举是个过程，其中新的东西按照一定的规则，从已有的东西中产生出来。复杂到一定程度的递归系统，其能力可能会强有力得足够打破任何事先规定下来的模式。 这不就是使智能成为智能的性质之一吗？ 与其仅仅考虑由可以递归的调用自身的过程组成的程序，为什么不考虑得更复杂一些，设计出可以修改自身的程序——可以作用于程序本身，扩展、改进、推广、加固程序的程序？智能的核心之处大概就是这种“交织的递归”之所在。 如何给需要智力的行为编出程序呢？这不是最最明显的自相矛盾吗？本书的一个主要论题，就是理解这个”矛盾”： 让读者重新认识存在于形式化和非形式化的、有生命的和无生命的、灵活的和不灵活的事物之间的那些表面上看来不可逾越的鸿沟。这便是人工智能索要研究的全部。人工智能工作的奇异之处就是试图将一长串严格形式化的规则放在一起，用这些规则交给不灵活的机器如何能灵活起来。 描述的层次在40年代，荷兰心理学家阿德里安·德·格鲁特就研究了下棋时新手和大师是怎样感知一个棋局的。大师们以“组块”来感知棋子分布。大师在超前搜索时很少比新手走的更远，他们感知棋局的方式像一个过滤器：在观察局势时已经建立了更高层次的组织，坏棋一般不会被想出来。智能紧密的依赖于为复杂对象——如棋盘、电视屏幕、书页或画面——构造高层描述的能力。 人工智能研究中的一个重大问题，就是要指出如何跨越层次的鸿沟，即如何构造一个系统，使它可以接收一个层次上的描述，然后从中生成另一个层次上的描述。 计算机系统在最高层的描述，极大程度地组块化了。比如，汇编语言的设计思想，是要把各个机器语言的指令“组块化”，当要用一条指令把一个数加到另一个数之上时，不必写“010111000”，而只写 ADD 就行。 不同层次的知识以“组块化”的形式呈现。但是组块化模型可能有个很大的缺点：它通常不具有精确的预测力。一个组块化模型是定义了一个“空间”，并预期着行为会落入其中，而且描述了行为落在该空间的不同区域的概率。 真正造成混乱的是，同一个系统允许两种以上不同层次的描述，而这些描述在某些方面又是彼此相似的。我们进行自我认识时会遇到混乱，因为我们由许多层次构成，同时我们用重叠的语言在所有这些层次上描述我们自己。 意识到自己的思想，这难道不是意识的本质吗？当你意识到自己的思想时，难道不是直接在符号层次上读你的大脑吗？意识系统只是在符号层次上感觉到自己，对更低的层次，如信号层次，则毫无意识。 于是 人工智能的进展即语言的进展 大脑，心智和思维大脑中大约有一百亿个神经元。每个神经元具有若干突触（输入端口）和一个轴突（输出通道）。输入和输出均为电化学流，即移动的离子。一个神经元每秒可“发射”千次决定——就是沿其轴突释放离子，这些离子最终将穿入一个或多个其他神经元的输入端口，致使它们作出同类决定—— 如果所有输入的总和超过了一个确定的阈值则发射；否则不发射。 关于智能一个可能的猜测是：存在着由许多神经元构成的大尺度结构，它们在一个较高的层次上处理概念。但不同概念并不对应一个固定的神经元群。 低层次的神经发射通讯，是如何导致高层次的符号激活通讯的？如果可以自足地解释高层次的符号激活通讯——建立一个不涉及低层神经事件的理论，那么智能就可能实现于不同于大脑的其他硬件上，而这是 AI 研究的基础中一个关键假设。那表明智能是一种可以从它所在的硬件中“抽取”出来的性质——换句话说，智能将是一种软件性质。 一个想法若充分经常地在一个人的大脑中重现，它就会逐渐地组块化而形成一个单独的概念。那些一次又一次被人们采纳的通道组成了知识。大脑状态本身不具有说明哪条线路将被采纳的信息。外界环境在决定路线的选择时扮演着极为重要的角色。 关于意识的一种解释：意识是系统的一种性质，每当系统中有服从触发模式的符号时，这种性质就会出现。 四、写在最后几个月来，因为这本书弄得头脑发昏的好些夜晚，还让人记忆犹新。 在这一次关于有序与无序的探寻之旅中，我们遇到了许多 CP ：形式与规律，真理与悖论，思维与智能……都是容易让人着迷的话题 —— 当然，它们同时也是悖论，是世界在头脑中镜像的“二元”。 秩序生成美，亦或激发神经元对美这个抽象概念的集体涌动。但是秩序的终极，不可能是秩序，而恰恰是无序 —— 如果用禅宗的观点来看，应该是 “无”。 有无相生。只要有肉身硬件这个限制，美与意义也就有了需求，对周遭环境和诗与远方的认识，是探索谜题的动力。有一些谜题，如同悖论般无解，而其中包含的那些撩人的气味，也许就是旅途中最大的奖赏。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[雕爷惊呼「猜猜谁来颠覆淘宝」？有这些知识，就不用瞎猜]]></title>
    <url>%2Fthreat-taobao.html</url>
    <content type="text"><![CDATA[雕爷的一篇标题党文章「猜猜谁来颠覆淘宝」在朋友圈炸开，能让雕爷如此鸡冻地大喊“粗大四儿了！粗大四儿了！又一场工业革命诞生了！”的模式，到底是什么？ 因为刚刚从为期半年的 MIT Fab Academy 毕业，对数字化制造这个课题有了全新的认识，正好可以给感兴趣的朋友讲讲这个被号称“颠覆淘宝”的家伙。 雕爷说，这是一场“工业革命”，倒也没有夸大其词，他提到的就是最近特别红火的“工业4.0”。 当时刚一走进红领的西装制衣车间，一眼望去，和千万家中国普通的“血汗工厂”也没啥区别。一条条的生产流水线上，男工女工像蚂蚁一样重复着简单工序。缝扣眼儿的，就一针针缝着，熨烫衣袖的，就一直在熨烫。可定睛仔细看，奇迹出现了！ 流水线上的每一件西服，都不相同！都、都、都、不、相、同！ 见鬼了！整座3000人的工厂，相同的流水线，却找不出两件一模一样的西服！每一件都是“手工订制”，在流水线上实现了老裁缝铺中60岁老师傅那种“个性化”精细制作。 工业时代以来，大规模生产（Mass production） 是人类生产力飞跃的结果，带来了巨大的财富，但同时也逐渐被诟病：对效率的极致追求，导致产品必须符合“一致、可批量复制”的特性，后果就是所有商品长得一模一样。 在个性化诉求越来越高的时代，这简直是噩梦——既是消费者的噩梦，更是企业主的噩梦。必需解决效率和个性化的冲突，才能迎来新的产业升级，释放更有能量的消费需求。 在传统的工厂中，生产环节其实是割裂的，数字化只存在于某些工序中。比如有个一个生产灯具的工厂，负责灯具外型设计的人，往往不知道灯具的电路是什么样，也不用负责灯具的装配。于是各个模块只能批量复制和生产自己的那一个模块，需要有协调和转配的部门，整个效率便会降低，而且难以实现多样化、个性化的生产 —— 因为生产线的组织模式，是“先生产相对独立的大的零部件，再组装”。 这就是雕爷惊呼的原因：在相当传统、但是对个性化要求极高的服装制造业，竟然实现了批量个性化生产——这是多少服装行业生产者的梦想啊。流水线照旧，个性化却居然实现——且成本居然仅仅上升了10%而已！ 如何做到？ 答案就在：数字化生产 Digital Fabrication 数字时代的生产流程大概是这样的：销售系统采集订单和客户数据，直接导入到半自动化甚至全自动的设计过程，然后通过系统向供应商下单采购，物流运输到工厂后，不需要经过人工装配，设计文件和物料通过自动化系统进入数字加工流程，生产机器也完全是数字化控制，生产后的装配、运输等环节，也完全可以由系统预先设定好并完成。 雕爷看到的过程是： “数据先行”，先控制数据有效边界，进而控制建模的数量 打版，数字化设计和原型 “增材生产” 让我们来看看这个其实并不神秘的过程。 在所谓的“工业4.0”时代，我们可以利用物联信息系统将生产中的供应、制造、销售信息数据化，以达到快速、有效、个性化的产品供应。简单来说，就是把生产的每一个过程，都用电脑/系统去控制，而不是靠人与人对接。 第一步：模块化用系统控制生产的前提，是它知道可以生产哪些东西。就像一个饭店，如果每天进货的食材有粗面、细面、鱼丸、牛肉丸，那它就能卖鱼丸粗面、鱼丸细面、牛肉丸粗面、牛肉丸细面。这里的粗面、鱼丸，就是生产的“模块”，最终的产品，其实只是模块的组装。 传统生产线的问题在于，这个“模块”粒度太粗太粗，甚至粗到以最终成品为单位。而在雕爷看到的红领“魔幻工厂”中，“模块”的粒度被分得非常细：一片面料、扣眼儿、纽扣、袖标…… 模块细化之后，带来了组装的灵活性，原来只有 A+B=AB，现在可以实现 A+B+C+D+E…… 的任意排列组合，于是个性化的需求得以满足。 第二步：连通模块，数据流转光有模块还不行，模块之间还必需能像 Lego 积木一样无缝拼接。在工厂中，需求-生产-发货-运输-销售的连通，让订单-设计-采购-打版-生产-装配-仓储-运输-销售等等数据直接在系统内快速流转，才是真正提高效率的根本。 第三步：生成需求就是雕爷说的打版。 就是编程序，您是打印个碗呢？还是锅？或者一把手枪都行，逻辑没区别。 因为模块已经划分得非常细了，这个需求可以直接来自消费者——只需要系统将消费者的需求自动拆解成为模块生成的需求。 第四步：搭积木有必要先解释一下“增材生产”的意思。“增材”对应的是“减材”。 “增材”好比平地起高楼，任何形状的东西，都是通过一层又一层地堆叠上去建造而成；“减材”好比铁杵磨成针，通过去除不必要部分成型。 对于服装生产而言，“增材”意味着不再是用完整的布匹裁剪，而可能是用 3D 打印甚至生物生成的原理去制造。（有关更多3D 打印和扫描的内容，请看我的 Fab Academy 笔记） 3D 打印服装早已不是新鲜事了： 数字化制造的概念，真的挺简单，想想我们在家里叫车、手机下单叫外卖、看电影选座，都是完全由系统自动处理的过程。只是在传统生产领域，还有许多没有被数字化的“暗区域”——同时也意味着效率还有很大提升空间，效率提升，个性化也就不远了。 颠覆淘宝，只是个吸引眼球的标题。数字制造，也不过是生产流程更新换代的代名词。 真正的颠覆，其实在机器取代人的工作。 而且，它越来越懂人了。]]></content>
      <categories>
        <category>叽歪</category>
      </categories>
      <tags>
        <tag>淘宝</tag>
        <tag>制造业</tag>
        <tag>工业4.0</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[专治手残症的毕业设计：特雷·瓦力机器人]]></title>
    <url>%2Ffabnotes-finalproject.html</url>
    <content type="text"><![CDATA[起源在开始的开始，我打算做一个特雷门琴 Theremin。它是一种奇葩乐器，1919年由俄国物理学家 Theremin 教授发明，也是世界上第一种不需要身体接触就可以演奏的乐器（电子音乐的鼻祖）。 但是，在研究特雷门琴的原理时，被复杂的电路和声学原理吓得有点懵： 认怂了以后，调整原计划为一个简化版本：做一个迷你机器人，如果在机器人面前移动手的位置，机器人就会根据手掌距离自己的距离，发出不同声调的音符。你可以在不碰机器人的情况下，指挥它演奏一段乐曲。 因为既不是完整的特雷门琴，也不是机器人瓦力，只好叫做特雷·瓦力 （英文名 Mini Soundbot 又名迷你骚包） 草得不能再草的草图： 项目计划期末作业的截止完成时间是 6.22，时间不多，必需做好时间计划。 我把项目分成 4 个部分：设计，编程，外观和测试。从 6.8 正式开始准备，当时只有一张草图，其余都是一片空白，意味着我需要用 10 天时间，把这个课程学到的东西运用到项目中，完成期末作业。要命的是，我离实验室有三个小时的路程 —— 我在广州，实验室在深圳。所有东西必须在出发前计划和设计好，才能保证去实验室的时间真正有所产出。 列出关键任务后，给它们分配具体的时间： 任务 日期 输出 研究特雷门原理 6.9-6.11 原理图，项目结构图 编程 6.12-6.18 在 Arduino 上可以正常运行的程序 电路元器件规划 6.12 PCB 设计文件 电路板设计 6.13 PCB 设计文件 购买元器件和其他材料 6.15 淘宝订单 设计外型组装部分 6.13-6.15 Fusion 360 设计源文件 雕刻电路板 6.18 电路板 焊接元件 6.18 电路板 测试输入和输出组件 6.19 基本功能可运作 制作外壳 6.18-6.19 激光切割和 3D 完成的部件 组装 6.19 把所有部分组装成完整的作品 调试 6.20-6.21 调试和演示准备 过程1. 整体设计输入 : 使用超声波测距模块 HC-SR04 检测距离： 输出: 最开始打算用小喇叭，但是效果不好，遂放弃。 改成用软件的方式实现声音的控制，把 macbook 作为扬声器，用程序将距离转换为 C 调音符： 材料和开销硬件 ATTiny 45 芯片 超声波测距模块 HC-SR04 AVRISP SMD FTDI-SMD-HEADER 电阻 10.0K OHM 1206 SMD 电容 1UF 1206 杜邦线 软件 Arduino IDE New Ping Library for Arduino IDE OpenFrameworks Maximillian / ofxMaxim addon for OpenFrameworks 外壳 椴木板 3D 打印部件 硬件和外壳部分总共花费约 $17 。 物品 数量 花费 Attiny 45 1 $ 2 HC-SR04 1 $ 1 AVRISPSMD 1 $ 1 FTDI-SMD-HEADER 1 $ 1 RES 10.0K OHM 1206 SMD 2 $ 0.1 CAP CER 1UF 1206 1 $ 0.1 Dupont Line 5 $ 0.1 basswood 2 $ 10 3D Printing PLA 1 $1 glue 1 $ 1 TOTAL $ 17 2. 编程为了实现用电脑作为声音转化器，我使用开源的 C++ 套件 openFrameworks。这个库简化了很多音频处理的工作。 OpenFrameworks 下载 以及 xcode 安装指南。 openFrameworks 有一个叫做 micknoise/Maximilian的 C++ 插件，专门用来做声音合成以及音乐数字信号处理和转换，这样我就能直接将传感器的信号转换成为可播放的音阶： 下载源代码. 在制作电路之前，我先用 Arduino 来测试基础功能： Hello world 视频: 3. 电路设计因为使用了软件实现主要的模拟信号转换，所以电路方面就变得简单很多，只需要实现传感器的数据传输就行： 电路设计源文件 / from box.net. 4. 制作电路板使用 RSM-20 雕刻电路板并且焊接元器件： 烧程序 sudo make -f hello.HC-SR04.make program-usbtiny 1234567891011121314151617181920212223242526272829303132333435363738394041424344avr-objcopy -O ihex hello.HC-SR04.out hello.HC-SR04.c.hex;\ avr-size --mcu=attiny45 --format=avr hello.HC-SR04.outAVR Memory Usage----------------Device: attiny45Program: 526 bytes (12.8% Full)(.text + .data + .bootloader)Data: 2 bytes (0.8% Full)(.data + .bss + .noinit)avrdude -p t45 -P usb -c usbtiny -U flash:w:hello.HC-SR04.c.hexavrdude: AVR device initialized and ready to accept instructionsReading | ################################################## | 100% 0.00savrdude: Device signature = 0x1e9206avrdude: NOTE: &quot;flash&quot; memory has been specified, an erase cycle will be performed To disable this feature, specify the -D option.avrdude: erasing chipavrdude: reading input file &quot;hello.HC-SR04.c.hex&quot;avrdude: input file hello.HC-SR04.c.hex auto detected as Intel Hexavrdude: writing flash (526 bytes):Writing | ################################################## | 100% 0.92savrdude: 526 bytes of flash writtenavrdude: verifying flash memory against hello.HC-SR04.c.hex:avrdude: load data flash data from input file hello.HC-SR04.c.hex:avrdude: input file hello.HC-SR04.c.hex auto detected as Intel Hexavrdude: input file hello.HC-SR04.c.hex contains 526 bytesavrdude: reading on-chip flash data:Reading | ################################################## | 100% 1.11savrdude: verifying ...avrdude: 526 bytes of flash verifiedavrdude: safemode: Fuses OK (H:FF, E:DF, L:62)avrdude done. Thank you. 5. 制作外壳超声波测距模块长得很像机器人的眼睛，所以干脆给它整了一个机器人 Wall-E 的造型。 在 Fusion 360 里做好部件的设计： 然后导出成 dxf 文件到 Coraldraw 里，发送到 GCC 激光切割机。使用的参数是： speed 2.7 ， power 100： 切割完成： 开始组装： 还补充了一些 3D 打印的小部件： 设计和切割源文件 / from box.net. 测试看起来万事俱备，测试走起！ Test video for UI when playing 在移动过程中，音符的识别容易抖动，需要做进一步的滤波处理。 演示期末项目的演示材料 Slide: Video: Mini SoundBot - Vimeo 复盘经验 项目管理 项目管理很重要，即便只是个人项目。如果没有确切的时间表和关键任务列表，整个过程会变得地狱般忙乱。一旦把看似复杂的整个项目拆解成任务列表，并且明确每个任务的期限，每一步行动就有了目标，也就没有太多的时间去焦虑。更重要的是，把每个任务需要产出的结果和标准给出来，会更明确下一步要做什么，以及做到什么程度就应该继续下一个任务，而不是无休止的纠缠于细节。 学习了音频和音乐制作的一些原理 如何通过程序将传感器信号转换成为有规律的音符。音阶和频率都很有意思（有时候也让人摸不着头脑），当然，还有不少音乐制作的基础概念，比如 propagation 传播， amplitude 振幅，frequency 频率和timbre 音色。 使用第三方框架和插件来提高效率 在开源的世界和神奇的 github，不用再重复造轮子，有大量的优秀的项目和组件库等着被挖宝，虽然仔细地读文档和看例子挺费时间，但相比自己去实现复杂的功能，这个投入的性价比实在太高了。 待完善部分 程序的稳定性依然有待改善 目前只做到了音阶的转换，但是没有实现特雷门琴的另一个主要特性：用手掌距离的远近控制音量大小 更有趣的做法是，做一个可以自动播放旋律的装置，而不是手工去演奏。 参考特雷门原理图： Theremin - Wikipedia, the free encyclopedia Build your own real theremin Theremin How to Build &amp; Play a Theremin How to Make a Theremin Multimedia applications of the system Theremino FINALLY, A MODERN THEREMIN Open.Theremin.UNO Housing Ultrasonic Theremin - All openFrameworks micknoise/Maximilian: C++ Audio and Music DSP Library 课程资源 Fab Academy 2016 课表 我的英文笔记 Gitbook 公众号文章列表 致谢这半年，要感谢很多人：实验室的小伙伴，guru 们，工作上的小伙伴，被我拒绝周末约饭的小伙伴们，谢谢大家对我的理解和支持。 特别感谢在我发出攒学费帖之后，慷慨赞助的各位 （如有遗漏，一定是我人品问题，请原谅）： 妙音，simba，phoebe，洁菁，寒塘月色，柚柚柚，fuckwisdom，陈宇，suer，麦子，大园，z.xh，jessie，free，路遥，kyle，健莹，煎蛋，yue，小木子，samper，范偲，张轩铭，许豆浆，安静，贺嘉50，立颖，flujoo，王莹，俊辉，小泉，陈阳 x2，Mango 芒果，馒头先生，塔拉，莫楠，蕉哥，计海彪，魏雷，erin，sasa，超 net，萦雅，毛毛 x3，沈浪，apple 熊，润悟，夏影，jasper，青溪，张昀儿，阳老 x5，大妈，欣怡，班长，hawa，氦 以及给每一篇笔记打赏和留言、给我极大鼓励的朋友们。过程很难熬，好在有你们的鼓励。 鞠躬，谢谢！！]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Arduino</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业18：项目版权声明[FabNotes036]]]></title>
    <url>%2Ffabnotes036.html</url>
    <content type="text"><![CDATA[develop a plan for dissemination of your final project prepare a summary slide (presentation.png, 1280x1024) and video clip (presentation.mp4, 1080p HTML5, &lt; ~minute, &lt; ~10 MB) in your root directory Project or ProductMy final project is a Mini Soundbot. This project was made for fab academy 2016 final project. Most of code are based on open source software and I have no plan for commerciallise. I see it less as a product but more as an open source project, people who like music or have some idea about theremin can play, share ideas, code. Maybe it can help school kids to learn sensor and frequency of notes. They could learn ultra-sonic sensor working by detecting distance between objects. And by playing the sounds, they would have sense of different notes. I’d personally be very interested in thinking about play and toys like that. LicenseFor the design part of my project, I would like to release them under ‘Creative Commons — Attribution-NonCommercial 4.0 International License’. You are free to: Share — copy and redistribute the material in any medium or formatAdapt — remix, transform, and build upon the material The licensor cannot revoke these freedoms as long as you follow the license terms. Under the following terms: Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use. NonCommercial — You may not use the material for commercial purposes.No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. And for the program and application part, I’d like to use fab lab licenses: (c) Lin Jie 2016-7 This work may be reproduced, modified, distributed, performed, and displayed for any purpose, but must acknowledge “Mini Soundbot”. Copyright is retained and must be preserved. The work is provided as is; no warranty is provided, and users accept all liability. Final presentationSlide: Video: Mini SoundBot - Youtube Mini SoundBot - Vimeo 课程资源 Fab Academy 2016 课表 Week18 课程视频 Week18 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十八周：发明，专利和收入[FabNotes035]]]></title>
    <url>%2Ffabnotes035.html</url>
    <content type="text"><![CDATA[This week is about Invention, Intellectual Property, and Income. Invention research, development ready, fire, aim traffic, pain ecosystems Intellectual propertypatents types utility (20 years from filing) design (15 years from grant) search disclosure private publicUS: 1 year to file most international: can&apos;t file defensive provisional 1 year to convert included in term full teaching specification, claims types:composition, method, apparatus, manufacture examination novel, non-obvious, useful (im)possibility genes, business processes, software Patent Cooperation Treaty (PCT) nationalization EPO precedence: first to file vs first to invent maintenance litigation defense identify infringement barriers to infringement troll, NPE ~ $100, $1k, $10k, $100k copyrights original works of authorship designs, software, circuits, mask works reproduce, modify, distribute, perform, display secured on creation notice of copyright registration lifetime + 70 years licenses: open-source vs free, Creative Commons, GPL, LGPL, BSD, MIT/X11, Apache, fab lab trademarks establishment registration protection Income motivations:financial, cultural, social sourcesproducts, consumables, licenses, advertising, platforms, infrastructure, services: operation, customization, education, research, impact types for-profit:sole proprietor, partnership, limited liability company (LLC), corporation non-profit501(c)(3) hybrid funding:VC, incubator, angel, friends &amp; family, crowdsource, loan, purchase commitment, bootstrap lifecycle (failure of) business plan (need for) management team (problems in) scaling (pressure for) exit accelerator/incubator/manufacturer PCH, Highway 1 Flextronics, Flex Dragon, Bolt SEEED, HAX Factory For All Fab Lab Made 课程资源 Fab Academy 2016 课表 Week18 课程视频 Week18 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业17：应用[FabNotes034]]]></title>
    <url>%2Ffabnotes034.html</url>
    <content type="text"><![CDATA[propose a final project that integrates the range of units covered, answering: what will it do? who’s done what beforehand? what materials and components will be required? where will they come from? how much will it cost? what parts and systems will be made? what processes will be used? what tasks need to be completed? what questions need to be answered? what is the schedule? how will it be evaluated? projects can be separate or joint, but need to show individual mastery of the skills covered where possible, you should make rather than buy the parts of your project Final project proposalMy final project is making a theremin-like instrument. what will it do?You can play a song with your hand but without touching anything. It’s like touchless instrument. who’s done what beforehand?Many electronics and maker have made theremin. Gaudilab even made a opensource library Open.Theremin. I’d like to make a simple version. And also some simplier projects like this. what materials and components will be required?Hardware ATTiny 45 chip Ultrasonic sensor HC-SR04 AVRISPSMD FTDI-SMD-HEADER RES 10.0K OHM 1206 SMD CAP CER 1UF 1206 Dupont Line Software Arduino IDE New Ping Library for Arduino IDE OpenFrameworks Maximillian / ofxMaxim addon for OpenFrameworks Housing basswood 3D Printing PLA connection parts where will they come from? Local electronic vender Taobao wood suply Inventory from our fablab how much will it cost? item quantity cost Attiny 45 1 $ 2 HC-SR04 1 $ 1 AVRISPSMD 1 $ 1 FTDI-SMD-HEADER 1 $ 1 RES 10.0K OHM 1206 SMD 2 $ 0.1 CAP CER 1UF 1206 1 $ 0.1 Dupont Line 5 $ 0.1 basswood 2 $ 10 3D Printing PLA 1 $1 glue 1 $ 1 TOTAL $ 17 what parts and systems will be made? the circut the program the box what processes will be used? Project plan (Week1, Week17) Design the circut (Week6 - Electronics Design) Make the PCB (Week4 - Electronic Production) Make the circut (Week8 - Embedded Programming, Week11 - Input Devices, Week13 - Output Devices, Week15 - Networking and Communications) Test the instrument (Week16 - Interface and Application Programming) Design the housing (Week2 - CAD, Week9 - Mechanical Design, Week10 - Machine Design) Make the housing (Week3 - Computer-controlled cutting, Week7 - Computer-controlled machining) Design and make other components (Week5 - 3D scanning and printing, Week12 - Casting and Molding, Week14 - Composites) Assembly and test what tasks need to be completed? study theremin principls design schematic in eagle design board in eagle buy components mill the borad soldering coding test input &amp; output part design housing parts making housing parts assemble test what questions need to be answered? theremin’s principl how the circut works how to program input and output … what is the schedule? study theremin principls (6.9-6.11) design schematic in eagle (6.12) design board in eagle (6.13) buy components (6.15) mill the borad (6.18) soldering (6.18) coding (6.12-6.18) test input &amp; output part (6.19) design housing parts (6.13-6.15) making housing parts (6.18-6.19) assemble (6.19) test (6.20-6.21) 课程资源 Fab Academy 2016 课表 Week17 课程视频 Week17 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业16：界面和应用编程[FabNotes033]]]></title>
    <url>%2Ffabnotes033.html</url>
    <content type="text"><![CDATA[这周的作业是 为输入/输出设备写一个应用程序 为之前做的这个检测光线的板子做个小应用好了。 先试着让板子跟串口通讯，看看元件是不是正常传送检测值。 1234567891011121314151617181920#include &quot;SoftwareSerial.h&quot; const int analogInPin = A3; // Analog input pin that the potentiometer is attached toint sensorValue = 0; // value read from the pot const int Rx = 2; // this is physical pin 7const int Tx = 7; // this is physical pin 6SoftwareSerial mySerial(Rx, Tx); void setup() &#123; pinMode(Rx, INPUT); pinMode(Tx, OUTPUT); mySerial.begin(9600); // send serial data at 9600 bits/sec&#125;void loop()&#123; sensorValue = analogRead(analogInPin); mySerial.println(sensorValue); delay(500);&#125; 光电晶体管工作正常。 Video 下一步，在 processing 里面写界面的程序。当检测到光线变暗时，界面提示 “-_- It’s dark!” ，如果光线变亮，提示 “it’s getting light ”： The code: 123456789101112131415161718192021222324252627282930313233343536import processing.serial.*;Serial myPort;int lf = 10; void setup()&#123; size(300,300); myPort = new Serial(this,&quot;/dev/tty.usbserial-A400gwhT&quot;,9600); textAlign(CENTER, CENTER); fill(255); textSize(20);&#125; void draw()&#123; while(myPort.available() &gt; 0)&#123; String str = myPort.readStringUntil(lf); if(str!=null)&#123; int value = Integer.parseInt(trim(str)); if (value &gt;900) &#123; print(&quot;it&apos;s dark &quot;); println(value); background(0,0,0); text(&quot;-_- It&apos;s dark! &quot;,150,120); text(value,150,200); &#125; else&#123; print(&quot;it&apos;s getting light &quot;); println(value); background(204,153,0); text(&quot;:P It&apos;s getting light &quot;,150,120); text(value,150,200); &#125; &#125; &#125;&#125; 课程资源 Fab Academy 2016 课表 Week16 课程视频 Week16 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Arduino</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十六周：界面和应用编程[FabNotes032]]]></title>
    <url>%2Ffabnotes032.html</url>
    <content type="text"><![CDATA[这周学习界面和应用编程. 编程语言 hello world C, GCC, C++, GDB (debugger), DDD (graphical viewer) Java, OpenJDK, IcedTea, Scala, Android Haskell Processing, Wiring, Arduino data flow: LabVIEW, Simulink, Max (for music), Pd, Scratch (for kids), App Inventor, Grasshopper, Firefly Bash, Tcl Interpretive language: Python, tutorial, Perl, Ruby JavaScript, JavaScript, Node.js, V8 (Google Chrome), npm (package manager for node), npm, WebAssembly (compile js) APL 设备接口 for serial communication: RS/EIA/TIA 232/422/485, pySerial, serialport, serialport USB - serial:FTDI, libFTDI, python-ftdi, node ftdi lib USB, PyUSB, node usb lib IrDA, python-irda GPIB, VISA, PyVISA: Control your instruments with Python — PyVISA 1.8 documentation IOT: MQTT, XMPP Native netwrok interface: socket, dgram, net, node websocket package 数据接口 sheet: Calc, Sheets py sheet: Pyspread, Pandas MySQL, MongoDB 用户界面 Tk, Tkinter: hello.load.45.py wxWidgets, wxPython: panel_png_path.py Qt (antimony), PyQt GTK, PyGTK PyGTK, PyClutter Kivy(cross platform) forms, forms Framworks: Require, Require, Angular, Angular, Ember, Ember, Meteor, Babel 图形 low level: X Windows java: AWT, JFC, Swing Canvas SVG 3D graphics: WebGL, Three.js OpenGL, GLUT, GLUT CG: RenderMan, RenderMan, Pixie complex data: VTK, pyvtk, pyvtk 3D BIO data: OpenVDB Game engine: Unity GPU: CUDA, OpenCL 多媒体 SDL, Pygame openFrameworks, ofpython HTML5, WebRTC (realtime audio &amp; video) 数学 SciPy, NumPy, IPython, Jupyter low level lib: Netlib, BLAS, LINPACK, LAPACK MATLAB, Octave matplotlib, Seaborn R, RPy, ggplot2 symbolic: Mathematica, Mathematica, SymPy typed arrays, web workers, file reader Math.js, Math.js, Science.js jqPlot, D3, Highcharts signal processing, modeling 课程资源 Fab Academy 2016 课表 Week16 课程视频 Week16 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业15：网络和通信[FabNotes031]]]></title>
    <url>%2Ffabnotes031.html</url>
    <content type="text"><![CDATA[这周的作业是 设计和搭建一个连接至少两个处理器的有线/无线网络 电路设计设计了两块电路板。一块是有 Attiny45 的桥接板： 另外一块也是 Attiny45，作为受控节点： 电路设计文件 制作电路板继续使用 Roland SMR-20 雕刻板子。 在 fabmodules 中，将导出的电路 png 文件dpi 设为 1500，计算出路径，然后完成雕刻和切割： 焊接贴片元件： 烧固件： make -f hello.bus.45.make sudo make -f hello.bus.45.make program-usbtiny 1234567891011121314151617181920212223242526272829303132333435363738394041424344avr-objcopy -O ihex hello.bus.45.out hello.bus.45.c.hex;\ avr-size --mcu=attiny45 --format=avr hello.bus.45.outAVR Memory Usage----------------Device: attiny45Program: 768 bytes (18.8% Full)(.text + .data + .bootloader)Data: 4 bytes (1.6% Full)(.data + .bss + .noinit)avrdude -p t45 -P usb -c usbtiny -U flash:w:hello.bus.45.c.hexavrdude: AVR device initialized and ready to accept instructionsReading | ################################################## | 100% 0.01savrdude: Device signature = 0x1e9206avrdude: NOTE: &quot;flash&quot; memory has been specified, an erase cycle will be performed To disable this feature, specify the -D option.avrdude: erasing chipavrdude: reading input file &quot;hello.bus.45.c.hex&quot;avrdude: input file hello.bus.45.c.hex auto detected as Intel Hexavrdude: writing flash (768 bytes):Writing | ################################################## | 100% 1.07savrdude: 768 bytes of flash writtenavrdude: verifying flash memory against hello.bus.45.c.hex:avrdude: load data flash data from input file hello.bus.45.c.hex:avrdude: input file hello.bus.45.c.hex auto detected as Intel Hexavrdude: input file hello.bus.45.c.hex contains 768 bytesavrdude: reading on-chip flash data:Reading | ################################################## | 100% 1.48savrdude: verifying ...avrdude: 768 bytes of flash verifiedavrdude: safemode: Fuses OK (H:FF, E:DF, L:62)avrdude done. Thank you. 运行程序在 terminal 中运行 python 程序，需要制定串口名字和波特率： python term.py /dev/tty.usbserial-A400gwhT 9600 程序代码. 课程资源 Fab Academy 2016 课表 Week15 课程视频 Week15 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Arduino</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十五周：网络和通信[FabNotes030]]]></title>
    <url>%2Ffabnotes030.html</url>
    <content type="text"><![CDATA[这周学习网络通信. 串口asynchronous 异步 RS-232, RS-422, RS-485 video I2C TWI USI software library SPI library USB AVR, LUFA STM32 V-USB OSI layers 7: application 应用 (HTTP) 6: presentation 表现层 (SSL) 5: session 会话 (RPC) 4: transport 传输 (TCP, UDP) 3: network 网络 (IP) 2: data link 数据链路 (MAC) 1: physical 物理层 (PHY) 物理介质 capacity: bandwidth * log_2 (signal/noise) wired single-ended, differential, powerline open collector, open drain transmission (pass) gate, tri-state transmission line waveguide TIA RS232, 422, 485 802.3 ethernet chip module SONET optical fiber wireless FCC, Part 15, ISM 802.11, Wi-Fi Wi-Fi, ZigBee 6LoWPAN Bluetooth optical: transmitter, receiver modulation 调制 PCM: Pulse-Code Modulation 脉冲编码调制 PPM: Pulse-Position Modulation OOK: On-Off Keying 通断键控 FSK: Frequency-Shift Keying 频移键控 BPSK: Binary Phase-Shift Keying 二进制相移键控 QAM: Quadrature Amplitude Modulation 求积分振幅变调 OFDM: Orthogonal Frequency-Division Multiplexing 正交频分多路 FHSS: Frequency-Hopping Spread Spectrum 跳频扩频 DSSS: Direct-Sequence Spread Spectrum 直接序列扩频 UWB: Ultra-WideBand 超宽带 channel sharing 信道共享 ALOHA Master-Slave Token Ring TDMA: Time-Division Multiple Access 时分多址 FDMA: Frequency-Divsion Multiple Access 频分多址 CSMA: Carrier-Sense Multiple Access 载波监听 CD: Collision Detection CA: Collision Avoidance 1-persistent: transmit when clear nonpersistent: random backoff p-persistent: probability to transmit CDMA: Code-Division Multiple Access 码分多址 MIMO: Multiple-Input Multiple-Output 多输入多输出 PDMA”: Physical-Division Multiple Access errors 错误 detection, correction block, convolution codes parity, checksum, Hamming, Reed-Solomon, Turbo networking 网络 Internet protocols IPv4, IPv6 DNS, DHCP 动态主机配置协议, NAT, private UDP (User Datagram Protocol)用户报文协议, TCP (Transmission Control Protocol)传输控制协议 HTTP 超文本传输协议 BGP (Border Gateway Protocol) 边界网关协议, AODV sockets SLIP APTP RF 射频 radios: oscillator, mixer, PA, LNA, IF, I/Q, demod, baseband, filters antennas: Q, antenna gain, impedance matching single-chip MICRF (300-470 MHz) MRF49XA (433/868/915 MHz) nRF905 (433/868/915 MHz) nRF24L01+ (2.4 GHz ISM) CC2541 (2.4 GHz Bluetooth) ESP8266 (2.4 GHz Wi-Fi) software radio 课程资源 Fab Academy 2016 课表 Week15 课程视频 Week15 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业14：合成材料[FabNotes029]]]></title>
    <url>%2Ffabnotes029.html</url>
    <content type="text"><![CDATA[这周的作业是 设计和制作一个 3D 模具，在此基础上制造加入纤维的合成材料 设计这周的作业灵感来自 Lego 盒子的盖子。 在 Fusion 360 里设计模型： 设计文件. 机器雕刻跟小伙伴们奔到 Fablab XH 借用机器： CNC Router VR1212B。 换 6mm 的刀头： 参数设置，路径计算： 速度和给进值： Chip load: ~ 0.001-0.010” = feed rate (inches per minute) / (RPM x number of flutes) Cut depth: ~ tool diameter Step-over: ~ tool diameter/2 合成材料的模具做好了： 合成我们使用的是抽真空法，材料用的环氧树脂和麻布。 第一步，先用保鲜膜把模具包好，这样成模以后才好取出。 接着，把麻布剪成小块，方便涂抹材料粘贴。在胡教授的帮助下，我们买来新的环氧树脂和固化剂： 1：1 混合环氧树脂和固化剂，并充分搅拌： 把麻布一层一层覆盖到模具上： 完成后，放进真空袋： 把空气抽出： 密封好的真空袋放置一个晚上。第二天，模具硬化，可以取出了： 边缘有一些变形，其他部分都 ok： 课程资源 Fab Academy 2016 课表 Week14 课程视频 Week14 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十四周：合成材料[FabNotes028]]]></title>
    <url>%2Ffabnotes028.html</url>
    <content type="text"><![CDATA[这周学习合成材料. 材料compression 压缩比 vs tension 张力 epoxy + carbon fiber 环氧树脂+碳纤维 concrete + rebar 混凝土+钢筋 fiberglass 玻璃纤维 FR1, FR4 tire 轮胎 adobe 土砖 wood 木材 fiber 纤维 chopped 短纤维, filament 灯丝, tape, fabric glass 玻璃 carbon 碳 aramid 芳纶, Kevlar 凯芙拉,芳纶纤维布 natural: cotton 棉花, silk 丝, bamboo 竹, wood 木, linen 亚麻, burlap 粗麻布, … matrix epoxy 环氧树脂 polyester 聚酯,涤纶 phenolic 酚醛树脂 urethane 尿烷,氨基甲酸乙酯 wax 蜡 cement 水泥 natural: plant resins 植物树脂, sugars, … 供应商 McMaster-Carr CST West System AeroMarine Jamestown Distributors Fiberglass Supply Entropy Resins Smooth-On Ashland DuPont US Composites Hexcel Exel Exel Gurit 设计 plies 板层 radius of curvature 曲率 cores spar 晶石, rib, skin digital 流程 cutting, darts, net-shape compaction 压实, infusion 浸泡, volume fraction 体积分数 coupons open, closed mold wet lay-up, pre-preg, RTM, VARTM compression molding 压缩模塑法 press, clamps, hydrostatic 静压轴承,铃静力轴承,液体静压轴承 vacuum bagging 抽真空法 mold, release, laminate层压板, core, peel ply, bleeder分压器, breather, bag, sealant tape密封, pump autoclave 高压锅 pultrusion 拉挤成型 trimming clear coat 模具 machined folded skinned 安全 particles 悬浮颗粒, inhalation 吸入, rashes 皮疹 respirators, googles, gloves fumes 废气, ventilation 通风 exotherm 放热速度 课程资源 Fab Academy 2016 课表 Week14 课程视频 Week14 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业13：输出设备[FabNotes027]]]></title>
    <url>%2Ffabnotes027.html</url>
    <content type="text"><![CDATA[这周的作业是 给微控制器电路板增加输出元件 电路板设计 用 ERC 和 DRC 工具检查错误。确保没有错误后，导出黑白 png 文件。 电路设计源文件 电路板制作依旧是用 Roland SMR-20 雕刻电路板。 1/64 刀头刻线路， 1/32 刀头切边缘。 焊元件 然后烧程序 make -f hello.RGB.45.make sudo make -f hello.RGB.45.make program-usbtiny 1234567891011121314151617181920212223242526272829303132333435363738394041424344avr-objcopy -O ihex hello.RGB.45.out hello.RGB.45.c.hex;\ avr-size --mcu=attiny45 --format=avr hello.RGB.45.outAVR Memory Usage----------------Device: attiny45Program: 338 bytes (8.3% Full)(.text + .data + .bootloader)Data: 0 bytes (0.0% Full)(.data + .bss + .noinit)avrdude -p t45 -P usb -c usbtiny -U flash:w:hello.RGB.45.c.hexavrdude: AVR device initialized and ready to accept instructionsReading | ################################################## | 100% 0.01savrdude: Device signature = 0x1e9206avrdude: NOTE: &quot;flash&quot; memory has been specified, an erase cycle will be performed To disable this feature, specify the -D option.avrdude: erasing chipavrdude: reading input file &quot;hello.RGB.45.c.hex&quot;avrdude: input file hello.RGB.45.c.hex auto detected as Intel Hexavrdude: writing flash (338 bytes):Writing | ################################################## | 100% 0.49savrdude: 338 bytes of flash writtenavrdude: verifying flash memory against hello.RGB.45.c.hex:avrdude: load data flash data from input file hello.RGB.45.c.hex:avrdude: input file hello.RGB.45.c.hex auto detected as Intel Hexavrdude: input file hello.RGB.45.c.hex contains 338 bytesavrdude: reading on-chip flash data:Reading | ################################################## | 100% 0.72savrdude: verifying ...avrdude: 338 bytes of flash verifiedavrdude: safemode: Fuses OK (H:FF, E:DF, L:62)avrdude done. Thank you. 编程在 Arduino 里面写程序。要先选好 ATtiny 板子，ATtiny45 芯片和 8 MHz internal clock。 12345678910111213141516171819202122232425262728293031int led1 = 1; // the PWM pin the LED is attached toint led2 = 2;int led3 = 0;int brightness = 0; // how bright the LED isint fadeAmount = 5; // how many points to fade the LED by// the setup routine runs once when you press reset:void setup() &#123; // declare pin 1,2,3 to be an output: pinMode(led1, OUTPUT); pinMode(led2, OUTPUT); pinMode(led3, OUTPUT);&#125;// the loop routine runs over and over again forever:void loop() &#123; // set the brightness of pin 1,2,3: analogWrite(led1, brightness); analogWrite(led2, brightness); analogWrite(led3, brightness); // change the brightness for next time through the loop: brightness = brightness + fadeAmount; // reverse the direction of the fading at the ends of the fade: if (brightness == 0 || brightness == 255) &#123; fadeAmount = -fadeAmount ; &#125; // wait for 30 milliseconds to see the dimming effect delay(30);&#125; 代码下载. 程序写好之后， Burn Bootloader 上传到电路板上。LED 开始工作： 课程资源 Fab Academy 2016 课表 Week13 课程视频 Week13 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Arduino</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十三周：输出设备[FabNotes026]]]></title>
    <url>%2Ffabnotes026.html</url>
    <content type="text"><![CDATA[这周学习输出设备. RGB LED LED 点阵Charlieplexing LCD44780 视频arduino-tvout Thinner-Client 扬声器MOSFET 场效应晶体管- The metal–oxide–semiconductor field-effect transistor floating gates gate resistors 门电阻 low-pass filters 低通滤波器 class D amplifiers 马达brush DC motor brushless DC motor (BLDC) servo motor stepper motor: unipolar, bipolar 课程资源 Fab Academy 2016 课表 Week13 课程视频 Week13 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业12：做模具[FabNotes025]]]></title>
    <url>%2Ffabnotes025.html</url>
    <content type="text"><![CDATA[这周的作业是 设计一个 3D 模具，用机器雕刻出来，然后用它来翻模 设计既然是模具，不如来做俄罗斯方块的组件吧 :) 用 Fusion 360 设计模具。首先需要设置模具统一的参数： 画平面图： 拉出形状： 然后是用雕刻机雕刻，再用木板框住，倒入筑模材料，等待成型。图中蓝色部分是用来雕刻的蜡，棕色部分是木框。 设计好后，将模具导出成 stl 文件. 机器雕刻使用 MODELA Player4 打开导出的 stl 文件。材料选择塑造用蜡 设置： tool - 3mm Square 我们使用 SRM-20 机器来雕刻。跟 PCB 雕刻类似，也需要调零。点击 Output 后开始计算雕刻路径。 雕刻完成后，用木框围好四边，倒入准备好的硅胶。 模具做好以后，就可以倒入材料开始翻模。 最后的俄罗斯方块效果并不理想，看来是模具的尺寸太小，需要对设计图做一些改进。 其他试验用 3D 打印模具，用来制作模的 negative 部分。 3D 打印好之前做的 Elizabeth 作为生成模具的形状 ： 然后是准备筑模需要的材料 PMC-121/30 URETHANE MOLD COMPOUND (PART A) PMC-121/30 WET RUBBER MOLD COMPOUND (PART B) 塑料杯 手套 搅拌棒 护目镜 以 1：1 的比例混合化合物： 充分搅拌： 把 3D 模型放进去： 固定好位置： 材料固化成橡胶状大约需要 16 个小时： 接着，用石膏翻出另一个傻白。 以 47:100 的比例混合石膏粉和水： 导入模中等待干燥： 一个新的石膏傻白粗来了: 课程资源 Fab Academy 2016 课表 Week12 课程视频 Week12 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Fab - Maker - Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十二周：模具和铸件[FabNotes024]]]></title>
    <url>%2Ffabnotes024.html</url>
    <content type="text"><![CDATA[这周学习Molding and Casting. 模具种类 injection 注射 (sprue浇口, runner流道, gate, vent通气孔, parting line分模线, flashing) insert 插入 vacuum 抽真空 blow (make bottles) 吹塑 rotational 旋转成型 flexible, soft 材料 low-temp wax machineable wax – main material rigid foam (make large mold) gesso 石膏, hot air alginate gel 藻酸胶 (制作面部/面具) urethane rubber 聚氨酯橡胶, plastic (very strong) silicone 硅胶 PDMS 聚二甲基硅氧烷,硅橡胶,硅氧烷 (polydimethylsiloxane) latex 乳胶 (paint) thermoplastic 热塑性塑料, thermoset polymers 热固性聚合物 calcium sulfate 硫酸钙 desicant干燥剂, coagulant凝结剂, plaster石膏, gypsum石膏, drywall DryStone Portland cement 硅酸盐水泥 calcium silicate 硅酸钙, aluminum/iron oxide 铝/铁氧化物, calcium sulfate 硫酸钙 Hydro-Stone metal casting 金属铸件 Cerrotru, Zamak h 合金, aluminum 铝合金 clay sand 粘土砂 glass ceramic 陶瓷 food 添加剂 fibers 纤维(tension 张力, compression 压缩比, composites复合材料) fillers 填料: density 密度, conductivity 导电率, flexibility 柔韧性, color, … 过程 试验 混合 (不要混入空气) 浇筑 气泡 vibration 振动, vacuum 抽真空, pressure 压力 curing 固化 polymerization 聚合 cross-linking 交联 hydration 水合作用 endothermic 吸热, exothermic 放热 demolding 脱模 taper 锥拔 release agents 脱模剂 dilute dish soap 稀肥皂, vaseline 凡士林, talc 滑石粉, … deformation 变形 储存 shelf life 保质期 安全 MSDS 材料安全性数据表: SDS search ventilation 通风 保护: 手套, 面罩 废物处理 软件 ShopBot VCarvePro fab modules image, mold stl, toolpath, mold calculating path in fabmodules 其他资料 Plastic Injection Molding Molding and Casting, or, Confessions of a Cat Lady 课程资源 Fab Academy 2016 课表 Week12 课程视频 Week12 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业11：输入设备[FabNotes023]]]></title>
    <url>%2Ffabnotes023.html</url>
    <content type="text"><![CDATA[作业11：输入设备[FabNotes023] 给微控制器电路增加一个传感器，测量感兴趣的值 这周开始，芯片 Attiny45 将会频繁出场: 电路设计尝试用 phototransistor （光电晶体管）作为输入模块，去控制 LED 。 在 Eagle 先画 schematic: 然后生成 board。可以先用 autorouter 自动布线，然后再根据需要手动调整。 在完成设计之前，需要用 ERC 命令检查 schematic 的错误，用 DRC 检查 board 的错误。根据机器刀头的尺寸，设置线路间隔为 16mil 。 全部仔细检查后，再分别把 top 图层和 dimension 图层输出为两个 png 文件，要注意勾选单色输出： Download the eagle sch &amp; brd &amp; png files. 电路板制作依然使用 Roland SMR-20 刻电路板，用 1/64 刀头刻线路，1/32 切割外框。在 fabmodules.org 里面，设置输入的 png 图像 dpi 为 1500 ，然后计算雕刻路径： 将元件们焊好： 程序这周开始用 Arduino 写程序。在上传之前，需要选好板子的类型以及芯片。 Attiny45 使用 8 MHz 内频。 代码如下，也可以到这里下载。 1234567891011121314151617181920212223242526272829 // set pin numbers:const int buttonPin = 3; // the number of the pushbutton pinconst int ledPin = 4; // the number of the LED pin// variables will change:int buttonState = 0; // variable for reading the pushbutton statusvoid setup() &#123; // initialize the LED pin as an output: pinMode(ledPin, OUTPUT); // initialize the pushbutton pin as an input: pinMode(buttonPin, INPUT);&#125;void loop() &#123; // read the state of the pushbutton value: buttonState = digitalRead(buttonPin); // check if the pushbutton is pressed. // if it is, the buttonState is HIGH: if (buttonState == HIGH) &#123; // turn LED on: digitalWrite(ledPin, HIGH); &#125; else &#123; // turn LED off: digitalWrite(ledPin, LOW); &#125;&#125; 在这个简单的电路程序中，光电晶体管起到开关的作用，根据光亮控制电路中 LED 的明灭： 试验1：用 Python 和串口通信制作一块带有光电晶体管的板子： 下载 hello.light.45.c 和 makefile。在 terminal cd 进入文件夹，输入命令 make -f hello.light.45.make 得到回应： 123456789101112avr-gcc -mmcu=attiny45 -Wall -Os -DF_CPU=8000000 -I./ -o hello.button.45.out hello.button.45.cavr-objcopy -O ihex hello.button.45.out hello.button.45.c.hex;\ avr-size --mcu=attiny45 --format=avr hello.button.45.outAVR Memory Usage----------------Device: attiny45Program: 364 bytes (8.9% Full)(.text + .data + .bootloader)Data: 0 bytes (0.0% Full)(.data + .bss + .noinit) 然后输入命令： sudo make -f hello.light.45.make program-usbtiny 得到回应： 12345678910111213141516171819202122232425262728293031323334353637383940avr-objcopy -O ihex hello.light.45.out hello.light.45.c.hex;\ avr-size --mcu=attiny45 --format=avr hello.light.45.outAVR Memory Usage----------------Device: attiny45Program: 502 bytes (12.3% Full)(.text + .data + .bootloader)Data: 1 bytes (0.4% Full)(.data + .bss + .noinit)avrdude -p t45 -P usb -c usbtiny -U flash:w:hello.light.45.c.hexavrdude: AVR device initialized and ready to accept instructionsReading | ################################################## | 100% 0.00savrdude: Device signature = 0x1e9206avrdude: NOTE: &quot;flash&quot; memory has been specified, an erase cycle will be performed To disable this feature, specify the -D option.avrdude: erasing chipavrdude: reading input file &quot;hello.light.45.c.hex&quot;avrdude: input file hello.light.45.c.hex auto detected as Intel Hexavrdude: writing flash (502 bytes):Writing | ################################################## | 100% 0.74savrdude: 502 bytes of flash writtenavrdude: verifying flash memory against hello.light.45.c.hex:avrdude: load data flash data from input file hello.light.45.c.hex:avrdude: input file hello.light.45.c.hex auto detected as Intel Hexavrdude: input file hello.light.45.c.hex contains 502 bytesavrdude: reading on-chip flash data:Reading | ################################################## | 100% 0.94savrdude: verifying ...avrdude: 502 bytes of flash verified Python 程序可以在这里下载. 用 USB to TTL 连接好板子并运行程序： python hello.light.45.py /dev/ttyUSB0 这时出现错误提示： 12345678Traceback (most recent call last): File &quot;hello.light.45.py&quot;, line 62, in &lt;module&gt; ser = serial.Serial(port,9600) File &quot;/Library/Python/2.7/site-packages/serial/serialutil.py&quot;, line 180, in __init__ self.open() File &quot;/Library/Python/2.7/site-packages/serial/serialposix.py&quot;, line 294, in open raise SerialException(msg.errno, &quot;could not open port %s: %s&quot; % (self._port, msg))serial.serialutil.SerialException: [Errno 2] could not open port /dev/ttyUSB0: [Errno 2] No such file or directory: &apos;/dev/ttyUSB0&apos; Google 一下这个问题 Failed to open port /dev/ttyUSB0 - ROS Answers: Open Source Q&amp;A Forum。 问题可能是因为我还没有装 FTDI （用于 USB 和串口通信）驱动。 使用命令 ls /dev/tty* 可以列出当前可用的串口。确实没有 /dev/tty.usbserial-A400gwhT 串口。所以我尝试安装 FTDI 驱动 - D2XX Direct Drivers 以及 Virtual COM Port Drivers。但是依然不成功。 接着，Google 到这一篇 How to Install FTDI Drivers - learn.sparkfun.com 照着再装了一遍驱动。重启电脑后，插入 FTDI 2 USB 设备， /dev/tty.usbserial-A400gwhT 总算出现在串口列表中。 接着，尝试用新的串口运行程序： python hello.light.45.py /dev/tty.usbserial-A400gwhT 9600 继续看到错误提示： command line: hello.light.45.py serial_port 到 python 程序中仔细看了看，将 len(sys.argv) 从 2 改为 3: 1234if (len(sys.argv) != 3): print &quot;command line: hello.light.45.py serial_port&quot; sys.exit()port = sys.argv[1] 问题解决： 测试视频 实验2：开关做了一个带开关的板子： 下载 hello.button.45.c 和 makefile。 在 terminal cd 进入文件夹，运行命令： make -f hello.button.45.make 和 sudo make -f hello.button.45.make program-usbtiny。都正常。 然后用 TTL 2 USB 连接板子： 运行命令 python term.py /dev/tty.usbserial-A400gwhT 9600 每按一次按钮，屏幕打出一个“du”： 测试视频 实验3：温度传感器做了一个带有温度传感器的板子： 下载 hello.temp.45.c 和 makefile。输入命令 make -f hello.button.45.make 和 sudo make -f hello.button.45.make program-usbtiny。 然后运行程序 python hello.temp.45.py /dev/tty.usbserial-A400gwhT 9600 。传感器开始实时监测温度变化。 课程资源 Fab Academy 2016 课表 Week11 课程视频 Week11 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Arduino</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十一周：输入设备[FabNotes022]]]></title>
    <url>%2Ffabnotes022.html</url>
    <content type="text"><![CDATA[这周学习 输入设备. 通信 pySerial: Python与串口通信 miniterm: pySerial 的操作终端 实例文件rx.py, term.py serialport: 跟 js 交互 chrome.serial WebUSB API bit timing 位定时: 关键参数 xxx bits/sec clocks (10% RC, 1% RC calibrated, .5% resonator, 50 ppm crystal) 开关button 按钮开关 slide 滑动开关 运动pyroelectric 热释电红外PIR运动传感器探测器模块 测量身体的热辐射，检测活动和变化。 test motion module video 距离sonar 声纳 Ultrasonic Module HC-SR04 Distance Sensor test video 磁场Hall effect:霍尔效应是指当固体导体放置在一个磁场内，且有电流通过时，导体内的电荷载子受到洛伦兹力而偏向一边，继而产生电压（霍尔电压）的现像。电压所引致的电场力会平衡洛伦兹力。 test video 温度NTC 负温度系数热敏电阻(Negative Tempperature Coefficient Thermistor) 热敏电阻: 电阻阻值随温度而上升。温度越高，敏感度越低。 RTD thermistors: lower temperature, more sensitive （NTC table） _sml.jpg) test video 光phototransistor 光电晶体管 test video 加速，方向，旋转3D accelerometer I2C test video 声音MEMS, Microphones &gt; Knowles SPU0414HR5H-SB-7 test video step response 阶跃响应resistance 电阻, capacitance 电容, inductance 电感, position 位置, pressure 压力, proximity 接近度, tilt 倾斜, acceleration 加速, humidity 湿度 project: touchpad, multitouch, … loading (test video) transmit-receive (test video) dielectric spectroscopy measurement 介电谱测量 震动piezo 压电 压力force sensing resistor 力敏电阻 strain gauge 应变仪 load cell 称重传感器 图像module cameras, boards OpenCV: 视屏处理库 libuvc: a cross-platform library for USB video devices WebRTC:WebRTC (Web Real-Time Communications) 使 Web 应用程序和网站来捕获和可选流媒体音频/视频,以及浏览器之间任意数据交换，而不需要一个中介。 更多资料 The Physics of Information Technology Basics of Measuring the DielectricProperties of Materials Measure the Difference 课程资源 Fab Academy 2016 课表 Week11 课程视频 Week11 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业10：机械和机器设计[FabNotes021]]]></title>
    <url>%2Ffabnotes021.html</url>
    <content type="text"><![CDATA[小组作业的第二部分，让机器动起来~ 我们的小组项目网站 我们对上周的设计做了一些改进： 接下来，需要使用 gestalt 框架 (A control system framework for personal fabrication)让机器动起来。Fab academy 网站上有一份很详细的教程 Getting Started With Gestalt Nodes。 FabNet Fabnet is a multi-drop network, meaning that multiple modules (a.k.a. nodes) share a single set of communication wires. 步骤: 用 FTDI USB 和电脑连接 将 Gestalt Node 连接到 Fabnet 供电 12V-24V/7.5V 然后制作连接 Fabnet 的电路板： 下载 Gestalt Node 的固件到板子上 用 wxGestalt 写程序 wxGestalt 是个控制 Gestalt nodes 的简易 Python IDE。 机器设置 识别结点 IDE 最后，开动机器！ Vimeo 视频: https://vimeo.com/164062063 Youtube 视频: https://youtu.be/QKijCreOzgY 项目源代码. 课程资源 Fab Academy 2016 课表 Week10 课程视频 Week10 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第十周：机器设计[FabNotes020]]]></title>
    <url>%2Ffabnotes020.html</url>
    <content type="text"><![CDATA[这周学习 机器设计. modular machines Open loop is where you tell the machine what to do and hope it does it. Close loop is much cheaper and easier to manipulated. PID, acceleration, model predictive control proportional control PID(比例积分微分控制) - Proportional, Integral, Derivative dataflow machine controls 课程资源 Fab Academy 2016 课表 Week10 课程视频 Week10 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业9：制作一台简单机器[FabNotes019]]]></title>
    <url>%2Ffabnotes019.html</url>
    <content type="text"><![CDATA[这周的作业是 小组作业 做一台机器,包括终端执行器,建造被动部分和手动操作部分 我们小组做的是一台自动切蛋卷的机器 - - 这两周的作业让我第一次深刻体会到工科的特点：所有东西都需要准确计算，才能正常工作。 测量Fablab 提供了这周课程的一些零部件，我们先用游标卡尺把它们的尺寸都量好。 然后仔细读 MTM 的教程： The Machines that Make Project at the MIT Center for Bits and Atoms We have another spot for documentation here. 设计原本打算直接用教程里面 cardboard 的源文件，但是实验室的纸板厚度和硬度都不理想，只好放弃。只能选择激光切割薄木板再拼接，不能按照原来可折叠的特性去设计，需要重新在 Fusion 360 里建模。 开始设计前，最好先把所有参数都设好，在画图形时就可以直接调用参数，方便最后随时根据材料调整厚度。 然后一个部件一个部件地画出来： 切割和组装实验室的薄木板尺寸很小，只有 450 mm x 300 mm，不得不分成两部分切割，再把它们拼起来。 在 CoralDraw 里面设置切割参数： speed: 2.7 power: 97 正式切割前，先来试验一下参数是不是对得上： 看起来没问题： 再做了一些调整，然后才开始切割和组装： 机器结构做好了，下周任务是让它动起来~ 课程资源 Fab Academy 2016 课表 Week9 课程视频 Week9 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第九周：机械设计[FabNotes018]]]></title>
    <url>%2Ffabnotes018.html</url>
    <content type="text"><![CDATA[这周学习 机械设计. 原理 stress-strain 应力 物体由于外因（受力、湿度、温度场变化等）而变形时，在物体内各部分之间产生相互作用的内力，以抵抗外因的作用，并试图恢复到变形前的位置。 moduli 模 elastic 弹性, plastic flow friction 摩擦 spalling 剥落 hysteresis 磁滞 backlash 反弹 flexure 弯曲 force loops 力循环 elastic averaging 弹性平均 kinematic coupling 运动学耦合 Materials plastic 塑料 : Rigid HDPE Polyethylene 很适合做机械部件 metal 金属 ceramic 陶瓷 rubber 橡胶 foam 泡沫 fasteners （紧固件）: nuts 螺母, bolts 螺栓, washers 垫圈 pins （开口销） framing （框架）: metal, plastic, t-slot, self-aligning drive(驱动): gears 齿轮 sprockets 链轮 belts 传送皮带 chains 链条 shafts 转动轴 rods 螺纹钉 nuts guide: shafts, rails 导轨, slides couplers 耦合器: shafts, joints bearings 轴承: ball thrust 推力轴承 linear 直线轴承 rotary 回转轴承 sleeve 滑动轴承 rotary: wheels, pulleys 滑轮, casters 脚轮 lubricants 润滑剂 参考链接Applied Mechanics of Solids 课程资源 Fab Academy 2016 课表 Week9 课程视频 Week9 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业8：刻板焊接烧程序[FabNotes017]]]></title>
    <url>%2Ffabnotes017.html</url>
    <content type="text"><![CDATA[这周的作业是 阅读一款微处理器的说明 制作电路板并编写程序使其运行 第一轮尝试: 自己制作 ISPISP 是为 AVR 芯片制作的编程器，这里有详细的 DIY ISP 教程。 依着教程画葫芦： 下载安装 Crosspack AVR Get Make 下载固件 FabISP Firmware for MacOS 10.8.2 解压固件，命令行进入解压后的目录 用编辑器打开 Makefile 将模式由 “avrisp2” 改为 “usbtiny” 也就是找到以下代码，将注释转移到 “avrisp2”那一行，然后保存文件 12#AVRDUDE = avrdude -c usbtiny -p $(DEVICE) # edit this line for your programmerAVRDUDE = avrdude -c avrisp2 -P usb -p $(DEVICE) # edit this line for your programmer 命令行进入固件目录，输入命令 make clean 如果正常，将返回结果 rm -f main.hex main.lst main.obj main.cof main.list main.map main.eep.hex main.elf *.o usbdrv/*.o main.s usbdrv/oddebug.s usbdrv/usbdrv.s 但是这时出现了错误： 1234kidults-NMB:fabISP_mac.0.8.2_firmware kidult$ make hexavr-gcc -Wall -Os -DF_CPU=20000000 -Iusbdrv -I. -DDEBUG_LEVEL=0 -mmcu=attiny44 -c usbdrv/usbdrv.c -o usbdrv/usbdrv.omake: avr-gcc: No such file or directorymake: *** [usbdrv/usbdrv.o] Error 1 好吧，忘记插我的 FabISP 到电脑了……插好后再试，ok 的： 下一步，需要设置 fuse，让板子能使用外部的 clock ：输入命令 make fuse 又出现了错误： 1234avrdude -c usbtiny -p attiny44 -U hfuse:w:0xDF:m -U lfuse:w:0xFF:mavrdude: Error: Could not find USBtiny device (0x1781/0xc9f)avrdude done. Thank you.make: *** [fuse] Error 1 查了一圈 google，搞不明白为什么。似乎是 GCC 编译问题，或者是我的板子有问题。第一轮尝试以失败告终。 第二轮尝试: 使用现成的 USBtinyISP首先，下载 hello.ftdi.44.echo.c, hello.ftdi.44.echo.c.make 。然后将板子连接到 USBtinyISP: 此处需要吐槽一下 New MacBook，只有一个 typeC 接口，一开始 USBtinyISP 接上去灯不亮，以为是我的 typeC 转接口坏了。试了大半个晚上后放弃。第二天试了一下连在另一台 MacBook Pro 上，USBtinyISP 的灯又亮了。插回到 New MacBook，依然不亮，怀疑是不是数据线坏了，又折腾半个晚上。偶然间又发现，充满电再插 USBtinyISP 会亮……所以问题可能出在 typeC 转接口对 USB 供电不足…… 折腾两三个晚上，终于到下一步。命令行进入前面下载好的两个文件的目录，输入命令： make -f hello.ftdi.44.echo.c.make Make 成功了。然后是 sudo make -f hello.ftdi.44.echo.c.make program-usbtiny-fuses 又出现错误提示： 1234567891011121314151617181920212223avr-objcopy -O ihex hello.ftdi.44.echo.out hello.ftdi.44.echo.c.hex;\ avr-size --mcu=attiny44 --format=avr hello.ftdi.44.echo.outAVR Memory Usage----------------Device: attiny44Program: 758 bytes (18.5% Full)(.text + .data + .bootloader)Data: 64 bytes (25.0% Full)(.data + .bss + .noinit)avrdude -p t44 -P usb -c usbtiny -U lfuse:w:0x5E:mavrdude: initialization failed, rc=-1 Double check connections and try again, or use -F to override this check.avrdude done. Thank you.make: *** [program-usbtiny-fuses] Error 1 又开始到处 Google。查看了一下 fuse 的含义 ： What are the fuses? There are 3 bytes of permanent storage in the chip called ‘fuse low byte’, ‘fuse high byte’ and ‘fuse extended byte’. These bytes are called fuses and can be reprogrammed as many times as you want and determines the behaviour of the chip. To do that, their value is not erased when the chip is powered off or reprogrammed. Each microchip has its own definition for the values that must have the fuses. 将错误信息复制到 Google，找到了之前的fab note。里面让安装FTDI 芯片的驱动。然并卵，安装好驱动依然是错误提示。 肯定是板子出问题了。需要去实验室重新刻板子和焊电路。但是实验室扩建装修中，一眨眼几个星期就过去了……………… 第三轮尝试终于盼到实验室重新开放，在空气质量500的房间中刻板子，然后搜刮了元器件回家打算自己焊。好不容易把东西凑齐，开工后发现焊锡太粗太劣质，根本没法焊。重新买了焊锡线，开工后崩溃地发现，电烙铁没有买配焊台的，调不了温度，焊枪温度太高，很容易把板子上面的铜面焊焦了。可好的板子都用完了，还是没有重新作出电路板来。 等到周末，又去到实验室老老实实刻板子，焊元件。 电路板完成后，连上 USBtinyISP，终于 fuse 成功： 下一步 make -f hello.ftdi.44.echo.c.make program-usbtiny 现在，可以将程序烧录到板子上了。 照着教程下载 term.py，输入命令 python term.py /dev/ttyUSB0 115200，继续是熟悉的错误提示： 12345678Traceback (most recent call last): File "term.py", line 89, in &lt;module&gt; ser = serial.Serial(port,speed) File "/Library/Python/2.7/site-packages/serial/serialutil.py", line 180, in __init__ self.open() File "/Library/Python/2.7/site-packages/serial/serialposix.py", line 294, in open raise SerialException(msg.errno, "could not open port %s: %s" % (self._port, msg))serial.serialutil.SerialException: [Errno 2] could not open port /dev/ttyUSB0: [Errno 2] No such file or directory: '/dev/ttyUSB0' 已经处在崩溃边缘，实验室的小伙伴提醒我用 Arduino 去烧程序。于是振作着继续尝试： 添加板子 打开 Arduino 的设置，在 “Additional Boards Manager URLs:” 里填上 https://raw.githubusercontent.com/damellis/attiny/ide-1.6.x-boards-manager/package_damellis_attiny_index.json 然后找到菜单里的 “Tools &gt; Board” ，打开 boards manager 。滚到列表底部，可以看到 “ATtiny”. 安装，然后关闭 boards manager。 设置 设置 board:”ATtiny”, Processor:”ATtiny44”, Clock:”20 MHz”, Port:”USB” 修改程序 Load Arduino 自带的 Blink example, 把 13 号引脚改为 7: Burn Bootloader 成功了！ 一周的作业用了快两个月才完成，觉得毕业希望已经渺茫………… 参考资料 Programming an ATtiny w/ Arduino 1.6 (or 1.0) Use an Arduino as a FTDI Programmer classmate’s note1 classmate’s note2 classmate’s note3 classmate’s note4 课程资源 Fab Academy 2016 课表 Week8 课程视频 Week8 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Arduino</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第八周：嵌入式编程[FabNotes016]]]></title>
    <url>%2Ffabnotes016.html</url>
    <content type="text"><![CDATA[这周学习 嵌入式编程. 微处理器/微控制器依然是填鸭式地猛灌新名词： 内存: registers, SRAM(静态存储器), DRAM(动态随机存取记忆体), EEPROM(只读存储器), FLASH(闪存), fuse 外设: A/D(模拟数字转换 Analog to Digital), comparator, D/A, timer/counter/PWM(脉宽调制), USART(串行通信), USB word size: 8, 16, 32, 64 芯片家族: 8051, PIC, MSP, AVR (我们用到的), ARM STM32 mbed, PSoC xCORE Propeller 供应商: Octopart, Digi-Key, Mouser, Newark, Farnell, SparkFun, Adafruit 时钟 种类: RC (10%, 1% calibrated 校准) ceramic 陶瓷 (0.5%) quartz 石英 (50 ppm) PLL 锁相环 instruction cycles 指令周期 overclocking 超频 开发 in-system development (加载程序到处理器) ISP: 用来跟编程器交互的程序 引导程序(bootloader): Arduino, DFU, Micronucleus JTAG 主控器, PDI 并行数据接口 ICE 编程器 ISP FabISP avrdude JTAG, PDI Atmel-ICE 汇编语言: hex file, instruction set, opcodes, mnemonics, directives, expressions, avr-as, gavrasm C 语言 (Arduino 底层语言): 需要用编译器将 C 语言代码转成十六进制代码(hex codes) AVR 依据 GCC (the GNU Compiler Collection) 而设计. AVR Libc 提供 C 语言和 AVR 通信的库 OS X 请用 CrossPack for AVR 在课程中，我们使用 GCC 将 C 语言代码编译成 AVR 可以读懂的十六进制代码 IDE 写程序, 编译, 加载到处理器 Atmel Studio, Eclipse, AVR, CodeBender Interpreters(一般都很慢): Python, BASIC, FORTH, AVRSH, Javascript(Espruino, Tessel, iop.io) 主机通讯 有一些与串口通讯的库，比如 python 的 pyserial FTDI: 提供 USB 与其他模块的通信连接(包括模块、线缆、集成电路等) 连接线 /TTL-232R-5V_sml.jpg) libFTDI 板子 AVR Atmel AVR系列是一种基于改进的哈佛结构、8位～32位精简指令集（RISC）的微控制器 Arduino: 开发板 + C 语言库 + IDE + 烧录程序 + 头文件 XMEGA: AVR 较新的系列 features toolchain: CrossPack for OS X ARM ARM 是主流的手机处理器架构 STM32 Rasberry Pi BeagleBone PandaBoard Snappy PSoC: 芯片上的可编程系统 windows only 更多资料AVR chip data sheets 课程资源 Fab Academy 2016 课表 Week8 课程视频 Week8 课程大纲 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业7：用CNC做乐谱架[FabNotes015]]]></title>
    <url>%2Ffabnotes015.html</url>
    <content type="text"><![CDATA[这周的作业是 make something big 实验室帅气的 Shopbop 用不了好心塞，原本 CNC(Computer Numerical Control) 吉他的美梦破灭。辣么，就做个简单的谱架吧。 设计在 Fusion 360 里画出四个部件：底座，支架，底板和背板。因为制作材料的厚度还不确定，所以需要把所有部件的厚度设为可调整的参数：在Modify-Parameter 里面新建自定义参数，然后在 sketch 中画图形以及拉伸时，用已经设定的参数作为长度。 东西比较大，为保险起见，先用激光切割机做了 demo 测试： 有点萌： 切割现在来真的了。这是一台 CNC machine SW1325： 把文件导到 CAD 里并微调： 材料用的是 9 mm 的中纤板（MDF）： 立铣刀直径 4.00 mm，高度 30.00 mm： 校零，回原点，选速度： 作业时的视频 组装只有四块完全没有难度…… 先把底座和支架插好： 然后是底板和背板： 噔噔噔，看上去还不错，就是个子有点矮 XD 课程资源 Fab Academy 2016 课表 Week7 课程视频 Week7 课程 Slides 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第七周：数控机器[FabNotes014]]]></title>
    <url>%2Ffabnotes014.html</url>
    <content type="text"><![CDATA[这周学习使用大型数控机器。 常用的数控机器1234567RolandShopBotHurcoHarrisonOmaxEDMMTM 加工材料rigid foam insulation(硬质绝缘泡沫) (gesso 石膏, heat gun 热风枪) veneer plywood（胶合板） medium density fiberboard (MDF 中纤板) medium density overlay (MDO 中密度板) oriented strand board (OSB 定向刨花板) HDPE（高密度聚乙烯） Lexan(热塑聚碳酸酯), polycarbonate(聚碳酸酯) Garolite aluminum 铝 工具 drill bits (钻头) vs end mills (立铣刀) flutes coatings (涂料) center-cutting up/down cut (上切式/下切式) flat/ball end (平头铣刀/球头铣刀) 进给速率 chip load: ~ 0.001-0.010” = feed rate (inches per minute) / (RPM x number of flutes) cut depth: ~ tool diameter step-over: ~ tool diameter/2 固定 vises 虎头钳 clamps 夹子 screws 螺丝 vacuum 真空 weights 砝码 glue 胶 tape 胶带 encapsulation 封装 更多资料 材料供应商 McMaster-Carr, Home Depot, Proto Labs Opendesk abrasive machining 研磨加工 grinding 研磨 课程资源 Fab Academy 2016 课表 Week7 课程视频 Week7 课程 Slides 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业6：电路设计[FabNotes013]]]></title>
    <url>%2Ffabnotes013.html</url>
    <content type="text"><![CDATA[学习电路设计这周的作业是： Redraw the echo hello-world board add (at least) a button and LED (with current-limiting resistor) check the design rules, and make it extra credit: simulate its operation 也就是从零开始设计一块电路板,并且动手做粗来。 这时，电路小白有点方，扒出别人的作业开始照猫画虎。 1. 导入元件库电路设计的软件有很多，选了据说功能最强大的 Eagle（主要是以前同学的教程基本都是用的 Eagle）。Eagle 提供了海量的电子元件库，而且 FabAcademy 作业的库也已经有人整理好了。在开工之前，先下载元件库并导入到 Eagle。 Eagle 界面的功能图标简直让人抓瞎，完全看不懂什么意思，只好一个一个悬停等看 tooltip。顶部工具栏有一个好像三个温度计的图标，用来导入元件库。 2. 选择元件到画布Eagle 主要分成两种文件/视图：schemetic 用于元件布局和指定元件关系，保存为 .sch 文件；board 用于生成线路，保存为 .brd 文件。 元件库准备就绪后，我们需要把电路中用到的所有元件一口气都找出来，加到设计中。首先，把最重要的微控制器 ATtiny44 找到。在 FAB 元件库中选择 ATTINY44-SSU ，然后点「ok」，鼠标放置到合适的位置上，再点击，元件就放好了。 放好一个元件后，按下「esc」键，可以快速回到元件选择面板，继续添加其他元件： 3. 完成电路设计所有元件添加好以后，需要对元件名、值、引脚等做出相应的修改。其中最关键的是，将每个需要用到的引脚，拉出一条线，并且打上需要连接元件的标签。这个过程会用到下面这些功能： 这一步坑很多。必需仔仔细细检查每一个引脚的标签到底有没有打对。而且从引脚引出来的线不能跟引脚本身重合，而只能恰好在接触的地方有一个交点。如果在设计视图没有把所有细节弄对，到电路板视图时，就会死活连不好。推倒重来几次后，终于完成了 schematic 视图： 4. 生成电路板点击元件库按钮旁边的 “Generate/Switch to board” 按钮，来到鸡(zhe)冻(mo)人(si)心(ni)的电路板视图： 程序会根据设计视图中，所有元件的连接关系，自动打好虚拟连接线（黄色的细线，不能在 board 视图中删除，必需回到 schemetic 视图中修改引脚关系）。 把所有元件拖到白色矩形框内，用 move / rotate 等命令去调整元件的位置和摆放。这时最好把 Grid 设置中的网格改小一些，不然难对齐。 看上去所有元件已经各就各位。下面要开始拉线路轨迹了。这时可以再使用一下 “Ratsnest” 命令，清除掉冗余的连接线。 试着用了一下 Autorouter 自动连线功能，但是效果并不好，有些线没连上，走线也比较混乱： 5. 手动连线自动连线的美梦破裂，只好自己动手。选中一个引脚，视图中会高亮出要跟这个引脚连接的所有引脚，拉出线路按照横平竖直拐角45°的规则，把它们都连起来。每连接好两个脚，细黄线就会消失，说明连对了。到最后没有黄色细线剩下，就说明全部连完鸟。连线时有个小技巧：右键可以快速切换连线的类型（直线/向下45°角/向上45°角） 连线完成之后，可以在图层管理中，隐藏掉除了“top”以外的所有图层，就能看到颜值提升的成品了： Downlong my eagle files 6. 导出导出电路板 traces 图层时，只选择显示“top”层就够了。这里需要勾选上“Monochrome”单色选项，方便导出成黑白图像，给到 fab module 做识别。 然后，隐藏除了 “Dimension” 之外的其他图层，导出电路板边框： 7. 切割又到了 milling 时间。把刚才导出的 png 文件传到 fab modules 里。png 用的 1500 dpi ，效果看起来还不错： 折腾了好几次贴板、换头、校准、调零，开切： 新换的 1/64 刀头果然比较给力。除了名字那里有点毁，切好的板子一副良民模样： 8. 组装终于到了最后一步，组装元件。 从一大堆元件包中，一个一个翻出需要用到的元件，简直不能更崩溃 —— 丫们一个比一个小，恨不得五指全变镊子才抓得住。居然花了差不多20分钟才凑齐所有元件。为了保险起见，先在白纸上把大家摆好，然后用笔画出连线。一会照着连就是了。 焊元件过程还是相当愉快的，虽然还是掌握不好焊第一个引脚时的技巧，手一抖就歪掉…… 但已经比第一次熟练多了。 全部焊完以后才发现……有放大镜，我为什么没有看到………… 更多资料 JeremyBlum’s eagle tutorials EAGLE官方教程视频 课程资源 Fab Academy 2016 课表 Week6 课程视频 Week6 课程 Slides 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第六周：电路设计[FabNotes012]]]></title>
    <url>%2Ffabnotes012.html</url>
    <content type="text"><![CDATA[电子元件 resistor(电阻): I=V/R capacitor(电容): C = Q/V, I = C dV/dt unpolarized 无极，大多在1微法拉以下 polarized 有极，正极必须接高电位端，负极必须接低电位端 crystal(时钟信号), resonator(晶体谐振器) inductor(电感): V = L dI/dt, 对交流信号进行隔离、滤波或与电容器、电阻器等组成谐振电路 diode(二极管): 电流从 anode(正极) 流向 cathode(负极)，LED（发光二极管） transistor(晶体管) bipolar(双极的): collector(集电极), emitter(发射器), base current gain(基极电流增益) mosfet(金属氧化物半导体场效应晶体管): regulator(调节器) op-amp(运算放大器) microcontroller(微控制器) AVR sensors(传感器) actuators(驱动器) 电路基尔霍夫第一定律(基尔霍夫电流定律):在任何一个节点（结）电路，流入该节点的总和电流等于流出该节点的电流的总和，或：在点网络在导体会议的电流的代数和为零。 power: P = I2 , R = I V i1 + i4 =i2-i3 基尔霍夫第二一定律(基尔霍夫电压定律):沿着闭合回路所有元件两端的电势差（电压）的代数和等于零。或者，换句话说，沿着闭合回路的所有电动势的代数和等于所有电压降的代数和。 设计电路图 schematic entry (电路图输入) component placement (放置元件) (auto)routing (布线) simulation （模拟） fabrication (制造) 工具： 12345678123D Circuits, Virtual Breadboard, FritzingEagle DesignSpark, MultiSIM, BLUEKiCad(*), gEDAAltium, Circuit Maker, PCBWorks(*)OrCAD, Cadence, Synopsys, Mentor, Tanner, MagicGnucap, Qucs, Oregano, Multisim (simulation tools)Verilog VHDL (programming) Fab Modules tutorial 更多资料 The Physics of Information Technology. The Art of Electronics 基尔霍夫定律 基尔霍夫定律youtube 课程资源 Fab Academy 2016 课表 Week6 课程视频 Week6 课程 Slides 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业5：3D 扫描和打印 [FabNotes011]]]></title>
    <url>%2Ffabnotes011.html</url>
    <content type="text"><![CDATA[本周作业： 设计和打印小型的 3D 物体 3D 扫描一个物体 设计和打印 3D 物体继续尝试用 Antimony 画 3D 傻白： 时间压力下，认怂画了个简单得面目全非的版本: 导出 .stl 文件： 实验室的 3D 打印机都用 gcode 格式。于是打印之前需要用 cura 软件把 .stl 转成 .gcode ： 这台打印机是实验室自己组装的，有点酷: 用半小时打印了个测试版: 然后试了一下 Yang² 同学的这台: 用时 1 小时: 3D 扫描第二个作业，3D 扫描一个物体。 实验室里用的 3D 扫描仪是这款: 首先得 下载和安装配套软件. 扫描时需要保持一定距离: 经验是，物体形状越规则越好，镜头移动速度尽量匀速，而且环境光线尽可能单一无变化。否则，扫描过程中非常容易“失踪”: 最后，在小伙伴的帮助下，扫了本大叔的半身像: 课程资源 Fab Academy 2016 课表 Week5 课程视频 Week5 课程 Slides 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第五周：3D 扫描和打印 [FabNotes010]]]></title>
    <url>%2Ffabnotes010.html</url>
    <content type="text"><![CDATA[一. 3D 打印这个技术其实一点也不新鲜啦，Chuck Hull 在上世纪 80 年代发明了 3D 打印。 3D 打印的局限 材料: ABS(丙烯腈—丁二烯—苯乙烯,ABS塑料), HIPS, acrylic(亚克力), PLA(easier to print) 分辨率: 需要留意最小厚度、边缘厚度和清晰度，形状空隙和偏差值。 耗时: 以小时算 成本: 取决于机器和材料。 这个网站整理了 3D 打印耗材。 打印技术 stereolithography(立体平版印刷)：SLA，Direct Metal Printing (DMP) selective laser sintering(SLS) fused-deposition molding(FDM 熔融沉积成型), extrusion(挤出/喷出), contour crafting ink-jet binder(喷墨粘结剂) ProJet, PolyJet. 可实现高分辨率彩色打印。 cut sheets CLIP, TED talk about this two photon(光子) 打印机MAKE 杂志每年会做一个 3D 打印机评选。 文件格式 STL 是主流，虽然是个笨重的格式，而且没有包含单位信息，需要在打印机另外设置 OBJ, 3ds by 3D MAX VRML, X3D 不要用 DXF … 软件12345678910111213123DSketchUpFusion 360SolidWorksRhino GrasshopperBlenderFreeCADOpenSCADAntimonyVTKMeshLab netfabb meshmixerGeomagicReplicatorG Skeinforge Slic3r Cura 二. 3D 扫描最常用的三类 3D 扫描技术 ： 位移(Displacement): 位移设备使用单点激光束投射来测量高度、厚度、或对象的位置。 剖面(Profile): 线路剖面设备使用投影激光束，创建物体轮廓的剖面。在激光下移动物体，生成的多个剖面可以组合成完整的 3D 形状。 快照(Snapshot): 快照设备使用结构光（非激光）和立体视觉生成完整的三维数据。 更多资料 Stratasys’s course Introduction to 3D Printing: From Design to Fabrication. Additively is the 3D printing platform for professionals A Simple Guide To Understanding 3D Scanning Technologies A guide to 3D scanner technology 课程资源 Fab Academy 2016 课表 Week5 课程视频 Week5 课程 Slides 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业4-制作电路板 [FabNotes009]]]></title>
    <url>%2Ffabnotes009.html</url>
    <content type="text"><![CDATA[第四周作业是： Make an in-circuit programmer 因为还没有学电路设计和元器件，本周只是按照已经设计好的一个下载器直接制作。我用的是 Andy’s FabISP 设计。 开工前，作为初学者需要仔细看看这个具体教程和视频教程。 刻印电路板实验室的铣床据说很高级，是全部机器里第二贵的 Roland SRM20 找出两个规格的立铣刀：1/64 bit end mill 用来刻表面，1/32 bit end mill 用来切边缘。 然后材料是 FR1 铜板。 1. 固定用双面胶把 FR1 板贴在衬底板上面。 2. 安装立铣刀用两只手指夹住刀头（先用1/64的），放进刀孔里，然后用六角螺丝顺时针拧紧。 3. 校零上周小伙伴们折腾了一天 Fabmodule 也没有调教成功，于是直接在 Windows 下面用机器自带的软件 VPanel for SRM20。 先移动 X/Y 坐标到合适的位置。然后慢慢移动 Z 轴到将近板子表面的地方，然后打开机器盖子，用六角螺丝松开刀头，让刀头自然接触到板子上，再上紧螺丝。这时需要点右侧“Set Origin Point” X/Y 和 Z 的按钮，记录下原点位置，以便换刀头后可以恢复位置。 然后点“CUT”按钮，选择要刻的文件。 4. 开磨选好文件后点“OUTPUT”，机器就开始工作了。 刻好电路轨迹后，打开机器，松开刀头取出放回盒子里，然后换上 1/32 的刀头。移动到刚才已经记录好的原点位置。然后点“CUT”按钮选择外框的文件，发送到 SRM20。 如果一切顺利，切好后的电路板长这样： 5. 清理打磨一下电路板表面和边缘的毛刺，然后用布或者水清洗一下，板子颜值瞬间提升： 趟过的坑最开始刻印时，遇到了诡异的现象，好几个板子都被刻成的阴阳板：一半正常，一半没刻出来。 百思不得其解。好在塔妹在旁边提醒，是不是刀头松了呀。一拍大腿才醒悟过来，刚才还有一次刻完发现刀头直接躺在板子上了，我怎么就没反应过来呢！估计是一直记着教授上课时说，刀头不要拧太紧，刀头不要拧太紧…… 于是义愤填膺地死死拧好刀头，就再也没有出现“阴阳板”了。 焊接元件本周最大挑战是 —— 焊接! 感谢小伙伴们已经准备好需要的元器件，还贴心地画出示意图： 不过看到元件们一个个都长得太没有存在感，掉在地上用放大镜也不一定找得到，还是倒吸一口凉气 —— 这些玩意儿能焊么 😓 挑了个头最大的 ATTINY44 下手。 第一个零件花了快10分钟： 实验了几次，慢慢摸出一些门道： 先用镊子把丫放好 然后放下镊子，左手扯焊锡线，右手拿焊枪 用焊枪头压着靠边的一个引脚 把焊锡线末端放到焊枪头上 瞪大眼睛，看到焊锡熔成液体状，拿开焊锡线，然后轻而快速地拿开焊枪 如果凝固的接头很丑，可以再用焊枪头放过去融开，补一点焊锡，先快速拿开枪头，然后再迅速靠近，用尖头刮一刮再拿开 一直用不好的是吸锡线，又细又厚，不太好吸。 继续按照从大到小逆时针方向焊接其他元件： 眼花、手抖、大脑缺氧后，得到最终成果： 课程资源 Fab Academy 2016 课表 Week4 课程视频 Week4 课程 Slides 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第四周：制作电路板 [FabNotes008]]]></title>
    <url>%2Ffabnotes008.html</url>
    <content type="text"><![CDATA[这周学习 PCB(Printed Circuit Board 印刷电路板) 制作。 制作方法PCB 制作方法可分为消除和加成两类： 消除法（Subtractive）：利用化学品或机械将空白的电路板上不需要的地方除去 丝网印刷：把设计好的电路图制成丝网遮罩，不需要的部分覆盖蜡或者不透水物料，然后把丝网遮罩放到空白线路板上面，再在丝网上油上不会被腐蚀的保护剂，把线路板放到腐蚀液中蚀刻（etching）。 感光板：把设计好的电路图制在透光的胶片遮罩上，把需要的部分印成不透明的颜色，再在空白线路板上涂上感光颜料，将预备好的胶片遮罩放在电路板上照射强光数分钟，除去遮罩后用显影剂把电路板上的图案显示出来，然后腐蚀。 刻印：利用铣床或激光雕刻机直接把空白线路上不需要的部分除去。 加成法（Additive）：普遍做法是在一块预先镀上薄铜的基板上，覆盖光阻剂（D/F)，经紫外光曝光再显影，把需要的地方露出，然后利用电镀把线路板上正式线路铜厚增厚到所需要的规格,再镀上一层抗蚀刻阻剂－金属薄锡，最后除去光阻剂，再把光阻剂下的铜箔层蚀刻掉。 在实验室我们都用机器刻印的方式，虽然不适合量产，但是用来做快速原型很方便，也更环保一些。 用来刻印的机器是 milling machine (铣床)， 1/64 bit endmill(立铣刀)用来刻电路轨迹，1/32 bit 立铣刀用来切出整块板的外缘。 材料常见的基材及主要成分有： FR-1 ──酚醛棉纸，这基材通称电木板（比FR-2较高经济性） FR-2 ──酚醛棉纸， FR-3 ──棉纸（Cotton paper）、环氧树脂 FR-4 ──玻璃布（Woven glass）、环氧树脂 FR-5 ──玻璃布、环氧树脂 FR-6 ──毛面玻璃、聚酯 G-10 ──玻璃布、环氧树脂 CEM-1 ──棉纸、环氧树脂（阻燃） CEM-2 ──棉纸、环氧树脂（非阻燃） CEM-3 ──玻璃布、环氧树脂 CEM-4 ──玻璃布、环氧树脂 CEM-5 ──玻璃布、多元酯 AIN ──氮化铝 SIC ──碳化硅 Kapton / #1 epoxy film(环氧胶膜) / #1126 copper tape(铜箔胶带) 可用于制作柔性电路 (用刻字机). 我们选 FR-1 用于机器刻印。 刻印步骤 fixturing 装夹，紧固（用双面胶） underlay (衬底) orientation zeroing (针头刚好接触板面) set-screws (固定螺丝) lifetime deburring (去毛刺) cleaning 具体教程, 视频教程 注意: 刻印线路之间要留出至少 5 mils 组装把元器件焊到电路上，接头需要做到光亮平滑。 课程资源 Fab Academy 2016 课表 Week4 课程视频 Week4 课程 Slides 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业3：激光切割 [FabNotes007]]]></title>
    <url>%2Ffabnotes007.html</url>
    <content type="text"><![CDATA[第三周的作业： 设计并制作一套参数化「乐高」组件 (a parametric press-fit construction kit) Press-fit 意思是可以重复组装和拆卸的接头(类似乐高)。这个作业的目的，是让我们理解怎样通过设计制造一套组件，来生成很多不同的东西。 要做乐高嘛，自然就想到七巧板了。于是用 Antimony 来画图。 熟悉 AntimonyAntimony 是个强大的 “node-based” 参数化 CAD 工具。它把每个形状当做具有多个可调参数的对象，由外部输入参数控制形状生成，也可以输出计算结果作为另一个对象的输入。如果你用过 OSX 下的动画原型工具 Quartz composer 或者 Origami，很快就可以上手 Antimony 啦。 安装好程序之后，找到作者 Matt Keeter 录制的 基本教程。跟着教程练习做了个螺丝刀把手： Antimony 生成 .stl文件很方便。Matt Keeter 还写了一个 stl 文件预览工具：fstl，预览效果如丝般顺滑啊强烈推荐！ 小吐槽：用 MacBook 的 trackpad，无法自由旋转 antimony 里的预览视图，必需接个鼠标（按住右键拖动旋转）。 设计为了做这周的作业才知道七巧板英文名叫 Tangram。一开始有点不知道从何着手，先去网上搜一搜: 发现自己连小学的几何公式都快忘了。。。 在 antimony 新建文件，创建 「2D」 矩形。 我们要在七巧板的每一个组件都切出 press-fit 的接口，以便可以互相拼接。这时候就需要用到 「Difference」命令，从完整的形状减去预留的接口。 看起来是酱紫的： 不同位置和尺寸的接口，需要通过「Translate」和「Rotate」命令来指定。 我们将接口的尺寸设为一个输出对象，就可以保证多个接口的尺寸完全一样。不过随着对象越来越多，在 antimony 里面拖线也是挺痛苦的 - - 这里可以下载我的 Tangram antimony 源文件 ，以及用于切割的 pdf 文件。 切割周末从广州滚到深圳，第一次来到 szoil 实验室。怀着鸡冻的心情，先练习用激光切割机画了个群主雕: Fabmodules 确实很好用。首先从电脑中选择设计文件，读取之后选择机器类型，以及要切割的材料。下一步是设置关键的参数，有几个烦人的参数需要在开切前测试一下。 我先试了 speed 4% ，power 90%，仍然没有切穿实验室买的瓦楞纸板。 于是获得经验值：切割又厚又硬的材料（比如厚纸板）时，机器的 「power」需要接近 100%，「speed」需要低于 2%。 另外一个更烦人的参数是 x,y 坐标位置，因为它会随着 dpi 变化。数学渣如我只好每次切之前先用废纸板来测试位置。 切了几次，终于像模像样了： 不过还是没有完全切穿，掰起来挺费力： Tangram press-fit kit 切完纸板，再试试用亚克力做个 3D 小黄人~ 部件图之前已经画好，继续按部就班： 上传 svg 文件到 fabmodules 选择「cut acrylic」, 设置 units/in 为 50, power 90, speed 0.8, 并且测试坐标位置 用「calculate」命令生成 cutting path 在机器内放好亚克力板, 然后发送已经生成的 path 到切割机 按下切割机上的 「start/stop」按钮，开始切割 整个过程用时 18 分钟。 问题：切割机还是没有成功切穿一些小的部件，或者把环形边缘直接烧坏了，囧。 不过时间不多，把部件一块块敲出来: 最后一步，就是用胶水把每一片贴起来…… Multi-layer minion 就弄好了： 感觉简直可以用来哄妹子！ 课程资源 Fab Academy 2016 课表 Week3 课程视频 Week3 课程 Slides 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第三周：机器切割 [FabNotes006]]]></title>
    <url>%2Ffabnotes006.html</url>
    <content type="text"><![CDATA[CAD123D Make 一类的工具都可以把 3D 物体分解成 2D 部件。之前介绍过的 Antimony 很适合用来设计需要参数化控制的部件。 CAMFabAcademy 之前几年被各种不同的机器搞得头昏脑胀，于是干脆写了一个兼容几乎所有设备的 fab modules。不论你输入哪种格式的文件，它都可以输出命令到不同的机器。 Vinyl cuttervinylcutter(电脑刻字机) 应该是用途最广的切割工具了，它可以切标识、手工书、网版印刷、电线、多层电路、天线。 材料Vinyl(乙烯基)： Masking tape(纸胶带): Transfer adhesive(转移胶膜): Epoxy film(环氧树脂膜，可用于制作柔性电路): 铜 步骤设计要切割的图案， 最好存成 png/svg 格式。然后上传到 fab modules，选择切割机，如下图的 「Roland vinyl (.camm)」， 然后选择切割的材质，如下图的「cut vinyl」。然后其他的设置选项就会出现在图片预览的右侧（cut depth 的值需要注意一下）。 Laser cutter激光切割机可以做标记、切割、雕刻。 这周的作业，是设计、切割出类似下图一样的[纸板乐高积木]: 这种组块化、需要用一个参数控制多个对象的设计，用Antimony再适合不过了： 注意: 用激光切割机切割瓦楞纸，容易因为温度过高而起火……需要做好排气排烟措施，同时机器操作时要有人值守。 课程资源 Fab Academy 2016 课表 Week3 课程视频 Week3 课程 Slides 我的英文笔记 Gitbook 公众号文章列表]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业2：用CAD画特雷门琴的模型 [FabNotes005]]]></title>
    <url>%2Ffabnotes005.html</url>
    <content type="text"><![CDATA[这周的作业是 用 CAD 工具给 final project 建模 我的 final project 打算做一个特雷门琴（具体是什么鬼，请关注后续笔记），它有一个巨大的优势 —— 造型简单！ 在网上找到 Moog 家最经典的一款，看起来很方整，适合我这个 3D 小白 XD。 然后开始在 Fusion 360 里捣鼓起来。 热身因为对这个软件的经验完全为0，就先去官网过了一遍基础教程：Get started with Fusion 360 - 9 tutorials in under 50 minutes Fusion 360 的功能都按模块组织，很清晰： 画三维形状的基本步骤是： 先在「sketch」模块里面画平面图 (btw 右下角对话框里的直角、平行等工具很实用) 然后用 「creat」 里面的 「extrude」 拉出三维形状。 开工参考这张特雷门组装部件图，按照4个部分画出各个部件。 底座 在 Y 面画出「凹」字形，向 X 轴拉出形状。 盖子 在 X 面画出倒「凹」字形，向 Y 轴拉出形状 画出天线 (带曲弧的控制音量，直的控制音高) 曲弧那里费了好大劲，最后用了暴力的办法：在 sketch 里面画圆形切直线（加 point 然后 trim ），拉出 3D 后再用「modify」里面的「Fillet」掉每个面的棱角…… 做垂直天线的接口和螺母 在底座两侧打洞，然后组装 透视图（螺丝和螺母的尺寸需要事先计算好） (Fusion 的组装动画好浮夸啊……) 盖上盖子…… 3D 小白的简易版特雷门模型就画好了（左边天线还装反了，扶额……） 课程资源 Fab Academy 2016 课表 Week2 课程视频 Week2 课程 Slides 我的英文笔记 Gitbook]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
        <tag>CAD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第二周：CAD [FabNotes004]]]></title>
    <url>%2Ffabnotes004.html</url>
    <content type="text"><![CDATA[上课时，被教授给出的 CAD tools list 弄得老眼昏花…… 123456789101112131415161718192021SketchUp123DTinkercadShapesmithFloodMatterMachineBlender SverchokZBrushRhino Grasshopper Kangaroo FreeCADAutoCAD Inventor Fusion 360 educationSolidWorks DraftSight Visualization XdesignOnshapeMaya Alias 3ds MaxCinema 4DCatiaCreoNXAC3DOpenSCADKokompe Kokopelli Antimony 光 3D 就有那么多，还没算上 2D 和 2.5D 的。更要命的是，学霸教授说：要求你们把这些全部都试一遍，再找出适合自己的…… 就差没当场口吐白沫…… 如此繁多的 3D 软件，大概可以分为两类：一类是偏艺术/雕塑的“狂拽炫酷吊炸天的自由成型派”，一类是偏工程的“高冷面瘫小叮当的精密机械派”。 The parametric approach is typically used by engineers and architects because the file contains more specific dimensions, relationships, and can include a design history. The explicit approach is typically used by artists and industrial designers because it can be more flexible. Explicit modeling allows changes to be made on the fly and small changes are not necessarily related to any other defined point of the geometry. 这么多工具到底要怎么选？除了以上的分类，又参考了几篇文章： Comparison of computer-aided design editors Comparison of 3D computer graphics software FINDING THE RIGHT 3D MODELING SOFTWARE FOR YOU 然后列出了我的 list （有选择的感觉94好啊） 2D 的就不用说了，工作原因，至少是半个熟练工： 2D (栅格): Photoshop 2D (矢量): Sketch 3D 的之前只用过 SketchUp，选起来确实费神： 3D (parametric, 结构): Fusion 360 AutoDesk 很良心地给 Fablab 学生提供免费1年的版本，当然不能错过啦。Fusion 360 在工程设计上还是挺强大的，同时不失自由造型的灵活性，3D 打印、CNC 也不在话下。于是第一个收入囊中。 3D (programmatic): Antimony Antimony 是 Fablab 的大牛自己开发的工具。如果接触过 Quartz composer 之类的 node-based visual programming的同学一定会觉得 Antimony 很好上手。 拖面条线，控制输入参数和输出结果，突然觉得程序猿的世界友好了一些 XD 3D (parametric, 综合): Solidworks Solidworks 似乎没什么好说的了，所有人都会提到（也是够贵的）。 3D (explicit): Blender Blender 在影视、游戏、视觉特效、互动3D 应用等领域能力强悍。不过学习曲线也陡峭一些。教授一直说 Blender 好强大的。据说修改 STL 文件很好用。 (STL is a file format native to the stereolithography CAD software created by 3D Systems) 3D (parametric, 外型): Rhino 再留一个犀牛备用。据说转换格式很好用。 课程资源 Fab Academy 2016 课表 Week2 课程视频 Week2 课程 Slides 我的英文笔记 Gitbook]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
        <tag>CAD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[作业1：用 Git 上传自己的网站[FabNotes003]]]></title>
    <url>%2Ffabnotes003.html</url>
    <content type="text"><![CDATA[FabAcademy 第一周的作业是： 用 Git 上传包含自我介绍、项目初步规划的网站到 Gitlab 站点上 真是第一周就挖两个大坑呀： 学 Git 做网站 好在之前都折腾过不止一次，已经摸出了大概的门道： 安装 Git 学习使用 Git 注册 gitlab 帐号 搭建网站 （Hexo 大法） 写自我介绍和项目规划 上传网站到 gitlab 注：以下操作均在 Mac 下完成 1. 安装 Git翻看 Git 官方的安装说明 : There are several ways to install Git on a Mac. The easiest is probably to install the Xcode Command Line Tools. On Mavericks (10.9) or above you can do this simply by trying to run git from the Terminal the very first time. If you don’t have it installed already, it will prompt you to install it. Mac 下使用 Git 奏是方便！ 2. 学习使用 Git曾经被 Git 折腾得晕头转向，写过学习笔记「多用 Git 少交税」，正好用上。 3. 注册 gitlab 帐号FabAcademy 去年还要求用 Mercurial，谢天谢地，今年终于向 git 屈服。他们选择提供开源 git 部署服务的 Gitlab，用它来搭建 FabAcademy 自己的 git repository。 注册过程很简单，到 fablabs.io 网站注册。然后用注册号的帐号登录 git.fabacademy.org。等到助教把学员添加到项目之后，就可以在“Your Projects” 里看到啦。 下一步是按照说明，在“Profile Settings”里添加 SSH key，让服务端能识别出该接受哪些数据传输。 添加密钥成功后，一切准备就绪。在本地找好合适的目录，用 git clone 命令把 project pull 下来。(学号可以到学员列表页面找到) 4. 搭建网站 （Hexo 大法）搭建个人网站，是为了记录每周作业的过程，以及期末项目的进度。所以适合用 Wordpress 一类的工具来快速生成。教授推荐了 Jekyll ，但我依然毫不犹豫选择用 Hexo ，胜在够快够简单，模板质量也不错。 当然，最直接的原因是我刚刚折腾过，把自己的博客从 Wordpress+自己购买的服务器，迁移到 Hexo 本地生成静态网页+ github 托管。折腾记录请看 博客搬家记：从 Wordpress 到 Hexo+Github。 过程中有一点需要特别注意。以为每个学员的网站是放在 FabAcademy 网站下面的子目录，所以需要在 Hexo 站点配置文件 “_config.yml” 设置父目录的 url ： 1234# URLurl: http://archive.fabacademy.org/root: /archives/2016/fablabshenzhen/students/yourid 5. 写自我介绍和项目规划一开始就要想 final project 也是够头疼的。我打算做一款特雷门琴出来，求熟悉的朋友支招~ 6. 上传网站到 gitlab网站搭建完毕，内容也准备好之后，就可以上传啦。 在终端中进入本地站点目录，使用 hexo generate &amp; hexo deploy 两个命令生成最新的博客静态文件。最理想的效果应该是通过 hexo 直接 deploy 到目标的服务器地址。但是因为需要上传到子目录，但是一直没有找到 hexo 直接 deploy 到子目录的办法，只好用本办法凑合着用：拷贝本地 hexo 网站中的“public” 文件夹，替换已经 pull 下来的 gitlab 中自己文件夹中的内容，然后再用 git push 到 gitlab 上去： 123git addgit commit -m &quot;your comment&quot;git push 上传后的效果可以到我的课程网站 查看。 课程资源 Fab Academy 2016 课表 Week1 课程视频 Week1 课程 Slides 我的英文笔记 Gitbook]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一周：概述和项目管理[FabNotes002]]]></title>
    <url>%2Ffabnotes002.html</url>
    <content type="text"><![CDATA[课程概述很多人对FabAcademy 课程的第一反应可能是 3D 打印。3D 打印早在上世纪80年代就出现了，它只是整个课程的一小部分。 而数控机器的出现，还要再早30年。 在 Gershenfeld 教授看来，”数字化制造(digital fabriction)” 有两层含义 直接含义：用电脑控制机器去制造东西；换句话说，我给你数据，然后你根据数据来做出东西 深层含义：数字化整个制造过程，数字化材料本身；换句话说，我给你数据，让数据自己变成东西 他也据此给出了数字化制造的路线图： 1.0: computers control machines 2.0: use machines to make machines 3.0: put codes in materials 4.0: put programs in materials Fablab 正处于第二个阶段，也就是说，目标是123&#123;制造 可以制造机器的 机器&#125; 工业制造的整个过程相当复杂，我们已经习惯于用不同的工具去处理不同的流程：CAD，扫描，切割，打印，开模…… 学霸教授正在捣鼓一个一站式工具 ，将所有工具整合起来。 教授介绍了 Fablab 发家哦不发展史，它的模式也是相当有生命力/有趣呢，感兴趣的朋友可以研究一下。 项目管理历时5个月的 FabAcademy 课程强度不小，所以 Gershenfeld 教授在第一堂课除了承诺大家“你们每一周一定都会忙得四脚朝天”，还安利了项目管理的要点： 按时计划而不是按需计划 如果按照项目需要的时间来计划的话，每周时间都会不够用。建议按照每周投入的时间，提前计划要做什么事情，达到什么效果。 并行开发而不是串行开发 不要把项目拆分成必需先完成 A 才能开始 B 的模式，尽量让子项目并行，最终组合起来。 螺旋式开发而不是瀑布式开发 从MVP（Minimum Viable Product）着手。在项目最开始，就输出可以运行的版本，哪怕是“Hello world”。然后再逐渐叠加更多的东西，但应该保证每次都是可以正常工作的。 bottom-up vs top-down debugging 要么让整个东西跑通，然后一部分一部分移除，看看问题出在哪里；要么从最小可运行单元开始，一点点加东西，找出问题。 层级化，组块化 从“最小工作单元”开始搭建更大的系统。分别做好系统组件，再组装起来。 课程资源Fab Academy 2016 课表 Week1 课程视频 Week1 课程 Slides 我的英文笔记 Gitbook 我的作业网站]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FabAcademy 可以学什么？[FabNotes001]]]></title>
    <url>%2Ffabnotes001.html</url>
    <content type="text"><![CDATA[Fablab是个什么组织FabAcademy 是 MIT Fablab 开办的一个“虚拟学院”，目标是传播推广数字化、个性化制造理念和技能。 与 MIT 另一个王牌 Medialab 不同，Fablab 的野心在于： 给数字化制造浪潮推波助澜 教人怎么制造出几乎任何东西 创立一种独特的分布式教育模式 “数字制造(digital fabriction)” 大概就是现在很火的“工业4.0”概念吧。 The development of digital fabrication is based on creating codes that don’t just describe things, they are things 所以，Fablab 尝试教授的是： Turn Codes into Things. 至于分布式模式，是指起源于 MIT 的 Fablab 在全球各地快速复制，通过 local Fablab 学习、实操、获得辅导、形成社群。 2016年，全球已经有 600+ 个 Fablab 课程设计每年 FabAcademy 课程历时5个月，每周通过在线教学学习一个新主题，并到线下实验室完成一个小项目： CAD 机器切割 电路设计和电子元件 3D 扫描和打印 数控机器 嵌入式编程 机器设计 输入/输出设备 模具和铸造 复合材料 网络和通讯 界面和应用编程 发明和商业化 学期末会有一个 Final project，运用上所有学到的知识，做出实体的东西来。 课程学习资料都可以在 Fabacademy网站上找到。学员的作业通过 Gitlab 上传。 每周的课程笔记会更新到我的 Gitbook： 也可以查看我的作业网站。]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Fab</tag>
        <tag>Maker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客搬家记：从 Wordpress 到 Hexo+Github]]></title>
    <url>%2Ffrom-wordpress-to-hexo.html</url>
    <content type="text"><![CDATA[拖延了整整两年，今天终于把博客用 Hexo 托管到了 Github 上。(以下记录，仅适用于 Mac 系统) Hexo是啥Hexo 是由 Node.js 驱动的一款快速、简单且功能强大的博客框架。可以快速将 Markdown 格式的文档生成静态页面。是越来越笨重的 Wordpress 和麻烦的空间管理的替代方案。 一. 安装 Hexo首先翻看一遍 Hexo 官方文档 1.环境准备安装 Node.js推荐方法是用nvm安装 Node.js 。 cURL: $ curl https://raw.github.com/creationix/nvm/master/install.sh | sh Wget: $ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh nvm 装好后，重启 terminal，然后安装 Node.js： $ nvm install 4 当然，也可以直接到 Node.js 官网下载最新版本安装。 安装 Git按照Github提示，创建SSH秘钥： $ mkdir ~/.ssh #创建ssh命令 $ cd ~/.ssh $ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; #注意更改Email地址 $ pbcopy &lt; ~/.ssh/id_rsa.pub 此时，pdcopy命令已经将id_rsa.pub内容复制到剪切板。 登录 github：https://github.com/settings/ssh 点击Add an SSH Key，Title 部分填写一个所用电脑的名称，然后在Key部分填写之前通过pdcopy命令复制的内容。生成 key https://help.github.com/articles/generating-ssh-keys/ 12$ git config --global user.name &quot;yourusername$ git config --global user.email &quot;youremail&quot; 2.安装 Hexo$ npm install -g hexo-cli 好了，这个时候如果报错，记得加 sudo $ sudo npm install -g hexo-cli 二. 配置 Hexo进入想要存放博客的文件夹，初始化设置： 12$ hexo init$ npm install 初始化成功后，文件夹里会有这些东西： 12345678.├── _config.yml #配置文件├── package.json #应用程序数据├── scaffolds├── source #网站内容| ├── _drafts #草稿| └── _posts #文章└── themes #主题 配置文件的详细说明请查看官方文档。 三. 从 Wordpress 迁移首先安装 hexo-migrator-wordpress 插件： $ npm install hexo-migrator-wordpress --save 登录 Wordpress 后台，在“工具”-“导出”中导出所有记录。 $ hexo migrate wordpress &lt;source&gt; source 是 Wordpress 导出文件的存放目录。 Duang！妥妥地导入到 _posts 目录中了！ 四. 本地访问博客生成静态文件：$ hexo generate 启动本地服务：$ hexo server 这时提示Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 然后在浏览器打开 http://0.0.0.0:4000/，就可以看到迁移好的博客啦！ 五. 挑选主题可参考 有那些好看的 Hexo 主题？ 下载主题：git clone https://github.com/xxxx themes/xxx 启用主题：克隆/下载 完成后，打开 站点配置文件 “_config.yml”，找到 theme 字段，并将其值更改为下载的主题名字。 剩下的就根据主题使用文档，按照自己的喜好修改了。 我选的 NEXT主题 胜在 说明文档 超详细的~ 挑选好主题后还做了以下修改： 增加了侧栏头像 增加了社交网站链接 增加了 RSS 链接 重新整理了分类 更新了建站时间 增加了 DISUQS 评论模块 增加了标签页页面 增加了 JiaThis 分享 增加了 PDF 文档展示 增加了公益404页面 待解决问题： 增加 Google 分析 站内搜索前端如何展现 六. 安装插件站内搜索hexo-generator-search插件为 Hexo3 提供搜索功能。 安装： $ npm install hexo-generator-search --save Feedhexo-generator-feed 可以生成Atom 1.0 或 RSS 2.0 feed。 安装： $ npm install hexo-generator-feed --save Sitemap说明 安装： $ npm install hexo-generator-seo-friendly-sitemap --save 嵌入 PDFhexo-pdf 安装： $ npm install --save hexo-pdf 添加： 七. 配置 Github 并上传新建跟用户名同名的 repository，以“.github.io” 为后缀 创建成功后，点击界面右侧的Settings，打开页面后找到GitHub Pages，点击Launch automatic page generator，生成 page。 然后在网站配置文件 _config.yml文件中，找到Deployment，修改配置： 1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master 如果使用 git 方式部署，执行 npm install hexo-deployer-git --save命令来安装插件。 但是这时出现了错误提示 123456789npm ERR! Darwin 15.2.0npm ERR! argv &quot;/usr/local/bin/node&quot; &quot;/usr/local/bin/npm&quot; &quot;install&quot; &quot;hexo-deployer-git&quot; &quot;--save&quot;npm ERR! node v4.2.4npm ERR! npm v2.14.12npm ERR! shasum check failed for /var/folders/n4/m1w5r2rj3y77vpn_s6g87s180000gn/T/npm-8320-c250e6be/registry.npmjs.org/moment/-/moment-2.11.0.tgznpm ERR! Expected: 584f5fb87c1f637f12937edce127dde2d206d705npm ERR! Actual: f3f4cb5f46c790b29b9b7bdce8435fe70ad58dbdnpm ERR! From: https://registry.npmjs.org/moment/-/moment-2.11.0.tgz 尝试数次，最终先用 npm install hexo-deployer-git 安装，再执行npm install hexo-deployer-git --save 安装成功后，在当前目录进行 deploy 操作 hexo d 上传成功后，访问 yourname.github.io ，测试是否可以正常访问。 八. 绑定域名在 Github 里生成 CNAME 文件为了绑定域名，首先在 Hexo 的 “source” 文件夹中新建一个CNAME文件（没有后缀），文件内容为你要设置的域名。目的是将你的域名（如 uegeek.com ）指向 Github 服务器。 Deploy 到 Github上去后大概需要几分钟生效。 在 DNS 中添加解析几年前坑爹地在 Godaddy 买的域名，难用得要死，还时不时被墙。于是把 DNS 换成 国内的服务 Dnspod。参考Godaddy注册商域名修改DNS地址。请擦亮眼看清楚 DNS Setting 在哪里设置…… (不知道为什么默认跳转的是 DNS ZONE FILE 页面，害我白等了两天……) 然后到 DNSPod 新建域名，并添加 CNAME 记录指向 kidult00.github.io 。 当打开 uegeek.com 看到改头换面的博客后，持续一周的博客搬家活动终于告一段落，内心默默地原谅自己拖延了两年 T.T 九. 常用命令 命令 执行 hexo new [layout] &lt;title&gt; 新建 hexo publish [layout] &lt;filename&gt; 发布草稿 hexo g 生成静态文件 hexo d 上传更新 hexo publish [layout] &lt;filename&gt; 清除缓存文件(db.json) 和 已生成的文件 (public). hexo s 启动本地服务器]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Happy New Year, Happy New Mac]]></title>
    <url>%2Fhappynewyearhappynewmac.html</url>
    <content type="text"><![CDATA[到手一台新的 Mac，除了兴奋，需要做些什么才能最快用得顺手？去年00有三次新开 mac 的经历，所以列出了一个清单，感兴趣的朋友可以参考。 0.开箱拍照啥的就不说了，记得拍一张序列号备用。如果是 iMac，以后有搬家装箱可能的话，最好把包装结构拍一张…… 1.基本设置 开机后打开设置，到「Trackpad」里面设置习惯的触控板手势 更新系统至最新版本 有必要的话，在 App Store 里下载最新版本的 Xcode 2.Homebrew 大法在新电脑上一个一个下载各软件最新版本很麻烦吧？Homebrew 帮你搞定！用 safari 打开 http://brew.sh 按说明在 terminal 里安装 Homebrew 1ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 安装 brew-cask： brew tap phinze/homebrew-cask 或者brew install brew-cask 以后更新只需要：brew update &amp;&amp; brew upgrade 3.VPN、浏览器和输入法 安装你的 VPN 工具（我用的12vpn， 买了两年，用着还不错） 安装好 Homebrew 后，安装命令行工具 brew cask install iterm2 安装浏览器 brew cask install google-chrome（可能需要开 vpn，如果不成功，需要手动下载安装），安装成功后，选择要同步的设置项 下载安装 输入法 4.效率翻倍 安装大管家 Alfred brew cask install alfred，导入 workflows。严重推荐以下 workflow： Douban：直接搜索豆瓣书、影、音，方便得不像话 Youdao-Translate：快捷查词和翻译，学渣和学霸都必备 chrome-bookmarks：chrome 书签搜索并打开，简直救了收藏夹整理无能者一命 Copy-Path：快捷键复制当前文件夹路径，跟命令行绝配，尤其是 Git 重度患者 其余：百度云盘搜索、淘宝搜索、计算器、日历、下载链接分析、自定义搜索、生成短链接和二维码等等，绝对能让 mac 效率提升至少 200% 5.基础应用 安装 Markdown 编辑器 brew cask install mou 安装笔记应用 brew cask install evernote 安装代码编辑器 brew cask install sublime-text 安装文档同步工具，用 Airdrop 把原有文件传送到新电脑上 安装 Git 按照Github提示，创建SSH秘钥： mkdir ~/.ssh #创建ssh命令 cd ~/.ssh ssh-keygen -t rsa -C &quot;your_email@example.com&quot; #注意更改Email地址 pbcopy &lt; ~/.ssh/id_rsa.pub 此时，pdcopy命令已经将id_rsa.pub内容复制到剪切板。 登录 github：https://github.com/settings/ssh 点击Add an SSH Key，Title 部分填写一个所用电脑的名称，然后在Key部分填写之前通过pdcopy命令复制的内容。生成 key https://help.github.com/articles/generating-ssh-keys/ 12git config --global user.name &quot;yourusernamegit config --global user.email &quot;youremail&quot; 安装文献管理工具 Zotero brew cask install zotero，然后设置已经从之前电脑传过来的库 安装视频播放器 brew cask install vlc 安装系统清理应用 CleanMyMac 如果有需要，装个虚拟机吧！ 6.射计师应用 Sketch 和插件管理工具 Sketch Toolbox SketchUp brew cask install sketchup 图片管理应用，比如Inboard 图标库 Icons8 brew cask install icons8 其他就按各自的喜好吧 清单暂时更新到这里。欢迎亲们推荐相见恨晚的应用和奇技淫巧~ Happy New Year &amp; Happy New Macbook! 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[00牌机器人2015版本更新记录]]></title>
    <url>%2Fmy2015update.html</url>
    <content type="text"><![CDATA[又到了写年底总结的时候。 总觉得“总结”这个词有点儿消极——道理都明白，写出来洋洋洒洒，但一年好像又白过了。 为什么我们不能像 APP 一样，写写今年最大的版本迭代都更新了什么？ Description 路痴 喜欢吃咸肉粽和甜豆花的南方人，同时也爱吃羊肉和凉皮~ 交互设计shi 擅长走路、F2F熬鸡汤、碎碎念、搞卫生 What’s NewDec 25, 2015 1. Hack 和 Pull首先刷新的是对这两个动词的认识。 Hack任何事物和体系都可以 hack，也应该 hack。 现有体系和规则，如果站在内部往外看，基本觉得是铜墙铁壁滴水不漏，让人不假思索就全盘接受。但如果你被打晕拖出去，醒来再看，可能瞬间就发现漏洞百出。系统内一些长期被奉为圭臬的规则，搞不好只是一开始时某个随机事件的偶然结果，结果就这么搞 siao 地固化下来。 Hack 心态不是要推翻一切。只是鼓励我们从旁观者的角度，尽快抽取出游戏规则——如果可能、如果需要，最好改变游戏规则，甚至重新制定规则。 哦对了，Hack也是学习任何东西首先应该具备的态度。 Pull作为资深的信息焦虑机器人，robot00 知道自己接收信息的方式相当被动：电视里面放广告就看广告，朋友圈里转文章就看文章，畅销榜放着哪些书就看哪些书，大数据火了看大数据，芈月传火了看芈月传。可是我们生活在一个每18个月全球信息总量就会翻倍的世界。就这么对待越来越稀缺的注意力，真是有点儿戏。 今年尝试从“被 push 模式”升级成“主动 pull 模式”。一方面减少花在支离破碎的信息源（尤其是微信）的时间，另一方面通过感兴趣的主题去找书、找 mooc、看 wiki、看 github、看微博微信豆瓣…… 从今年写读书笔记的经验来看，pull 和 push 两种模式真的差别简直巨大。 今年写了三个“pull”系列：「德意志笔记」、「中欧四国扫盲贴」、「场景化设计」 &nbsp; 每个系列都写得很痛苦：需要先查资料，看书看视频，要么是总结实际做过的项目。多个途径看完资料，然后抽出一个线头来串起要写的内容，再提炼观点，找资料找论据找栗子。这种强度跟随机读完一本书写一篇笔记完全不同。折腾过后，对主题的理解当然比孤立地读一本书来得要深刻。 2. 少拖延，不焦虑这一年终于不再受拖延的困扰。并不是做到了不拖延，而是明白拖延的症结所在： 没有意识到心智资源极端有限 欲望太多，期望太高 把时间花在事前选择判断，而不是产出结果 懂得注意力、心力（will power）都是极端稀缺的资源以后，就明白该怎么对付拖延： 精简欲望，逃出心力黑洞无论是购买欲念，还是兴趣欲念，还是改变世界的欲念，1-2个就差不多了。少了没活力，多了伤身体。诸如做决定、无效的争论、坚持每天做 xxx，都特别耗心力。少做一件，估计能多活几天。选出最重要的几件事去劳心劳力就差不多了。 委派任务，购买服务事情做不完，多半是做了太多可以由别人做的事情。如果调动资源的能力没有增强，事情却越积越多，怎么可能不拖延？想办法把不擅长的任务委派出去，或者更简单一点——购买服务，而不是自己亲手去做。比如雇一个人，买一个好一点 VPN，买一个 Alfred，能节省好多时间精力。 If 纠结/患得患失 Then 开始动手纠结的成因有两个：贪心，反馈不足。这时候如果停下来继续纠结，会进入恶性循环——反馈继续缺失，没法做出合理判断。只能告诉自己，一切都是 tradeoff，选出更重要的一个因素，然后往前推进，在做的过程中根据反馈不断调整。 3. 作品作品作品无论是开智群、YC 创业课、BVM 计划，都在反复强调两个字：作品。 写了一年公众号，做了小小书童，开了学画大作战群，越来越明白作品的分量。 小小书童介绍视频 学画大作战群每日合集: 简书上记录今年共写了 7w 多字，获得 500 个喜欢：平均140个字才换来一个喜欢，正好是微博的长度……(当然，这可能只是说明 robot00 的文章实在不怎么吸引) 从一个简单的想法，到用 Markdown 写出大纲，然后编辑、配图，在难用的公众平台编辑器中来回修改，同步发到简书、博客、豆瓣、KM 等等地方，还要想朋友圈广告词…… 这些事情做下来，才知道想要留下一点东西也是不容易。 作品，逼人进行更多更优质的输入。作品，逼人从无序变得有序。作品，留下连接入口。作品，创造更多可能性。 不要忘记，基因的目标是复制，成功的标准就是数量。模因也一样。如果没有作品，模因根本没有生存机器。 好了，道理够多了，如果超过三个，连自己都记不住。三个年度更新 也不写什么自 high 型 “新年计划” 了。 用作品说话，明年见。 Bonus值得推荐的工具 Alfred：Mac 必备，用好 workflow，效率提升至少 500% Git：版本管理系统，请看「多用 Git 少缴税」 Markdown：聚焦于内容的书写方式 Sketch + Keynote：BP 视频都能用这个做，妥妥的 Workflowy：树形列表工具，可以用做 PKM（个人知识管理） 索引，以及替代 to do list 值得一读再读的书 自私的基因 经验的疆界 最好的告别 人类简史 必然 节日快乐新年快乐 © 002015.12.25@ GZ]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>2015</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[场景化设计系列之四：场景化设计六步法]]></title>
    <url>%2Fscenario-design-4.html</url>
    <content type="text"><![CDATA[终于进入本系列的真正主题：场景。如何在日常消费场景中影响用户行为，是这篇文章尝试探讨的问题。 在真实场景中，虽然需要处理纷繁复杂的要素，但我们还是可以依据一定的思路和做法，各个击破，最终达到目的。以下是 00 总结的“场景化设计六步法”： 1.划分场景什么是场景？ 场景就好比真实故事（的片段）： 什么人，什么时候，在哪里，做什么，结果怎样。 划分场景，是为了最终把大象塞进冰箱 —— 总得知道第一步是先打开冰箱门吧。 来看看 KK 新书「必然」里的一个场景描述： 在我的“办公室”里，我会在额头上戴上一个增强现实面罩。这个面罩就像是一个弯曲的发带，大约有手掌那么宽。它与我的眼睛之间隔开了几英寸，以便保证我全天佩戴时尽可能舒适些。这个功能强大的面罩会在我周围投放虚拟屏幕。大约有12块大小不一的虚拟屏幕，面对大量数据我也可以用双手全力应对。在我一天的工作中，会与虚拟同事进行大量的交流，这个面罩能够提供足够好的分辨率和运行速度。由于我能在一个真实的房间里看到他们，所以我在现实中也完全在场。 场景并不复杂，我们每天都生活在其中。 又比如，外出吃饭是一个场景。仔细想想，如果不对这个看似简单实则复杂的大场景进行拆分，我们无法进行具体的设计。餐饮行业的用户场景包括：就餐决策，到店，排位等位，入座，点菜，用餐，结账…… 其中高峰期的等位就是一个具体的场景。 将大的目标比如“提升翻台率”转换成为用户活动，并进一步拆分为小而具体的场景，是进行场景化设计的第一步。 2. 评估触点我们不是迪士尼，也不是邓布利多，没办法对一个场景内的所有元素都提前设计好。回到目标上来，我们要做的事情是“影响用户行为”，而用户行为往往发生在一些关键节点上。比如餐厅等位，消费者的第一个行为节点，是看到人头攒动时去前台询问。那么前台的服务员和相关的宣传物料就是这个节点上与消费者接触的“触点”（touch point）。 识别出重要的“触点”，就可以针对这些与用户发生直接接触、可能会影响他们行为的“界面”做设计。“触点”的形式有很多，可能是人（比如前台服务员），可能是一张传单，可能是手机界面，可能是 ATM 取款机，也可能是发票上的一行信息……那么如何识别和挑选出最有效的触点呢？ 触点评估象限 通过以下两个维度，可以基本判断出触点是否有价值： A. 是否必经如果一个触点是用户必经的地点/行为节点，它便具有潜力。 比如，进店时，需要推门而入，门把手会是一个必经的“地点”。 比如，超市购物，收银台是每位顾客必经之路，收银员和显示屏是每个人都会接触到的“触点”。 B. 是否沉浸如果用户在一个触点停留时间长，而且需要投入注意力与之互动持续一段时间，这也会是一个重要的触点。如果涉及到整个活动过程中的决策点，比如吃饭这件事，购买决策阶段主要是看菜单点菜，那么菜单就是一个重要的触点。 又比如，ATM。用户在使用 ATM 时，几乎是专心致志的，一般也会持续若干分钟。 再拿出餐厅高峰期等位的例子，虽然用户停留时间长，但是注意力却不集中，所以这是一个有潜力但是也很难做复杂决策指引的触点。 再来比较一下超市的入口，虽然是必经路径，但是因为基本不会投入一丁点注意力(除非等人之类的)，所以是价值不高的触点。 小结：选取高价值的触点，是场景化设计的关键步骤。“必经”和“沉浸”两个维度，可以帮助我们比较快地判断触点的价值。 3.吸引注意 “为什么我要关心这个？” 没有用户会直接说出这句话，但这却是每个人在集中注意、产生行为之前必然会下意识思考的问题。服务做得再好，如果用户完全忽略我们希望传达的信息、根本没有考虑试一试的话，一切都白搭。 怎样设计能吸引注意？ 简要下面这个说明物料，很多设计师会难以接受，甚至觉得“简陋”“丑”。 可是在线下场景中，人们无法电光火石之间吸收大量信息，反而是这种“简单粗暴”的方式，才最容易引起人注意，最容易被吸收、被接受。 引发情感，如惊讶、好奇、会心一笑 4.影响决策当人们在触点受到指引产生兴趣后，我们需要进一步展示出清晰、有说服力的利益点，以影响决策，推动下一步行动。 在上一期工具箱中讨论过动机分析工具，而这里的影响决策就是将动机外化出来，以激发目标。 提供清晰直白的内容。避免使用专业名词，应该多用直接回答用户问题的话术，来帮助他们做出决定。 给出推荐。人们看到行动指引或者选择时，更倾向于下一步行动。 描述利益。还记得 ESP 吗？经济的、服务的、情感的动机，哪些能真正打动用户？ 二次包装。运用心理学原理，使用锚定效应、制造稀缺性、利用社会压力和社会认同，等等。 比如，在客运站推广电子票的设计中，除了突出“不排队”这一服务上的特点，还尝试从情感角度，将使用电子票这种行为渲染为一种新潮时尚的方式。 5.引导行动决策产生之后，来到了关键的第4步：引导行动。让我们回顾一下 MAT 模型： 这时候，动机已经不是主要问题，需要重点解决的是能力和触发器的问题： 提供用户正在寻找的信息（触发器） 在合适地点、合适时间出现（触发器） 简化使用过程（能力） 在智慧客运的项目中，我们重新设计了扫码购票的物料，将乘客最熟悉、正在寻找的信息元素：目的地名称、车票样式具象化出来，让人知道下一步该怎么行动。 然后把自助购票的牌架，放到了售票厅入口处以及排队高峰时容易看到的地方，作为“触发器”促使乘客行动。 在简化使用过程方面，将原本有多个页面，购票时间长达一分多种的手机购票页面，精简成扫码后一键即可购买：只需要选择人数，不需要选择日期、时间、目的地、班次等等信息。购票时间减少80%，直接的结果是 MAT 中的 “A” 得到明显提升，最终逐渐引导乘客从现金购票到购买电子票这一行为的改变。 6.强化行为用户做出行为改变之后，任务还没有全部完成。持续的行为改变以及习惯养成才是我们的最终目的。于是在最后一步，需要进一步强化行为： 具象化反馈以前在做界面设计时，反馈从来不是交互设计师的障碍，反而是利器 —— 可以使用的反馈形式太多，而且都能有效引起注意。但是在线下场景中（尤其当涉及线上、线下界面频繁切换时），反馈系统往往残缺不全。 比如在餐馆里吃饭，一些餐馆已经能够做到顾客自己用微信餐、吃完后自己用微信支付。但是支付成功后，顾客往往不确定是不是可以直接走了，还是得叫服务员过来确认一次。这是因为缺乏必要的反馈。 在客运站里买票，人工售票自然不必说，即便是使用自助售票机，购票成功的反馈也是非常明确的：出票，找零，声音确认。但是如果用微信购票，购票成功只有界面上一个成功图标，怎么都感觉不太放心。 于是我们在现场增加了一台大屏幕，购票成功实时显示，并且播放提示音。一方面让购票乘客即时确认，另一方面也作为一种可感知的宣传，触达到售票厅的其他乘客。 多触点配合在一个触点发生的行为，想办法在另外一个触点进行强化。 比如乘客购买电子票以后，进入候车厅，还可以享受到电子票的专用通道。完成一次乘坐后，会收到购买返程车票的代金券。多个触点轮番引导，目的都是为了强化“微信购票”这一行为。 以上就是场景化设计六步法。 跟界面设计相比，场景化设计有许多不同的着眼点和方法。但是两者的核心仍然一致：从人的需求和行为出发，在有价值的触点设计出： 易于发现和理解的信息 激发动机的行动召唤 简化行动 恰到好处的反馈 这六个步骤可能还远远不完善，希望将过往的经验总结出一个框架来跟大家探讨。期待同学们增添更多的想法、案例、讨论 :)]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>设计</tag>
        <tag>交互设计</tag>
        <tag>服务设计</tag>
        <tag>o2o</tag>
        <tag>体验</tag>
        <tag>场景</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[场景化设计系列之三：动机分析]]></title>
    <url>%2Fscenario-design-3.html</url>
    <content type="text"><![CDATA[「汤姆索亚历险记」里有一个大家熟知的故事： 汤姆因为调皮捣蛋，被菠莉姨妈叫去刷墙。在刷墙时，小伙伴来凑热闹。汤姆灵机一动，想出一个妙招。他假装刷地很卖力，把刷墙当成了一个光荣的任务，还用艺术家的眼光不停打量刷过的墙。被勾起了好奇心的小伙伴要求试一试，汤姆很鸡贼地回绝了。伙伴们愈发羡慕和心痒，便用各种小玩意换取刷墙的机会。大家争先恐后地干得热火朝天，汤姆则悠闲地靠在一旁，不但完成了苦差，还得到了一堆小伙伴们用来换取刷墙机会的的“宝贝”。 明明给人免费刷墙，内心还高兴地不行 —— 动机到底是一股怎样的力量，推动着人们行动？ 设计，终究也是为了促成行动。线下场景中，影响并改变人的行为，并不容易。最容易碰到的两大问题是： 用户没有做出我们期望的行为 服务提供方不愿意改变现有做法方案失效、无法执行只是表象，背后的根源到底是什么？ 斯坦福教授 BJ Fogg 总结出一个模型，为研究“行为改变”提供了一个基本框架。 某个行为的发生，需要： 动机 能力 触发器 其中，动机是行为的发动机，只有先解决了动机的问题，配合相应的能力和触发器，行为才有可能发生。（更多内容可以参考你为什么不想做，想做也做不到？） 于是我们往场景化工具箱里，装备第一发工具：动机分析 过去，我们非常擅长于提升界面的可用性，减少使用的成本，也就是主要解决“能力问题”，但是很少思考如何强化用户动机（这更多是老板或产品经理的事呵？） 动机理论是非常复杂的研究领域，关于需求、动机、目标、行为的理论非常多。其中一种简单的划分是将动机分为内部动机和外部动机。这里不打算借用马斯洛的模型，因为它集中在内部动机即由基本需要引起的动机上，跟线下商业环境中的行为不能很好地对应并指导行动。 我们尝试直接从日常消费场景中观察总结，得出一个很粗浅的动机分类，目的是帮助我们增强同理心、寻找突破点： 用户动机ESP在线下生活消费场景中，用户行为的主要动机大概有这么三类： E：经济 Economy 优惠 特权 在各种生活场景中，跟消费最直接相关的动机，一定是经济属性的：金钱或其他价值性的优惠，又或者是特权。比如，双十一的半价是大家疯狂的最主要原因，QQ 会员的几十项特权是大家长期付费的原因。 尤其在那些供大于求、或者服务性质最强的一些行业场景，比如餐饮、零售、酒店，激烈竞争之下，服务差异化不足，或者已经进入价格完全反映服务价值的市场竞争成熟阶段，于是优惠成为了王道。 比如，持续数个月的周四微信支付日，满10元减10元的优惠，引爆了便利店场景的绿色风暴。 S：服务 Service 便利 高效 舒适 在一些供不应求或效率比较低下的行业，比如医疗、高峰期的公共交通，价值更多地通过便利性而不是经济利益体现出来，服务的提升能明显促使消费者做出选择。 比如，客运站的微信电子票专用检票上车通道，极大加快了乘客上车的效率。 P：心理 Psychology 情感 身份认同 乐趣 安全 在纷繁多样的线下场景中，很多时候价格、便利性的差异都不明显，因为它们往往需要服务提供方承担高额成本。这时候，能否提供心理方面的动机，成为制胜关键。当消费者面对10个选择，一样价格，服务无差，他们会如何选择？如果能引起好奇、乐趣、感动、自我或群体的认同、安全舒适等等的积极情感，一定是让人难以抗拒的选择。 比如，微信公众号里的这款延误险，不但从“服务”维度提供了最便捷的全自动赔付，还从情感维度尝试传递“售罄稀缺感”，以及“倒计时强反馈”的娱乐玩法。 商户动机RER除了用户的动机，一定不能忽视商户的动机。场景化设计跟界面设计最大的不同，也许就是实施方法的不同。商户不再是跟我们天然同一条战线上的哆啦a梦攻城狮，他们有各自的诉求和难题。要让场景化设计变成现实，必须与实施方达成共识并合力实现，这比什么都更重要、也更困难。而了解商户的动机，是建立良好合作关系的基础。 在真实世界的商业环境中，在非互联网的逻辑中，商户的直接动力包括： R：收益 Revenue 顾客数量 顾客消费 E：效率 Efficiency 节省人力、成本，降低流程复杂度 提升服务能力 优化资源分配和流通 R：声誉 Reputation 关注度 影响力 行业竞争力 如何将我们的目标与商户的目标相结合、相匹配，这是设计师最不擅长的问题之一。“用户”不再仅仅是使用者，还包括商户（这其中又有不同角色），甚至更多的角色，这是习惯于服务海量终端用户的设计师们难以跨越的认知障碍。RER 帮助我们理解更复杂的环境和角色，跳出自大而狭隘的“用户体验”牢笼。 场景化工具箱的第一个工具，虽然并不能直接推导出具体方案的设计，但它是与用户、与商户进行有效沟通以及合作的基础。线下场景中，用户诉求和商业利益远比汤姆刷墙复杂，能不能直指人心，能不能无中生有地“创造需求”（主要是激发情感类动机），需要我们很好地把握需求供需双方的动机，从中找到致胜的破局点。]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>设计</tag>
        <tag>交互设计</tag>
        <tag>服务设计</tag>
        <tag>o2o</tag>
        <tag>体验</tag>
        <tag>场景</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[场景化设计系列之二：新战场，新地图]]></title>
    <url>%2Fscenario-design-2.html</url>
    <content type="text"><![CDATA[这是欧洲战争史上一个真实的故事。 一支几百人的小部队在瑞士与德国之间的崇山峻岭间迷路了。在盲目找路的过程中，给养越来越少，部队在深山里越陷越深。士气低迷自不必说，抱怨、指责的情绪日益高涨，指挥官一筹莫展。 一天，他们发现山脚下有一座房子。但士兵们走进屋子时却大失所望——这是一间早就无人居住的房子，除了一些破旧的家具，一点食物也找不到。突然，一个士兵高兴地大叫起来，他在破柜子里发现了一张发黄的手绘地图。地图上画着一座座山峰，并用拉丁文标了山峰的名称。只可惜队伍里没人懂拉丁文。军官们传看了这张地图之后，一致认定这就是这个地区的地形图。所有的人都看到了希望，各种纷争顿时平息，士气为之一振。 指挥官拿着这张地图想带领部队走出死亡之谷。但让他苦恼的是，这张地图太过简略，比例尺很不精确，有时沿着地图指引的方向行军，发现前面无路可走。但毕竟有胜于无。他们一边看地形，一边猜地图，两天之后，部队发现眼前是一大片平原，远处隐约可见几座村庄。 指挥官一直珍藏着这张救了他一命的地图。几年以后，他拿出地图，向一个懂拉丁文的朋友讲述那段经历。这位朋友认真看完地图后摇摇头，意味深长地笑了笑，指着地图上方的那行字告诉指挥官，这是一张奥地利南部山区的地图。指挥官先是愕然，随后恍然大悟。两个朋友相视而笑。 拿着错误的地图找路，是我们常犯的毛病。在撒哈拉拿着威尼斯的地图，会奇怪“怎么找不到水？”…… 当然，故事还说明，比一张错误的地图糟糕得多的，是没有地图。 不管愿不愿意承认，我们都已经随潮流进入了一片全新的“战场”。设计的对象、环境、需求来源、实施、决策、资源等等，都与以往不一样。 进入陌生的战场，第一件应该做的事情，是去更新地图。 界面设计有界面设计的地图，人机交互有人机交互的地图。为不同的生活场景设计“智慧”的解决方案，我们需要怎样的地图？ 是 “O2O设计”地图吗？ 这里引用一下西贝的O2O 关系模型： 很清晰的总结。对于大 O2O 平台的设计，是一幅好地图。可惜，并非所有情况下，都存在一个“O2O 应用”。而且这个中间件，95%可能远没有大众点评 APP 那么强大，又或者，它必需由多个小中间件相互配合，它们之间的关系错综复杂。 于是，再次自问：我们做的是 O2O 设计吗？设计师能设计“O2O”吗？这个问题跟“体验设计”简直是一样一样的。现实中，“设计”产品和体验的，根本就不是只有设计师，很可能（99%+）是老板，很可能是店长，很可能是一个系统长期形成的体系化做法，比如医院提供的服务。 O2O 设计的是 Online 到 Offline 还是从 Offline 到 Online？这是个无聊该死的被概念局限的伪命题。只有当数字化渠道和工具不成熟、连接和切换效率低下、对实体世界影响很小的时候，或者更直白一些：两者没有整合成一个协作体系时，才会有 online 和 offline 如此泾渭分明的划分。 当 online 部分已经成为常规的服务渠道和手段，它与 offline 的转化会变得更频繁、更自然。比如，现在我们去看电影，在查影讯、选影院、选位、支付、问询、取票、观影、评论、返券等等过程中，数次在手机、电影院、信息屏、工作人员等“界面”中来回切换，有人会刻意想起“哦我现在是在 offline 取票，现在 online 发表评论”吗？ 行业的发展速度让我们感到害怕。 而我们仍然时常沉浸在 online 的界面设计中，对 offline 的问题要么视而不见，要么束手无策。当然，我们也可以争辩说，职责的划分已经决定了我们要干的事情。没错，可是该发生的改变还是会发生的。 如果我们需要的不是“O2O设计”地图，那么，是“服务设计”地图吗？ 在没有接触过线下设计时，容易对服务设计有不切实际的“幻想”。尤其当我们对着漂亮的 Customer Journey Map，一种 God’s view 的虚假快感油然而生：一切尽在掌握嘛，你看，痛点辣么多，我们大有可为呀。 但现实是，设计师往往对服务全过程没有全面的理解，更别说有足够的影响力，同时也缺乏对改造服务的投入产出分析，往往难以打动制定服务的决策者。尤其，如果设计师不在提供服务的组织中，而只是一个第三方（甚至不是提供咨询服务的第三方），对服务的改造力会非常有限。 作为一个还在探索边界的设计师，我更愿意把我们正在做的事情定义为“场景化设计” —— 既不是掌控全局、无所不能的服务设计，也尽量不把 online 和 offline 简单割裂开来。 这也许是一个不负责任、极不准确的定义，但是相比“体验设计”、“服务设计”、“交互设计”如此自大的词汇，“场景化设计”至少能提醒我，该聚焦什么，能影响什么。 为什么“场景”会是一个更合适的单位？真实世界中，服务和用户的行为都发生在具体而真实的一个或多个场景中。想要达到一定目的，需要在场景中通过各种办法与用户沟通，引导和影响用户做出我们期望的行为。 场景化设计的本质：通过服务流程、行为过程中的场景设计，影响人们的认知和行为，达到预期目的。 （再次强调，这一系列文章中提到的设计师，既不是真正的服务提供方，也不是受雇于甲方、提供解决方案的咨询顾问，这是最大的前提） 在这样一个新战场中，加入了很多新角色：商家，服务员，第三方，监管单位，有关部门…… 我们的战斗目标，从原来的提高转化率、提高用户满意度等等的明确指标，变成如何在商家为用户创造价值的过程中，帮助用户提升体验，帮助商家创造价值，等等。 从前，线上场景的典型设计问题包括： 如何让任务效率更高？ 如何让操作体验更佳？ 如何让情感更愉悦？ 如今，线下设计的三座大山变成了： 为什么没看到？ 为什么不使用？ 为什么不持续使用？ 而这三座（用户侧的）大山背后，反应了更深层的问题： 核心商业诉求如何满足？ 用户体验和成本、效率如何平衡？ 现有商业模式的缺点是什么，是否到了改变的时机？ 必须找到新的地图，才能看清战场，知道新的敌人、隐藏 boss 到底是谁： 诉求是多方滴，目标是动态滴 用户想要爽，优惠，快捷方便； 商家想要成交，利润，客流，低成本，高效率，口碑； 服务员想要效率，解决问题，奖金； 有关部门想要合规、安定团结； 我们的团队想要市场占有率，交易量 …… 信息环境复杂，任务流非线性 真实环境中，也许同时存在数十、上百个有内容的平面/界面/人员 很少有第一步、第二步、确定、发送的流程，行为都是非线性的 改造环境而不仅仅创造界面 界面只是众多触点之一，需要改造环境才能最大限度影响行为 需要全局考虑交互媒介和方式，现有的界面体验设计方法不足以支撑 投入产出和可实施性从前，要实现复杂功能或炫酷页面效果，缠着哆啦a梦般的开发 GG 就可以了。这导致两个结果： 设计师对成本和投入产出完全无感，根据ROI进行决策的能力≈0 没有不加班的攻城狮而现在，我们的哆啦a梦不再是一个人，决定方案能 不能实现的因素可能包括： 接口人的 KPI 决策人的目标及喜好 接口人和决策人的沟通 钱钱钱 场地场地场地 人员人员人员 若干第三方的能力…… 不是总结的总结虽然粗糙、模糊、不易读，还是尝试先勾勒一幅标出东南西北的地图： 全新战场，面对新的 boss，是时候配备新的武器了。 敬请期待后续“场景化设计工具箱”。希望与更多同行、同学们一起探讨，往工具箱里增加更多好用的工具。]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>设计</tag>
        <tag>交互设计</tag>
        <tag>服务设计</tag>
        <tag>o2o</tag>
        <tag>体验</tag>
        <tag>场景</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[场景化设计系列之一：转型之痛]]></title>
    <url>%2Fscenario-design-1.html</url>
    <content type="text"><![CDATA[这一系列的文章，写给转型中的自己，写给离开界面、走进真实世界的设计师——他们可能有很多名称：“体验设计师”、“O2O 体验设计师”、“服务设计师”、“互动设计师”…… 离开熟悉的环境，一切显得那么陌生，新鲜感夹杂着无知无能的羞愧一起迎面涌来。从虚拟的界面来到真实世界中的场景，设计师如何重新定位自己？如何应对新的挑战？如何发挥价值？ 每一天，疑问都在增加；每一天，不变的主题就是学习。时不时需要用可汗学院的宣传片 「You Can Learn Anything」 来鼓励自己。 而最好的鼓励，是把这些记录下来，让不足发现不足，让思考引起思考，让行动激发行动。 场景化设计第一篇，我们先来聊聊天~ “站在风口，猪都能飞起来”——雷布斯 因为雷总的魔性金句，最近，我们常有一种“此刻抬头望天，一群轻盈的猪正在乘风起航，扶摇九天之外”的古怪即视感。O2O 无疑是这两年最大的风口。创业者前赴后继投身这股浪潮中，野蛮地“改造”原本浑身痛点、但被习以为常的行业和服务。 开始接触线下真实场景后，不少“纯Online”的从业者，会有一个感受： 一切坚固的东西都烟消云散了。—— 马歇尔·伯曼 十年前，从传统行业进入互联网淘金的人，大概就会有这样的感受。今天，当互联网从业者回到本来熟悉的线下世界，却也难逃同样的困境：从前所熟悉和奏效的认识、做法，大部分已失效。 对互联网产品的设计师而言，一个时刻摆在眼前的问题是：“O2O用户体验设计怎么做？” 这是一个危险的问题。 “用户体验设计”这个词，本来就是一把双刃剑。一方面，通过相关概念的普及，国内互联网公司空前重视“体验”（至少“体验”不离口）。这让国内互联网产品的体验水平（至少是界面设计水平），成为世界一流。但是另一方面，原本被称作“美工”的设计师们，终于找到一把“尚方宝剑”，挟天子（用户）以令诸侯，将原本应该由公司全体员工关心的核心问题，狭隘成了一个部门的职责。拉起“体验”大旗以后，设计师发现，从职责到能力，自己hold 不住这个命题，于是又有了很多“设计师的话语权”的讨论。在热热闹闹的讨论、会议、布道、培训中，概念越炒越大，职位名称越来越花哨，但是有多少设计师认认真真地去提高能力，努力转型，挑起肩头越来越沉重的担子？ 曾经做过亿级用户产品的设计师，一定面对过很多很多困惑和迷茫。可是当设计的对象和领域扩展到线下以后，困惑和无力感每天还在增加，这让我对“设计师”这个岗位有了更多的质疑和思考。 不少朋友以为，我所在的团队主要负责微信红包和支付后台系统的界面，实际上，我们团队在做的是这些（详情可查看“微信支付商户通”公众号）： 每天，我都有一种离开火星老家，然后被抛弃在地球的感觉。地球人的想法和语言，根本就是从外星来的呢： 每天都要直面自己对行业的无知，认识以前接触不到的人，跟完全不同背景的人合作，接受设计方案不被采纳、起不了作用的现实。但也许这才是一个设计师成长的良好环境： Get your hands dirty and get shit done.]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>设计</tag>
        <tag>交互设计</tag>
        <tag>服务设计</tag>
        <tag>o2o</tag>
        <tag>体验</tag>
        <tag>场景</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中欧四国扫盲帖之六：欧洲建筑风格，建筑博物馆布拉格]]></title>
    <url>%2Fcentral-eu-6.html</url>
    <content type="text"><![CDATA[布拉格被誉为“欧洲建筑博物馆”，必需单开一篇，来恶补建筑风格常识。 照例借用几张脉络图帮助我们建立索引： Architectural Styles Timeline 因为中欧在古希腊古罗马时期基本处于蛮荒状态，所以略过。下面就按照“拜占庭式-罗曼式-哥特式-文艺复兴-巴洛克-其他”的顺序来一一扫盲： 1. 厚重大面包 —— 罗曼式（Romanesque） 时代关键词：生活艰辛。。。建筑关键词：傻大厚 形象代言人：黑面包 德国施派尔主教座堂 中世纪的建筑可分为两个时期，前期为罗曼式建筑，后期发展为哥特式建筑。 罗曼式教堂继承了古罗马建筑中的巴西利卡形式，采用半圆拱承重结构，但是应用不成熟，施工质量也不如古罗马时期。为了使建筑长期坚固不倒，以及抵抗拱结构产生的侧推力，墙体一般都很厚重，窗户被挤压的很小，内部昏暗。十字拱 布拉格的罗曼式建筑罗马式风格经法、德传到捷克，布拉格从10世纪到13世纪开始兴起和建造罗马式建筑。 布拉格最著名的罗曼式建筑是布拉格城堡内的圣乔治大殿（bazilika sv. Jiří/Basilica of St George）圣乔治大殿 在维希赫拉德高堡上的圣马丁圆顶教堂（rotunda sv. Martina）聖馬丁古圓屋 在新城的圣隆基纳教堂(rotunda sv. Longina) 在许多老城的楼房地下室里保存有罗马式建筑的拱顶和墙壁。保存最好的罗马式民居是在老城的宫希达特楼（dům pánů z Kunštátu），在这座楼的地下有带3个支柱的拱形罗马式宫殿建筑。 2. 卖萌洋葱头 —— 拜占庭式 时代关键词：东西交融 建筑关键词：有点萌 形象代言人：洋葱头 瓦西里升天大_教堂 拜占庭（东罗马）在古罗马巴西利卡式的基础上，融合了东方（主要是波斯、两河流域、叙利亚等）艺术，形成了新的风格。对后来的东欧建筑和伊斯兰教建筑有很大影响。圣索菲亚大教堂 拜占庭建筑的主要特征是圆形穹顶。穹隅是指拱顶之间形成的三角形球面。穹隅的发明使得方形基座上可以搭建巨大的圆形穹顶，因而建筑高大宽阔，采光充分。穹隅 3. 骨感玉米棒 —— 哥特式 时代关键词：宗教建筑关键词：骨感 形象代言人：玉米 哥特式 Gothic 是中世纪欧洲形成的建筑风格，发源于12世纪的法国，持续至16世纪。中世纪最重要的就是宗教活动，教堂成为城市公共生活的中心。 哥特式建筑从古罗马建筑、罗曼式建筑依靠拱和穹顶等各种块面的整体受力体系，转变为接近框架的受力体系。 建筑的整体风格高耸削瘦，以尖拱/尖券、肋骨拱顶、天窗、飞扶璧/飞券/飞拱、撑墙等为特征。内部尽可能减少墙体的宽度，可以填充大面积花窗玻璃，使整体建筑得以瘦身且室内空间明亮。室外部分通常密布着支撑部件，仿佛是没有拆卸的脚手架，给人一种瘦骨嶙峋的感觉。 法国亚眠大教堂双层飞扶壁 随着时间的延续，拱肋变得越来越复杂和装饰性越强。 米兰大教堂 兰斯主教堂 布拉格的哥特式建筑在布拉格，哥特式代表作有查理四世下令建造的圣维特大教堂（Staroměstská mostecká věž） 这是罗马天主教布拉格总教区的主教座堂。位于布拉格城堡内，其中有许多波希米亚国王的坟墓。建于925年，在1060年扩建为罗曼式教堂，1344年查理四世下令在原教堂的基础上建造一座哥特式教堂，于20世纪初才修建完毕。20世纪教堂更换的彩色玻璃窗为阿尔丰斯·慕夏作品。 还有查理大桥（Karlův most）和迪恩教堂（Týnský chrám ） 在布拉格还可以找到一系列小型哥特式教堂，如老城的圣杜哈教堂（kostel sv. Ducha），新城的圣彼得教堂（kostel sv. Petra）和圣母玛利亚·斯涅日娜教堂（kostel Panny Marie Sněžnékostel Panny Marie Sněžné）。哥特式民居宫殿式的代表建筑是老城广场上的石钟屋(U kamenného zvonu)。 4. 高冷冰皮月饼 —— 文艺复兴式 Renaissance 时代关键词：文艺复兴 建筑关键词：复古，秩序 形象代言人：冰皮月饼 不好意思但是中秋真的快到了 圣彼得大教堂 14世纪在意大利随着文艺复兴而诞生的建筑风格。文艺复兴式风格把眼光投向探求人类本身和人的生活，描述世俗生活的乐趣。基於对中世纪神权至上的批判，和对人道主义的肯定，建筑师希望借助古典的比例来重新塑造理想中古典社会的协调秩序。 强调建筑的比例如同人的比例，讲究秩序与规律，拥有严谨的立面和平面构图 使用对称的形状，集中式，显得有条理性、整齐并稳定 继承古希腊古罗马风格和柱式系统 建筑轻快和透气，常常有敞开式的拱形长廊和修长的廊柱 恢复「自然」，以尺规制图，以圆形和正方形为主 维也纳艺术历史博物馆 晚期的文艺复兴建筑走向了两个极端：一边是教条的崇拜古代建筑，将文艺复兴建筑讲究的比例与条理发展的过于繁琐与僵化，变成了注重理性的古典主义建筑；另一边则向柱式严谨而完整的规则挑战，追求新颖，堆砌装饰与雕塑，玩弄手法，发展为了巴洛克式建筑。 布拉格最著名的文艺复兴式建筑是皇家夏宫（Královský letohrádek） 白山上的星星夏宫（letohrádek Hvězda）星星夏宫 老城广场上的迪恩学校的门徽就是威尼斯文艺复兴风格在民宅建筑上的体现。布拉格最漂亮的文艺复兴式大门是克日娜街475号的双金熊。 5.最炫贵族风 —— 巴洛克 Baroque 时代关键词：炫富，争权 建筑关键词：华丽丽，亮瞎眼 形象代言人：鸡尾酒 四喷泉圣卡罗教堂 17世纪欧洲强权扩张，掠夺海外殖民地累聚巨富，生活上提倡豪华享受，因此对建筑、音乐、美术也要求豪华生动、富于热情的情调。 巴洛克艺术风格从17世纪初到18世纪流行欧洲。巴洛克源于葡萄牙语，意为不规则的珍珠，或指非同一般的，怪异的东西。巴洛克建筑的成因错综复杂（比如，是天主教会炫耀财富的产物），其风格本身也褒贬不一，可以算是建筑界的一朵奇葩。 主要特征可以归纳为： 炫富，大量使用贵重材料，充满装饰，一身珠光宝气 繁复，空间组合复杂，装饰复杂，充满各种繁琐的形状图案 标新立异，外形自由，用不完整构图代替完整形象，如断山花、巨型曲线等，以突出个性 视觉冲击，造型上大量使用曲面，凹凸感、流动感极强 在巴洛克教堂中，透视被用来造成空间的幻觉。最明显的就是屋顶内部，壁画会接着四壁的透视线再画上一两层，然后在檐口之上画更高远的天空，使得内部空间好像延伸到了空中。幻觉，就是巴洛克教堂想要带给参观者的感觉。圣彼得广场 巴洛克风格是在布拉格得到广泛运用和流行的、最有特色的风格。“布拉格的巴洛克”风格闻名于世。 数得上巴洛克式建筑风格瑰宝的是圣米古拉斯大教堂（chrám sv. Mikuláše），它是小城广场最显著的象征之一。 还有城堡区的切尔宁宫（Černínský palác），老城区的克拉姆-伽拉斯宫(Clam-Gallasův palác)，还有特洛亚贵族庄园（ Trojský zámek）。 巴洛克式的民居住宅墙饰可以在小城广场的聂鲁达大街（Nerudova ulice）上观赏到。布拉格最漂亮的巴洛克式的群雕是查理大桥上由玛蒂阿斯·贝尔纳尔特·布洛纳（Matyáše Bernarda Brauna）创作的圣鲁伊特嘎尔特的梦群雕（Sen sv. Luitgardy） 最后，来个超级巴洛克晃瞎你圣地亚哥·德·贡波斯代拉教堂 洛可可式 Rococo 洛可可式建筑是巴洛克末期建筑风格的代表。洛可可风格其实更应该算是一种室内装饰风格。 起源於18世纪的法国，以欧洲封建贵族文化的衰败为背景，表现了没落贵族阶层颓丧、浮华的审美理想和思想情绪。他们受不了古典主义的严肃理性和巴洛克的喧嚣放肆，追求华美和闲适。主要应用与室内设计，一开始是为了反对宫廷的繁文缛节艺术而兴起的。 洛可可风格的基本特点是纤弱娇媚、华丽精巧、甜腻温柔、纷繁琐细。将贝类、树叶以极其丰富、半抽象的装饰形式表现出来，并充满了曲线花纹或漩涡花纹的装饰。室内用色明快（嫩绿、粉红、玫瑰红等鲜艳的浅色调），以优美纤巧的家具、小雕塑、装饰镜、绘画作品和挂毯对建筑物、浮雕和壁画进行补充，使得整个建筑犹如一件艺术品一般。 洛可可风格在18世纪后半叶从法国流传到捷克，布拉格洛可可风格的代表作是老城广场上的金斯基宫（palác Kinských） 其他历史主义风格在19世纪后半叶，大多数建筑师都从过去流行的建筑风格中汲取灵感，所以这个时期的风格也称为历史主义风格。产生了新文艺复兴式，新哥特式和新巴洛格式。 布拉格最著名的新文艺复兴式建筑有民族剧院（Národní divadlo） 国家博物馆（Národní muzeum） 鲁道尔夫宫（Rudolfinum） 新艺术主义风格新艺术主义风格产生于19世纪末和20世纪初。它的名称源于拉丁语 secessio一词,意为离开，表示许多年轻的艺术家离开了当时的各种艺术组织，作为对当时陈旧和过时的艺术组织的抗议。新艺术风格可分为巴黎新艺术主义风格，维也纳新艺术主义风格和布拉格新艺术主义风格。 新艺术主义风格的主要特色是表现幻想、细腻，常采用植物作装饰边框，外墙用金色，瓷器、灰泥装饰，窗户带有半截窗帘。布拉格新艺术主义风格风格首先出现在1861年的周年纪念建筑展中。这种风格表达和追求的是，期望新艺术主义风格的建筑能从19世纪宏大威严的建筑风格中摆脱出来。 布拉格最漂亮的的新艺术风格的代表作是市民会馆（Obecní dům）布拉格的中心火车站（Hlavní nádraží） 新艺术主义风格的民居住宅楼主要分布在巴黎大街 (Pařížská ulice)。在瓦茨拉夫广场的下半部分矗立着新艺术主义风格的皇冠宫(palác Koruna)，它的顶部呈镶有珍珠的皇冠形状，在瓦茨拉夫广场再往上走可以看到另一处新艺术主义风格的建筑-欧洲宾馆（hotel Evropa），此外，老城广场上的胡斯像（pomník Jana Husa）也属于新艺术主义风格的作品。 现代建筑风格布拉格第一个钢筋水泥混凝土的建筑，同时也成为捷克建筑史上分界线的建筑是卢采尔纳宫（budova paláce Lucerna），它位于瓦茨拉夫广场和沃基曲科娃（Vodičkova ulice）之间，建于1912年。 20世纪上半叶在布拉格主要流行的现代建筑风格是立体主义风格，提倡艺术和建筑风格中回归简单的几何图形。墙壁和外墙装饰被分割，用矩形片状做装饰。立体主义风格的代表作品是位于采莱特纳街上（Celetná ulice）的黑圣母楼（dům U černé matky Boží）,这栋楼非常巧妙地和旁边的老城区的巴洛克建筑风格的大厦融为一体。 立体主义风格的民宅分布在老城区的洲际酒店（hotel Intercontinental）和比尔科瓦街（Bílkova ulice）。在30年代，还产生了强调功能性的功能主义风格，比如位于布拉格6区的洛索和姆莱罗别墅（Loosova nebo Mullerova vila na Praze 6） 巴巴别墅区（čtvrť na Babě） 1989年以后，在布拉格市内建造了许多新的商业楼和写字楼，但其中大多数都不代表任何艺术流派。唯一的代表新时代建筑风格的是1996年建造的跳舞楼，它位于拉辛诺沃河岸（Rašínovo nábřeží）。 主要参考资料 「艺术的故事」，贡布里希，2008 「建筑设计视觉词典」，加文·安布罗斯，2009 wiki的数个建筑相关条目 建筑风格 如何读懂教堂 知乎：教堂的建筑风格有哪些？ 布拉格各式建筑风格简介]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>中欧</tag>
        <tag>历史</tag>
        <tag>Travel</tag>
        <tag>哥特式</tag>
        <tag>巴洛克</tag>
        <tag>布拉格</tag>
        <tag>建筑</tag>
        <tag>文艺复兴</tag>
        <tag>洛可可</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中欧四国扫盲帖之五：乱弹欧洲宗教]]></title>
    <url>%2Fcentral-eu-5.html</url>
    <content type="text"><![CDATA[犹太教、基督教、天主教、东正教、新教，这几个宗教到底有什么瓜葛？ 先来一张脉络图： 其实，他们信奉的，都是同一个神——上帝，天父，耶和华。via 同人战争（右至左：犹太，伊斯兰，天主，新教） 犹太教从公元前2000年西亚地区的游牧民族希伯来人中产生，信奉圣经旧约。犹太教的教义和规范比较严格，且并没有以普度众生为目的。 犹太教剥离出基督教1世纪，传说中未婚先孕的玛利亚（当然犹太教是不会承认有这么个菇凉的……）在马槽中生出了耶稣，他自称是上帝之子。 via stone 二混子 via 同人战争 一部分耶稣的粉丝坚决拥护他，于是从犹太教中分离出来，演变为基督教。基督教以解救世人为公司的上市目标，耶稣到处路演。而且不同于犹太教独占上帝，耶稣告诉信徒，上帝是大家的——于是基督教影响力越来越大，粉丝极速增长，远超过犹太教。 耶稣虽然死在罗马人手上，但300年之后，基督教在罗马合法化。又过了100年，逆袭成为罗马国教。以及，出了一本耶稣的言行故事书——新约。 基督教就是这么个从犹太教中离队创业成功，甩开老东家几条街的故事。 基督教剥离出东正教那么天主、东正和新教呢？其实，他们都是基督教，因为信奉同一个耶稣。 罗马分裂成西罗马和东罗马之后，主教区留在了西罗马，东罗马面子挂不住啊必需得 copy &amp; paste 一套过来，于是11世纪，出现了东（以拜占庭为中心）、西罗马（以梵蒂冈为中心）两个教区，东边的变成了东正教。 via stone 二混子 除了从7世纪就出现的教义上的分歧之外，天主教和东正教最大的分歧在于宗教的组织与政权的关系上。 在西罗马帝国，为了保持自身的权威，罗马教廷对于拉丁语的使用和维护罗马精神的中心地位表现得十分强硬，与帝国君主、封建主之间的势力斗争此消彼长。 而在东罗马帝国，从君士坦丁一世起，教会与帝国之间的关系就非常密切。倾向于各个国家教会自治，从而产生了各国君主与具有权威的君士坦丁堡牧首相联合的模式。从长远来看，东正教教会对地方政权往往有依赖性。 在对保加利亚实行教化的过程中，两个教派的分歧终于因为君士坦丁堡首牧提乌实行教会分立而正式形成。 天主教剥离出新教那么，新教又是怎么回事？为什么现在国内提到的“基督教”其实多指“新教”？ 中世纪，天主教会攫取了权力和大量财富，教会腐败严重，还丧病地推出赎罪券这一杀手级产品，给自己抹了一把黑。 这时候有个叫马丁路德的神父跳出来，跟大佬们叫板，成立了新的教派。“因信称义”（唯信仰得救）是路德神学的主要教义，他倡导人可以开掉中介（神职人员）直接跟上帝对话。 同人战争 17世纪初，波西米亚地区成为宗教信仰冲突的焦点，民众大多数是新教徒，国王和统治者则是天主教徒。1618年，在关于是否关闭两座新教教堂的问题上发生冲突后，新教徒和王国的摄政官们（天主教徒）在布拉格城堡会晤。30名捷克人为反抗哈布斯堡王朝对新教徒的迫害，拒绝接受哈布斯堡皇室的斐迪南大公为国王，起义者冲进王宫将官员扔出窗外，引发欧洲天主教徒和新教徒之间的“三十年战争”。 欧洲是天主教和新教势力左右互搏的主战场，所以他俩经常掐架也就不足为奇了。 ==============中国特色分割线=============== 天主教和新教都到中国来传教，但是新教传播的时候，一张脸撑成两张大，把自己称为基督教。悲催的天主教被人抢走了基督教这个名头，只能说自己是天主教。 所以今天华人信徒普遍说的基督教，其实是新教。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>中欧</tag>
        <tag>历史</tag>
        <tag>Travel</tag>
        <tag>东正教</tag>
        <tag>基督教</tag>
        <tag>天主教</tag>
        <tag>宗教</tag>
        <tag>新教</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中欧四国扫盲帖之四：捷克斯洛伐克，天鹅绒，苏台德]]></title>
    <url>%2Fcentral-eu-4.html</url>
    <content type="text"><![CDATA[捷克和斯洛伐克的分分合合尽管从1526年起，哈布斯堡家族就开始了对捷克和斯洛伐克两个民族的统治，但实际上这两个民族一直界限分明。1867年，奥地利帝国改弦更张为奥匈帝国，捷克和斯洛伐克地区分别划归奥地利和匈牙利。 [ 一战爆发的两年后，1916年捷克斯洛伐克民族理事会成立，促成联合部队组建，参与一战。1918年奥匈帝国兵败解体（哈布斯堡王朝也落下帷幕），波希米亚、摩拉维亚及斯洛伐克等地区组成捷克斯洛伐克共和国。 二战爆发前夕，1938年英法与德意签定慕尼黑协定，使捷克斯洛伐克向德国让出波西米亚、摩拉维亚和西里西亚的日耳曼人语区（即苏台德区，从此埋下祸根）。 随后，斯洛伐克和罗塞尼亚宣布实行自治。希特勒控制下的斯洛伐克愈加法西斯化，布拉迪斯拉法宣告独立。 二战期间，捷克各地均被纳粹严格控制。直到1945年4月，新政府成立，恢复了1937年时的边界。1947年，原本已经接受了马歇尔计划的捷克政府，在几天后又按照莫斯科的指示反悔。社会民主党拒绝同共产党合并，11位非共产党籍部长在1948年2月提出辞职。声势浩大的罢工运动爆发，这就是“布拉格二月事件”。6月，萨波托斯基当选共和国总理，共产党制度被确立。 天鹅绒革命和天鹅绒离婚1968年1月，杜布切克当选捷共中央第一书记，提出建立具有人道主义面貌的社会主义。4月，捷共中央通过反映改革策略的行动纲领，形成“布拉格之春”改革浪潮。此时捷克显示出越来越强烈的独立倾向，于是老大哥在1968年8月20日率25万华约成员国军队，一夜之间占领捷克全境，用坦克粉碎布拉格的改革浪潮。抗议苏联入侵运动持续到1969年。 1969年1月1日，捷克斯洛伐克成为联邦共和国，由捷克社会主义共和国和斯洛伐克社会主义共和国组成。1970年苏联对捷克进行大清洗，50万人被开除出党。 布拉格之春、苏军占领、大清洗这些事件，在电影「布拉格之恋」中均有体现。 大清洗之后，捷克政治上万马齐喑，经济上走入死胡同，社会矛盾进一步尖锐，最终导致了1989年的剧变。 天鹅绒革命又称丝绒革命，狭义上是指捷克斯洛伐克于1989年的反共产党统治的民主化革命。1989年11月17日，布拉格学生示威运动被镇压后，由“人民论坛”领导的“天鹅绒革命”迅速蔓延开来。布拉格出现超过十万人的游行活动，要求政府结束共产党统治。11月30日，共产党统治地位被取消。 从广义上讲，天鹅绒革命是和暴力革命对比而来的，指没有经过大规模的暴力冲突就实现了政权更迭，如天鹅绒般平与柔滑。 天鹅绒革命开始的地方有一块纪念碑，写着著名的： When - If not now ?Who - If not us ? 天鹅绒革命促进了捷克斯洛伐克的民主化与和平移转政权。随着民主化的影响，斯洛伐克也出现了日益强烈的独立建国主张。1990年，捷克斯洛伐克更名为捷克和斯洛伐克联邦共和国。尽管如此，斯洛伐克民族主义者仍不满意，他们在1992年6月议会选举中斯洛伐克一方取得绝大多数议席，随后投票通过《主权宣言》。在11月联邦议会投票通过后，1993年1月1日捷克斯洛伐克正式分裂成两个国家。而这次斯洛伐克的和平独立与联邦体制的和平瓦解，也被称为“天鹅绒离婚”。 苏台德地区和苏台德问题苏台德地区，指捷克摩拉维亚北部边境的苏台德山脉所处的地带。二战之前日耳曼人一直住在这里。 1938年希特勒支持这里以“回归德国”为目标的“汉伦党人”，为入侵捷克制造理由，而英法两国牺牲捷克的利益，在捷克代表缺席的情况下签订「慕尼黑协定」，将苏台德地区2.26万平方公里、人口300万的一块土地划归德国。 1945年二战结束后，根据战胜国协定和捷克总统贝奈斯的法令，苏台德的日耳曼人被没收全部财产，强制遣返。 在战争中蒙受巨大损失而导致的复仇心理驱使之下，捷克人对苏台德地区的日耳曼民众实施了暴力掠夺和武力驱逐。 60年来，被遣返的日耳曼人一直要求返回家乡和获得经济赔偿。东欧剧变后苏台德问题一直悬而未决，成为二战“后遗症”。1997年，德国捷克达成「德捷和解公告」，德方出资1.4亿马克，捷方出自2500万马克，成立“未来基金”协商解决苏台德问题。但由于“未来基金”金额与苏台德日耳曼人要求赔偿的金额相差太大，而且返乡要求无法落实，苏台德日耳曼人的游行仍在年年举行。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>中欧</tag>
        <tag>历史</tag>
        <tag>捷克</tag>
        <tag>Travel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中欧四国扫盲帖之三：哈布斯堡王朝和维也纳]]></title>
    <url>%2Fcentral-eu-3.html</url>
    <content type="text"><![CDATA[哈布斯堡王朝（Habsburg）是欧洲历史上统治领域最广的王室。大多数欧洲国家，都与哈布斯堡家族有着千丝万缕的联系。 先来看看阴谋论者最喜欢讨论的光明会（共济会里的精英团体）的13支家族派系： 罗斯切尔德家族Rothschild（Bauer or Bower）（德裔犹太系统）- Pindar 布鲁斯家族Bruce （犹太系统） 卡文迪许家族Cavendish (肯尼迪 Kennedy，美系爱尔兰系统) 梅地奇家族De Medici （犹太系统） 汉诺威家族Hanover （日耳曼系统） 哈布斯堡家族Hapsburg （欧洲王室系统） 克虏伯家族Krupp （条顿骑士—日耳曼系统） 金雀花家族Plantagenet （法兰克—法兰西系统） 洛克菲勒家族Rockefeller （盎格鲁撒克逊系统） 罗曼诺夫家族Romanov （俄罗斯、瑞典） 辛克莱家族Sinclair（St. Clair） 华伯家族Warburg (del Banco) （美籍犹太系统） 温莎家族Windsor (Saxe-Coburg-Gothe) （英国王室系统） 以上全是声名显赫、手可遮天的大家族，其中就有称霸欧洲王室系统的哈布斯堡家族。 1020年，新崛起的德意志家族在山上修筑了雄峻的鹰堡，即哈布斯堡。1273年，与东方的元帝国建立几乎同时，鲁道夫一世被选举为神罗君主，哈布斯堡王朝建立。哈布斯堡家族攫取了阿尔卑斯山麓两侧大量领地，吞下了奥地利，从一个边疆小贵族一跃成为神罗西南方向最强大的诸侯。 这个家族的成员曾出任罗马人民的国王和神圣罗马帝国皇帝，奥地利公爵、大公、奥地利帝国皇帝，匈牙利国王，波希米亚国王，西班牙国王，葡萄牙国王，墨西哥皇帝和今法国、意大利、荷兰、比利时境内及南部斯拉夫地区若干王国、公国的国王、大公与公爵。 查理五世以后，哈布斯堡王朝分为奥地利分支和西班牙分支，以及始于玛丽亚·特雷西亚的哈布斯堡-洛林皇朝。 几乎把欧洲皇室变成了一家人，哈布斯堡家族是如何做到的？很简单，联姻。换句话说，就是靠结婚娶人家的女公爵女王占地盘。。。15世纪之后，哈布斯堡家族独占神圣罗马帝国皇帝宝座。来欣赏一下复杂的族谱： 更详细的大图： http://www.chh.de.free.fr/archiv/Sonstiges/habsburg.php 其中，”欧洲丈母娘”玛利亚·特蕾西亚生了16个孩子，除了5个孩子夭折以外，其余全部成为皇帝、皇后、女王。只是通过联姻和继承，哈布斯堡王室就把国土扩大到三大洲，勃艮第，西班牙，葡萄牙，匈牙利，波西米亚和美洲新大陆先后并入帝国。 哈布斯堡家族的斐迪南大公遇刺，成为一战导火索。兴盛了600年的王朝终于在战后分崩离析，帝国被共和国取代。 哈布斯堡的维也纳哈布斯堡家族最初来到维也纳时，维也纳位于神圣罗马帝国的最东边，是坐落在边境上的偏远小镇，奥斯曼帝国或匈牙利随时可能入侵。 哈布斯堡家族唯一一位女性统治者玛利亚·特蕾西亚，在动荡的局势中登基。 她执政期间，加强了中央集权，废除了王家领地的赋役，促使出现自耕农，还推行了义务教育，为奥地利奠定了现代化国家的基础，维也纳发展成欧洲最繁华的城市之一。 奥地利的文化有一种融合的、兼容并蓄的气度。也只有这样的地方能够拥有无边的音乐，能够产生茜茜公主式的恋情。维也纳吸引了海顿、莫扎特、贝多芬、舒伯特、马勒、布鲁克纳、施特劳斯家族等等重要的作曲家，成为音乐之都。而特雷西亚女皇对巴洛克、洛可可风格的喜爱，也给后世留下了许多艺术瑰宝。 参考资料: 哈布斯堡王朝 哈布斯堡帝国 哈布斯堡家族世系图 哈布斯堡家族的下巴]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>中欧</tag>
        <tag>历史</tag>
        <tag>奥地利</tag>
        <tag>Travel</tag>
        <tag>哈布斯堡王朝</tag>
        <tag>维也纳</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中欧四国扫盲帖之二：“波西米亚”是什么鬼？]]></title>
    <url>%2Fcentral-eu-2.html</url>
    <content type="text"><![CDATA[波西米亚（Bohemia）既不是食物（西米露），也不是战火纷飞的地方（波黑和克里米亚） 它指一个区域，位置在今天包括布拉格在内的捷克共和国中西部地区。在历史上，它跟捷克民族的关系，可以类比”中华民族”和”黄河流域”的关系。 962年，奥托一世的加冕标志着神圣罗马帝国统治开始，波西米亚地区首先成为帝国的一部分。波西米亚其实是一个行省，占据了古捷克地区西部三分之二的区域，其中心便是布拉格。其他省还包括摩拉维亚和西里西亚。 1250年的中欧 神圣罗马帝国的许多小王国中，波西米亚王国是唯一一个核心民族不是日耳曼人而是捷克人的国家。13世纪初，鄂图卡一世统治时期，波西米亚成为王国，捷克君主成为神圣罗马帝国七大选帝侯之一。 关于神圣罗马帝国，可以参考这篇笔记：德意志笔记之二：权力和信仰之争 查理四世继承波西米亚王位后，于1355年成为德意志国王。查理四世的统治使捷克王国达到鼎盛，布拉格曾一度是圣神罗马帝国的中心。 历史上有好多个查理四世，请认准神圣罗马帝国商标~ 这时候，天朝上国正在折腾的主，是右手边这位：从1440年起，波西米亚所有皇帝都来自哈布斯堡家族。 今天，“波希米亚”又指波希米亚主义，指一种艺术家气质、时尚潮流、反传统的生活模式。这个涵义出现在19世纪的法国。在法国人的想像中，“波希米亚人”会让他们联想到四处漂泊的吉普赛人，他们不受传统的束缚，或许还会带来一些神秘的启示。 现在，波希米亚主义（Bohemianism）指称那些希望过非传统生活风格的一群艺术家、作家与任何对传统不抱持幻想的人的一种生活方式。 而布波族（bobo）（亦被翻为 波波族、布尔乔亚波希米亚族），是 bourgeois bohemian（中产阶级式的波希米亚人）的缩写，为1980年代“雅痞”一词的衍生词，形容1990年代之后，因为信息时代的快速来临，随着高度的创作空间与快速的财富累积，而来到中上到上层阶级的新高级知识分子。布波族不等于雅痞。他们是信息时代的精英，兼具布尔乔亚〔中产阶级〕的消费能力与波希米亚人的创意与自由，并将创意和情感转化成为产品。布波族的崛起，带动了文化产业及美学经济的蓬勃发展。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>中欧</tag>
        <tag>历史</tag>
        <tag>捷克</tag>
        <tag>Travel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中欧四国扫(ba)盲(gua)帖之一：“中欧”还是“东欧”？]]></title>
    <url>%2Fcentral-eu-1.html</url>
    <content type="text"><![CDATA[扫盲贴由来出游的季节又要到了！在数次多么痛的领悟之下，00 决心要做好功课再出门，不再让去过Teotihuacan还对阿兹特克文明一无所知、到过博斯普鲁斯海峡还是看不进拜占庭和奥斯曼帝国历史的悲剧重演。 虽然是临时抱佛脚的节奏，不过想了个主意：先列问题，再做功课。于是有了这个扫(ba)盲(gua)系列，希望在最后一周时间，威逼利诱自己去看看一直以来困扰的、有趣的问题。 捷克、斯洛伐克、奥地利、匈牙利，这几个国家所在的区域，到底应该叫“中欧”还是“东欧”？ 作为地理专业的学生，自然对“中欧”的概念更熟悉，这次也终于有动力把这个问题再理一理。 中欧的历史，始于一千年前两个大佬——拜占庭帝国以及教皇的基友日耳曼民族，对该地区的基督教化。 德国、波兰、捷克、斯洛伐克、奥地利、匈牙利，这些传统地理意义上的“中欧”国家，在一战之前都处在德意志与奥匈帝国版图中。作为自然地理概念的“东欧”，本来只指俄罗斯，冷战时期才出现了范围更广的“东欧”这一政治地理概念。 wiki 上“中欧”条目是这么写的： 中欧，欧洲中部，包括奥地利、捷克、德国、匈牙利、列支敦士登、波兰、斯洛伐克、瑞士。但受二战后冷战氛围的影响，奥地利、瑞士、列支敦士登、德国有时会被人们认为也是西欧国家的一部分，而捷克、斯洛伐克、波兰及匈牙利则也会被人普遍认为是东欧国家。 今天，波、捷、匈、斯等国均自称“中欧国家”，以区别于罗马尼亚、保加利亚、阿尔巴尼亚、前南斯拉夫诸国等“巴尔干国家”，他们对“东欧”这个概念比较排斥。 跟据亨廷顿的理论，被神圣罗马帝国统治过的匈牙利、捷克、斯洛伐克、斯洛文尼亚、克罗地亚，以及被德意志帝国和奥地利帝国统治过部分领土的波兰属于西方文明下属的天主教文明圈，不同程度地受德意志文化的影响（尤以曾有大量德国地主移民拓殖的波兰和捷克为最），大多数民众信奉罗马天主教（捷克例外，如今已是无宗教信仰者比例最高的国家之一），较早建立代议制民主政体，在东欧剧变后民主转型较为平和。被奥斯曼土耳其帝国长期统治的巴尔干半岛诸国（斯洛文尼亚和克罗地亚除外）大多属于东正教文化圈，这些国家的文明来自对拜占庭文化的学习和吸收，民众大多信奉东正教。左边天主教，右边东正教 奥匈捷斯四国性格各异，想来也是有趣：捷克人很像德国人，冷静、理智、谨慎、现实、温和，没有想明白的事情不会盲目去做，对宗教传统淡薄，不喜欢正面与大国交锋，容易屈服、显得隐忍、实用主义心态明显。匈牙利是“好学生”的形象，无论追随希特勒还是斯大林时，而如今则是欧盟中的“优等生”。奥地利人则可以醉心于昔日的文化，天赐的山川风物，葡萄美酒和华尔兹，享受生活，显得潇洒、随意、散漫和自由自在。斯洛伐克呢？去了就知道了…… 参考资料： 「中欧人文图志」，安德烈·瑟利耶，2008; 「从“东欧”到“新欧洲”」，金雁，2011; 「Lonely Planet 中欧」，2014; 东欧 wiki 条目; The History Of Europe As Told Through Country Balls; 漫画欧洲史]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>中欧</tag>
        <tag>匈牙利</tag>
        <tag>历史</tag>
        <tag>奥地利</tag>
        <tag>捷克</tag>
        <tag>斯洛伐克</tag>
        <tag>Travel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给自恋物种的三副猛药——读「人类简史」]]></title>
    <url>%2Fbrief-history-of-humankind.html</url>
    <content type="text"><![CDATA[如果说有一本书，不到五百页，没有一堆令人晕头转向的年份、人名、地名、称号，就能涵盖了人类如何崛起、影响现代生活甚巨的资本主义、一神教、自由人文主义、基因工程如何兴盛的人类历史重大脉络……那就是这本神奇的、同时摆放在“历史”和“畅销”分类里的「人类简史」。 与其说这是一部历史大众读物，不如说是一笺处方，开给历史学家们，更开给自恋如我们的这个物种。 来来来，打开处方，看看是哪三副猛药： 特别如你，那只是幻觉十万年前，地球上至少有6种不同的人，今天却只剩下我们这一科——称为智人（Homo sapiens）。从结果来看，智人作为最终胜出的生存者，似乎是赢得了演化的战争。不过作者一上来就掀翻了这块让全人类自我感觉良好的幕布。 智人一直希望自己和其他动物有所不同，仿佛整个科就只有自己的存在。人类已经习惯以为自己是唯一的“人”，执着地寻找着证据，试图证明地球在某个时间点上只会有单一人种，而我们正是进化的最终果实。而事实是，多个人种共存是常态，而且智人在长达数百万年的时间内，都是弱小、边缘的生物，位于食物链的中间位置。一直到10万年前，智人十分偶然地学会使用火和语言，才突然跃居食物链顶端。这也许就是自恋的开端。 演化没有方向，历史无从正义距今7万到3万年前，智人中出现了新的思维和沟通方式，这场认知革命让智人具备三种能力，奠定了与其他物种的区隔： 能够传达大量环境信息 能够传达八卦（社会关系信息），组织更大、更有凝聚力的团体。“讨论虚构的事物”是智人语言最独特的功能。不仅让人类拥有想象，而且可以“一起”想象。 能够传达关于虚构概念的信息，使得大量陌生人之间可以合作、社会行为快速创新一直以来，智人以进化胜利者自居。学会使用火，制造各种工具，发明语言，探索宇宙万物的秘密，建筑起宏伟的人类文明，经历认知革命、农业革命、科技革命……几乎是一个筚路蓝缕、屌丝逆袭的华丽故事。 这时，作者又一把抓过这个剧本撕得粉碎：智人的演化，真的是“好”的、有“目的”、有“意义”的吗？ 记得第一次讨论“’发展’这个概念是否具有指向性，’好’的变化才是发展吗？”问题，是在薛德升老师的课堂上。长久以来，我们总是一厢情愿地相信，事物一直在“前进”，发展是“变得更好”。这种自信从何而来？ 智人在大约1万年前开始了农业革命——被作者称为史上最大骗局的一场变革。农业革命让食物总量增加，但量的增加并不代表吃得更好、过得更悠闲，反而只是造成人口爆炸，而且产生一群养尊处优、娇生惯养的精英分子。普遍来说，农民的工作要比采集者更辛苦，而且到头来的饮食还要更糟。 这幕后的黑手既不是国王，不是牧师，也不是商人，而是那极少数的植物物种，其中包括小麦、稻米和马铃薯。人类以为自己驯化了植物，但其实是植物驯化了智人。从从无足轻重的野草变成无所不在的口粮，小麦的秘诀就在于操纵智人、为其所用。 时至今日，画风已跟1万年前相差了10万个毕加索。我们以为自己省下了时间，其实是把生活的步调加速成过去的十倍快，于是整天忙忙碌碌、焦躁不安。我们从农业革命能学到的最重要一课，很可能就是物种演化上的成功并不代表个体的幸福。 天生自然的生物学，可能性几乎无穷无尽。然而，文化却要求必须实现某些可能性，而又封闭了其他可能性。文化总会说，它只是禁止“不自然的事”。但从生物学的角度来看，这世界上根本没有什么是不自然的。只要有可能发生的事，就是自然。 演化本来就没有唯一目的，只是我们更愿意相信以自己为主角的故事情节。 基于故事的自我牢笼无论是现代国家、中世纪教堂、古老城市，任何大规模人类合作的根基，都在于某种只存在于集体想象中的虚构故事。除了存在与人类共同的想象之外，这个宇宙中根本没有神、没有国家、没有钱、没有人权、没有法律，也没有正义。我们相信某种秩序，并非因为它是客观的现实，而是因为相信它可以让人提升合作效率、打造更美好的社会。 虚构出来的组织能够正常运作，靠的是讲故事，而讲故事难就难在让人相信。于是，历史也就不断围绕这个问题打转：究竟某个人是如何说服数百万人去相信神、民族或是有限公司这些故事？ 自从认知革命之后，智人就能依据“人造直觉”——文化来迅速调整行为。但是在文化快车道上，智人不知不觉为自己建造了一个美轮美奂的牢笼，深陷在想象的秩序中汲汲营营。 现代人之所以要花费大把银子到国外度假，因为他们真正相信了浪漫的消费主义神话。浪漫主义告诉我们，为了要尽量发挥潜力，就必须尽量积累不同的经验。必须体会不同的情感，尝试不同的关系，品尝不同的美食，还必须学会欣赏不同风格的音乐。而消费主义告诉我们，想要快乐，就该去买更多的产品和服务。鼓励多元多样的浪漫主义又与消费主义一拍即合，催生了贩卖各种“体验”的市场。 追求各种欲望，我们乐此不疲，甚至发展出了极其精密的组织、制度、方法论、工具、仪式。但是很少人会突然抽风问一问：究竟为什么我们会想要这些？比如，从出生到死亡，男性必须一辈子不断通过各种仪式和表演来证明自己真是条汉子。而女性必需不断说服自己和其他人自己散发着女人味。如果仅仅是基因的计谋，为免也太过小题大做。其中又有多少文化和自我建构的成分，我们是怎么一步步催眠自己去相信这一切，甚至进入集体无意识状态？ 更可怕的是，这座华丽的牢笼自身可以生长演化。每一次我们以为自己打破了监狱的高墙、迈向自由的前方，其实只是到了另一间更大的监狱，把活动范围稍稍加以扩大。 这个世界会好吗？支撑“人造直觉”这座华丽的文化牢笼的，是三种全球秩序：经济上的货币秩序，政治上的帝国秩序，宗教上的全球性宗教。 金钱是有史以来最普遍也最有效的互信系统，能够跨越几乎所有文化鸿沟。宗教信仰的重点是自己相信，但金钱信仰的重点是别人相信。 帝国是一种政治秩序，统治原本属于不同文化、有各自领地的民族，疆域无限扩张，它是造成民族多样性大幅减少的主因之一。 而宗教的重要性，在于让脆弱的架构有了超人类的合法性。有了宗教之后，就能说法律并不只是人类自己的设计和想象，而是来自一种绝对的神圣最高权柄。这样一来，至少某些基本的法则便不容动摇，从而确保社会稳定。 金钱+帝国+宗教，智人就这样躲进了自己一手构筑的堡垒中，每前进一步，都把本已在空中的阶梯垒得更高，却全然不知阶梯将通往何方。 那么问题来了，如果后来的人并没有比较快乐，我们为什么要发展农业、城市、文字、钱币、帝国、科学和工业呢？究竟如何影响人类的幸福，这是我们对历史理解的最大空白之处。 如果快乐是在于感受快感，想要更快乐，就得操纵生化系统。如果快乐是在于觉得生命有意义，想要更快乐，就得骗自己骗的更彻底。还有没有第三种可能呢？ 作者认为，佛教将会是人类的解药。欲念造成不满：遇到不喜欢的事就想躲开，遇到喜欢的就想维持并增加这份愉快。佛教倡导人们看清事物的本质而不是它带来的感受。虽然感受悲伤，但不要希望悲伤结束，于是虽然仍有悲伤，也能不再为此而困。虽然感受快乐，但不要希望快乐继续，于是虽然仍有快乐，也能不是去心中的平静。 但，这真的是终极意义吗？人类要追求的是离苦得乐吗？如果我们一早已经获得内心平静，感觉生命充满喜乐，就真的圆满了吗？如果说没有什么值得动用我们的七情六欲，那为什么又要去追求平衡呢？作为生命的一种形态，作为亿万物种中独特的一支，我们的使命又是什么？ 这时，眼前不自觉出现了樱花的图景。怒放，绚烂，刹那芳华。这是不是才是生命该有的张力，也是每个物种存在的意义——顺其自然，绽放生命的张力，共同塑造养育我们的山川土地。 是什么彰显了某个物种的独特性？这些独特性就是生命的张力，即便它将导致最终的灭亡。就像烟火，并不会因为最终注定成为灰烬而拒绝绽放。存在的意义，就是当下的存在本身，而不是繁衍、竞争、胜利、快乐、力量等等等等。生命的意义，就在于彰显生命力，呈现生命的过程和可能性，仅此而已。 题外：写作的秘密一本书看完，除了回肠荡气的内容，还收获了写作的秘密。这本书不但全然没有一般历史书的陌生疏离枯燥感，而且读来让人欲罢不能。除了纵横开阖的视野和独特的叙述视角，还有两点特别值得琢磨和学习。 先有 storyboard，后有文字 如果到200万年前的东非逛一逛，你很可能会看到一群很像人类的生物：有些妈妈一边哄着小婴儿，一边还得把玩疯的小孩抓回来，忙得团团转；有些年轻人对社会上种种规范气愤不满，也有些垂垂老矣的老人家只想图个清静；有肌肉猛男捶着自己的胸膛，只希望旁边的美女能够垂青；也有年长的充满智慧的大家长，对这一切早就习以为常。这些远古人类，和一般动物比起来就是没什么特别。他们万万没有想到，他们的后代某一天竟能在月球上漫步、分裂原子、了解基因码，还能写写历史书。看这段文字时的感受，就是大脑忍不住脑补画面！想写出生动的文字，其实应该先把 storyboard 想好，每个镜头的布景怎样，人物怎样活动，情节如何展开，镜头如何转换……剩下的只不过是把脑海中具体生动的画面描述出来。 再次佩服阳老写作班的神总结：大脑喜欢模式、喜欢惊奇、喜欢情感、喜欢捷径。 用问题炸开脑洞读文字为什么容易累？一是抽象含义转化为具象理解需要成本，二是无法保持长时间的刺激，让认知资源继续集中。作者很好地解决了第二个问题：问足够聪明的问题，给足够有趣的答案，让头脑有节奏地处于亢奋状态。 随手抓个栗子： 如果除了智人以外，尼安德特人或丹尼索瓦人也存活下来，这个世界会是什么模样？举例来说，宗教信仰会是什么样子？《圣经》会不会说尼安德特人也和智人一样有灵魂？耶稣牺牲自己，会不会是为了要洗净丹尼索瓦人的罪？《古兰经》会不会对所有人类物种一视同仁，都为他们在乐园里占个位子？孔子会不会说我们也要“仁者爱人”地对待尼安德特人和丹尼索瓦人？尼安德特人会不会在古罗马军团中服役，又会不会也服侍着中国庞大的朝廷？美国《独立宣言》所揭橥而坚信的“人生而自由平等”，指的会不会是所有“人属”的物种？马克思会不会呼吁所有人类物种的工人都该团结起来？也许写作真的没有捷径。对人类共同命运的悲悯、执着于求解终极问题、澎湃的求知热情、深邃的忧患意识、个人情绪的极致表达，就是那些最好的技巧。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>历史</tag>
        <tag>人类简史</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给自己开一张十年的支票]]></title>
    <url>%2F10year-check.html</url>
    <content type="text"><![CDATA[给自己开一张支票，没有金额，只有时间。十年，就是支票的金额，也是我最大的资产，能给到自己最阔绰的资源。如果拿着自己给自己的天使投资——仅有的、最珍贵的资源——要用这十年来做什么好？ 一切的节约，归根到底都是时间的节约。节约的时间用来干嘛？人想要的东西到底是什么？ 我想，大概是，哄自己开心。 那么就开心地做这几件事吧： 一、拓展(自己的)知识疆域并没有野(neng)心(li)帮全人类拓展知识疆域，只是希望把自己所在的井底，变得稍微宽敞一点儿，不再为一些无谓的小事伤神。即便get不到诗与远方，也能够少一些苟且。当然，最重要的是在开疆拓土的过程中 high 起来，把自己哄得开开心心。 经受了多年传统教育的毒害，以及十年post-school 的自我折腾，大概信服于几个公开的秘密： 1. 做知识的黑客能不能学、能不能学会，其实区别只在于心态。知识不是用来仰望的，是用来欣赏和 hack 的。学东西跟游戏里的升级打怪并无二致，需要有目标、有规则、有反馈、有自主行为，而游戏高手都会尽力破解规则，达到数值上限。 2. 通过主题和项目学习从小，我们被告知上学要上语文课、数学课、体育课……考试要求背这个那个，还有标准答案。而有趣和有效的学习过程，却都基本来自主动去研究一个领域问题，或者亲自动手把某样东西做出来。 阅读也是类似，总是今天听说某本书挺有趣，明天畅销书榜又上榜一本新书，后天刷豆瓣又添了一本想读。虽然很多真正有用有趣的知识都来自“偶遇”，但是散兵游勇地做些布朗运动，毕竟没有心机婊般高举高打来得有效——以及，能收获更多肉体和精神上的痛苦和高潮。集中一个时期密集吸收和思考同一个主题的知识和问题，能最快建立起框架索引，发现模式和本质——既然投资了时间，还是不要做亏本生意。 3. 以教为学唯一检验标准，不解释。 4. 执行意图想多做少也好，拖延也好，眼高手低也好，虎头蛇尾也好，都不需要太当回事，更不需要如临大敌地战斗。每天对着傻乎乎的大脑直接说：if then （如果8点半到家，9点之前给自己拼个乐高雪糕出来），它就照做了，霸道总裁也能成绕指柔。 二、构建小小的乌托邦人活着的引擎，是希望。没有无缘无故的爱恨，也没有天长地久的希望。悲观主义者的乐观，也许来自自我推销的乌托邦。 希望建起一个小小的乌托邦，是送给最爱我的两个人的乌托邦，也是送给自己的乌托邦。现在开始，十年时间，也许可以。 三、学习爱两个人一个是自己，一个是最爱的你： 学习怎么爱自己，想给你的那些最好的东西，也给自己一份； 学习怎么成为自己，在别人贴过来的标签之上，有更耀眼的自我标签； 学习怎么变得坚强，守护来之不易的温柔； 学习怎么全然接受你，就像慢慢学会全然接受自己； 学习怎么结伴去发现彼此的秘密，以及世界来不及细看的美好； 学习怎么跟你分享生命中那些闪光的分秒，以及易逝的纯粹和感怀； 学习怎么真正拥有，先懂得失去怎么接受； 学习即使你从来没有来到我身边，或者我没能停驻在你的念想中，我依然会是一个独特的、部分为你而独特的人。 &nbsp; 十年，出发啦]]></content>
      <categories>
        <category>HackYourself</category>
      </categories>
      <tags>
        <tag>00</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[带着镣铐跳舞的生存机器——读自私的基因[下]]]></title>
    <url>%2Fselfish-gene-2.html</url>
    <content type="text"><![CDATA[病毒的病毒，觅母的觅母续上一篇，基因力量之强大，我们已经有了很多理解。 什么是生命？基因是否只有性细胞繁殖一条通路？如果仅就“能够进行复制”这一点出发，生命并不只有一种新式。病毒就是另一种形式的“基因”，它不去操控生存机器，而是直接附着在寄主那儿，有着非比寻常的自我复制和传播扩散能力。又比如，人类发明了不一样的“生命体”、自我繁殖能力更强——文化。 道金斯再次抛出一个比自私的基因更有冲击力的概念：产生于人类文化“原始汤”中的文化传播单位或模仿单位—— Meme/觅母/模因。 曲调、概念、妙句、时装、制锅或建造拱廊的方式等都是觅母。正如基因通过精子或卵子从一个个体转移到另一个个体，从而在基因库中进行繁殖一样，觅母通过从广义上说可以称为模仿的过程从一个大脑转移到另一个大脑，从而在觅母库中进行繁殖。当你把一个有生命力的觅母移植到我的心田上时，事实上你把我的大脑变成了这个觅母的宿主，使之成为传播这个觅母的工具，就象病毒寄生于一个宿主细胞的遗传机制一样。看到这里，甚至让人产生一种阴谋论的想法：道金斯花了一本书说服读者接受自私基因的背后目的，其实是为了扩散这个关于觅母的“觅母”！觅母这个概念一抛出，立马就能在读者脑海中扎根生长。每个人的无数经验都可以用来浇灌这个幼小却挠人的概念。。 能穿越时间的事物，才是真正牛逼。财富再多，200年后呢，1000年后呢？还不是灰飞烟灭。穿越时间长廊，谁最成功？物种吗？人类吗？是基因，是模因。 这让人想到一个有趣的问题：最具病毒性、生命力的觅母都有哪些？让我试着举3个栗子来说明： 让孩子赢在起跑线一个邪恶的觅母。哪个家长听了，不会感到（哪怕一丝）焦虑？有多少不理智的投资，都是因这句话而起？有多少家长，都不自觉地传播这句话？ 三大宗教宗教和其教义，应该是生命力最强大的大型显性觅母。人们自愿且虔诚地献身于复制它的事业中。宗教就像基因，操纵着信徒建立起生存机器——宗教组织，进一步有了宗教建筑、制度、文化等等。宗教和文化，同化过无数骁勇善战的民族，帮助多少人重建了世界观（其实是替代了个体原本孱弱的文化等位基因，嗯） 时间这是个比宗教留存更久，对人类生活影响更大的隐性觅母。时间并不客观存在（关于这个的争议暂且忽略），但是从人类文明发端开始，对这个觅母的传播和巩固就没有停止过。时钟被发明，时间是不同民族和文化的公共语言，成为现代文明的根基，更不要说时间觅母成功借用“生命有限”的概念，成为现代文明的基本恐惧之一。于是似乎可以总结一下觅母的特征： 与日常生活息息相关 极易理解、可以自动脑补并具象化，形成行动号召 唤起内心深处的恐惧或欲望，是使人上瘾的 comfort不得不承认，其实我们都是各种各样觅母的生存机器。只不过，作为机器本身，我们还可以产生全新的觅母。 世界如何从此不同书读完，世界观被刷新。 我们观看世界到底获得了什么样的新维度呢？进化习得的生存策略，对我们的影响到底有多大？作为生存机器的我们，到底该追寻什么意义？我们有可能赢得进化战争吗？ 没法回答这些终极问题，但可以试着给自己列几条新的指南： 认识作为生存机器的局限性时至今日，人类大脑已经进化到一个程度，使我们得以背叛自身的自私基因。基因如何做到隔绝在机器体内而能够预测未来，是个难题。一个解决办法是预先赋予生存机器以学习能力。随着演化的进行，机器的精巧程度如此之高，基因已经将越来越多的决策交由机器自行判断。问题是，我们已经进入一个生存环境急剧变化的时代，生存机器常常来不及根据变化做出反应，更不要说潜藏在机器中间接操纵外部的基因了。人类根据基因过时的资料做出的决定，多半是错误的。作为人这类物种，我们看到蛇会本能害怕，看到高蛋白高热量的肉和糖会下意识兴奋，我们的认知始终有限，大脑容易短路而产生各种谬误…… 认识到一点，就是极好的~ 成为少数派也没什么大不了受基因操纵的我们，生活在以生殖繁衍为主题的社会中，半完成任务半享受地按照预置程序认真运行着。我们死后可以遗留给后代的东西有两种：基因和模因/觅母。但如果我这台机器的出厂设置出了点小 bug，怎么办？几乎可以预见，我这辈子在基因方面无所贡献。但反正基因库压根不缺我一台机器呀！！ 任何“主流”，无外乎是已经足够强大基因和模因/觅母的统治环境。逃出基因的手掌心比较难，但是摆脱某些模因/觅母似乎可以做到。也许我可以选择成为某些模因/觅母的机器，勤勤恳恳地传播（已经有苗头，虽然不会是任何宗教）。或者，哪天我掌握了更高阶的玩法，成为制造觅母的机器，如同我的偶像们一样，短短一生，却留下财富无数（其实都是模因）。 区分清楚敌人和朋友作为生存机器的我们，很容易陷入到个体的竞争中。但是，进化中的合作可能远比竞争带来的收益大。物种与物种，个体与个体之间最大的“敌人”，也许是制定规则的“银行家”（见第十二章），而不是跟我们的阶级兄弟。将这个原则放大到其他领域，也同样适用。我们应该在生活的哪些方面追求零和博弈，又在哪些方面追求非零和博弈呢？这是个值得经常思考的问题。同最近流行的“从零到一”风潮类似，进化中的合作告诉我们，要去寻找增量，寻找系统中不合理的规则并联合其他力量一起去打破它，然后才能获得比原来存量市场大得多的回报。 寻找新的价值只属于个体层面的价值、受基因无脑驱使而追逐的价值，其实并没有多大意思（比如生存、财富、安全感、社交）。我并不是说这些不重要，而是觉得既然这些是天然属性，本能就会使然。如果我们用 hack 游戏规则的角度来看，是不是可以通过钻研游戏规则找到一些好玩的玩法和彩蛋？有哪些能力，是我们被赋予原本用来运载基因，但是又可以为我们所用，去追逐其他更有意思的事物的？作为一台卑微的生存机器，我们是不是也能制造出穿越时间的“作品”？ 附 道金斯 TED 演讲: Militant atheism]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>进化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[报告：前方没有上帝出没——读自私的基因[上]]]></title>
    <url>%2Fselfish-gene-1.html</url>
    <content type="text"><![CDATA[一句话：这是一本早读早超生的书，评分五星。 笔记之前，介绍一下作者。理查德·道金斯（Richard Dawkins）是英国著名演化生物学家、动物行为学家和科普作家。相关资料网上很多，其中有一点值得一提，他同美国哲学家丹尼尔·丹尼特、神经科学家山姆·哈里斯和已故的英裔美国作家克里斯托弗·希钦斯常常一起被称为“新无神论的四骑士”。看完自私的基因，就能理解如果道金斯不是无神论者，那简直是见鬼了。 五星的理由升级世界观必备世界观是神马？自从韩岳父送出一句“没有观过世界，哪来的世界观”，似乎把原本扒拉在这个词上面各种装逼的外衣全撕扯下拉，露出了丫本来的面目：世界观，不就是怎么看待世界嘛。那么，看遍了世界，就可以升级世界观了么？并不是。解决问题，必需跳到盒子之外。同理，升级世界观，得通过“升维”达成：原来是一维视角，得换成二维的，世界才能跟着（在你眼里）换个模样。 人的最大局限，无外乎“时”和“空”：无法穿越时间长廊，也无法跨越星辰大海。而有的理论，却能一下子把时空之锁打开，伴随“咔哒”一声解锁，身之所处原点的横纵坐标，瞬间延伸至无尽，不但有视野豁然开朗的惊奇，更多是面对赤裸裸的新世界时感到的孤立无援。高清无码的新世界让人因为信息过载而头脑发胀、倒吸一口凉气：以前我特么都是怎么过的呀…… 以前看书少，这两年才接触这两本升级世界观的书，想来有点懊恼。一本是用来空间升维的《三体》（让你小时候不看科幻，开窍晚啊）。从三尺身躯占不到的几寸弹丸之地，一下跃进茫茫星系，在漆黑无边的宇宙黑暗森林中，尽物种之力也无法推迟哪怕一秒被降维攻击的灭顶之灾。另一本，就是用来时间升维的《自私的基因》。跟几乎永垂不朽的基因相比，人短短的一生简直短得来不及拿出手机拍照。物种的特征和习性，经过漫漫时间长河，才得以形成和稳定。一个人的爱恨情仇，又算得上什么呢？（已被洗脑状） 有趣的人，写有趣的书五星的理由，远不止惊世骇俗的论调。道金斯作为多本畅销书科普作家，深知怎么写一本有趣的书。这本书里的比喻之多、质量之高，让人恨不能想让道金斯也写写其他太不友好的学科科普。。。每每在读者将要费力脑补的节骨眼上，道金斯都能华丽丽地举出例子来帮助理解。比如用房间、书橱、设计图、卷、页来比喻细胞、DNA基因、染色体、等位基因，用桨手比喻合作的基因，简直让人忘记不能。又比如这个： 个体是不稳定的，它们在不停地消失。染色体也像打出去不久的一副牌一样，混合以致被湮没。但牌本身虽经洗牌而仍存在。在这里，牌就是基因。基因不会被交换所破坏，它们只是调换伙伴再继续前进。跟专业的科学论著不同，看道金斯的书，读者能感受到自己的存在，感受到这位立场鲜明的斗士时时刻刻在与我们对话，巧妙推销他的理论。无论是絮絮叨叨的实验描述，还是狡黠的自问自答，一位内里不老实但装作一本正经的萌萌哒教授形象，总是不经意浮现出来。 安利了那么多，是时候复习一下书中的精华了。 生命和进化的秘密虽然书名是“自私的基因”（道金斯自己都承认书名并不理想），这本书的重点绝对不在“自私”而在“基因”，而且自私也不是我们理解的个体、主观的、道德意义上的自私，而是一种盲目的、无意识的、近乎出厂内置程序一般的生存命令，更多是自私的行为本身。 这本书惊世骇俗的观点，首当其冲是生存机器。驱动生命演化、生物生存繁殖的主角，是基因。而种类繁多的生物，都是基因用于繁殖演化的生存机器。个体会灭亡，基因却不朽。 ps 道金斯对基因的定义：染色体物质的任何一部分，它能够作为一个自然选择的单位对连续若干代起作用。 生命最初从“原始汤”中偶然形成，其中有一种特殊的分子，属性逆天——能够自我复制。于是，生命的演化由此拉开序幕。生命的本质，就在于复制。不但得生存时间足够长、有数量保证，而且需要精确 copy 和 paste。当然，各种差错肯定会发生，但这又正好为更利于生存的变异提供了可能，最终形成了自然生态的终极大法——多样性。 道金斯指出，进化的单位是基因，而不是个体，不是种群，也不是物种。从基因的利益（这里可以理解为生存的机会）出发，才能解释看似矛盾的利他现象。复制基因的出现，不仅仅是为了生存，还是为自己制造赖以生存的容器，也就是各种生物体。能够生存下来的复制基因，都是那些为自己构造了生存机器以安居其中的复制基因。 演化到今天，远古时期的复制基因们安稳地寄居在庞大的“机器人”体内，通过迂回曲折的间接途径与外部世界联系，并通过遥控操纵外部世界。它们存在于我们的躯体内，创造了我们的肉体和心灵，而保存它们正是我们存在的终极理由。今天，我们称它们为基因，而我们就是它们的生存机器。 自然界上演的好戏——生存博弈基因的生存机器们就这么日复一日、年复一年地履行着使命：帮助基因扩大在整个基因库/池中的数量。随着时间的推移，复制基因为了保证自己在世界上得以存在下去而采用的技巧和计谋也逐渐改进。基因驱使物种不断调整以形成稳定进化策略（达尔文“适者生存”的含义可以理解为稳定者生存），不同物种之间的策略相互纠缠和影响，形成了自然界蔚为壮观的生物景象。 成功基因的一个突出特性，是无情的自私，基因的自私通常会导致个体行为的自私。个体的自私会引发种群内的竞争，以及种群间的进犯与防守。事实上，自然界是一个充满博弈的地方。对一个鸟妈妈来说，到底该生多少鸟蛋，孵出多少雏鸟能都养活，生育所需精力如何与自我生存、种内竞争、抵御天敌进犯之间取得平衡，绝对都是超出脑容量的复杂判断。基因怎么办？在足够长的时间内操控生存机器进行冒险试验，最终达到动态平衡，即形成进化上的稳定策略（Evolutionarily Stable Strategy，简称ESS）。书中有大量例子，此处略过。 道金斯在这部分讲解了博弈论，特别是如何用零和游戏和非零和游戏看待进化策略形成，非常有趣。基因和生物之间的博弈，不仅发生在个体层面，甚至很大程度上影响了两性细胞的形态、两性分工、父母与子女的关系等等。如果我们把父母对子女无私的付出理解为对繁殖进行投资（收益者体内存在同样基因的可能性更大），如果我们理解女性因为对后代投资更多而在两性关系中处于劣势地位，如果我们发现性细胞如此迥异的形态和特性，其实来自于性细胞极端专业化的分工……难道不会对世界有全新的看法么？ 比如，取书中一个问题举例：为什么生命要选择费力的减数分裂而不是更简单的有丝分裂？一个合理的解释是：“促进了在单个个体内积累那些以往分别出现于不同个体内的有利突变”。更加富有想象力的回答是“有一种操作其他基因中拷贝错误率的基因，如果交换对负责交换的基因有好处，这就是存在交换现象的充分理由”。 又比如在“两性战争”中道金斯总结道：在动物界中各种不同的繁殖制度——一雌一雄、雌雄乱交、“妻妾”等等——都可以理解为雌雄两性间利害冲突所造成的现象。雌雄两性的个体都“想要”在其一生中最大限度地增加它们的全部繁殖成果。由于精子和卵子之间在大小和数量方面存在根本差别，雄性个体一般来说大多倾向于雌雄乱交，而缺乏对后代的关注。雌性个体有两种可供利用的对抗策略：大丈夫策略和家庭幸福策略。 自然界太有趣，这种有趣因为有了生生不息、精于繁殖演化的基因，而变得五彩斑斓光怪陆离。 （笔记上篇完）]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>进化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[7月读书笔记]]></title>
    <url>%2F150816readingnote.html</url>
    <content type="text"><![CDATA[7月一直没有发笔记，罪过。这个月还是看了书的，不过都是四星或以下，就偷懒发个合辑吧~ 什么是战略这本书是定位之父特劳特的经典。内容不多，读起来有点像大字报。想占领读者心智的作者，力图把几个观点“敲”进我们的脑袋。 看看章节标题，基本就算看完半本书了： 战略就是生存之道 战略就是建立认知 战略就是与众不同 战略就是打败对手 战略就是选择焦点 战略就是追求简单 战略就是领导方向 战略就是实事求是 看到这里不难理解为什么豆瓣上有不少二星的评分，简直是三大注意八项纪律的风格。不过抛开设计不太合理的篇章结构，特劳特对战略的理解还是很值得再三体会。 迈克尔·波特说：“战略就是创建一个有利的定位”。定位是神马？特劳特指出，定位不是在市场上面的位置，而是在客户心智中的位置——是人心中一闪而过的印象，这一品牌感知或说快照，在瞬间就决定了顾客是否接受你的产品。因而，商业组织之间相互竞争的是顾客心智，对公司而言最有价值的资源，是品牌所代表的心智资源。 战略就是让你的企业和产品与众不同，形成核心竞争力。对受众而言，即是鲜明地建立品牌。 心理学和认知科学告诉我们，人类的注意力非常有限，尤其是工作记忆，基本只能容纳7个组块。心智不但容量有限，还厌恶混乱，经常缺乏安全感，并且拒绝改变（任何改变人们态度的计划都会十分艰难）。顾客的心智就更加有限了，每天要面对爆炸的信息量、多如牛毛的品牌，要做成千上万的决策。再加上商品之间竞争激烈，每个品类基本只能给两个品牌留下心智空间，这就是定位理论中的“二元法则”。 定位和战略的结果是与众不同那么，如何定位？如何制定品牌战略？ 定位就是如何在顾客的心智中实施差异化，使品牌进入心智并占据一席之地。大脑喜欢惊奇，大脑喜欢情感，大家都有的功能、特性、风格、价值观等等，根本不值得拿出来说。进入顾客心智的唯一方式，就是做到与众不同，而定位就是要想好怎么与众不同。 而战略，负责如何做到与众不同。战略并不复杂，复杂的只是市场和信噪比太低的情报。战略全力打造理由，打造顾客买你的产品而不是选择竞争对手产品的理由，解决的是企业如何进入顾客心智而被选择的问题。 给顾客一个无法拒绝的理由，就这么简单。 战略的成败取决于是否将顾客心智视为战场。 战略和战术战术是如何进入顾客心智，是一个有竞争差异的心智切入角度。战术以传播为导向，让顾客接受概念。战略以产品、服务或企业为导向。 战略目的就是配置企业资源去促成战术优势实现，最大限度地利用和张扬战术优势。战略不是目标，而是企业一致性的经营方针。战略始终指向所选择的战术，整合企业所有的资源和运营活动，包括产品、价格、分销、广告—所有的一切，以促使战术的达成。 所以在特劳特看来，先定战略再定战术是瞎扯，而应该是战略全力配合战术，营销战术导出企业战略（营销大师真是用绳命在摇旗呐喊）。战略负责做好全局规划，以达成与保持竞争优势。 有效的领导，就是深入地思考组织的使命，鲜明地定义、建立它。领导者订立目标，订立优先次序，订立并维持标准。领导者必须把精力集中在顾客心智上，而顾客心智不受管理人员控制。 问题定位理论毕竟兴盛于上个世纪，是否能完全适应今天的商业环境呢？过去，消费者接触商品信息，做出购买决策，主要都是通过广告或是商场里看见产品后的短暂感知。所以之前的品牌特别强调认知快照。但是今天，产品、品牌与顾客的互动更加立体和多元，也许需要从多触点的长期交互考虑，而不是高举大锤，期望一次性敲入品牌认知。 找到与众不同的定位固然没错，但我们需要新的玩法了。 商业设计 大公司创新为什么难？这本书能告诉你答案。 公司从无到有，从小到大，会趋向于采用分析思维进行各种决策，以避免风险。但是各种数据、逻辑、分析，不一定指向最终的效果。以分析思维为代表的“可靠”和以直觉思维为代表的“有效”，看似水火不相容，但是成功的企业必须在取得两者平衡的基础上持续成长。可靠性目的是产生一致、可预见的结果。有效性目的是产生可以满足预期目标的结果。 想要产生新知识，需要运用溯因逻辑，溯因逻辑即“可能是什么”的逻辑”。 设计活动以探索谜题为起点。 设计思维是指运用设计师的灵感和方法,设计出技术上可行,战略上可取且能满足顾客价值并抓住市场机会的思维方式.– tim brown 商业领域的设计思维主要包括三个重要组成部分： 深入、全面了解顾客； 将各种可能性形象化、模型化并不断修订和完善； 创建全新的活动体系，将最初的设想转变为实际操作 为了能够创造出一个平衡有效性和可靠性的运营环境，企业需要从全新视角来分析组织的三要素：组织结构、运营流程和文化规范。 项目导向型组织结构在那些根据不间断的连续任务来配置资源的公司中，每个职位、角色都已被严格设定，员工智慧把分内工作归结为“我的责任”，而不是“我们的责任”。他们只局限于自己的个体责任，全然不顾他人的责任和贡献。 推动知识跨越知识漏斗最好的方式是项目制，也就是在既有条件的约束下，将某个问题从谜题推进至启发，或从启发推进至程式。“以工作整合人员” 设计师的工作模式是：先设计出作品雏形，再广泛收集反馈意见，不断改进和完善。而管理者的行事习惯是直接提交最终成果。持续修订，构建雏形，征求意见，精炼完善，剔除瑕疵，反复运作。 构建支持创新的流程财务计划传统财务流程意在为高效运行现有启发或程式提供优质服务。然而为了实现有效性，财务计划应当只为那些致力于推动知识发展的活动设定预期目标和成本上限，不要有过多的其他约束。 薪酬体系设计工作室一般只为那些能够解决棘手问题的员工支付薪酬。塑造一种问题解决型的组织文化。 塑造能强化设计思维的文化氛围建立全新的行为规范，即影响员工行为的隐形规则和指导方针。对有效性导向的设计思维者而言，约束条件可以帮助他识别出创新的核心和精髓。约束条件不是告诉我们哪些事情难以做到，而是帮助我们重新界定需要解决的新问题，并找到新的发展机会。 应对阻力推行设计思维有三个主要障碍： 分析思维积累的学习优势 关键利益相关者的可靠性导向 可靠性和有效性之间的激烈对抗 当团队是出于创造性目的或围绕某个棘手问题而聚集在一起时，大家愿意每天都来上班。如今，为那些最顶级的创新人才提供一项颇具挑战性的设计任务，这可能是公司留住优秀员工最有效的措施之一。 CEO 必需将自己定位为平衡组织可靠性和有效性的守护神，建立并维系相应的组织结构、业务流程以及准则规范。 ps 某个部门离消费者越远，其可靠性倾向就会越强。 构建设计思维知识体系个人知识体系由立场（我是谁？我的目标是什么）、工具（通过哪些工具、运用哪些模式来梳理思维和认知世界？）、经验（拥有哪些经验才能提高敏锐度和技能水平？）组成。 所谓专业度，是能够几乎本能的感受到重要的细微差别。一个人形成知识体系的起始方向非常重要，一旦在既定方向下开始培养知识体系，这个方向就很可能会被强化和放大，而很难被削弱或更改。 立场 设计思维者从来不会盲目幻想这个世界崇尚有效性或鼓励探索性，他们试图平衡可靠性和有效性，为了取得有效性结果而适当放弃一部分可靠性。设计思维者的立场是探索未知领域，拥抱可能带来的惊喜的各种机会，乐于处理那些在诸多方面尚不明确的复杂难题。 工具 观察、想象（推理-检验 循环）、构造。溯因逻辑得出的结论不能被提前证明，这个缺点反而创造了机会：它指导人们不断修改和完善现有雏形，让人们持续开展新测试、得出新推论、提出新雏形，直到最终形成杰出的成功设计方案。构造：如何才能让你的深刻见解和全新方案与你负责的商业体系融为一体。 经验 即使每次只做出一点点改变，也要通过不断培养独创性来有意识地坚持抵制这种消极趋势。 高效合作为了能够于处于可靠性和有效性两个极端的同事有效合作，设计思维者需要做好： 不再盲目反对极端直觉思维者和极端分析思维者的意见，而是将不同观点视为推动自己提出创造性解决方案的有利机会 换位思考，用移情方法理解两个极端的立场 学习并掌握有效性和可靠性两种语言 把大家不太熟悉的陌生概念，转化为人人都能听懂的通用语言（如类比，其他组织有类似的做法） 如果需要用证据证明自己的观点，那么应该以对自己最有利的方式来调整证据的数量、规模或表现形式。 设计思维者想要为直觉思维者创建一个富有成效的组织环境，唯一可选途径是移情互动、换位思考。 可靠性导向的人把未来当成敌人，把过去当成朋友，所以设计思维者的关键任务之一是设法把未来转换成过去（比如迭代）。 看完这本书，稍微有点绝望。很多事情必须得自上而下推行。 信任代理 有些书存在的意义是把某些问题讲明白。而有些书的存在，则是制造了强大的模因（meme），比如这本书。 有些秘密，原来早已公诸于世，只是我们视而不见。 创新者的思考 大前研一教你思考商机~ 翻翻即可 超级时间整理术诶，第一点还蛮值得参考并行动的，其他内容都太泛泛而谈了。两星。哦，第一点建议是：清理不必要的东西。—## 只有医生知道 推荐给所有妹子。 协和产科医生写的书，语言平实而不失趣味。刚开始看的时候，脑补各种惊悚画面，导致睡前根本不敢翻开。过了两天慢慢适应，果真应验了那句话，恐惧来自未知。 普通人都对自己的身体知之甚少。很多的健康问题，包括医患关系的紧张，其实都来源于恐慌、无知和沟通不足。身体是自己的，就应该负起责任，了解它，保护它。在颇为让人绝望的体制和残酷现状中，“治未病”远比“治病”更难却又更重要。 只有医生知道2 我也会继续看的。 滚蛋吧肿瘤君 生命总是会闪光，不要等到告别时才珍惜。 熊顿已经离开两年，电影也快拍成，她留下的力量还在鼓励着越来越多的人。 就是因为看完这本，才有冲动翻开了 只有医生知道 。 睡眠的科学 因为失眠，买来这本并不在兴趣范围内的书。原来，我们关于睡眠有着那么多的误解。 睡觉并不是浪费时间。 睡眠可以分为5个阶段：4个非眼动睡眠阶段和快速眼动睡眠阶段（REM）。大脑在 REM 时期活跃度甚至超过清醒时，大部分的梦都发生在这个时期。 浅睡阶段能巩固程序性记忆，深睡阶段让身体修复，REM 对记忆和学习有重要意义，更隐藏着大脑的很多秘密。 想要更高产、更富有创造力？不是通过少睡挤出时间，而应该： 多，睡，觉！ 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为真实世界设计]]></title>
    <url>%2Fdesigning-for-the-real-world.html</url>
    <content type="text"><![CDATA[大家好,我是一个 (互联网公司的) (做了多年界面设计的) (交互) 设计师. 你在看这篇文章,我猜测: 你或许也是设计师,至少是互联网从业者,再不然也听过交互设计、体验设计、服务设计、o2o 设计之类的名词 你每天使用手机,戳屏幕不下500次 当然,下面的猜测应该更靠谱: 你生活在地球 吃喝拉撒睡不靠戳屏幕完成 一周以内,你总需要离开卧室,跟其他人见面和说话 相信你明白”真实世界”的含义.我们常说的(人机)交互设计,大多发生在一个小小平面内,而不是真实环境中.今天,我想分享一下回到真实世界的感受. 来自火星的设计师在设计师们的火星语中,体验设计、交互设计、o2o 设计大概说的都是一个意思: 如何让用户 happy 地做些他想做的事情.设计师的工作是提前想好一些路径,把用户看到的东西,做成容易看懂和容易使用的样子,帮助他们达到目的.在二次元中,设计师们做得还不错: 有一天,火星上的设计师听说了”智慧生活”的图景: 吃饭,不用找地儿,不用等位,不用喊服务员,不用等半天不上菜,不用担心结账不够现金 逛街,知道好东西在哪买,不会错过超值的活动促销,不担心售后退换货 出远门,不用排队买票,知道哪种交通方式最便捷,不用扛着大包小包赶时间 生病了,不用爬着去医院排队挂号、排队看病、排队检查、排队拿药… ….. [此处有广告: 智慧生活更多行业解决方案,请关注”微信支付商户通”公众号] “智慧生活”这个词汇本身好像在提醒我们,真实的生活场景中,处处都还不够便利呀. 听到这里,设计师们心中燃起火光,觉得终于可以大干一场,于是坐上飞船来到地球. 欢迎来到真实世界自从踏上地球表面,一股气场从地表汹涌而来(简称”地气”),把设计师们震得心慌. 难道这就是传说中的Culture shock ? 被地气 shock 的表现往往是这样的: 又比如说,看电影不仅仅是: 还是这样的: 旅游不仅仅是看攻略: 还有各种万万没想到: 在真实世界中,很多火星上通用的法则似乎都失效了. 以前,设计师拿出一个方案,大家会 blablabla, 说这个按钮不对,那个输入框阴影多了一像素.可现在,一个方案抛出来,大家没什么反应,要不就是没法推进. 为什么? 设计师们感到了不安,拿出火星设计手册,一条一条对照着思索起来. 列到这里设计师,恍然大悟 原来,我身在地球呢! 地球人不理我,也许因为: 没有解决他们关心的问题除了好看不好看,还有太多头疼的问题等着地球人: 今年业绩要达到 xxx, 该怎么办 商场里的商户都要求改进统一收银系统,缩短核销周期,这个月我手下有没人可以干这个事? 上级部门下周来检查工作,精神文明的宣传都得挂在最显眼的地方 租的这个场地下个月到期,要搬哪里 顾客最近抱怨服务员态度不好,是哪里出问题了? 老板说微信粉丝不到10万,不批活动经费,该怎么涨粉? 客户说想在公众号里查询购买记录,可是上半年没有开发经费了,怎么办? … 方案没有考虑周全 “我们这里 wifi 信号不好,这个能用吗?” “那个地方光线暗, 你这个二维码看不清呢” “车主取车都会从另一侧电梯下来,这边没人走” “哦,顾客结账前已经知道了,你放这里没人看” “上级部门有要求,这个不能搬走” “来这玩的人都在网上买好票的,售票员推荐也没用啊” “你把保险取消了,我们收入减少一半,给条活路啊” … 甚至连用户都不够了解 “扫一扫是用什么扫啊?” “你们有宣传吗?我怎么没看到?” “那个东西没用过,我还是习惯这个” “有优惠吗?没有的话我干嘛费这个力气” “我的手机好像不支持…什么,要先升级版本吗?” “朋友都说用那个就行,你这个好像有点麻烦” … 于是,Culture shock 的原因也就明了: 需求不明,业务不熟,不懂用户,行动瘫痪 与不确定性共舞,为真实世界设计适应了地球文化,接受地气熏陶后,设计师们开始痛苦的反思. 我是谁?我还是设计师,但不能只以界面体验和可用性要求自己. 世界上本没有不会动手的设计师,分工细了,技能也就越来越残缺不齐; 世界上本没有全栈设计师,不全面的设计师多了,全栈带上了褒义色彩 为谁设计?说好的用户体验设计呢?说好的以用户为中心呢? 没错没错,即便在商业中,为客户提供服务才是最终的价值所在.可这毕竟是 Business, 如果没有聪明的模式, 在多方利益中找到微妙的平衡, 怎么持续? “用户体验设计”前,需要加上定语 “可持续商业模式下,对现阶段商业价值最大化的客户体验”.也就是,为人设计,为商业运营设计,或者说 为真实世界设计 设计什么?设计需要处理的,不再仅仅是界面上元素之间的关系(谁有谁无,谁大谁小,谁先谁后),还包括用户和界面的关系,更重要的是,用户和整个服务系统的关系.更进一步,设计不能只关注方案,必需花更多的精力推进设计实施. 于是设计师的职责变成: 1. 设计环境要素(包括互动界面),改变消费者认知和行动,帮助他们达成目的,从而达到商业目的 2. 平衡多方利益,影响合作方和团队,完成 1 的目标 这其中的难点包括: 真实环境是什么样?用户在这些环境中是什么样? 跟商业目的相关的用户认知和行为是什么?要改变什么(真的可以改变吗)? 环境中哪些要素是重要的?哪些可以设计? “界面”有哪些(人也可以是界面)?各自发挥什么功能? 有哪些利益相关者?他们直接的关系是什么?利益是什么? 合作的基础是什么?团队的能力是什么?合作目标是什么?可行性在哪?资源如何获得? 问题是什么?解决方案是什么?如何衡量? 这些问题,在火星上并不常见.原来,火星和地球上的游戏规则并不一样,最终的大 BOSS 也不是同一个物种呐 : 地球真心不是个只靠脸吃饭的地方呢! 设计师的武器面对如此复杂的局面,设计师该怎么办?人微言轻,还不懂业务,人家为什么愿意听你的? 别怕,我们好歹来自火星,一定有可以跟地球人交换的技能: 对用户的理解我们知道如何跟海量用户打交道. 体验不好如何导致转化率低. 什么样的营销方式更有效 设计语言选一些对方做的设计,提出改进建议,或者直接做出优化. 团队资源是否可以资源互换?我们可以促成更多甚至是异业的合作. 现学现卖某某最近做了一次活动效果很好,不妨试试. 建立关系和沟通渠道之后,再齐心协力去解决问题,进一步建立起信任关系. 如何解决问题第一步:沉浸到环境中 到现场了解运营状况,观察消费者行为 向合作方获取行业信息,运营现状 跟其他利益相关者接触,了解他们关心的问题 第二步:发现机会,定义问题 明确各利益相关方的商业目的、利益关系和角色(谁是主导) 梳理出与商业目标相关的用户行为 寻找现实与理想中用户行为的差距 商业模式画布.jpg 第三步:提出方案,探讨可行性 栗子打算另写一篇,此处省略5千字… 如何保证设计实施 与各利益方沟通,建立关系和对话渠道 理解对方的需求,提取共同目标和利益,强调价值点 投入时间和精力,把方案细化到可以直接落地执行 灵活应对各种变化,快速行动 四.旧身份与新世界火星一日,地球已三年. 设计师们渐渐明白,服务对象变了,场景变了,问题也变了. 那么我们自身需要做些什么改变? 当问题不再是我们熟悉、可控的界面,互联网设计师的价值还存在吗? 在新世界中,价值不再由职位定义.设计师在真实世界中可以扮演不同角色: 浅层介入:完成被分配的需求 中度介入:协助者,补全必要环节,发挥设计能力解决问题 深度介入:协调者,提供完整方案,对执行和质量负责 能创造价值的人,必然有存在的价值.创造价值不能只靠头脑风暴和评估,得靠动手解决问题和达成目标. 再次,欢迎你,回到真实世界. 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>设计</tag>
        <tag>交互设计</tag>
        <tag>o2o</tag>
        <tag>体验设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[未来已来 --- 读「新经济,新规则」]]></title>
    <url>%2Fnotes-of-new-rules-of-new-economy.html</url>
    <content type="text"><![CDATA[人类一向喜欢预言.从远古时期开始,如何顺应变幻莫测的自然,填补对未知的恐惧,一直是人类的重要课题.比预言本身更有趣的,是人类对预言的态度—浑然不觉?惶惶不可终日?明白了要活在当下?更常见的情况是,面对难以理解的预言,人们往往只能用少得可怜的想象力尝试理解,却发现是徒劳. 可是今天,我们与预言者同在.远见和智慧都可以被具象化,被书写和传播.这让身在新的技术和经济浪潮中却不自知的我们,有机会登上漩涡中一片高地,停留片刻,稍作观察.待到重新回到浪潮中,对秘密了然于胸的人们,也许可以不再随波逐流,成为弄潮儿. 未来已来,只是分布不均.一起看看 KK 在「新经济,新规则」中给我们描绘的全新图景吧. 新经济新经济是属于科技的经济.科技不再是文化的副产品,它正在用更深刻的力量揭示着属于新时代的规律.科技虽然不能解决所有问题,甚至解决不了大部分问题,但是它做到了一件事—提供可能性和更多机遇. 在新力量主导之下,产生了新的秩序.这股力量不再仅仅是一只看不见的手,它已是强大如气压和洋流一样的存在—虽不可抗,却大音希声,大象无形,身在其中,几乎难以感受它的力量. KK 对预言者的秘诀并没有太多保留: 在对于网络经济如何运行的理解方面,生物隐喻比机械隐喻要有用得多.同时也给出了最朴素的建议:成功的基本规则是永恒不变的:专注于客户服务、提高产品质量、超越对手的表现、乐在其中. 新规则1.蜂群比狮子重要在丛林中,位于食物链顶端的狮子,数量较少,相互之间不需要太多协作,不必也无法形成网络.而蜂群的社群组成和结构则完全不同,还有那极富规则和韵律的蜂巢,节点之间几乎完全平等,并且建立起有序而紧密的连接.节点和连接,正是任何网络的要素.蜂群的隐喻,对应的是新经济中最重要的特征. 未来,一切实体都会带有芯片,一切都将连成一体,相互感知和通信.这意味着什么? 一切都是实时; 信息传递不需要中介; 模式大量涌现; .... 低智能的超高数量连接,能产生聪明得难以置信的智慧.暂且称之为”臭皮匠效应”好了.我们的大脑,我们的人体,全球广域网,都是这样的连接的产物. 自上而下计划经济式的思路,越来越无法适应无所不在的复杂性.在复杂系统中,中心不需要直接连接所有分支,许多简易的部件相互连接,就可以形成某种程度自治的松散组块.就像编程语言中的模块化和接口封装. 互联网的经验告诉我们,推动大众化网络连接最可靠的方式,是开拓草根民众的力量,去网罗、连接最分散的底层力量.加速网络中的信息流通,横向、向外、相互的流动,而不是中心化的流动. 网络经济的游戏规则是,去发现那些曾经以为太小而被我们忽略的事物,让它们用最合适的方式去拥抱集群.如果说技术成功的标准时让人们对它习以为常,那么最好的长期策略就是去开发那些最终会与我们的生活融为一体的产品和服务.KK 如是说. 2.级数比加法重要从前,线性规律是解读世界最重要的规律.我们从可见的事物中推断出因果,认为已经获得真理.如今,我们掌握越来越多的”数据”,了解到事物本身客观存在的很多”侧面”,才发现原来”因果”是那么脆弱.大数据时代,相关代替了因果. 在各种相关关系中,有那么一些节点,它们之间一旦建立联系,规模呈指数增长.这就是上帝赐予的秘密武器—复利.网络中每增加一个新成员,就会增加很多链接,价值也就越大.想想梅特卡夫定律和回报增值定律,随着网络用户增多,网络的价值在迅速膨胀,这种价值的急速膨胀又吸引更多的用户. 等等,回报递增说的是马太效应?富则越富,最后岂不是变成寡头?网络内在逻辑是降低价格提高质量,本质上不促成垄断形成.因为当竞争收到遏制时,创新也会受到影响.在新的经济秩序中,创新远比价格重要. 网络的确切定义:技术性矩阵的有机行为.网络催生联结,联结催生反馈循环.你正在孕育的增长,是只能依靠单一团队的直接努力,还是具备回报递增、开放体系特点的网络效应? 3.普及比稀有重要 一块虽小到却能不断变大的馅饼才是最大的.供需关系是经济学中最重要的关系,我们对供不应求的理解特别深刻.稀缺意味着需求,意味着价值. 网络经济告诉我们,流行比稀缺有效百倍,流通比占有重要百倍.普及可以驱动价值,开启封闭的系统,以及创造海量机会.人人都有邮件地址并能向任意一人发送邮件,于是电子邮件成为了互联网最为基础的服务. 普及本身不再意味着因廉价、供过于求而导致饱和,而是通过创造系统和标准,极大提升生产和管理效率,满足每个单点的需求.普及意味着 meme 正在发挥作用.普及之所以盛行,不在于边际成本降到最低,而是普及之后将产生无与伦比的价值. 网络经济中任何动作的价值,会随着网络传播呈指数增长,所以,尽可能多接触网络吧.最大限度地给予别人机会.吸引别人来以你为中心提供新的服务,或者附加到你的产品中. 4.免费比利润重要供给和需求,一直由资源的稀缺性和人类的欲望所驱动.如今,出现了另一股力量:科技.科技创造需求,然后提供供给. 所有能被复制的东西,无论实体还是虚拟,都遵守价格下降曲线,质量提高而价格下降.聪明的公司利用学习曲线,非常聪明的公司通过各种手段增加产量来加速学习曲线.如果价格不断趋近于免费,那么更好的策略是先人一步推行低价. 人人都用微信,秘密不在于免费,而是人与人、个体与内容提供方、个体与服务提供方的沟通联系,都在这里完成.所有人连接起来之后,在微信上流通的信息和服务,已经远远超出了一个通讯工具本身的价值. 公司如何在免费文化中生存?首先,把免费当做定价的终极策略.第二,核心产品免费的同时,高价出售其他服务.第三,遵循低价免费是为一项服务或商品最终免费做预演.免费思想会逼迫你想出更好的商业模式. 在新科技的世界里,真正稀缺的是什么? —是人的注意力.免费赠送吸引人类注意力或思想份额,然后转化成市场份额. 5.网络比公司重要把节点联系起来,让节点之间的信息和互动快速流通,价值将被成倍放大.人不会因为一个公司多牛逼而停留,但会在一个网络中不可自拔. 人们为什么会加入到网络中来? 网络给予我们全新的身份认同,个人的忠诚从公司转向各种各样的网络平台和社区. 商业网络本质上是一个生态群落,参与者的身份越多样化越好.网络经济中,每次交易所花精力越来越少,但建立这些交易间的共同准则所花费的精力越来越多.公司主要关注点已经从公司价值最大化转向网络价值最大化. 制定标准的才是最大的玩家.但是标准未必意味着强硬的准则.微信对公众号的引导,更多通过提供”能力”和”工具”完成,而不是冗长的制度规则. 做科技决策时,总是选择连接更多的连接、更开放的系统、应用更广的标准. 6.空间比场所重要(还在大学读地理专业时,就很想探讨地理与网络空间的关系,可惜那时不知道 KK…) 新经济在虚拟空间中而不是在场所中运行.能够突破物理坐标系的限制,意味着网络经济获得了更高维度的空间和能力.任何地域之间的信息传递,几乎已经没有时间差.空间中也不会因为实体增加而变得拥挤,于是无限连接成为可能. 网络经济打破了许多产业的中间环节,甚至让供需两端直接产生交易.那么,中介真的会消失吗?并不会.当货架无限延伸后,只要匹配不是自动发生,即选择权只要还在消费者(需求方)手里,中介必将继续存在.因为需求方的注意力成为稀缺,中介的价值在于帮助供给方获得需求方的注意力,以及帮助双方完成交易. 更进一步,网络中所有节点都是中介.因为供给方不再是一个节点,而是整个网络(至少是局部网络中的许多节点).当我购买了一个团队协作的服务,也许有 A 节点为我提供带宽, B 节点提供成员管理,C 节点提供工具界面, D 节点提供支付和售后….. 网络经济为中间市场提供了新的机会.中间市场的困境是什么?我们可以通过目录和索引,直观了解一本书的观点.也能通过图书馆目录了解几百万本书中的观点.但是很难知悉某个专业领域中一万名专家的观点.互联网为解决这一困境提供了绝佳工具.每个人都有能力培育自己的网络.无数社区的存在,就是中间市场繁荣的最佳证据. 7.信任比技术重要网络中的各种连接都是在建立一种关系:公司之间、客户之间、公司与客户之间、客户与政府之间、客户与机器之间、机器与物品之间…(关系经济意味着互动、对话、界面会越来越重要,交互设计师们,加油啊)生产力的重要性越来越低,建立关系和创造对话成为最主要的经济活动.互动越多,学习就越重要,关系与信任就越有必要. 网络经济中,客户与公司员工之间的界限经常消失不见.那些排队使用 ATM 的人是高度进化的银行客户,还是不计报酬的银行柜员?当你在家做血压检测时,是不是同时在帮助医疗保险公司节省了一个有开支的环节? 为了创造客户想要的东西,用户和制造者之间必须有大量的信息和信任交流.每一次互动,都是增进了解的机会.为客户定制产品,只能记忆偏好,然后在客户表达喜好前猜测客户想要什么.这是衡量任何亲密关系的标尺. 大量领域的专家都出自最狂热的用户.谁拥有最聪明的客户,谁就能获胜. 8.造山比登山重要生态系统总是处于动态平衡之中,不稳定、不均衡是常态,最优化不会持续太久. 在网络经济中,想要知道哪座山最高并非易事.一个向着顶峰新市场攀登的公司,爬的可能只不过是一座小山丘. 一代科技取得成功会产生一个副作用,公司关注点会缩窄,对拥有新一代技术的竞争者视而不见 –&lt;掌握创新的动态&gt;,厄特巴克公司越好,退路越少.一个公司能力越是综合,想只通过微小改变来转型就越难.因此成功公司在高度变化的环境之中更容易失败.在山顶回退,是为了避免短见,避免被意气风发遮盖了不远处更壮丽的高峰. 9.机会比效率重要在工业时代,工人们的任务是找到把工作做得更好的方法.网络新经济的力量崛起后,和谐不再,乱流涌现,问题变成了”做哪那一份工作才是对的”. 创新就是颠覆,永恒的创新即持续的颠覆.一滴水如果想永不干涸,必须融入到江河湖海中,随潮流而动. 面对流变,只能拥抱变化. 在新经济环境中的最优系统,是那些规矩少,临近混乱的系统.在系统中,成员之间形成足够共识,相互约束以避免陷入无政府状态.但是重复、浪费、不完整信息以及低效等弊病比比皆是.但低效也是艺术、新模式、新观念、亚文化群等的来源.低效换来的是灵活,随时调整和创新,这样才能在流变中把握住闪现的机会.创造更多新机遇,比起优化现状,收益要大得多. 勇于面对混乱吧.与其一直解决问题,不如在流变中持续学习,寻找真正的机遇. 新经济下的自问自答列表 什么是原子该干的?什么是数字该干的? 是否参与到了更大区域甚至是全球的流通?加速了什么流通? 是建立网络,还是只有零散的节点? 节点是什么?与其他节点的关系如何? 有没有提供帮助节点建立连接的途径和工具?建立连接的速度有多快?是线性的吗? 节点联系是否带来指数级增长? 你提供的产品或服务最终会免费吗?你能免费赠送什么而不索取回报?赠品如何进入良性循环? 什么样的人愿意加入你的网络? 他们之间可以建立什么关系?你如何帮助他们? 你有能力制定标准吗? 怎样才能让数据流经实体物品呢? 公司的竞争力由哪些技能组合构成? 每一次看似成功的尝试,有没有更有趣的替代品? 你的客户享受服务时,也在帮你产生内容或者制造价值吗?怎样帮助他们? 怎样的投入让客户的替换成本很高? 你拥有聪明的客户吗?你能帮助客户变得更聪明吗? 什么是对的事情?怎样预判出机遇? ……这真是个没完没了,有趣之极的问题列表 不是结语的结语 &nbsp; &nbsp; 欢迎来到混乱、迷人的新世界 &nbsp; &nbsp; 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>KK</tag>
        <tag>互联网+</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[升级你的设计思维]]></title>
    <url>%2Fupgrade-your-design-thinking.html</url>
    <content type="text"><![CDATA[上周在深圳湾听了熊子川的讲座”设计思维和精益创业”,获益良多.分享的内容已经公开,但还是觉得很有必要整理出自己的心得. 重新理解设计思维去年写过一篇文章 说说设计思维,整理了当时对设计思维的理解: 以人为本 开放和创新 过程和试验 可视化 之前对设计思维的理解偏向”设计”,想理清设计在哪些方面区别于其他思维方式.听了子川对设计思维的剖析后,发现应该把重点放在对“思维”的理解.思维关乎观念和立场,是抽象的可复用的,如果只能在设计活动中使用,那不能称之为”思维”,顶多是方法和工具. 那么,离开设计,设计思维还能如何帮助我们思考和解决问题,以及带来哪些价值? 设计活动的本质我们来重新考虑一下:设计是一项什么活动? 设计是为解决问题/达到目的而做好提前安排.设计不但强调”目的”,同时是一项关于”安排”的工作,所以再怎么强调”过程”也不为过. 设计本质上也是 Problem solving 的问题,只不过更强调: 解决人的问题 可视化 追求最和谐/平衡的关系 那我们再来想想 Problem solving 的关键: 准确定义问题 理解遇到问题的人 充分掌握问题产生的上下文信息 从现象推导出真正的问题 提出优质解决方案 从不同角度解决问题 从不同层面解决问题 同时兼顾人/商业/技术等等 实施方案去解决问题 保证解决方案可行 验证解决方案有效 解决已知问题之余不产生新问题 设计思维所要解决的问题基于以上,我把设计思维理解为: 寻求最优点/最优解的一种思维方式 1. 寻求问题最优点:探索和开发的平衡探索的意思是充分获得信息和探索可能性,具有发散的特性;开发的意思是聚焦于一个点,并通过行动产生改变,具有收敛的特性. 大多数时候,无法解决问题是因为没有正确定义问题: 解决问题的第一步永远是问对的问题.我们容易忽略这一步是因为: 现象往往包含过多信息 只获得局部/片面的信息 问题与现象不对应 问题有多个层次 结果是: 我们定义的问题其实跟现象无关 我们定义的问题并不起关键作用 每个人定义的问题都不尽相同,但大家以为已经一致 那么设计思维给我们带来了 “发散”和”收敛” 框架,帮助找到不同阶段最优问题点: 我们面对问题(尤其是经过转述的问题)时,往往来不及做出以上信息收集和判断过程. 那么至少可以多问几个问题: 是谁遇到这个问题? 现象是什么? 问题真的是这个而不是别的吗? 2. 寻求方案最优解:关系的平衡最优的设计方案,无非是在寻找当前情境下最平衡的”关系”: 设计商业模式,是要找到价值/用户/渠道/业务/资源/收入/成本的最佳关系; 建筑设计,是要寻找空间与人(各种活动)的最佳关系; 交互设计,是要创建系统与用户最佳的”对话”过程—在交流的最佳时机提供合理的方式; 平面/界面的视觉传达,是要找到元素之间最佳的关系—如何组合,如何展现; 所有的设计,都得在 (商业)目标–人的需求–可行性 中取得平衡. 如果这样,设计会不会最终沦为妥协和中庸? 别忘了我们有 “发散”/“收敛” 框架: 3. 寻求过程最优解:可验证性和效率的平衡在子川的分享中,有一个重要的观点: 设计思维尝试解决的是可验证性和效率共存的问题这个观点给我的启发不仅仅在于设计思维的定义,而是一语道破设计应该是一个”假设-验证”的循环过程. 设计师身上有个通病—-“自恋”,很多时候(绝大多数时候吧)是先通过自己的经验和直觉给出方案,然后再想尽办法去找依据.于是,”审美是主观的”,”设计是主观的”成为很多设计问题的遮羞布/设计师的挡箭牌,看似激烈的讨论实质上是漫无目的地表达主观意愿. 为什么? 因为我们常常意识不到,观点不过是一种带有上下文信息的”假设”,而不是天然就有优有劣的”事实”.成功的设计最大的绊脚石,其实是我们的自负(不仅仅是设计师,还有老板/产品经理等等等等). 如果把所有设计看成是待验证的方案,也许我们会将更多精力放在如何验证假设,而不是如何证明我是对的. ok, 如果我们转换了 mindset, 认为设计都是需要验证的,那么问题来了:未知那么多 ,假设那么多,不可能一一验证啊!没错,所以被效率和 deadline 掐住命运咽喉的时候,我们很自然会选择: 经验 领导的意见 以上两位再厉害,也没办法在电光火石之间给出万全之策,何况这两位最大的弱点在于上下文信息极大缺失,会对明智的判断造成影响.那我们到底如何在有效和效率之间抉择? 设计思维恰好善于解决有效性和效率的矛盾.我们完全可以在设计阶段进行多轮的假设-验证.这一点在精益创业部分会有更多阐述. 寻找问题最优点,寻找方案最优解,寻找过程最优解—于是,设计思维是问题求解的一种途径,以及 设计思维是寻求最优点/最优解的一种思维方式 用设计思维进行精益创业虽说”幸福的人都是相似的,不幸的人各有各的不幸”,但创业失败的原因可以归为两大类:发散过度(想解决所有问题),收敛过早(模仿,没有特色和核心竞争力). 让我们现学现用,用设计思维去优化创业过程. 需求测试在第一轮天才般的头脑风暴过后,我们有了很多的创业想法,到了收敛即筛选出有潜力想法的时候,可以用两个问题帮助收敛: 用户假设 这是什么样的一群人? 如何群分他们和其他人群? 如何找到他们? 问题假设 这群人受什么问题困扰? 问题出现的情境? 问题严重吗?被重视吗? 问题频繁出现吗? 明确用户假设和问题假设,可以帮助我们寻找最优问题,这是最容易忽略的两步.很多创业者对解决方案的描述非常清晰而具体,但是对用户和问题只有大概的感觉,描述起来含糊其辞,语焉不详. 如果一些想法从理论和逻辑上能较好回答以上问题,我们可以进一步设计实验,去验证这些想法是否真正能够证明自己的价值所在.比如: 能找到这样的人聊一聊吗? 网络上有相关的讨论和社区吗? 这个问题在哪里被提及/讨论/解决? 跟这个问题相关的问题有哪些?受关注程度如何? 已有或替代性解决方案解决了哪些问题?满意度如何? 测试方案原型当需求被验证后,我们开始迈出改变世界的第一步:给出最简单最粗糙的解决方案.这时候已经可以开始验证想法,并在反馈中不断迭代改进. 值得注意的是,要验证的 MVP (最小可用产品),而不是最小体验…一图胜千言: 增长测试概念 ok, 方案 ok , 产品也 ship 出去了,创业团队面临的下一个挑战是:增长. 找到(假设的)增长模型,也去做测试.关于Growth hacking又是另一个话题了.## 设计师的成长&gt; 真正的成功永远在设计之外，如何提升思维技能，让设计变得不那么重要。设计师最大的问题是:只会设计,导致狭隘地理解设计,还自我感觉良好.设计说到底是世界观和方法论的组合(或者,思维方式+技能吧),但是只有世界观和方法论,而不去 get ur hands dirty,别说改变世界了,别人连看都看不见你.设计师想要成长,想要承担更大的责任,得把设计技能练得纯熟,然后去学习其他领域的各种知识,并且在动手解决实际问题中提升自己.当设计师不再仅仅关注可感知的设计,也许,世界就会悄悄改变.共勉. *00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>设计思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[送给自己的人生地图]]></title>
    <url>%2Fquestions-as-map.html</url>
    <content type="text"><![CDATA[作为一枚路痴 + 地理学专业出逃的人，对地图有着天然的亲切感。好嘛，“天然”是骗人的……事实是，我怀疑自己对地图的情感和依赖，除了来自于常常迷路产生的斯德哥尔摩综合症，还源自童年无数次拼世界地图、中国地图过程中yy出的破碎与重建的故事…… 地图主要有两大用途：大比例尺详图用来按图索骥，从 A 到 B ；小比例尺鸟瞰图提供 Bird’s eye view ，纵览全局。手中握着一份地图，心里总是多一份安定。缺乏安全感是一方面，可是啊，地图总能带给人一种释然——你看，世界比你所见要大得多呢！ 如果此刻，十年前的自己站在跟前，眼神会有多迷茫。可是今天，明明走过更多的路，看过更多的人和事，迷雾依旧不散。 所以，得再送一份地图给自己。 自从进入生活的迷宫，事情总是变得繁复而琐碎。劳劳碌碌，可好像一无所获。 可是，“获”到底是什么？为什么是这些而不是其他？是自己真正想要的吗？怎样是获得？会再失去吗？获得了会怎样？得不到又会怎样？沿着这些问题，好像可以找到来时的路…… 耐心地发问，耐心地等自己回答，猛然发现，就算知道了再多道理，做了再多事情、挣了再多钱、被再多人认可、居然改变了世界，可如果没有回答内心那几个挥之不去的问题，真的算是走了一遭吗？ “那几个”问题的差别，制造出了人与人的差异。每个人需要面对或选择面对的人生课题都不相同。虽说人生无法规划，总有太多偶然。但如果时时有几个问题牵引着，迷雾中的方向总是要更清晰一些，临到最后，离问题的答案也总会更接近一些吧。这些问题，也就是人生的地图了。如果没有回答（至少也得是探究过），会觉得生而有憾。 世界是什么模样？（惑于学） 跟我所见所了解都不相同的地方是什么样？ 没有人的地方是什么样？沙漠什么样？雨林什么样？岛屿什么样？大洋什么样？火山什么样？海峡什么样？…… 有人的地方是什么样？有哪些聚落类型？城市尺度 x 地理位置 x 文化 x 制度，会产生怎样的可能性？ 为什么会有这些自然景观和人造景观的差别？ 人和人造物的可能性是什么？（惑于业） 人如何认知，如何思考，如何行动？ 机器可以做什么，是怎么做到的？ 人和机器的可能性边界在哪里？最终会合一吗？ 城市是一种高级“机器”吗？如果机器会拥有智能，那么城市呢？ 什么最值得追求？（惑于生） 什么可以穿越时间、抵御熵？为什么？ 智慧是什么？如何获得？ 美从何而来？如何体现？ 自然为什么全是美？（也许是地理学的偏见吧，大尺度的美、生态系统的精妙，要比人造物的美震撼太多太多） 美为什么脆弱？ 美可逆吗？ 美的密度高的人类行为（音乐/艺术/文学…）为什么“无用” 爱从何而来？为何强大？作为基因的生存机器，爱是一种bug吗？ 每一个问题，用值得用一辈子解答。 每一个问题领域中，能给出方方面面回答的，可以称之为专家；但只有那些能逼近问题本质的，才是大师。同时有那么多问题，注定只能是个好奇而肤浅的过客。可谁又不是过客呢？跟时间相比，其他的几乎都不重要；跟生活相比，时间几乎不值一提。能穿越时间、价值永驻的东西又有多少？做一个好奇且努力着不那么肤浅的过客，应该是件有意思的事情吧！ 怀着赤子之心来，发现了有趣的问题，带着问题一路向前去。生活好像就是这么简单。 送给自己的人生地图，看一眼，再上路。]]></content>
      <categories>
        <category>叽歪</category>
      </categories>
      <tags>
        <tag>Map</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[设计师学编程]那些绕不过的概念]]></title>
    <url>%2Fcoding-concepts.html</url>
    <content type="text"><![CDATA[编程语言虽说跟自然语言类似，但有一些本质的区别，如果不理解这些区别，编程的槛始终过不去。这篇文章尝试把几个最要紧的概念提取出来咀嚼消化。 一、变量 vs 替身例如：想要写个程序，实现：周一至至周日显示不同的早餐菜单。 我们需要有一个东西来代表“今天是周几”。可能性有 7 种，但是活在当下的只有 1 个，于是需要一个“替身”，框定它的“变身”范围是周一至周日，然后让它根据条件变变变…… 这是对编程思维的第一个训练：【抽象】将某种类型、某个范围内变化的“实例”，抽象为一个“代号”。 坑： 变量命名 大妈在上周的 QA 里面提过，这几乎是一个终极问题…… 我的理解是，这个命名同时承载了占位符、运算对象、功能解释、类型暗示、作用域暗示 等等的使命，于是短了烧脑，长了烧眼…… 理解成本 虽然程序是自己写的，变量是自己命名的，但是每一次回看程序时，都存在“翻译”变量名的隐性步骤，这个步骤消耗了很多认知资源，相当于脑子里面得有很多对牵线木偶，运行前是一个，运行后是另一个……相信这是老手感受不到/回忆不起的一种状态。尤其当程序长了以后，变量越来越多，记忆变量和管理变量都成问题，还容易犯看错变量名的错误。 填坑： 定义函数时想想丫的用途和变化范围，加注释 避免用三个字母以内的命名，使用一个月后再来仍然能快速理解的命名 变量多的话，分一下组，或者动手画一下它们的关系帮助理清思路 二、数组 vs 分格抽屉替身虽好，但是有时候还是不好管理，执行命令起来效率有点儿低，因为同质性不够高（虽然替身都是人，但可能年龄、爱好、性取向、左撇右撇、甜豆花派咸豆花派等等都不尽相同）、以及没有按顺序排列。 于是我们需要一个更“军事化”的组织——数组。数组就像一个分格抽屉： 从外面看来，一个抽屉就是一个东西（里面能装很多东西）；打开抽屉，里面是按照顺序放置的同一类东西，每一格都有位置编号（指针）。 这是对编程思维的第二个训练：【压缩】对同样的东西，折叠再折叠，收纳再收纳。 坑： 抽象 因为抽象，容易见抽屉而不见格子。写下数组太轻松 array[] ，但是一旦加入到运算中（尤其是循环），脑内演化就容易一团浆糊。 抽屉里面的抽屉 复杂性上升一维，需要先辨别是哪个抽屉，然后再定位到抽屉内的单元。 小抽屉为大抽屉增加了多样性，一个抽屉放马卡龙，一个放铜锣烧，一个放…益力多………… 至于N维数组…… 填坑： 克服对数组的心理恐惧，多使用这么简洁高效的工具，嗯 为对抗数组高浓缩占位符的假象，见到数组自动脑补几个空行给它 对循环语句中的数组尤其警惕，试着画一画？数组一直是我的槛，回头需要再补看视频和笨方法，专门写写数组的笔记。 &nbsp; 三、判断+循环 vs 防伪点钞机嗯？点钞机？ 点钞机工作特点：根据设定的条件，重复同一步骤。这正是 “判断+循环”的精髓。感谢它将我们从机械劳动中解放出来。 下面的代码虽然只有几行，但是综合了变量、运算、循环判断、数组等等，浓缩是浓缩，坑也很多…… for shapes in shape_list: if shapes[1] == “circle”: canvas.draw_circle(shapes[0],Radius, 1, “Black”,shapes[2]) else: canvas.draw_polygon(shapes[0], 1, “Black”,shapes[2]) 以上对编程思维的第三个训练：【自动化】找出条件，识别共同步骤，循环处理，实现量变到质变。 坑： 抽象循环里面如果有个函数调用，再来个二维数组，脑子马上就浆糊了 填坑： 用 viz mode 这类的可视化工具帮助理解，训练循环折叠思维…… 推荐偶像Bret Victor的一篇文章：LEARNABLE PROGRAM — Designing a programming system for understanding programs ，中文版 易学编程:一个帮助理解程序的编程系统的设计 &nbsp; 四、函数 vs 百宝袋每个函数，都是哆啦A梦百宝袋里面的一件宝物！ 宝物的特点是什么？实现大雄的一个愿望。至于怎么实现的，大雄并不用担心。当然，想实现多个愿望，最好不要指望于一件宝物，那样往往会出bug…… 说回最开始一周早餐菜单的例子。要 print 不同的菜单，我们需要先判断今天是周几，这件事可以写到一个函数 whatIsTheDay() 中。以后一旦要做这件事，就 call 一下这个函数，外包这项任务给它，自己就翘着二郎腿等着它给出结果。一个程序中有多个函数，也就成了一个百宝袋。 函数的强大之处还在于，可以通过参数实现定制化需求。比如我们在函数 whatIsTheDay(year,month,date) 加入三个参数 year 、month 和 date ，告诉函数：“我想知道 某年、某月、某日 是周几 ” 以上是对编程思维的第四个训练：【模块化】分产承包，责任到户；结果导向，过程自理。 坑： 贵圈太乱 函数的调用关系复杂，你调我，它调你，你调你自己…… 参数传递和返回结果 参数传递引入了新变量（认知内存中又要处理多一套对应关系 &gt;_&lt;），容易跟全局变量、函数内的局部变量混淆。而返回结果又是一个隐式的变量，不可见但影响重大。 交叉并行路径 如果只有一个明确起点，调用关系也单纯的程序就很好办。但事实往往是有多个起点入口，调用关系也复杂，偏偏程序是线性写下来的，不能按照从头到尾的顺序去读。于是到底程序从哪里开始，zeng 地蹿到了哪里，很让人头疼…… 自定义函数和内置函数 内置函数的说法不对，因为那时还没有了解类，所以觉得类似frame.start()这种东西从哪来的，就把丫们看成内置函数。因为丫们不是自己亲生的，所以经常觉得陌生，尤其搞不清楚丫们之间的关系。 填坑： 明确函数功能，加注释 牢记函数的输入（函数参数）和输出（返回值） 多进行局部调试，print 函数返回值 函数之间的调用关系，通过可视化帮助理解&nbsp; 五、类 vs 招聘职位每一个类都包含属性（变量和值）和行为（函数）。对比一下： JD（招聘职位描述）： WXG01-微信高级交互设计师（广州） 工作职责： 参与微信相关产品从概念到原型的设计过程，输出相关设计文档； 对产品持续进行设计优化，提升用户体验； 协调和推动可用性测试及用户研究，以验证现有和将来的功能设计； 负责设计前瞻性的相关研究。 工作要求： 工业设计、心理学、计算机、视觉传达相关背景，本科及以上学历； 3年以上工作经验，主导过1000万+用户的移动互联网产品的设计，具备多领域设计工作相关经验，如产品设计、硬件设计、视觉设计等； 对互联网交互设计有深刻理解，具备完整的理论和技术体系； 优秀的产品意识，良好的全局观、前瞻性和判断力； 同理心强烈，擅长换位及独立思考，卓越的情景还原能力； 优秀的沟通、组织和项目管理能力； 性格乐观向上，兴趣爱好广泛。 类： class Character: def init(self, name, initial_health): # int 初始化对象 self.name = name # self 是新的对象的引用 self.health = initial_health # name 和 health 是self对象中的域(field) self.inventory = [] def str(self): s = “Name: “ + self.name s += “ Health: “ + str(self.health) s += “ Inventory: “ + str(self.inventory) return s def grab(self, item): # methond defines the behaviors of objects self.inventory.append(item) def get_health(self): # method 所有方法的第一个参数都是self return self.health 工作要求其实就相当于类的“属性”，作为这类人，本身需要具备什么样的条件和素质；工作职责相当于类的“行为”，这类人要干什么事情。 类和函数的区别在于，类只能操作某个类型的对象，而不能通过其他方法直接被调用。 面向对象编程的强大之处，对于一个类，理解其接口和已实现的方法，就可以使用了。 这是对编程思维的第五个训练：【面向对象】：打包成型，封装上架 坑：还没有真正练习过 囧，待踩。 今天先到这~ 可能有很多不恰当的类别，请各位程序猿轻拍~ 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[交互设计是什么？可以吃吗？]]></title>
    <url>%2Fwhat-is-ixd.html</url>
    <content type="text"><![CDATA[00的笔记本第10篇文章，写写本行吧，不然总有朋友问“你的公众号怎么不写设计？”。正好，最近要给其他行业的朋友聊聊交互设计。 “一句话解释xxx”的命题，总是让人心惊胆战如履薄冰。因为懒惰，把一句话啰嗦成了一篇文章，希望能帮助不熟悉交互设计的朋友有个基本概念~​先来戳个视频： inFORM三维交互系统 大家看完也许会觉得神奇啊科技感啊不明觉厉啊，到底是干嘛的。。不负责任说一句，让人不明觉厉的交互设计都是不成熟的设计（但可能是很有潜力的概念）。交互设计提供的更多是“无感”和“可能性”，而不应该是“科技感”。 那么，以“无感”为目的的交互设计到底是个啥？ 交互是个筐，啥都往里装交互（inter-action），从字面上理解很简单，就是A和B相互之间的动作和行为。比如，早上你出门时碰到邻居，冲ta喊一声“早”，ta对你点头、微笑，说“早”——这就是一个完整的互动过程。 当然，互动不仅限于人与人之间，还可以发生在任何系统和任何系统之间，比如人和机器，人和环境，机器和环境，等等。 这可是个要命的问题：几乎在同一个次元的人和“物”，都可能发生互动。当然，值得我们关注的，主要发生在（人们需要与之互动的）对象和（有正当使用目的的）人之间，比如你跟一辆车的互动——想使用这辆车到某个地方（至于你想撬开车窗，把里面的招财猫偷走，那是另外一个互动话题——招财猫对你莫名的诱惑，以及你和撬车窗的工具之间的互动）。 这导致了交互所涉及的范围过于宽泛。界面上的一个按钮，是交互；卖披萨不给手套，是交互；想过马路对面却要走几公里穿隧道，是交互……累不累，你以为交互设计什么都能干吗？它就是个概念，被扣上了大帽子的交互设计师，一直躲在“title大于职责/能力”阴影下，一面处理着交互过程的种种细节，一面心怀更大的图景，一个不小心，就跨到了别的学科领地上。我的不靠谱记录，也从一个研究人地关系的学生，延续到研究人机关系的设计师…… 下面这张图能加深大家对这个学科年轻而混乱的印象（交互设计大概在五点钟方向）： 去看大图, 去看墙内图 人机交互、视觉设计、工业设计、人因工程、信息架构……作为交叉（得厉害的）学科，解释不清自己到底是干啥的，永远是心头的痛。我所理解的交互设计，扎根于三大领域： 人——心理学 机——计算机/工程 美——设计` 三个领域都太有意思，于是走上了不归路。。 身体跟不上灵魂（或相反？），于是有了交互设计交互设计虽然是个筐，但它的确是应需而生的。最初的发展动力主要来自人机交互领域。计算机被发明以后，如何跟人打交道，一直让人头疼。虽然Geek们发明了各种各样的“语言”，使人和计算机有了沟通的渠道，但是当时机器毕竟能力有限，需要人付出极大的努力才能跟机器“对话”。举几个例子: 计算机世界中没有实体空间，却又空间无限，人如何找到需要的东西？ 计算机几乎不会说话，更没有语气和表情，人怎么理解它的反应呢？ 你对计算机说“我想知道00的公众号值不值得订阅”，它根本不知道你在说什么。你得首先找到00的公众号（ixd_00）,然后告诉计算机值得订阅的标准有哪些（天知道），然后收集到这些标准的相关数据，然后建立一个公式甚至模型，然后让计算机去运算，最后输出结果。 如何让人机交流更自然（当然是偏袒人类的），渐渐形成了一个学科。而随着计算机能力指数级的增长，计算机承担越来越多，而人需要投入的理解和使用成本越来越小。 当资源不再匮乏、实现能力极大提升后，对体验的追求渐渐成为人们消费决策的首因。于是各种各样的产品和服务都开始重视去理解消费者/使用者，努力将产品和服务的体验改进到超出顾客预期。交互设计在这其中便发挥了越来越重要的作用。 时至今日的人机互动领域，随着机器类型和能力的爆炸式增长，技术越来越逆天，人与机器对话的“界面”越来越模糊以及无处不在，交互设计将迎来第三次大发展。越来越多相互连接的元件和机器，极大拓展了人的感知、采集和控制能力，人与环境互动成为可能。如何促成人与整个环境的互动，是未来几年交互设计的大课题。 我们来欣赏一个舞台互动展示作品。Pixel - extraits , 优酷 行为引导和对话设计者为了便于理解，我们把任何两个系统之间的交互都看做“对话”（不仅包括语言，还有动作，肢体、表情，图像变化，可感知的运动等等）。交互设计要做的事情，就是让两个系统之间的“对话”更好地进行。 从广义上理解，设计的本质是“预先处理关系”，而从属于设计领域的交互设计，主要关注的是如何让人与系统更好地进行”对话”。也就是人在跟一个系统打交道时，他了解到哪些信息，他怎么做，感受如何。 设计节点的“对话”人与系统的“对话”，往往发生在关键节点上。比如去ATM取钱，对话基本是在一块屏幕上进行，而且人和ATM对话的过程，是由若干节点组成的路径： * 你告诉ATM账号 * ATM识别账号，问你要做什么 * 你告诉ATM要做第一件事 * ATM做第一件事并给出反馈 * ATM问你要做什么 * 你告诉ATM要做第二件事“” * …… 交互设计处理的就是这些关键节点的“对话”，如何让双方（人，机）明白对方的意思、知道对方的进度、知道对方的困难并且解决……也就是说，交互设计的是用户在使用一个系统/产品时所经过的“路径”，以及与系统/产品发生的“对话”。 互联网产品界面交互设计回归现实，大箩筐【交互设计】中套着一个小箩筐【人机交互】，而最常见的“机”，就是每天都能见到的网站/客户端/app。互联网行业的交互设计，指的主要是这些界面的设计。 那么，互联网产品界面交互设计具体做什么？ 定义用户特点、需求、目标 理清用户任务和流程 定义功能 整理信息/页面结构 提出设计方案草稿，制作原型，团队讨论 跟进设计和开发 跟进上线和迭代优化 无限循环…… 三、用交互设计思维改善体验交互设计虽然不能吃，也是极有用的。 在讨论交互设计的用处之前，需要再明确一个观点：交互设计存在感很弱。因为好的交互设计，让人感觉不到设计的存在。 比如一把剪刀，几乎没有人不知道该怎么使用。但剪刀就没有其他可能了吗？一定有，感兴趣的朋友可以翻翻这篇文章：The Extraordinary Evolution of Scissors。问题是现在剪刀的设计实在太过符合直觉，让所有人秒懂，所以根本不需要投入注意力去“理解”和“学习”，直接进入使用阶段。这就是让人感觉不到“设计”的“好设计”。 那么对大家而言，了解交互设计有什么实际作用呢？ 1. 治疗科技产品带来的认知失调交互设计铁律之一：在使用大众化系统/产品的时候，我们遇到的绝大多数问题，都是设计的问题，而不是我们“不够聪明”。 比如，大部分人第一次使用复印机时，或多或少会产生“好复杂，不懂弄，我怎么这么蠢”的想法。只要站在“机器/产品”应该为人服务的立场上，可以十分肯定地将责任归咎给设计师，因为用户并没有责任去仔细研究和学习机器的运作。（注：专业级产品另当别论） 2. 了解如何评判好设计设计是一个很好的（社交）话题，因为人人都能评价设计。但如果不做一些深入了解，容易变成话题终结者呀： “我觉得这个设计不好，难用”“是吗？哪里不好了？”“这个……” 好的设计不是新、奇、特，从交互设计的角度看，它应该满足几个特点： 能很好满足需要、达到目的 容易理解和学习 整体使用过程流畅 看着愉悦，用着愉悦 3. 如何改善体验说到底，交互设计的目的还是为了提升体验。大家可以利用交互设计的思维，改善各种各样的细节，以提升生活品质 :) 栗子1：约会恩，约会其实是一个很好的交互设计……“项目”，从“对话”的角度理解全过程，我们看看有哪些环节可以下功夫去提升体验。比如约妹子看电影： 第一阶段：约 妹子是否喜欢看电影？喜欢什么类型的？最近上了哪些电影？妹子什么时候有空？妹子住哪里？可能会喜欢去哪些电影院？（用户调研） 以什么理由提出妹子会觉得比较自然不尴尬？在什么场合下发起对话，为什么？需要制造这样的场合吗？（场景营造） 在对话时，少使用封闭式句式，先回应情绪再导向事实，提供可能性并给出有助于决策的信息……（对话引导） 第二阶段：去 约在什么地方碰面合适？妹子知道在哪吗？过去方便吗？会用什么方式过去？人多拥堵吗？会在哪里等候？天气会不会出问题？需要先吃东西吗？ 妹子或你早到/迟到了如何回应？如何开启话题？ 电影院如何去？需要换票吗？去排队时让妹子干啥？开场前时间如何打发？要买零食吗？妹子喜欢吃啥？ 第三阶段：看 进场时走妹子前面还是后面？太黑看不清怎么办？如何快速找到座位？两个位置让妹子坐哪个？领的眼镜要怎处置？包和零食放哪既好拿又不容易打翻？手机调静音了吗？ 看的是什么类型的电影？要在妹子泪目时准备好纸巾吗？身边坐了熊孩子怎么处理？第四阶段：回 妹子看完电影是意犹未尽还是哈欠连连，该送她回家还是准备其他节目？如何讨论电影剧情？ 妹子怎么回家方便？需不需要带些吃的回家？告别时说些什么？ 分开后再说些什么能增强两人的共同回忆，或是埋下下次约会的线索？ 看到这里是不是累觉不爱……一场约会包含了无数细节，妹子对你的印象就由这些细节一点点构成。虽然这些都是很自然的反应，但是用设计的角度去看，很多细节都可以提前考虑和优化，这样能让妹子感觉跟你在一起很舒服。 好的交互设计，是让人感觉不到的设计~ 真正的体贴，是让人感觉不到的体贴啊~ 栗子2：写邮件从交互设计的角度怎么优化邮件写作？总的原则就是：时刻记着问自己“这样写别人容易理解吗？有没有其他更好的表达/顺序/格式？” 目的是什么？写给谁？他们都需要知道吗？他们主要关心什么？ 要讲哪些事？用什么顺序？重要结论放在前面了吗？足够简单明了吗？老板看第一段（甚至标题）是否就够了？ 每句话都必要吗？可以精简吗？这一段有点长，可以分段吗？分点会看得更明白吗？分点后能用一句话说明白吗？ 可能有疑问的点有指出或给出参考资料吗？补充性质的内容放附录了吗？ 不同的人都能快速了解自己关心的信息吗？需要回复的人都知道自己要做什么吗？ 需要摘录附件主要内容放在邮件中吗？附件的格式大家能打开吗？附件命名是否清晰易懂？ …… 大家应该能感受到设计师的龟毛了……所以说，设计无小事，连写邮件这几十句（假想中的）“对话”，也有很多费思量的地方。所谓“体验好”，如果只有一个点做得好，其实是挺难被感知的，得方方面面很多细节的叠加，才会形成“体验好”的感知。 有了这个思路，一切生活上的体验，理论上都是可以改善的。 似乎，人人都是交互设计师没错儿~这是个人人都是xx的时代。所以才有Cooper的经典文章 Is Interaction Design a dead-end job? 当然，交互设计依然在各公司存在着，几乎已经成为大型互联网公司设计团队的标配，但是的确越来越能理解文中观点的含义。 在人机合一之前，交互设计一直都能发挥价值，只是，这一价值并不需要由一个扣着“交互设计师”大帽子的人来承担，不论主观意愿还是客观需求。也就是说，交互设计会蓬勃发展，交互设计师却可能成为历史。于是，斗胆提出“做交互设计的人”（而不是交互设计师——只做某些界面交互设计的人）应该具备的能力： 对人有爱，对美执着，勤于跨界。 如果展开，感觉又是另一篇文章，就此打住吧。 给未入/转行同学的一些建议： 从观察生活中的体验做起 尽快构建自己的知识体系/索引，并熟练掌握工具操作 学习用研方法，尽量多接触用户 多动手，多寻求设计反馈 妈妈说，文章最好有个小结 交互设计是一个好玩、跨界的领域~ 交互设计的目的是让人与系统更好地进行“对话”，引导目标行为发生 好的交互设计，是让人感觉不到的设计~ 真正的体贴，是让人感觉不到的体贴 找到关键节点，优化“对话”的交互过程，可以帮助改善生活体验 做好交互设计需要对人有爱、对美执着、勤于跨界 最后的最后 比你是谁更重要的，是你做什么，为谁而做 附：一些豆列 互联网用户体验 交互设计 互动设计 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>IxD</tag>
        <tag>交互设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[组织和经验的迷思——读⎡经验的疆界⎦]]></title>
    <url>%2Fthe-ambiguities-of-experience.html</url>
    <content type="text"><![CDATA[组织追求智慧。而从经验中反思和总结，是追求智慧最常见的做法之一。管理学大师和诗人马奇，写了这本书来阐述这几个问题： 经验在智慧寻求中起什么作用，特别是在组织里？ 组织在什么条件下，如何从经验中学习增长智慧？ 从经验中学习，有什么潜力和问题？ 令人崩溃的是，第二页明晃晃地出现了结论： 个人和组织尽管渴望从经验中获取智慧，但是在这种渴望之下从经验当中做出的推断往往具有误导性。 天，还让不让人读下去……不过，想想国王新衣里的小孩儿，有时候最有价值的贡献，也许只是一句实在的话。 读下去，发现有太多高度浓缩的观点。作个有些夸张的类比，读一般的书，就像读一行一行代码，但是读这本书，就像在读一个个函数，让人不自觉地脑补和展开函数里面的代码。这也导致笔记很不好写（估计就是没读懂吧），思路和结构过于一体，经不起拆分和转述。硬着头皮摘取其中的一些尝试消化。 一、智慧的要素和获取模式组织是场景，经验是手段，（运用）智慧是目标。来看马奇对智慧要素的阐述： 第一个是有效地适应环境。为了有效适应，组织必须拥有资源、有能力利用资源。只有少数组织存活了数个世纪（如宗教）。 第二个要素是优雅地诠释经验。诠释装饰着人类存在。这样的智慧因为反思、理解并欣赏生活而伟大，并不仅仅因为掌握生活而伟大。智慧需要具备实用性（能指导行动）和形式意义感（实在想不到什么合适的词）。 获取智慧的两种模式： 第一种是“低智 low-intellect”学习，指在不求理解因果结构情况下复制与成功相连的行动。【不求甚解】 第二种是“高智 high-intellect”学习，是指努力理解因果结构并用其指导以后的行动。【复制因果】 二、学习和经验的获得个人和组织所拥有的知识，大部分不是从日常生活或工作中获取的，而是首先经由专家的系统观察和分析，然后经由权威的传播，之后经由直接或间接的实践验证而来。所以，人们投入大量精力寻找促进组织从经验中学习的方法。 所谓学习，是在观察行动与结果联系的基础上改变行动或行动规则。如果改变属于改进，那么学习就促进智慧增长。 这对于组织和和个人都适用。似乎我们在开始“学习”时，都不太明确这两个核心问题： Gap是什么？ 我要改变什么？比如，“我要学编程”是一个门槛特别低的想法，每年都会来脑子里转悠几回，但最终什么都没有发生。如果我们用“学习”的核心问题自我检验一下： Gap是什么不会编程和会编程的区别是什么？技能区别有哪些？思维区别有哪些？怎么判断学会编程了？有明确的级别区分吗？想达到哪种级别？理想中，学会编程可以干哪些事情？自己在什么情况下需要干这些事情？真的会用编程的方法而不是其他途径解决吗？…… 要改变什么？停止/减少干一些（很多）事情，把时间挪用于编程学习；不再对编程相关的事物有抵触/畏难心理；改变以往的一些学习习惯；学会使用新的工具；接受编程的思维训练，并且在合适的情形下改用这种思维来思考；挑选一种语言作为入门（所以该挑哪种）；学习-练习-作品-总结 的无限循环 ……任何的学习行为，其实都是一种 commitment 。在回答“I Do”之前，需要认真诚实地过一遍这些问题，不然很快就会卡在“我要改变什么”，被扑面而来的不适和付出的索求而吓跑。 最终，学习会在三个层面同时发生 学习做什么：例如寻找好的技术、战略或合作伙伴 学习如何做：例如精炼并改进在某技术、战略或合作伙伴上的胜任力 学习期盼什么：例如调整绩效目标（经常出问题，开始设定太高或太低后续没有调整）不仅需要在学习前自问，更重要的是在学习的整个过程中，不停调整“做什么、如何做、如何评估”。 三、复制成功对应获取智慧的第一种模式：“低智 low-intellect”学习，不求理解因果结构情况下复制与成功相连的行动。在可以反复练习积累经验的、相对独立的、狭小的领域，简单复制可以带来明显改进。 复制成功的过程：1选择可选行动中的一个付诸实施，2记录结果评定成败，3复制与成功相连的行动。 三种复制成功的机制 试错。关键策略问题是，选择表面上最佳选项还是抽取几个选项进行尝试以收集更多信息。 模仿。传播过程往往趋同而非最优，能否通过模仿找到最优解，取决于学习者之间的联系网络 （竞争的后果，寻找优质网络并嵌入） 天择。繁殖与成功相连的属性（如规则、程序、形式），淘汰与失败相连属性，取决于一群竞争者之间相对绩效，成功者属性比失败者更可能被复制。复制成功的各种机制有一个共同的根本问题：探索（进一步了解世界，追求未知之物，尝试不同于标准流程的新做法）和开发（利用并精炼已知之物，提高效率，进行标准化、实行问责、施加控制）之间如何分配资源。 一些帮助选择复制机制的标准： 改进：平均绩效随着经验而改进吗？ 稳定：第t次重复第t-1次选择的可能性随着经验而增加吗？ 声誉误（reputation error）：所选选项变现绩效（声誉）是大于还是小于期望值？两者差距如何随时间变化？ 最优性（optimality）：发现并采用了最佳选项吗？花多少时间才找到最佳选项？或者，所选选项的绩效与最佳期望绩效的差距如何随着时间变化？以上可以借鉴为刻意练习中的评价维度。 复制成功的问题 历史是复杂的； 历史充满随机不确定性，组织中经常是信号弱、噪音大、样本小； 潜在结果分布受到历次所做选择以及历次变现结果的影响，例如资源消耗、优势因开发而丧失、熟能生巧。因为练习效应存在，所以通过复制成功寻找最佳选项容易掉入“胜任力陷阱”。假设某项活动的绩效由潜力和胜任力共同决定，一个潜力较低的选项会因为学习者比较擅长而胜过一个潜力较高的选项。组织经常选择缺点较多但是用顺手的老做法。 ——习惯或路径依赖如何影响学习策略的选择。 经验抽样率受样本结果影响。选择一个选项付诸实施观察结果就获得一次经验，每次经验都是深层实现的一个抽样值，与深层实现存在误差。成功并非不可得，但是成功的经验往往比想象和理解中复杂，而且成功具有自解释和自我强化特性，导致所抽取的经验未必可以解释成功，因此提高了使用经验获取成功的风险。 四、通过故事和模型来学习（的局限）获取智慧的第二种模式：高智适应，要求理清因果关系，并用叙事（自然语言）、模型（符号语言）或者理论阐述出来。但因果往往是复杂的，我们更多时候了解的是相关性而不是准确的因果。在熟悉框架内简化经验，是人类理解世界的基础。故事和模型是希望被社会证实为真相的虚构，帮助我们更好地整合和传递来自经验的智慧。 故事和模型组织的经营由复杂的、随机的、部分可观察的过程产生的事件流构成。因果关系是模糊的。诠释历史，涉及把经验的模糊性和复杂性转化成一种详尽到足以让人感兴趣、简单到足以让人理解、可信到足以让人接受的形式。讲故事的技巧，涉及在三个标准之间微妙地平衡。 故事和模型必须精妙复杂到显得有趣并彰显人类智慧—“最大可理解复杂性”，它是听众智慧及故事讲述技术和模型建造技术的函数。各种解释的关键，是把经验与预先存在的公认故事情节连接起来，以获得主观理解感。故事讲述者、组织模型建造者和组织理论家力求让诠释既贴近现实又容易理解，但这两个目标本来就相互冲突。模型建造者必须选择是建造复杂模型犯过度拟合错误，还是建造简单模型犯过度简化错误。 （从组织的视角转换到个体学习，如果采用“知其然知其所以然”的模式，是否也需要向自己传达“最大可理解复杂性”？例子、类比、图表、比喻，是不是都属于增进“最大可理解复杂性”的形式？） 故事讲述者可以分为两派，自然语言派强调主题和语法，不求定论但求新解；符号语言派强调数学框架、假定和推导，他们追求超语言真理。 常见做法是，从组织生活细节中提取几个基本特征，定义成抽象概念，确定概念之间的关系，用模型的形式阐述出来。但是大多数有关组织绩效的研究没有理清绩效产生的因果结构： 组织多大程度上吸收了过去的理解，进而大大减少了政策、实务和形式的变数； 因果结构的复杂与用来描述果结构之观点的简单不相匹配； 影响利润的因素，有些是不可观察的，或者同时受到利润的影响； 大量不可控因素； 经验样本小。 何况，故事还深受人类的认知能力局限和认知风格(固守成见、简化因果、寻求确定、妄自尊大)影响： 人类存储、回忆历史的能力有限，对服务于当前信念和欲望的重构记忆敏感。 人类的分析能力有限，对加诸经验之上的框架敏感。 人类固守成见，对支持先入之见的证据不如对反对先入之见的证据挑剔。 人类既歪曲观念又歪曲信念，以提高两者的一致度。 人类偏爱简单的因果关系，认为原因必定在结果附近、大果必定有大因。与比较复杂的分析相比，人类更喜欢涉及有限信息和简单计算的启发。 世界太复杂，而经验太贫乏。人们往往深信被广泛分享的来自经验的故事，但是相信的深度、分享的广度都不能肯定地保证故事的效度。真相是模糊的。人们口中所谓的真相，不过是大多数人的共同看法。 很多组织研究与其说是在努力正确反映现实（效度），不如说是在努力达成共识（信度）。组织生活的一个重要特征，是寻找具有最大可理解复杂性的故事和模型，并且努力培养能够阐述这样的故事和模型的人。 ps.对于相互竞争的框架，要认识到分歧产生于框架不同，无法强求用一种框架去理解和解释另一框架产生的理论和观点。 神话主题神话是任何通过具体化一个民族的文化理想或者表达一个民族共同深深体验到的情绪情感来取悦这个民族的真实或虚构的故事、重复出现的主题或者性格类型。神话造就的可信度与熟悉度密切相关。（论刷脸的必要性） 组织故事和模型，围绕四大神话主题而建构。 理性（rationality）：人类遵循结果逻辑采取行动、为行动辩护，行动是做选择，做选择要遵循结果逻辑。基于对结果和诱因的期待采取某个行动。 层级（hierarchy）：问题可以分解成一层一层的子问题，行动可以分解成一层一层的子行动。采用层级方式解决问题，就是把任务逐层分解下去，各部门平行开工，然后把成功逐层整合上去。 领导者个人举足轻重（individual leader significance） 历史有效（historical efficiency）：历史遵循的路线，通向唯一的均衡，这一均衡由先前条件和竞争共同决定。历史青睐那些符合环境要求的个人、组织、形式、实务和信念；竞争会确保历史的有效性；能够生存下来，说明与环境要求的匹配度较高。 四大神话主题都有反主题： 理性神话-身份：个体不是遵循结果逻辑，而是把情境与身份要求匹配起来。 层级神话-非层级网络：复杂的联系网络把组织中的个人连接起来。 领导者个人举足轻重-复杂性：历史由多个个人的行动的复杂结合创造。 历史有效-历史无效：适应是缓慢的，具有多重均衡。 这些神话，很多下面潜藏着一个更大的神话：人类举足轻重，可以通过个体或集体的智慧行动影响历史进程。 通过故事和模型学习的局限在因果关系复杂、练习机会较少的领域，经验不是好的老师，因为不能可靠地为绩效改进提供清晰的依据。 五、产生新事物新事物只是偏离成规定见的事物，而创造物是后来被判定为成功的新事物。 适应是新事物的敌人复制成功导致选择趋于稳定。为什么新事物风险较大？1.新事物的结果分布，平均值低，方差高；2.新事物往往要求练习；3.新事物的回报往往在时间上延迟，在空间上分散。复制成功可以降低想捞回损失反赔上老本的可能性，但是复制成功也意味着永久砍掉初始结果不好的选项。 适应对回报在时间上延迟或在空间上偏离本地的选项相对不敏感。这一特征是延迟满足（自我控制）和奉献满足（利他主义）问题的根本所在，也是与新事物有关问题的根本所在。 换句话说，适应往往反应太慢，在新事物出现、发展一段时间后才反应过来，这时候新事物已经羽翼丰满，足以抵抗适应带来的打击和扼杀尝试。一句话：适应的低效性产生新事物，历史的因果复杂性供养适应的低效性。（随时随地超浓缩的马氏语录） 给新事物打上笼统标签是常见的适应低效的例子。几乎每个知识领域都为其解释不了的变异贴标签：愚蠢？疯狂？意外？天才？反常？人格、权力、领导力、文化。既然社会科学中解释不了的变异一般都很大，那么只要贴上这样的标签，不对标签指代的概念作出诠释，就能解释很大一部分变异。这种做法的存在价值就是，刺激学术发展，进而让人们少使用这样的标签。 新事物生成机制的存活我们可以假定，知识通过适应而积累，储存在图书馆、基因、规则和记忆中。知识通过更迭、遗忘和错误归档而丢失，不管什么时候都有很大程度的无知。有的东西，以前知道，现在不知道。另外，知识还通过其不完全可及性而丢失。有的东西，这个地方知道，那个地方不知道。 即，无知的原因： 适应滞后； 知识衰退； 不能获取分布式知识。 那么组织产生新事物的条件： 成功带来组织宽容以及与之相连的控制减弱，进而鼓励尝试、避免新想法夭折。宽裕是由高效制造的，但是宽裕有助于保护愚蠢免遭消灭。 管理者狂妄自大，导致他们过分支持有风险的新想法。 对新想法过度乐观。 副产品——乌托邦智慧：因为迷恋理性智慧，于是迷恋抽象思维和模型产生的想法，信仰假设模型与现实情境的拟合，看好抽象思考产生的新事物。 如何提高新事物存活率？一个策略是想办法从大量新想法中尽早分辨出稀有的好想法。但这基本行不通。另一个比较有前途的策略是，想办法在不损害好想法之收益的前提下，降低尝试新想法的成本。但是这样的组织结构或流程很难设计。 一个经典的解决方案是限制新事物投资的“赌注大小”，进行小规模试验粗略评价新想法的好坏，随后增加初步被判断为成功的新想法的投资，达到节约成本的目的。 构思过程与实施过程之间存在创造性冲突，通常的担忧是，探索与开发之比倾向于过快降低，新想法因此过快被标准化。 六、组织迷思，经验迷思组织的问题就是如何做到：既维持足够强的本位主义，以供养多学科知识系统，又保证足够多的跨部门联系，以分享观念和事物。在一定程度上，组织在集权与分权之间循环的历史就是一首歌，吟唱着“在边界的短期局部成本和长期整体收益之间寻找一个永久平衡”，这个工程是多么的艰巨。 智慧有两个要素，有效适应环境，优雅诠释经验。与其说经验是适应工具、进步动力，不如说经验激发一项根本的人类活动——创造并装饰没有实际用途的知识。理解经验，与其说是为了生活，不如说就是生活；追求意义，与其说是为了有效地适应，不如说是喜欢讲故事的人类的一项根本活动。 最后看完如此浓缩的一本书，除了难读的笔记，还有几个存留的疑问： 这是组织行为智慧的不可知论吗？ 希望获得智慧的是组织还是组织中的个人？ 最后的迷思传递出的是宿命感还是释然？ 个人学习可以借用哪些观点？ 要改变的是什么？ 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多用Git少交税]]></title>
    <url>%2Flearngit.html</url>
    <content type="text"><![CDATA[一、为什么要了解GitGit是一套版本管理系统。看到“Git版本管理”，一大部分盆友已经转身想走，在你握着门把手准备开门走人时，请最后听我说完最后一句：人人都需要版本管理，git可以帮你少交停电/蓝屏/死机税，提高产出效率，不来一发吗？ 试过半夜写汇报ppt吗？’汇报ppt’→’汇报ppt1’→’汇报ppt11’→’汇报ppt2015-03-17’→’汇报ppt2015-03-17新’→’汇报ppt2015-03-17新1’……无休止的命名斗争，这就是自然而然的版本管理，只不过，没有好的工具，所以显得一团mess。 无论学生党还是设计师（改20个版本后终于顺利用回第1版），无论公众号运营还是音乐人，都持续产出着自己的“半成品/作品”。99.999%的作品都不可能一气呵成，比如这篇笔记的第一个commit版本，简直惨不忍睹。如果有版本管理意识，以及高效、方便的工具，生活也许可以简单许多，更不要说天有不测风云的停电忘保存、脑残删备份等等好事等着我们。 来吧，fork有用有趣的东西，git你应该在意的东西，日拱一卒，打造我们的作品。 二、Git主要概念Git实现在本地和远端进行版本管理。 1.工作空间四个空间概念：工作目录(workspace)，暂存区(index)，本地仓库(local repository)，远程仓库(remote repository) 想象一下，我们开一个包子店(图片做的不是同一款包子，见谅)~ 首先，得有一张大桌子用来和面、擀皮儿、包馅等等，这张桌子相当于workspace，随你折腾的地方，工作主要都在这里进行。 然后，包好的包子们会放到一个蒸笼里，等待被蒸，这个蒸笼就是index暂存区。蒸笼用来放我们想保留的成品或半成品，至于选哪些卖出去，这是以后考虑的事情。 下一步，蒸包子。蒸好的包子已经可以吃了，但是我们还是得先把它们从蒸笼拿出来放在盘子里。盘子就类似本地仓库local repository，里面都是等待出货的好东西。当然，你也可以在最后一刻把看不顺眼的包子扔掉，或者自己吃掉。 最后一步就是把包子送到货架/客人的桌上。公之于众的货架，就是远程仓库remote repository，丑媳妇终于见公婆啦。 配合下面这张图，我们对Git就有一个基本概念了。 2.Head &amp; branch &amp; master &amp; originGit系统的实质更像是一棵大树，树干（就是Head啦）是最后一次提交的成果。在树干上，你可以开无数的分支（就是branch啦）胡弄，弄乱了也不怕，大不了剪掉再开一个，树干不受任何影响。折腾ok的分支，最后可以merge到默认branch也就是master上。 用技术性语言描述，分支用来将特性开发绝缘开来。在创建仓库的时候，master 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。 那origin又是什么？origin是远程默认的仓库。clone完成之后，Git会自动将远程仓库命名为origin。那Head和master又是什么关系？Head其实只是个指针，指向当前最近commit的branch。而master是本地默认的branch，所以Head经常都是指向master。另外Head是官方定义的，而master和origin都是大家常用的命名，并不一定要叫master和origin。[2].#### 3.工作流：add &amp; commit &amp; push- 把包子从桌子挪到蒸笼，叫add————已修改modified————汇报ppt初稿写成；- 把包子从蒸笼挪到盘子，叫commit————已暂存staged————汇报ppt完稿存到u盘/网盘什么的；- 把包子从盘子挪到货架，叫push————已提交commited——汇报ppt发送到boss邮箱。 Git的好处之一是，包子包好后，还可以回退…… 捷径： 三、配置1.工作目录2.本地仓库3.远程仓库 四、常用命令最常用：git command --help 1.创建需要进入目标目录进行操作 创建新仓库：git init 创建一个本地仓库的克隆版本：git clone /path/to/repository 克隆远端服务器上的仓库： git clone username@host:/path/to/repository 2.查询git status staged:已在index，等待被commit. unstaged:文件做了改动，但还不能被commit. untracked:Git还没有开始跟踪，需要先add. deleted:文件已被删除，等待remove.Staging Area:commit前把文件们收集到一起，以便打包commit。 3.add/添加 添加到暂存区（让Git开始跟踪更改，也就是从untracked变为tracked）：git add &amp;lt;filename&amp;gt; 或 git add * 添加全部文件：git add -A， -A 表示包含删除的文件。 git reset: git reset &amp;lt;filename&amp;gt; 从staging area移除文件。 4.commit/提交“commit” 可以理解为一次快照，帮助我们把所有改动以timeline的方式组织起来。 提交改动(到head，但还没到远程服务器)：git commit -m &quot;代码提交信息&quot; git commit -m ‘Add all files’ 把所有当前目录下的文件加入暂存区域再运行commit：git commit -a 提交到远程仓库：git push origin master （可以把 master 换成你想要推送的任何分支）。如果还没有克隆现有仓库，并想将仓库连接到某个远程服务器：git remote add origin &amp;lt;server&amp;gt;。 5.push/推送将文件推送到远程仓库中：git push -u origin master。远程仓库默认叫origin 。-u 告诉Git记住参数，下次可以直接使用push。 6.pull/拉取更新本地仓库至最新改动：git pull origin master 7.checkout/切换checkout命令用于从历史提交（或者暂存区域）中拷贝文件到工作目录，也可用于切换分支 切换分支： git checkout &amp;lt;branch&amp;gt; 新建并切换到分支：git checkout -b new_branch 等同于：git branch new_branch +git checkout new_branch 把文件从暂存区域复制到工作目录，用来丢弃本地修改：git checkout --&amp;lt;files&amp;gt; 回滚到复制最后一次提交:git checkout HEAD -- &amp;lt;files&amp;gt; 8.diff/比对git diff 9.reset/撤销 从index中撤销所有文件：git reset 从index中撤销最后一次add的文件：git reset --&amp;lt;flies&amp;gt; 恢复之前版本：git reset --hard 回滚到最近一次：git checkout -- &amp;lt;target&amp;gt; 10.merge合并其他分支到当前分支：git merge 11.remove &amp; clean 从硬盘和index移除文件：git rm 删除分支git branch -d &amp;lt;branch name&amp;gt; Ref [1]. Git简明指南 [2]. What are the git concepts of HEAD, master, origin? [3]. Try Git [4]. 图解Git [5]. Pro Git中文版 [6]. Gitmagic中文版 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Coding</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[莫弃疗——关于改变的改变]]></title>
    <url>%2Fchange-note.html</url>
    <content type="text"><![CDATA[烦人的状况为何持续不变？到底要怎样才能改变？ 变与不变，是人生中无法回避的难题，尤其当这道题涉及到人，更尤其是，涉及自己。 年后第一篇笔记，来自《改变——问题形成和解决的原则》。 三位作者都是心理治疗的背景，虽然他们的研究多来自家庭和心理咨询，却给我们提供了远超此范围的框架——问题为何形成以及如何促成改变。 如何理解改变才翻到此书第三页，就被牛逼的思路震撼：通过群论（The Theory of Groups）来理解改变。“改变”虽然千变万化，但仍逃不出“模式”的手掌心。 了解群和改变之前需要先介绍本书最出名的概念：“第二序改变”。 第二序改变 第一序改变：发生在某一系统之内的改变，系统本身维持不变。例如，做恶梦的人，在梦中可以做许多事——跑、躲、打、喊等等——但无论怎么变换这些行为，都无法停止噩梦。 第二序改变：改变发生在系统之外，控制系统整体的前提改变，使系统转换到完全不同的状态，也即“改变之改变”，简直就像量子跃迁。例如，从梦中醒来。 如果把“问题”看做一个系统，也即一个“群”，那么理解群的特性有助于理解改变如何发生。 群的特性1.群由具有某一共同特征的成员组成，成员实际本质不影响群的属性 群内部可以产生无数变化，任何成员或成员组合，都无法置身于系统之外，例如，一桶乐高 一桶乐高可以拼出无数的图案，但就是拼不出可以吃的任何东西——第一序改变无法产生第二序改变。 2.群成员可以以不同顺序进行组合，组合的结果仍然相同 例如，鱼丸咖喱牛肉粗面、咖喱牛肉鱼丸粗面、牛肉咖喱鱼丸粗面、粗面鱼丸咖喱牛肉…… 好多好多时候，我们其实就像傻傻的麦兜，费力地做着无谓的排列组合，却期望着第二序结果。 3.每一个群都包括一个恒等成员（identity member），任一其他成员与该恒等成员组合，结果仍为该成员自身 不恰当的例子：zhu一样的队友 4.群中每一成员都有其相对或相反成员，任一成员与其相反成员组合，结果为恒等成员 这个最好理解啦： 如果不过瘾，还有薛定谔的赞…… 奇特的是，抵消力量的消失，初看似乎不错，其实是一个危机。（1Q84 深绘里vs小小人？）群成员与其相反成员间存在依存关系，一方失去另一方的抵消力量后，也许自身也无法存在。 借助“群”这一视角，我们容易理解，“种类”（或者说，群）和“成员”无法相提并论，群不能包含群本身。而在现实中，我们却常常混淆这两个层次，在解决问题的道路上原地打转。 第二序改变，往往是解决问题的关键，难就难在，我们身在（或被自己困在）第一序中，怎样跳出这样一种宿命般的裹挟？ 问题的形成所谓问题，指因处理困难不当而造成的僵局、停顿、死结。问题往往由解决方案本身所引发或者恶化。 为何解决方案会恶化或带来新问题？ 需要第二序改变时却一直在推行第一序的解（可怕的简化，对问题视而不见）。 第一序改变即可解决问题时却试图促成第二序改变（如不满意行为改变而进一步要求态度改变）。 乌托邦症候群这一群体的特征是，问题明明无解，却坚信有解决之道。 乌托邦症候群有三种形态： 自责型 因为苦于无法达成自己的目标，而觉得是个人有所欠缺，责怪自己无能。——其实问题是目标过于理想。疏离、离婚、虚无的世界观、酗酒等是常见的症状。 游荡型 因为没有能力实现乌托邦式的改变，反而会沉溺于比较无害的、几乎是儿戏的拖拉之中。这种旅人从来不抵达一个目的地，只是四处飘荡。想想那些永远的学生和完美主义者。 入世型 认为自己站在真理的一边，肩负着改变世界的神圣使命，企图说服别人，视不认同“真理”的为坏人。 以上的共性是，这一群体认为他们所根据的前提比现实还要真实，以致于都意识不到这些前提的顽固存在。（躺枪一万发……） 总而言之，乌托邦症候群怀揣企图改造自我或改造世界来完成一个不切实际的理想，这种改变的方式又跟某些不可改变的困难纠缠在一起，从而形成问题。 改变的悖论为了掌握“改变”不可捉摸的特性，必须区分事实以及关于事实的前提。人们根据某个前提认为事物应当如何，这与事物“本来面目”是有所差距的。拿掉乌托邦式的前提，实际情况或许还可以令人忍受。我们在第一序里，浑然不知需要第二序改变才能解决问题。 关于改变，我们的期望是对象自发的改变，比如家长总是期望孩子“自动自觉”的去学习，但是如果不进行干预，改变不会发生；如果干预了，“自发”又变得不可及。这便是改变的悖论：试图运用意志力达到本应自然、自动自发的状态。 那，怎样才能解决问题，促成期望中的改变呢？ 问题的解决几个原则： 针对第一序改变中的问题解决方案（方案正是问题所在） 超乎常理 处理此时此地的情境，直接处理问题的结果而不是探究问题发生的假设性原因 让问题情境超脱尝试解决问题时所掉入的悖论陷阱，置于不同的解决问题框架之中 1和2不再展开，3简直太有启发，用实用主义的态度，直面问题，而不是永远沉溺在无解的分析中。问题的解决，不一定需要完全弄清根源和演变。对变化来说，最重要的是发生了什么改变，而不是改变为什么发生。 “如果我们不去问’为什么’而直接去探究现象发生的重要事实，往往我们可以发现，事实会引导我们去找到答案”——维特根斯坦 第4点提到的是重新框定的艺术。我们的首要任务是消除对立，从“不是一就是二”的选择困境里跳出来，拒绝选择本身。对规则有所觉察，能让人解脱束缚，从而去思考解决问题的各种逻辑种类。 第二序改变的原则：“不是’A’，也不是‘非A’” 重新框定并不是让我们注意到什么——不是产生什么洞察——而是教我们玩一个不同的游戏，使得老把戏不再管用。因为如果问题被视为一种心理或情绪的症状，这一概念架构本身就使得解决办法无法产生。 消除对立后，尝试将用以理解某种情境的假设或观点，改变成另一组同样也能符合事实的设定。 书中有不少栗子： 多做无益问题：父母总是替儿子多太多事情，儿子想独立自主但沟通无效。解决：干脆什么都不做，全部推给父母，父母进而意识到，让儿子“断奶”也是一个重要的目标。 化暗为明问题：丈夫挑剔妻子，妻子刺激丈夫发怒，反复的争吵。解决：让丈夫去大街上和别人多多争吵，让妻子明白争吵主要来自情绪失控，明白自己为什么会和丈夫争吵。 宣而不隐问题：演讲者害怕自己的紧张无法控制以至于当众出丑解决：演讲人在演讲之前，告诉听众自己非常紧张。 贝拉克的巧计问题：女孩在等待面试的过程中，非常紧张。解决：另外一位同样等待的男孩告诉她，应对的简单办法就是告诉对方，他很英俊。 利用抗拒问题：精神病人总是推迟出院，说自己没准备好。解决：告诉他，应该长期呆在医院，不要出院，把精神病人推向绝望的边缘，他反而出院了。 仁慈的破坏问题：父母的说教对叛逆的青少年无效解决：父母以一种安静但是又力量的方式来对待子女，让反抗变得不吸引人而且无用。 忽视的好处问题：老师越是关心问题少年，问题就越多。解决：有意忽视的行动来重新获得对方的重视。 学习问题问题：聪明的研究生对自己的报告质量有着乌托邦式的要求，一再拖延。解决：在2小时之内写出来。 对付乌托邦问题：一个具有远大不现实的生命目标的人是不会被轻易说服去修正目标的。解决：要求对方去超越自己的极限去落实这些目标。 魔鬼的约定问题：有些人会故意拖延不去做一些必要的事情。解决：让他只答应做还是不做。 via 豆瓣jack叔的笔记 对乌托邦者而言，修正目标是一种自我放弃，只有在被要求超越自己极限时才会迅速的放弃自己的理想。这简直类同我们熟悉的流氓逻辑：搞定不要脸的人的办法，就是比他更加不要脸。 作者还帮我们理出了促成改变的四个步骤： 以具体的词语清楚地界定问题（真的是一个问题吗） 探究目前为止已企图运用过的解决对策 对想要达成的具体改变有一个清晰的定义（特别发生什么活停止发生什么） 形成与执行一个能产生这一改变的计划 以及常见的失败原因： 不切现实或不恰当的目标。在处理或治疗中，得到较多资讯后，一些改变已经发生了，因而需要修正原先定下的目标。 所选择之介入方法的性质，当事人无法或不愿去实行。 第三个原因是未能利用语言对当事人说明方法，并使他愿意接受与实行。 总结问题总是产生于某种形式的对立，从态度或行动上（而不是原因）消解对立，改变自然会发生。很多时候不需要去顿悟和追求完美主义的起源和原因，而仅需要从行为的冰山一角做出反常的要求，就能达到跳脱第一序框架的效果。 莫弃疗，希望在。 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>心理学</tag>
        <tag>行动科学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[别傻了，傲娇大脑爱学习？]]></title>
    <url>%2Feffective-learning.html</url>
    <content type="text"><![CDATA[学习是件纠缠人的事情。 不学时有负担，想学时无从下手，准备学的当口开始拖延，正在学的时候会走神，还没学完就全都忘光，正要用时傻了眼…… 也不要全怪学校没教这样最最要紧的能力。再不济的学校，也有学霸存在。但学霸毕竟是少数，学渣如我碰到蹊跷的事，也只能多想想，多问问了。 为什么学了等于没学？ 不走心 没有爱，就容易不走心，没有动力，更坚持不下来。“兴趣是最好的老师”也是一句不负责任的挡箭牌，尤其挡不住学校里的大规模兴趣杀伤性武器。辣么问题来了，兴趣从何而来？可以来自（经人撩拨的）好奇心。但是好奇心又怎么来？除了原始的本能和欲望，还有价值观——未知、神秘、有趣、多元、复杂，它们对我们而言，是否重要？ 不入脑 作为一个合格的僵尸，对脑子一定极为敏感：没有看见之前就能感受到脑子的召唤，看到之后，不论前面有几个坚果挡着，也要呱唧呱唧啃掉前进，捧着脑子一定用最最虔诚的姿态品尝……但脑子对知识，往往没有这般深情。不入脑有两层含义： 一是注意力不集中，其实是眼都不入，还怎么学？ 二是看到的东西没有内化。一朵花开得好，靠的不是给叶子和花瓣涂上颜色，而是从土壤里吸取养分并传输到每个细胞。没有内化的知识就像是外族入侵，大脑会本能地抗拒。但是如果采取和平演变政策，教你学外族的语言，跟外族通婚，进行文化输入，建立各种联系和文化再生长机制，离同化也就不远了。 为什么学习？这个问题重要吗？可以说一点也不重要。 我们换一个问题：“为什么要赚钱？”这个问题绝大多数时候一点也不重要，因为赚钱不需要费力寻找动力。 回到学习上来，我们面对的是一个动力模糊、回报周期长的行为，所以最好还是在起点就给自己满上油，不然上路后还得满世界找加油站。 学习的几个动机：好奇，解惑，行动，体验 好奇：为什么有人每次年会都中大奖？鲨鱼会不会得癌症？为什么情人节容易分手…… 解惑：房价为什么会涨以及还会涨多久？为什么希特勒能忽悠那么多人？…… 行动：游泳，编程，选一个年收益10%以上的理财产品…… 体验： 例如，跟几个不靠谱的小伙伴运一国际镖是一种什么体验？ 又如，极端民主的对立面是怎样的？ 再如，文_革是怎样造成人类文明毁灭的 -.- ？ 怎么学效果更好？一句话：以大脑喜闻乐见的方式喂养它。大脑是个傲娇的家伙，恃才傲物，喜欢偷懒和寻找捷径，又很容易倦怠和消极。所以得哄着学。 （抖森害我图文无关） 前提：聚焦 集中注意力 状态好的时候多学点，状态不好就出去玩，不要给自己扣上“拖延”的大帽。有时真的注意力涣散，可以试着找个相对安静的环境，闭上眼睛，脑内快速进入回血的魔幻场景，效果出乎意料地好（可参考「学习之道」作者在太极比赛中回合间休息恢复的描述，当然前提是每天晚上要休息好……）。 在一段时间内尽可能多接触多看多想多实践 有一段时间，自己读书总是开多线程，豆瓣上标记“在读”的有10+本，结果就是拖拖沓沓，有些书大半年都没进展。后来在读枯燥的通史类书籍的时候，尝试在集中的时间内读完，没结束前尽量不翻这个主题之外的书。过程中发现有点困难，看一段时间开始熬不住，干脆找相关视频，书看不下去就过视频。结果发现效果非常好：形式上互为补充，内容上相互呼应，还能产生新的节点，引发新的问题和知识搜寻过程——也许这就是简单的“主题式”学习（「如何阅读一本书」里有对主题式阅读的讲解），既能保持沉浸，又能激发更多的主动性。在刚开始接触某个陌生领域时，主题式的高举高打特别有效，可以快速突破门槛，达到一定的理解深度。 好了，我们都感受到脑子在远处的召唤了，接下来我们把学习分为输入——消化——输出阶段，看看有哪些哄脑子听话的办法： ① Input阶段——形象化 先来看一段令人（大脑）崩溃的信息： 把上面的外星文稍微整理，按照一定规律排列，再稍微设计一下（此处省略1000字），华丽丽的化学元素周期表就出现了： 大脑对这两种东西的接受程度完全不同——大脑很多时候跟用户一样，好聪明但是好忙好忙，你不把给它看的东西精细梳理、合理表达、增加愉悦感，它是看都不会看一眼的！ 脑图为什么火爆？很多脑图不就把书前面的目录，用一个fancy的软件重新画了一遍吗？但即便是这样，大脑都更容易接受和记住。 信息可视化为什么火爆？因为信息爆炸后，绝望的人类无法依靠演进速度较慢的信息筛选机制，要看的东西越来越多，焦虑得不行，于是要求看到的东西都像乌鸡白凤丸一样细细粒容易食。 MOOC为什么火爆？我们的耐心已经从一本20万字的书缩减到1万字的论文，缩减到1000字的博客，到今天已经没有耐心看140字的微博，只能看20字朋友圈分享标题和0字的照片。“阅读”已经是体力劳动，广播开始抢占堵车时间，视频成为主流信息来源。学习更是如此。视频学习的确优势太明显，但每次吃饭都有人端着勺子送到嘴边，真正饿了会不会就连吃饭都不会了？ 啰嗦这么多无非想说，给大脑多看它喜欢的东西：图，表，具体的，有趣的，戏剧性的，熟悉的。书里往往没有，需要从别处找，或者写写划划，如果都做不到，至少可以尽量脑补更具象化的场景。看书这件事，外表可以小叮当，脑内得是甄嬛传。 ② Digest阶段——内化 内化就是“变成自己的”——盗梦空间告诉我们，人其实只相信自己准备接受的东西，最高层次的说服需要植入会自我生长的观念。 “听过很多道理，却仍旧过不好这一生”。大部分的道理写出来都特别简单，但道理产出过程往往不足为外人道，不伴着血泪的道理只是“别人的观点”。十几岁就听过的东西，往往需要终其一生才能从“别人嘴里的”变成“自己心里的”，才会真正明白。不过，我们在学习中可以有意识地加强这一点： 自问自答 这是自虐式方法，给傲娇的大脑派个烦人的老师，隔几分钟就提问，大脑只好打起精神应付。 这项知识的本质是什么？第一原则是什么？知识结构是怎样的？ 我的问题是什么？到目前为止，我到底有了什么收获？ 问题是什么？方案是什么？例子是什么？ 现象是什么？解释是什么？支撑解释的理由是什么？例子是什么？ 看上去就是特别不友好的方法，所以我们可以再换个说法逗逗大脑： 诶作者它到底想说啥？他为什么为这个东西啰嗦那么多，让人读得如此痛苦？ 这一段我赞同不赞同呀，让柯南来看，有没疑点，让毛利小五郎来看，有没笑点？ 作者抛了什么问题？抖了什么包袱？举的栗子是板栗还是毛栗？ 等等，这一段跟前面有毛关系？我在走神吗？ 写着都觉得好虐心，什么时候把心里央视般的念书式旁边，变成二人转分裂症自问自答，就修炼到一定境界了。 向外表达 如果害怕第一种方法导致人格分裂，那么推荐找个苦主听你说。“如果需要给一个不懂的人讲解，我会怎么讲？ ”可以写出来（像我现在干的），可以讲给别人听。一旦开始表达，还没有明白和掌握的点会立马现形，直教人想放弃。 好为人师的好处是：装着装着就像了。一旦进行表达，自我检查和修正机制就开始启动，扯着遮羞布的傲娇大脑不得不丑媳妇见公婆，在人前不能认怂的本能驱使它主动修缮，讲着讲着自己也就慢慢信了。 以上死磕的做法做能达到两个目的：通过还原度检验理解程度，以及建立尽可能多的连接将新知识在已有知识树中精确定位下来，也就是达到内化的目的。 ③ Output阶段——运用 实践检验真知，但如果学完才开始检验你就太奥特曼了——现在不是流行精益创业的理念吗，尽早尝试，尽快验证。 在学习之初，就以终为始，先想想这个东西可以用来干什么，能解决手边的什么难题吗？能回答隔壁老王的问题吗？学完之后，也尝试输出点什么。就像游戏里好不容易打下一个装备，总得立马装上找个倒霉的练练手吧~ 回到现实世界，发现极难做到。就好比我们要在春节前上线摇红包的活动，做计划时只考虑了设计和开发，做好了以后一拍大腿，还没有宣传呢！火急火燎给推广同事提需求：还有1天上线了，请在上线前传播给一半的用户…… 脑子不是神，何况它也要协调全身上下，才能去做你提出的靠谱不靠谱要求，所以尽量给实践安排充足时间，将实践的结果作为milestone，而不是看到设计稿就以为做完了。 栗子：Headfirst系列讲得够多了，献上大头系列作为案例。 大头系列在书店里真是让人无法忽视，里面的风格和排版也几乎让人无法直视。但是，人家真的是了解傲娇大脑： 好了，大家随便拿起一本Headfirst翻翻就知道。不说太多，不然大家又说我软文…… 呼~ 写完这篇，向外表达的目标达成。下次再有“艾玛老纸怎么不想学，想学也不会”的想法时，就不能随便搪塞过去了咩哈哈。 参考 如何阅读一本书 学习之道 如何高效学习 暗时间 高效学习技巧 | Tips for Highly Effective Learning（ Quora 精选中英对照） 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>学习</tag>
        <tag>learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你为什么不想做，想做也做不到？]]></title>
    <url>%2Fbehavior-model.html</url>
    <content type="text"><![CDATA[在我更换QQ签名“放开那只手机”，提醒自己不要老是玩手机后的一个星期，被自己看手机的频次和频率感到绝望的震惊，于是有了这篇笔记。 Fogg行为模型 （FBM）从前，有个叫BJ Fogg的斯坦福教授，醉心于研究行为和说服理论(Persuasive Tech)。他提出了一个关于行为发生的好用的模型： B=MAT 行为(Behavior) 由 动机(Motivation)、能力(Ability)、触发器(Trigger) 三位一体而产生。 via 为啥关注这个模型？因为它真的太简单，简单到过目难忘。而针对的问题又是太多人心头之痛：到底某人(包括自己)为毛不做某事呢？？ 叫兽说：那你得看人乐意不乐意（动机M）、能够不能够（能力A）、天时地利人和之外还有没有一阵8级东风刮过（触发器trigger）~ 比如，你想向一位老大妈推销一款扫地机器人，你觉得价钱明明足够低，大妈的每一条需求都完美满足，机器人外型已经无限接近广场舞扩音器这样大妈一定很熟悉。可是大妈就是不买，点解？ 我们把模型拿过来一看，动机是有的，你也是在大妈心情最好的时候提供了一个触发器，可是，机器人在大妈看来是一点都摸不着头脑，拿回家不懂用，她缺乏ability呀。于是购买行为并不会发生。 模型怎么用？下次遇到想让某（群）人做某件事时（艾玛太多了：点页面上一个按钮，存钱，戒烟，让舍友按时交房租），不妨想想B=MAT。是动力不足，还是能力不够，还是没有导火索？ 动力不足：明确利益点，从更深层次挖掘动力（pleasure/pain,hope/fear,social acceptance/rejection） 能力不够：减少认知/学习/操作成本，节约时间和金钱，形成习惯或惯例 缺少触发器：提供提醒、启发、帮助等“call to action”的行动召唤 行为矩阵行为矩阵是在FBM基础上将行为进行频率和长度两个维度细分得到的一个矩阵： 绿色、蓝色是正向，想让人做什么；灰色、黑色是负向，想让人不做什么；紫色是强化。 想要改变行为，先来这里瞧一瞧看一看，对症下药好得快。 灰色和黑色比较好理解，无非是少吃点、少花点，戒烟戒酒戒可乐戒买买买，那么我们要做的就是： 去掉trigger：把刺激欲望的东西全部藏起来，不然意志力一下就崩溃了 升级难度：你懂的，卸载游戏，把信用卡剪掉，给冰箱上把锁然后丢掉钥匙…… 替换动机：想吃——想想被同事白眼的胖纸，想买——想想拖了半个月的信用卡还没还…… 让我们重点关注绿色系列，毕竟让人开始做并一直做一件什么事情，是最难的，它往往是蓝色（做熟悉的事）和紫色（多做）结合后的良性结果。 栗子下面结合Duolingo的栗子来看看绿色类行为の养成。 （Duolingo是个外语学习多平台应用，想学外语还没用过的赶紧用起） Green Dot 绿点行为：让某人尝试一次新的行为，常用在引导复杂行为形成的开始阶段 例如：尝试某种食物，注册一个网站，试用微信转账 主要障碍：缺乏能力。因为是一次性尝试，所以对象必须有能力在一次尝试中完成行为。 达成：需同时具备trigger、motivation和ability 让触发器结合激发动机的促进要素 用熟悉的话术解释陌生的行为，以增强能力 强调突出利益点以增强动机Duolingo提供的是一套游戏化的外语学习机制。首次使用的人在陌生的语言领域，能力基本=0，怎样让人开始尝试？ 首先是让鹦鹉卖个萌，让人觉得容易接近 然后是看图识字（最基础的ability），并且通过一个进度条引诱你不自觉想完成一个课程（motivation） Green Span绿线行为：让人在一段时间内进行某种行为 例如：购买1年的保险，2个月内去超市都用微信付款 难点：framing the new behavior，通过降低成本（钱、时间、精力）和增加收益，以及在恰当时机提供trigger。 疑虑/害怕是人们抗拒绿线行为的主要原因：这项新活动会不会花太多时间？需要花费多少精力？如果我改变主意呢？人们无法继续，往往是因为无法对这些行为产生熟悉感。 达成：需同时具备trigger、motivation和ability 提升动力，同时降低减少动力的因素 增强能力 当能力值高时提供trigger 一入外语佛门深似海，Duolingo每天通过通知、邮件各种通知（trigger）： 学习一门语言是个庞大的任务，Duolingo帮我们拆分成一个个简单的任务，并让每天5分钟足够简单以形成习惯。 Green Path绿径行为：让人形成长期习惯 例如：以后都用橄榄油烹饪，不再使用一次性饭盒，结婚 难点：承诺（愿意改变）和达成（以新方式） 达成：需同时具备trigger、motivation和ability 提升动力 通过简化行为而增强能力 当前两点达到合适阶段时提供trigger （最重要） Duolingo提供了你基本无法忽视的威逼利诱： 挣分儿！ 得宝石！ 每日及格线！（捂脸）好友排行榜！ &nbsp; 总结一下，鼓励绿色行为的养成，可以在以下几点下功夫 让触发器跟已有习惯结合 降低行为难度以增强能力 增加行为熟悉感以防失去动力（相比之下，蓝色行为需要更聪明地考虑触发器怎么设计呐） 好了，我只能帮你到这里了，要去恶补回到今天的及格线（握拳状） &nbsp; One more thingTrigger到底是什么？ 触发器可以是：提示、提议、命令/行动召唤、请求、线索，就是那些会刺激你行动的具象开关。 Trigger又可以分三类： 对心有余而力不足的人来说，是引导者 对心不足而力有余的人来说，是激发者 对心有余且力有余的人来说，一个信号就够了 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Behavior</tag>
        <tag>Model</tag>
        <tag>心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[德意志笔记之四：民族国家的发展和一战]]></title>
    <url>%2Fdeutschnote4.html</url>
    <content type="text"><![CDATA[工业化时期德意志统一的作用，绝不仅是结束政治分裂，而且锻造了经济上统一的民族市场。国家对经济的干预非常突出，注重教育、科技发展，系统学习英美法等国工业化经验。德意志民族精神中“系统学习”和“彻底精神”在新工业革命中得到激励和发扬。 统一后的德国，在19世纪后半期大约30年内完成了工业革命，从农业屌丝华丽转身为工业高富帅。 快速的工业革命引起社会结构的大变化。工业比重（尤其重工业）快速上升，科学技术因素成为决定性因素。科技化是德国工业革命完成的标志之一，也是德国现代化的主要特征之一。 新帝国的内政外交俾斯麦的对外政策是“均势外交”：力图拉拢俄国阻止俄法接近；拉拢奥匈帝国，阻止俄国向欧洲西部和南部扩张；加剧英俄在世界各地的对抗，自己作为中间人从中渔利。欧洲大陆逐渐出现两个对立的军事同盟：德奥意，俄法。 俾斯麦的对内政策是用“普鲁士的军棍”打击一切他认为是破坏德国统一和威胁地主-资产阶级统治的势力和活动。 1890年俾斯麦因内政外交没有取得成功，而且跟新继位者威廉二世各种冲突，最终下台。 强权时代：民族沙文主义的膨胀资本主义国家工业革命完成时期，膨胀起来的民族经济力向外扩张和渗透的强烈冲动，找到了帝国主义这么一个载体。但是大器晚成的德国却只能赶上瓜分世界的末班车，所分得的殖民地很少。德国开始组建自己的海军，希望和英格兰在海上力量上平起平坐。威廉二世在外四处树敌，海军军备也引起英格兰不满，德国只剩下奥匈帝国作为盟友。 普鲁士的军国主义精神渗透到各个政治领域，和德国垄断资产阶级急切的掠夺扩张欲望结合在一起，给德国垄断资本的掠夺性带上了强烈的军事色彩。 此时，随着工业化而快速崛起的工人阶级，也在争取属于自己的权利和影响力，社会民主党诞生，成为国会中不可忽视的力量，跟威廉二世代表的君主制发生冲突。 一战1914年行刺奥地利王储斐迪南大公的萨拉热窝事件成了一战爆发的导火索。奥地利准备派兵塞维利亚清算塞尔维亚人，拖德国一起下水。奥地利炮轰贝尔格莱德，一战拉开序幕。一开始德国人将其看做面对俄、法、英的民族保卫战争。战争中皇帝的地位日益边缘化，军人集团手握大权。德军在1918年覆灭，军队指挥官强迫皇帝接受政府议会制度，以便和西方列强展开谈判。十一月革命后，霍亨索伦王朝结束，一战结束。 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>历史</tag>
        <tag>德国</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[德意志笔记之三：普奥争霸和德国统一]]></title>
    <url>%2Fdeutschnote3.html</url>
    <content type="text"><![CDATA[普鲁士崛起勃兰登堡的普鲁士王国成立于1701年，它在建常备军、改革税收制度、推行重商主义等政策下逐步强大起来。 普鲁士为战争而生，高度井然有序的机械似的效率，同政治服从以及对受命于天的传统观念结合在一起，尚武、军国主义精神是普鲁士精神的代表性特征（“士兵国王”是弗里德里希一世的绰号，不过他儿子却爱好文艺）。一个尚武民族在战争中饱受洗礼，形成服从、尽职、守时、节俭、准确的民族性格也就毫不奇怪了。 别的国家拥有一支军队，普鲁士军队拥有一个国家。——弗里德里希二世 如果说从16世纪以来，欧洲历史基本上是在法国同哈布斯堡王朝之间的矛盾和影响下发展着的，但到弗里德里希二世（文艺爱好者变成征服者）即位时，英法争欧洲老大，沙俄崛起外扩，都直接影响到德意志帝国的内部事务和普奥争霸。 看到这样一个军事化国家崛起，奥地利、法国、萨克森公国、瑞典和俄国都不淡定了，于是联合缔结对抗普鲁士的条约。而跟普鲁士结盟的只有英格兰（希望在殖民地争夺中削弱法国势力）。双方展开了七年战争。打到普鲁士崩溃边缘，多国联盟突然随着俄国女皇去世以及英、法撤兵而解散。普鲁士和奥地利签订合约，但是两巨头的左右互搏远没有结束。 拿破仑在德意志的统治普鲁士的崛起不巧遇上拿破仑横扫欧洲的时代。1806年，拿破仑攻占普鲁士首都柏林，普鲁士被迫向法国支付巨额赔款并割让一半领土。拿破仑在扩大版图的过程中抹平了很多小邦国（据说是300多个变30多个，就是下图莱茵联盟那一片，处女座看着会开心），间接推进了德意志民族意识进程。 普鲁士战败后，有个以德意志统一为己任的施泰因，推行自上而下的维新，促进经济发展。1809年，拿破仑攻占维也纳。1812年又发动对俄战争。遭遇俄式严寒冻成狗之后开始撤退，德意志一看机会来了，以民族战争为旗号组织起反抗大军。1813年莱比锡民族会战，普鲁士、俄国、奥地利和瑞典共投入30万兵力，与法国、波兰和莱茵联盟20万大军交战。关键时刻莱茵联盟胳膊肘又拐了回来，倒戈一击，拿破仑战败并退位。（德国国旗黑红黄三色是从抵抗拿破仑战争中的制服受到启发） 拿破仑统治时代over后，德意志并没有像施泰因所期望的那样建立起统一的国家，而是重新回到过去的君主统治。德意志松散的邦联（应该不能叫联邦？）由35个德意志诸侯国、4个自由城市、以及奥地利和普鲁士两个大国组成： 但是拿破仑的统治打破了已有的政治秩序，加快了德意志现代化的进程。 民主的曙光？1848年5月18日，第一届国民议会开幕，民主在德意志诞生了。巴特占多数的还是保守派，想要把侯爵写入宪法。革命后的一年内，议会被解散，民主进程受到沉重打击。 进入19世纪50、60年代，经济发展和工业革命高潮到来。英法通过资产阶级革命最终完成社会性质转变，而在德国和普鲁士，是通过改革使社会性质发生转变然后影响国家性质的转变。 普鲁士贵族、地主分化和资产阶级化，引起社会性质改变，这是是普鲁士统一德国的主要前提之一。其次是关税同盟扩大成为国内市场，小德意志地区（不包括奥地利，狠招）的经济和普鲁士逐渐“一体化”。第三个前提是沙俄霸权的丧失与俄普“同盟”的形成。 再见，奥地利。你好，统一国王和议会对军事改革的矛盾导致宪法纠纷，俾斯麦被召应付危局。50年代开始，俾斯麦从一个极端保守派转变成一个现实主义的强权政治家。后来，统一德意志又成为他的终极目标。议会多数派同俾斯麦妥协的决定性转变，是在普鲁士对奥地利战争取得胜利之时。 德国的统一是通过三次王朝战争，即1864年的德丹战争、1866年的普奥战争和1870-1871年的德法战争完成的。 普鲁士先联合奥地利战胜丹麦，在胜后领土瓜分中产生矛盾。1866年普奥开打。打败奥地利后，普鲁士国王不顾俾斯麦的劝告，想当然地扩张领土。但俾斯麦清楚，欧洲大陆无法容忍一个包含普鲁士和奥地利两强的德国存在。国王最终做出了让步，奥地利从此离开了德意志怀抱。 接下来对法国的战争不可避免，关键是如何挑起事端。俾斯麦通过删改一封电报，激怒拿破仑在1870年向普鲁士宣战。此时德意志民族情绪高涨，各邦再次联合对外。色当战役中，（老）毛奇牵出大炮，10万法军投降，拿破仑三世当了俘虏。1871年，俾斯麦正式宣告成立新的德意志帝国，德国终于实现了统一。 俾斯麦统一德国解决了德意志民族的生存问题，极大促生产力的发展，为工人阶级的壮大创造了有利条件。但也保留了专制主义的君主政体，普鲁士的军国主义传统和俾斯麦在统一中煽起的民族主义情绪渗入新帝国的各个领域，并结下德法之间的民族仇恨。 One more thing哈布斯堡王朝到底有多牛逼 我们来看看这个用人海战术联姻整个欧洲的神奇家族： 哈布斯堡王朝是欧洲历史上最为显赫，统治地域最广的王室之一，其家族成员曾出任罗马人民的国王和神圣罗马帝国皇帝（1273年—1291年，1298年—1308年，1438年—1742年，1745年—1806年），奥地利公爵（1282年—1453年）、大公（1453年—1804年）、奥地利帝国皇帝（1804年—1918年），匈牙利国王（1526年—1918年），波希米亚国王（1526年—1918年），西班牙国王（1516年—1700年），葡萄牙国王（1580年—1640年），墨西哥皇帝（1864年—1867年）（醉了……）和今法国、意大利、荷兰、比利时境内及南部斯拉夫地区若干王国、公国的国王、大公与公爵。 16世纪中叶查理五世退位后，哈布斯堡家族分为奥地利与西班牙两个分支，前者占据神圣罗马帝国的帝位，称奥地利哈布斯堡皇朝，后者则为西班牙国王，统治西班牙、西属尼德兰、意大利南部的那不勒斯王国、撒丁王国以及美洲新世界的广袤领土，称西班牙哈布斯堡王朝。 &nbsp; 另：普鲁士和奥地利的老冤家 佛里德里希：阴郁文艺王子，文艺爱好者变成征服者。1740年继位，入侵奥地利的西里西亚。修建普鲁士首都柏林，筑起无忧宫（又称普鲁士的凡尔赛宫）。1786年逝世。 特蕾西亚：阳光无忧公主。用西里西亚换来了丈夫圣神罗马帝国皇帝的皇位。13个子女。修建霍夫堡宫殿位于维也纳，曾是奥匈帝国皇帝冬宫，夏宫美泉宫是维也纳西南的巴洛克艺术皇宫建筑。1780年逝世。 参考 德国通史 德国人.普鲁士的腓特烈与女皇.S01E06 德国人.拿破仑和德国人.S01E07 德国人.罗伯特·布鲁姆和革命.S01E08 德国人.俾斯麦和德意志帝国.S01E09 哈布斯堡王朝 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>历史</tag>
        <tag>德国</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[德意志笔记之二：权力和信仰之争]]></title>
    <url>%2Fdeutschnote2.html</url>
    <content type="text"><![CDATA[漫长的封建化，教权与皇权斗争德意志中央王权出现得晚，封建化迟缓地进行。亨利一世(就是上篇笔记中改名德意志王国的那位)的继承人奥托，联合多个部落公国击退了马扎尔人（源自突厥的匈牙利种族），这是德意志民族身份认同形成的重要基础。 随后奥托派兵进入罗马,支持被罗马贵族驱逐的教皇复位。被扶正的教皇为奥托加冕，奥托成为罗马的监护人和罗马天主教世界的最高统治者，君临基督教欧洲地区，并拉开皇权与教权斗争的序幕。 神圣罗马帝国的版图以德意志地区为核心，在巅峰时期包括了意大利王国和勃艮第王国。它和拜占庭帝国（东罗马帝国）的势力边界大致如下： 随着皇帝和教皇权力争夺的加剧，教皇格里高利七世和亨利四世分别宣称自己有至高无上的权力。教皇宣布破门律：如果亨利四世不在一年内获得教皇的宽赦，他的臣民都要对他解除效忠宣誓。(还是教皇比较腻害呢破门律名字酷酷哒) 迫于封建主的压力，亨利四世到意大利向教皇谢罪，即卡诺莎事件（皇帝赤足雪中等候三天三夜，大概是中世纪最出名的段子吧），成为世俗权力对教会权力卑躬屈节的象征，意味着罗马教廷权力达到顶峰。 1084年，缓过神来的亨利四世攻陷罗马，另立教皇。皇帝和教皇在1122年进行和解，达成沃尔姆斯宗教和约：皇帝有权干预主教和修道院长的选举，国王对当选者先授予象征世俗权力的权标，然后由教廷授予象征宗教权力的指环和权杖。实质是主教们由教皇授予教职，而领地和特权则仍由皇帝授予。 圣神罗马帝国兴盛于霍亨斯陶芬王朝统治时期。红胡子腓特烈大帝几次出征意大利，在北意大利与一些日益富裕和独立的城市发生冲突，尤其是米兰。在与教皇的长期斗争中，腓特烈败下阵来，并在第三次十字军东征中死于小亚细亚。 德意志长期处于“皇帝-教皇-封建主”此消彼长相互制衡的局势。尽管在14、15世纪经济发展很快，但由于帝国分裂为许多独立邦国无法形成一个共同的经济中心。跟已经发展为中央集权的民族国家如英法相比，德意志在经济发展中开始落后，民族国家的形成被大大延误。 宗教改革15、16世纪的宗教改革为什么首先在德意志发生？民族民主进程缓慢，思想、精神、物质、国家和民族矛盾集中且日益尖锐，使得1517年爆发了路德的宗教改革。 目睹罗马教廷的腐败后，路德在研究古文圣经的过程中逐渐形成宗教改革思想。路德在读保罗的使徒书时，从“义人必因信得生”得到启发：人不是靠自己的善行，而是靠信仰上帝而得以免罪。 路德逐步脱离天主教教义，在《论基督徒的自由》中要求每一个基督徒都有直接同上帝联系的权利，而无需通过教会和神甫作为居间人。此后，“因信称义”（唯信仰得救）就成为路德神学的主要教义，也是他进行宗教改革的基石。 1522年开始，宗教改革运动分裂为三个营垒：一是天主教或保守派营垒，二是温和的市民与贵族的改革派营垒（路德），三是革命的农民和平民营垒。1524-1525年爆发了德意志农民起义，目的是建立统一的德国和取消封建剥削，但是木有成功。 在路德宗教改革结束的时候，德意志诸侯赢得了完全的胜利。德意志居民分裂成天主教徒和新教徒(执路德信义的福音派)。16世纪中期，只剩下老巴伐利亚、部分波西米亚王国和奥地利大公国地区以及西莱茵地区还信奉罗马天主教，教皇在帝国其他地区已经失势。（所以知道为啥他们是对头了吧） 1618-1648三十年战争17世纪初，波西米亚地区成为宗教信仰冲突的焦点，民众大多数是新教徒，国王和统治者则是天主教徒。 新教徒为反抗废除新教教堂的政策，把行政官扔出窗外（插图也是醉了）。随后皇帝派军将新教徒驱逐出波西米亚地区。 天主教势力的扩张，引发丹麦国王的担忧而出兵对抗费尔丁南德大帝，华伦斯坦（DS逆袭）带兵出征打退丹麦军队。（去布拉格不要错过华伦斯坦的宅邸）权力斗争中华伦斯坦被扯下台后，新教诸侯又找来新教先锋军的瑞典国王古斯塔夫·阿道夫，来反抗费尔丁南德大帝的归还教产赦令。天主教阵营重新找到华伦斯坦，击毙想称霸德意志的瑞典国王。因为害怕华伦斯坦势力进一步壮大，费帝又将他流放。 战争没有胜利者，双方诸侯在布拉格商议停战，新教徒和天主教徒得以和平共存。三十年战争是由内战演变而成的一次大规模国际战争，标识德意志宗教改革时代的结束，联邦传统而不是中央集权得到巩固。结束自中世纪以来由“一个教皇，一个皇帝”统治欧洲的局面，开始了欧洲近代国际关系。 One more thing西罗马帝国、东罗马帝国、神圣罗马帝国是什么关系？ 395年，狄奥多西一世将罗马帝国分给两位儿子，从此分裂为西罗马帝国和东罗马帝国。西罗马帝国的首都在拉文纳，东罗马帝国的首都在君士坦丁堡。 476年，西罗马帝国彻底解体，末任罗马皇帝宣布西罗马帝国不复存在，帝国的所有殖民地均可自行独立。东罗马帝国却得以保留，即后来的“拜占庭帝国”。 962年，东法兰克国王奥托的加冕仪式，使日耳曼国王们成为了查理曼帝国的继承人，并通过帝国继承原则成为古罗马的继承人。奥托用迎娶拜占庭公主的方式保持了与东罗马帝国的联姻关系。从1157年起，奥托建立起的帝国被称为德意志神圣罗马帝国（即德意志第一帝国，延续到1806年） so，东西罗马是手足，一个挂得早，一个被奥斯曼帝国灭了。神圣罗马是另一支势力，崛起后通过教会为自己正名并“罗马化”，跟东罗马并存且有一定的联姻等关系。“既不神圣，也不罗马，更非帝国。”伏尔泰如是说。神圣罗马，有一定的标题党意味，目的是把非正统罗马传统的帝国合法化吧。 Two more thing国王和皇帝有什么区别？ 自奥托大帝开始，每个德意志国王要获得神圣罗马帝国的皇冠，都必须亲自到意大利由教皇加冕，加冕后才能称为神圣罗马皇帝。 这里又得提到选帝侯制度，指拥有选举德意志国王和神圣罗马帝国皇帝的权利的诸侯。此制度严重削弱了皇权，加深了德意志的政治分裂。 1356年，卢森堡王朝的查理四世皇帝为了谋求诸侯对其子继承王位的承认，确认大封建诸侯选举皇帝的合法性。诏书以反对俗世的七宗罪为宗教依据，确立了帝国的七个选帝侯。（这都行……） 他们分别是三个教会选帝侯：美茵茨大主教，科隆大主教，特里尔大主教，和四个世俗选帝侯：萨克森公爵，勃兰登堡藩侯，普法尔茨伯爵（或称莱茵行宫伯爵），以及波希米亚国王。事实上，七选侯选举出来的人只能称“德意志国王”，只有经过进军罗马，并由教皇加冕后的“德意志国王”，才能使用“神圣罗马帝国皇帝”头衔。 （问题是！选举权可以进行转移！欧洲诸侯又喜欢结个婚，传个远亲之类的，真叫个一片混乱啊……） 参考 德国通史 德国人.亨利四世和教皇.S1E02 德国人.巴巴罗萨和狮子亨利.S1E03 德国人.路德和民族.S01E04 德国人.华伦斯坦和他的战争.S01E05 神圣罗马帝国的皇帝是怎样被选举出来的？ 中世纪神圣罗马帝国皇帝们的称谓和头衔 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>历史</tag>
        <tag>德国</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[德意志笔记之一：德意志民族的形成]]></title>
    <url>%2Fdeutschnotes1.html</url>
    <content type="text"><![CDATA[这是一个很容易让人不解的民族：明明没有强大统一、绵延千年的民族历史，但有强大的民族认同和繁复得有点变态的语言；既孕育牛逼闪闪的康德黑格尔爱因斯坦贝多芬们，又产出铁血宰相和战争狂人；还有父与子这种淳朴粗粝但温情无比的漫画，跟现代化工业和设计风格大相径庭；球场上日耳曼战车踢法丝丝入扣，喝起酒来又是另一个物种…… 德国和日本，也许是世界上最极端的民族，也正是这种偏执的民族性格，引人注目，惹人好奇。希望在踏上这些神奇民族的土地之前，对它们能有多一些了解，于是有了这一系列的笔记。 古老民族，年轻国家一直觉得，德国应该是一个历史悠久的“国家”。其实德意志1871年才成为统一的民族国家。随后两次挑起世界大战的德国，在1990年才获得了正真意义上的统一和独立。“日耳曼民族是谁”“德语是什么”还算说得清道得明的问题，但是“德国在哪里”，却长期困扰德意志人，很多人认为“Deutschland”不过是一个地理概念。 德意志民族的历史发展主线基本只有一条：民族和政治的融合/分裂（这冒出来一个，那边一个变大了，然后打起来，blablabla）。之所以一直没有形成统一的国家，有四重分裂因素起着重要作用： 国土位于欧洲中部，强敌环饲； 多民族； 民族精神多重性和矛盾性； 没有中央王权。 看完《德国通史》，不得不感慨，这个民族的统一道路实在太坎坷漫长。 日耳曼人与德意志人在《你一定爱读的极简欧洲史》中，作者将古希腊罗马文化、基督教教义以及日耳曼战士文化作为塑造欧洲文明的内核。这个民族在欧洲历史上的重要性和影响力可见一斑。 古代日耳曼人大致来自中亚至印度北部一带和波罗的海西部西南部。到公元前一世纪，已遍布多瑙河以北莱茵河以东，过着半游牧生活，尚武勇猛。 公元前二世纪末，罗马帝国企图征服常来劫掠的日耳曼人，筑起Limes墙，从莱茵河畔的巴特赫宁根 (Bad Hönningen)/莱茵布洛尔 (Rheinbrohl) 一直延伸到多瑙河畔的雷根斯堡 (Regensburg) 地区作为稳固界限。 奥古斯都（嗯嗯就是凯撒的养子，那位“看起来”瘦弱的屋大维）大帝没有降服日耳曼人，条顿堡森林会战使日耳曼人永远摆脱罗马而取得了独立。从公元四世纪中叶开始，日耳曼部族民大迁徙形成部落联盟。随后，法兰克王国兴起。919年，萨克森公爵亨利一世将东法兰克王国改名为德意志王国，这大概就是德意志历史的开端。 Bonus：日耳曼和德意志和德国是一回事么？简单的说，德意志（Deutsch）民族由日尔曼（German）人中的一支慢慢演变而成，统一后才成为现代意义的国家——德国（Germany）。 日耳曼人分支和演变（请戳大图） 从严格意义上划分，919年前由法兰克人建立的王国，以及民族大迁徙时由日耳曼人在西罗马帝国领土上建立的许多王国，应称为日耳曼王国或日耳曼国家，在这块土地上生活的人应称为日耳曼人。919年后建立的王国、帝国或邦国应称为德意志，其居民应称为德意志人。1871年德意志实现统一，民族国家随之而诞生。从这时起建立的帝国、共和国应称为德国，它的国民应称为德国人。1867年，奥地利从德意志分离出去，成立奥匈帝国。此后的奥地利人不能称作德国人，但仍可称作德意志人。 &nbsp; 参考： 德国通史 德国人 S1E01.奥托与帝国 日耳曼人和德意志人有什么联系和区别？ 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>历史</tag>
        <tag>德国</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IxDC大会笔记1——服务设计峰会]]></title>
    <url>%2F2014ixdcnotes-servicedesign.html</url>
    <content type="text"><![CDATA[豆腐要趁热吃，连夜将笔记杂糅进自己的疑问和想法记录下来，也给没能来的同学剧透一把。 Day 1：服务设计峰会 主讲嘉宾什么的就不介绍了，四位都是大拿，国内外，甲乙方，大象、跨国咨询公司和本土设计师都有。将四个演讲以及圆桌讨论都提及的话题做一下记录整理： 一、什么是服务设计？跟设计的定义类似，服务设计也可能有很多层次。简单来说，服务设计着眼于优化整个过程的每一个节点，是一种系统的、全局规则的设计。 二、服务设计为何兴起？ 消费者角度：消费者可以通过各种渠道获得信息，辅助购物决策，不再仅仅接受推销，不再仅仅满足于购买单一产品。Brand is lagged behind consumers. 市场竞争：体验经济兴起，仅仅卖产品无法维持竞争力 设计领域的演变：Graphic→Industrial→Interaction→Eco-system 三、服务设计领域食，住，行，玩，医疗，教育，尤其金融业对服务设计的需求在国内是爆发之势。 四、服务设计的关键思想1.全局视角服务设计更多解决的是生态系统的问题，从策略一直做到细节。商业先于品牌先于产品先于功能先于交互先于视觉，服务设计更侧重于商业和品牌策略，同时也考虑具体的实施。 2.问对的问题客人对早餐不满意，问题也许不在“餐厅装修不够漂亮”。听到消费者说只有半小时做晚饭而解冻肉就需要20分钟，解决方案也许不是去做解冻机，因为问题并不仅仅是“我要怎样更快解冻”，而是“怎样在有限时间内提供适合全家人的健康晚餐”。 3.以人为本不能简单用以用户为中心的视角去看待，因为既然面对的是一个生态系统，那必然涉及很多stakeholder。设计一个stakeholder利益平衡，良性发展的机制，是更难的设计。 4.设计思维和方法 观察，交流 可视化 prototype 5.针对体验重新设计整个流程分解体验模块，对每个touch point去发现问题、重新定义体验原则和系列实施措施。比如需要针对环境、体验、设备、内容、运营等环境进行设计。 6.团队参与不同背景的人为同一个问题相互说服，取得平衡 五、设计师角色以及如何推动来自台湾的飞利浦设计顾问介绍了飞利浦设计团队漫长的进化过程中，为增强设计影响力的一些经验。从Design as Out come注重结果、数字，到Design as Approach成为公司不同部门、不同岗位人员共同的沟通和协作工具，到Design as Capability成为公司推陈出新、紧紧把握市场和消费者需要的一种“内功”，设计部门需要不断去宣传设计理念，做好向上和向下的影响。 设计师虽然看似总处在问题的外围，做一些对其他人并不太要紧的东西，但是设计师掌握了“可视化”等厉害的武器，并且有更好的storytelling能力，还能引入新视角和新方法，是能够也应该协调不同角色通过一些设计的思维去更好的解决问题，是facilitator而不是decision maker。 比如飞利浦内部有一套评估服务体验的工具(记录问题，用词可能不太准确)：Trigger to connect→Inform to educate→Convince to buy→Order &amp; delivery→Convince to reassure→Delight to engage→Motivate to share 六、如何衡量服务设计的好坏和价值（行业难题讨论不充分啊……）用数字、NPS等去衡量what，用定性的方法去问why 七、服务设计和创新跟设计一样，创新也有很多层次。适合的、可行的、解决问题的创意，可以称为创新。创新并不一定时灵光一闪，每个问题总是有不同层面的多种解决方法，reframe整个问题，往往就能看到原有解决方案的不足之处。也许我们换一种解决方法，去取得最佳的平衡，就是很好的创新。 八、跨文化的服务设计寻找共同的基础价值，观察人的基本需求。强调onsite，一定要与服务对象有深入的交流，了解他们的价值观、行为方式、目标等等等等。飞利浦吸奶器的例子，安快银行的例子。 九、如何平衡商业和设计的人文关怀 寻找共同的value，构建整体的value system； 着眼于长期的engagement，而不是短期的利益； 讲大家想听的，做自己的看到的——了解stakeholder的需求，大家达成共识 十、设计师的修炼 训练处处能发现问题的眼睛，问对的问题 知道小伙伴的目标、痛点、需求 引入方法，团队协作 学会讲故事 主讲人们提及的、值得追查的服务设计案例： 皇马俱乐部：围绕content对Brand value、engagement、sale等方面进行了整体优化。 Holiday Inn 安快银行 民生银行社区银行 遗留问题： 服务设计是对现有做法的一种再包装吗？ 服务需求、服务传统不强的领域如何推销服务设计？ 传统企业从offline拓展到online现在已经是汹涌之势了，但是online如何做offline？&nbsp; 00 @beijing 2014-07-17]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>设计</tag>
        <tag>service design</tag>
        <tag>服务设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Arduino笔记2——基础电子元件]]></title>
    <url>%2Farduino-note2.html</url>
    <content type="text"><![CDATA[LEDLED是标准的发光二极管，只允许电流从一个方向流进，两个引脚中，较长的为正极，短的为负极（接地）。 上图的LED的输出范围是0-255，如果使用其他元件（如 旋转电位器）进行调控，一般会有相当一部分超出范围不起作用，需要进行映射转换。 电阻如何读取色环电阻的阻值？以五色环电阻为例（via） 首先识别五环电阻的第一环。四环电阻的偏差环一般是金或银，一般不会识别错误，而五环电阻则不然，其偏差环有与第一环（有效数字环）相同的颜色，如果读反，识读结果将完全错误。那么，怎样正确识别第一环呢？ 偏差环距其它环较远。 偏差环较宽。 第一环距端部较近。 有效数字环无金、银色。（解释：若从某端环数起第1、2环有金或银色，则另一端环是第一环。） 偏差环无橙、黄色。（解释：若某端环是橙或黄色，则一定是第一环。） 试读：一般成品电阻器的阻值不大于22MΩ，若试读大于22MΩ，说明读反。 试测。用上述还不能识别时可进行试测，但前提是电阻器必须完好。 TOKEN 的第五条色环如为黑色，一般用来表示为绕线电阻器，第五条色环如为白色，一般用来表示为保险丝电阻器。如果电阻体只有中间一条黑色的色环，则代表此电阻为零欧母电阻。 蜂鸣器发出单一声响的数字量设备，通电就响，长脚为正极。 电机分为直流电机、步进电机和伺服电机。 直流电机：通电就转，断电就停，反接就倒转。直流电机的速度用 PWM表示，控制靠反馈，如限位开关。 步进电机：需要靠程序不断轮流给几个线圈通电才能转起来，可以有精确的角度。 伺服电机：几乎任何类型有内置反馈控制的电机都可以称为伺服电机（舵机）。 LM35半导体测温元件，从左至右三脚为电源、信号和地，信号测量到的模拟量随温度变化，每升高1℃，输出电压增加10mV，测出的电压乘以4.88除以10，就是当前的近似温度值。 DHT11温度湿度传感器 超声波距离传感器 电子元件很多，拿到一个不熟悉的元件时，可以用串口输出的方式检测元件的输出值范围。]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Arduino</tag>
        <tag>电子</tag>
        <tag>智能硬件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Arduino笔记1]]></title>
    <url>%2Farduino-note1.html</url>
    <content type="text"><![CDATA[Arduino是一套能够用来感应和控制现实物理世界的工具，它采用了基于开放源代码的软硬件平台，采用一个开放源代码的单芯片微电脑（Atmel AVR单片机），构建于开放源代码 simple I/O 接口板，并且具有使用类似Java，C 语言的Processing/Wiring开发环境。via 单片机一台能够工作的计算机一般由几个部份构成：中央处理单元CPU（进行运算、控制）、随机存储器RAM（数据存储）、存储器ROM（程序存储）、输入/输出设备I/O（串行口、并行输出口等）。在PC上这些部份被分成若干块芯片，安装在一个被称之为主板的印刷线路板上。而在单片机中，这些部份全部被做到一块集成电路芯片中，所以就称为单片（单芯片）机。有一些单片机还集成了其它部份如模拟量/数字量转换（A/D）和数字量/模拟量转换（D/A）等。单片机采用的芯片多为8位或16位，嵌入式系统芯片多为系统芯片或32位处理器。单片机系统运算速度大约为20MHz；32位芯片多为数百MHz。 入门学习材料 Arduino板+USB线 (Arduino方口线) Ardunio配件 (盾板、模块、面包板、面包线) Arduino软件 (www.arduino.cc) ArduBlock插件(可视化编程工具) (blog.ardublock.com)&nbsp; Arduino板基本构造 数字扩展插座：有0~13号数字引脚，13号连接固定在板上的LED。带有波浪线的引脚同时可以做模拟输出（所以数字针脚需要在Arduino程序的setup中定义 pinMode是INPUT还是OUTPUT）。接线最好避开0号和1号引脚，因为它们往往要用做串口输出。 模拟扩展插座：A0~A5，用于模拟信号的输入。例如传感器检测到的温度、电压值、红外线等信号，由模拟引脚输入并进行A（Analog）D（Digital）转换。 电源扩展插座：提供3.3V和5V电压输出，有两个GND（地）口。 TX灯：arduino向计算机发送串口信号的指示灯。 RX灯：arduino接受信号的指示灯。 Arduino基准电压5V，AD输入是10位的：0~1023。]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Arduino</tag>
        <tag>电子</tag>
        <tag>智能硬件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[说说设计思维]]></title>
    <url>%2Fdesignthinking.html</url>
    <content type="text"><![CDATA[从前，觉得设计师很神秘，能用一种看似很酷的方式做出好看的东西； 从前，觉得设计师跟其他人有些不一样，想法很多，但有点不太接地气； 从前，觉得成为设计师似乎并不难，有点子，会画画就行； …… 直到两年前开始做设计，才知道设计过程充满了未知，做出好的设计远没有想象中容易。当然，对我而言最大的难题，是怎样从一个没有受过设计训练的人，变成拥有设计思维的人——仅仅有设计技能是不够的，设计思维才是融入设计师血液中、区别于其他人的DNA。 思维这个词过于general，这里想梳理和讨论的是，设计作为一个专业领域，它的基本立足点或价值观是什么，有什么样的思考方式和解决问题的套路。 什么样的思考模式区分了设计师和非设计师？商业思维和设计思维有什么区别？技术思维和设计思维有什么区别？这个话题太大我没有能力回答，只能说说感性的认识：商业关注的是结果，如何评估投出和产出，如何整合、利用资源达成目标。所以商业思维重点不在于为什么，而在于是什么和有什么用、谁会用，在于何处会有利润。技术思维可能更多关注可行性和效率。 那么设计呢？ 设计思维本质上是以人为中心的创新过程。via 它强调观察、协作、快速学习、想法视觉化、快速概念原型化，以及并行商业分析，是一种有助于发现未被满足的需求和机会，并创造新的解决方案的方法。 再来看看与之相近的“Design thinking”的wiki定义 As a style of thinking, design thinking is generally considered the ability to combine empathy for the context of a problem, creativity in the generation of insights and solutions, and rationality to analyze and fit solutions to the context. via 可以看到在设计中，会特别强调 person，context，solution，visualization，prototype，test &amp; verify。而设计区别于其他思维的关键点，有以下几个方面： 一、以人为本从“人”的角度而不是从商业价值、技术实现等其他的角度出发去考虑问题，是设计最重要的特征。并不是说设计不用考虑投入产出和最终实现，而是说设计作为一个领域、一个行当，之所以存在并能发挥价值，其核心的立场是“人的视角”（不是上帝视角，不是什么创意大拿的天赋），主要解决的是与“人”相关的问题，更多是感观、感受和行为相关的问题。 这一点特别容易被陈腔滥调化。现在谁不会说“以用户为中心的设计”，哪个团队在讨论时不会频繁用到“用户”这个词？但是在每天的工作和各种各样的决策中，到底有多少是从使用者的角度考虑呢？到底是否解决了人的问题？我们认为的问题多大程度上是用户实际关心的问题？能从多大程度上解决？ 要发现和识别用户的问题，必需了解他们。这种了解不仅仅是知道他们大概的人口属性特征，而是他们的目标和需求，态度和偏好，在真实环境下的行为和反应。这些信息无法完全通过猜测或数据获取，必需到真实世界中去观察，以便代入到实际使用者的视角和思维中。作为设计师，好奇心和同理心特别重要。永远把自己当做不了解用户的人，去接触、去观察，从他们的视角去理解世界和发现问题。越是有经验的从业者越相信自己的判断，只有好奇心才能激发对人的真正兴趣，能保证内心和头脑不是满的状态，新的东西才能进来，毕竟设计本身就是个推陈出新的过程。 二、开放和创新要讨论创新真心有种无力感。设计活动的实质，可以说是以新的方式解决问题，以弥合现状和目标之间的gap，创新是设计天然的目的之一。“新的方式”如何产生？头悬梁锥刺股绞尽脑汁是出不来的，更多得靠“jump out of the box”，从问题以外去寻找答案。这个过程最需要的是“开放”。留一个口，让更多信息和可能性进来；开一个口，让自己能从当下的空间、维度、坐标跳出去。多接触不同的东西，快速学习，鼓励多样性，这是开放。要获得更好的答案，不能只是从答案A1跳到A2再跳到A3，为什么不能是B？为什么不能是©？问题是什么？是不是有其他的问法？…… You can’t teach creativity; all you can do is let it blossom, and it blossoms in play. ——Kyung-Hee Kim 对这句话深以为然，创新几乎是不可以教授的，因为一旦教授，就是旧有的模式，本身就违背了创新的实质。但是我们通过鼓励思考、想象、关联、突破、趣味等等，让创新自然的生长，而不是从他处移植过来。 三、过程和试验相比商业思维的结果导向，设计更强调过程——在过程中得到产出。设计的过程，实质上是对无穷尽的可能性做逐步的收敛，最后得到唯一的最终方案，即发散→收敛的过程。 这是IDEO总结的五步设计过程（via）： 1.Discovery 了解设计挑战是什么 研究准备 收集信息和灵感 2.Interpretation 用故事表达需求和问题 提炼设计价值和意义 在框架中识别机会 3.Ideation 产生各种想法 细化想法，生成方案 4.Experimentation 制作原型 获得反馈 5.Evolution 跟踪 进一步行动 类似的设计过程还有很多: CMU的设计流程框架：define定义——discover发现——synthesize综合——construct建构——refine精化——reflect反思 Design Edge的三步设计过程：define——discover——develop Smart Design的三步设计过程：conceive——create——complete 下面这个图也总结得特别好（点击图片查看来源） 这些经典的设计过程，基本都包含以下步骤： 定义设计问题或机遇：通过观察、参与、沟通，去理解人们所处的场景和经历的故事是什么？ 发现隐藏的欲求、需求和欲望：尝试理解人们做什么事情以及为什么 综合、建构和精化：先发散探索多种解决方式，然后收敛定位最佳答案 反思、评估和修改 可见设计思维所强调的是情境启发、定义问题、方案探索和反复优化。 1.情境启发情境启发是为了把关注点聚焦到人。人只有在具体的情境下才是活的，人所遇到的问题一定都有情境的限定。太早把问题抽取出来，不利于我们对人的复杂性（更不要说人跟物、人跟人、人跟环境的复杂性）进行全面的考虑。 2.定义问题定义问题是为了开启可能性。问对问题是解决问题的第一步。举个栗子： 美国铁路公司想要推出新的高速铁路线“阿西乐快线”，从华盛顿沿着美国东海岸一路向北到波士顿。美国铁路公司要求设计公司提交重新设计的列车内饰的提案，想以此吸引更多的乘客。 IDEO的反应却是说“不”。IDEO认为适当的解决方案是一个系统的方法，而不是重新设计很多部分中的一个。最终美国铁路同意做一个彻底的关于全部服务体验的概念重构。 IDEO将火车服务分为10个步骤：了解线路、时间表、价格；计划；开始；进站；购票；等待；上车；乘车；抵达。 他们重新设计了整个系统，设计团队包括许多学科，包括了人机工程学专家、环境专家、工业设计专家和品牌专家。结果创造了全美国最受欢迎的火车线路。 在实际工作中，设计师被叫做美工不是没有道理的。产品经理拿着一个方案（注意是方案）过来，说我要做这我要做那，方案都有了，设计只是把它做得好看，那不是美工是什么？合格的设计师，必需能通过需求方的方案回到问题，甚至回到问题的根源，去明确、去修正、去细化问题，去探讨解决问题的更多办法，以及评估哪种办法是最优以及当下最合适的。 多扯几句，有个小办法，也许能帮助我们在讨论中快速zoom in和zoom out，既关心问题根源，又能考虑最终细节。这个方法是——将当前对问题的描述作为起点，连续问5个why和5个how。 例如，我们要做一个手机外放音量增强的功能。 为什么用户需要音量增强？ 因为不够大声——为什么要大声？ 因为不大声听不清楚（大声就可以听清楚吗）——为什么要听清楚？ 因为这样才能更好欣赏到歌曲（更好欣赏歌曲还需要怎样）——为什么要欣赏歌曲？ 因为想打发时间/放松心情——为什么想打发时间/放松心情？因为空闲无聊/排解压力…… 追问下来，发现音量增强背后的目的和深层次的需求还是离不开听音乐的目的。那么在存在音量太小的情境下，增大音量是否唯一的做法？或者说做了是否对目的有帮助？ 接着问5个how： 怎样让用户增大手机外放音量？（n多方案中挑选出） 提供一个调节音效的功能——怎样调节音效？（n多方案中挑选出） 给一个类似音量的控制模块，用户可以左右拖动——怎样做出控制模块？（n多方案中挑选出） 有一根长条形的进度显示，加一个当前位置的句柄——长条形要有多长多高什么颜色等等？……………… 5个why追根溯源，5个how深入细节，一下子将原本只有二维的问题拉出一条Z轴，让我们快速从宏观到微观走一遍，更好地去定位问题。 3.方案探索方案探索是为了从更多可能性中找到更优方案。为什么不直接得到唯一的、最优的方案？因为单一的方案限制了可能性，也缺乏对比，很难说就是最好的。想出一个方案太容易，任何人包括老板、产品经理、研发、运营等等都可以做到。设计师所擅长的，应该是发现和尝试更多可能性，从而帮助团队找到最优方案。另一个原因是如果过早敲定一个方案开始投入，到了中途再想到其他可能性时修改成本就非常大，设计的职责在于将这种风险提前到方案确定之前，用低成本的方式去筛选再确定最终方案。 如何逼近最终方案？逐步明确目标（拉力）和限制（推力）。没有限制的设计一定是最难做的设计——那往往是解决不了实际问题的艺术。只有目标明确，选择方案时才不会陷入无止境的纠结；只有明确限制，才能保证设计最终能落地实现。 4.反复优化反复优化是为了去适应现实世界，而不是闭门造车地想出完美方案后再用waterfall的方式实现出来。这也是最近很流行的LeanUX的核心理念之一：假设我们最初的做法是错的，要尽快找到错误并且改进它。 设计本身就是快速尝试和反复修改的过程，试验和反馈快速交替，就可以在过程中不断调整而不用推倒重来，这一点跟互联网快速试错和迭代的模式不谋而合。因为需要反复的改进，所以如何收集反馈、评估现状就特别重要。平时工作中有太多的功能和设计，是被当做“定案”去做，上线后就撒手不管，自生自灭，n年后自然就变成了棘手的“历史问题”。如果能将每一个新东西当做“试验”去做，我们就会思考它存在的必要性与合理性，会关注它的表现和使用者对它的评价，将它定位为“需要以及随时可以优化”的东西。 四、可视化（具象化）图片胜千言。设计的语言就是可视化。将问题可视化、将思考过程可视化、将方案可视化，可以降低理解成本，减少分歧，加速达成共识，更早与用户沟通想法并做出合理的修改。 ===================唠叨接近结束的分隔线=================== 以人为本、开放、过程和试验、可视化，是我所理解的设计思维，是设计区别于其他领域的思考和解决问题的方式。 再总结下拥有设计思维的人的特点： 广泛的好奇心 充足的同理心 开放、乐观、灵活、乐于改变 理解复杂问题和确定问题根源的能力 产生多种想法和综合概括的能力 善于用可视化方式进行表达和沟通 动手能力 解决问题的能力 写到这里，再回想以前对设计师的理解，实在有些汗颜。 如果说爱一个人的最大的意义在于让自己变成better me，爱上一个人能做的最大努力是改变自己（不愿改变的部分），那么设计应该是一个值得热爱的领域。成为更好的设计师，就成为了better me，多合算的买卖 :)]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>设计思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[纠结的路上不是只有你和我——说说产品经理和交互设计师]]></title>
    <url>%2Fpm-and-ixder.html</url>
    <content type="text"><![CDATA[几天前在公司做完分享，有同事问我：“你之前做产品（策划/经理）不是挺好的，为什么后来去做交互（设计）了？” 当时真是千言万语不知从何说起，平时也有不少朋友问到相似的问题，带着或好奇或不解或“这个人是有多想不开”的表情。补充一下我的纠结经历：1年多产品策划→1年用户研究→半年产品经理→快2年交互设计。确实是经历过相当一段时间的困惑、迷茫、纠结和折腾，现在终于可以给自己一个相对完整的答案。这篇啰嗦的长文会说说这几个问题，也给正在迷茫的同行们一些参考吧： 一、产品经理和交互设计师有什么不同 二、产品or交互？如何选择 三、从交互转产品是不是一种倒退 四、做交互的前景是什么 五、交互设计师的价值 六、交互设计师应该提升哪些能力 一、产品经理和交互设计师有什么不同每个公司对这两个岗位的定义不尽相同，在不同团队中两个角色职责的交叠范围也差异很大。因为并没有接触过“产品设计师”“用户体验设计师”，我只能从自身的经历去尝试理解这个行业中产品经理和交互设计师的不同： 1.职责不同所谓经理，主要职责是经营与管理，是owner，是manage-r，负责一个产品的生（从无到有）老（增长）病（解决问题）死（消亡/转型）。设计师的主要职责是产品（界面）的设计。 从字面上非常好区分，但现状却很尴尬：产品经理(特别是经验较浅的)，大部分时间在做着界面设计的事情，而交互设计师（特别是能力不足的），大部分时间在跟产品经理对着很粗糙的线框图不着边际地“PK”。因为职位重要性和能力不匹配很容易被感知到，产品经理要面对“人人都是产品经理”的质疑；而交互设计师因为本身定位模糊，很多时候还要回答“我是谁”这种来自自我或他人的拷问，对自身能力差并没有太清醒的认识，更加容易被质疑和替代。 经理职位自古就有（虽然产品经理在国内远比在国外火爆），但为什么这几年突然有了交互设计的生存空间？最主要的原因不是整个行业对设计的要求越来越高，而是效率需要。产品经理或UI设计一个人顾不了那么多细节的设计，需要交给另一个人来提高效率；一步到位、完整的界面设计太耗时，不符合快速讨论、快速迭代的要求，需要有更低成本的沟通和执行方式。 说得通俗一些，产品经理基本是要负责“把事做成”，交互设计师基本是要“给出设计方案”（往往是粗糙的）。两者比较好的合作关系应该是：产品经理制定目标和规划，提出问题，设计师给出设计方面的解决办法。 2.能力要求不同职责不同导致对能力的要求不同。大家都同意产品经理需要很强的综合能力，对各个岗位都有很深入的了解。但是 好的策划能力+好的设计能力+好的技术能力+好的文案能力+好的沟通能力（+…）≠好的产品经理，因为这些能力其他岗位更擅长，是产品经理能力的“外延”，而产品经理能力的内核我认为是——管理，这其中又有几个特别重要的职责： 洞察趋势，指出方向； 思考并实现产品的商业模式； 培养团队凝聚力，鼓舞士气； 为团队成员服务（让他们的工作发挥价值） 所以： 产品经理最重要的sense，不是说不清道不明的“产品sense”，而是对人的洞察； 产品经理最不能缺少的是思维能力（尤其是系统思考），不然怎么可能对所有岗位的工作都能把握核心并提出靠谱的需求； 产品经理最应重视的“设计”，不是交互设计，不是界面设计，而是商业模式和业务模式的设计； 产品经理大量沟通最关键的目的，是怎样让团队成员围绕目标更有效、高效、愉快地工作。 有次跟某产品总监交流，他的观点很有趣：产品经理的核心价值是促成团队成员价值的交换。产品经理并不需要自己学会所有的技能，但是能让每种岗位技能的发挥达到最大化。试想，如果一位产品经理要花时间跟交互讨论用radio还是checkbox，那还有那么多重要的事情肿么办丫？如果你现在在做产品经理，请想想你对界面细节的执着和纠结，到底是对整个团队朝着一个目标共同努力有帮助，还是仅仅实现了自己（而不是整个团队）的想法？ 3.使命和动力不同整天想着“改变世界”的基本都是产品经理，想将一个big idea变成现实，去影响亿万人。不知道从哪里来的自信，浓重的个人英雄主义，让他们可以7x24连轴转。缺乏深层动力的产品经理会非常累，什么都要管，责任心和精力都透支得厉害。 而设计师的使命一般是“让产品/生活（或其他设计对象）变得更好”，虽然本质上也是要改变些什么，但不必执著于通过扮演救世主般的角色去实现big idea，可能只是纠结一个按钮的圆角要多圆才最好……可以说是吹毛求疵闲得蛋疼，也可以解读为不以善小而不为。 这么看来，结果对产品经理更重要，而设计师会更享受过程。 4.领域和思维不同这个问题我花了整整3年才大概搞明白：产品经理的领域是管理和商业，交互设计的领域是设计、人、技术的交叉。 产品思维：目标导向，全局思考，结果和效率，解决问题，规划，组织，管理，量化，评估。 设计思维：以人为本，创新，观察，协作，快速学习，想法视觉化，快速概念原型化。 5.技能和工具不同产品经理天天上的网站应该是智库百科（而不是神马互联网那些事），用的是各种类麦肯锡的框架工具，操着ppt和项目管理工具，去钻研数据和benchmark。设计师则应该经常跟用户打交道，操着便利贴、各种画图和快速原型实现工具，围绕目的和问题讨论各种解决方案。 二、产品or交互？如何选择一般人并不会遇到这个问题。如果不幸你跟我一样纠结，可以尝试从以下几方面去考虑： 1.兴趣 你对商业和管理更感兴趣？还是对人和设计更感兴趣？ 你对运筹帷幄、规划组织更感兴趣？还是对洞察、梳理、尝试、制作更感兴趣？ 你对沟通、影响更感兴趣？还是对美感、乐趣更感兴趣？ 你对改变世界更感兴趣？还是对渐进改良更感兴趣？…… 2.个性就个人经验来说，技术性格、逻辑太差、特别不喜欢沟通、个性太内向、极敏感的人不太适合做产品经理；没有同理心、感官不敏感、情感不细腻、特别严肃、过于自我的人不适合做设计。 个人比较偏激的看法：管理的基本假设是人性的缺点和商业结果的冲突，这种工作总是让人聚焦在负面问题之上，而且必需进行大量沟通，不适合内向及悲观的人。而设计不同，基本视角是要发现和创造美，再多的问题也好，只要一打开工具画图，世界又变得沉浸而美好。 3.能力极端一点地说，产品经理主要靠“想”和“说”，交互设计主要靠“做”。基本的能力两者都需要具备，越强越好，不过思维能力和沟通能力是产品经理的核心竞争力，对设计师而言，则是实际动手能力。 4.前景从行业现状来看，产品经理的职权和地位无疑高于交互设计。 产品经理的成长空间很大，不但涉及到各种角色，而且能往管理和战略走。产品经理做到后面，基本都有自己创业做产品的想法。如果将来有创业的打算，请尽快开始做产品经理。 交互设计则是刚刚起步，前途未卜，有可能会因为行业分工的变化而被淘汰，也有可能会演变成其他职能，但是它有一个比产品经理有优势的机会：当互联网成为一种基础服务，完全融入到其他行业时，走在前面的可能是有跨领域、跨平台设计能力的设计师，而不是纯互联网思维模式的产品经理。随着行业进一步融合和演化，现有互联网业务模式和团队构成的问题会越来越明显，项目团队的组成将趋于多元化和去中心化，最难适应这种变化的可能就是产品经理。 三、从交互转产品是不是一种倒退很大程度上，确实是一种倒退。纯交互的经验不足以转产品，而产品一般不屑于转交互。地球人都知道，职位升迁是职业发展最直观的表现，就这个意义而言，产品经理是含着金钥匙出生的，挟“经理”以令天下，在公司里也最容易做到高层。产品经理把控着整个产品，而交互很多时候只是个画线框图的执行者。 如果你同意上面的观点，那就好好地做/尽快地转产品经理吧。如果你觉得个人成长还有其他的一些衡量办法，而且跟我一般纠结、钻牛角尖和冒傻气，非要扯一些兴趣、价值观的东西，那倒退与否，只有你自己可以判断。个人觉得没有无前景的岗位，只有无前景的个人。如果你觉得交互地位太卑微、能力无用武之地或是本身没什么价值，不要去做就对了，因为这个领域需要真正感兴趣、为之投入并发挥价值的人。 四、做交互的前景是什么也许答案是：毫无前景。来看看大佬的说法：Is Interaction Design a dead-end job? 在我们的小团队里，一直的说法是“交互设计很有必要，而交互设计师没有必要存在”。既然“交互设计”是类似“用户体验设计”这样大而无当的词语（半开玩笑，但有时真想禁用这两个词），就不应该把焦点只放在“互联网产品界面原型设计”上，它占据我们90%的时间，但真心只是交互设计特别小的一个细分领域。 如果你对如何从无到有地设计、开发、培育一个产品感兴趣，对带领团队感兴趣，希望享受用户量从0到亿级的成长过程，执着于通过产品改变世界的梦想，为什么我不能对跨平台界面设计、信息可视化、互动装置、服务设计、产品设计、建筑设计、城市规划、太空飞船的设计感兴趣？我能享受从发散到收敛、充满韵律感的设计过程，能沉迷于现实和虚拟世界的可能性，探索万千材料和形式和美的关系，能追求让生活变得更好（哪怕只有一点点）的梦想。 关注“人”的领域一定会有前景，更不要说这个领域为了处理“关系”而存在——人与环境的关系，人与物的关系，人与系统的关系，人与人的关系。以后互联网不再是一个单独行业，而会融入生活的方方面面，交互设计师可能很快就会消亡，但是人和技术/物的隔阂一直存在，如何让科技更好地为人服务、让生活更美好的需要会越来越明确——这就是交互设计的前景。做交互怕的不是没有前景，而是没有能力跟上变化，没有能力解决问题，没有能力证明自己的价值，最可怕的是：没有意愿去尝试。 五、交互设计师的价值回到现状，如果现阶段交互设计师的工作主要是“互联网产品界面原型设计”，那交互设计师的价值可以是什么？我觉得大概在几个方面： 1.提升产品/界面的可用性和体验互联网产品越来越复杂，分工越来越细，需要有人来仔细打磨产品的使用流程、逻辑和界面。 2.用户和团队的桥梁引入用户的视角 团队里已经有关心商业、技术实现的角色了，那谁来关心产品服务的对象——用户？当然应该全部人都关心，但是责任首先在设计相关的岗位。为什么需要关注人，如何围绕人进行决策和设计，怎样从最终用户的角度衡量产品的成败，人们对我们的产品有哪些看法和反馈，都需要通过设计师或离用户更近的角色去学习、倾听和解读，并且带到团队中来。 将业务需求和技术实现翻译为用户可理解的界面“语言” 想让人们做我们希望做的事情？不能用技术的思维和语言，也不能用赤裸裸的商业语言，必需转换为一个普通人可以理解并引导他行为的“语言”，这是设计所擅长的。 3.团队不同角色的桥梁引入设计的思维和方法 近年来商业环境的演变，对创新的要求越来越迫切，团队组成和文化也跟以往大不相同，而设计的一些思维和方法，比如强调与人的沟通协作、鼓励对更多的可能性并进行快速尝试、可视化表达等等，正好符合这些趋势。设计作为一个成熟的领域，能为这个变化太快的行业提供好的方法和经验。 降低沟通低成本 交互设计的职位是顺应互联网产品快速迭代开发的模式而生的。我们无法做出完美的设计再进行开发，必需有办法可以帮助团队用最小的成本进行试验和讨论，以达成一致，尽快推进。交互设计的利器就是大家都可以画的线框图。但线框图本身不是目的，通过线框图快速理清和分析用户需求，讨论产品形态和界面布局，让团队达成共识，才是关键所在。交互稿本来就是用来吵架的，反复地修改再常见不过。一个岗位的痛苦，往往也是这个岗位的价值所在。 交互设计师应该提升哪些能力线框图任何一个人都可以画，是不是会画线框图就可以做交互？如果产品经理把线框图画得很好，交互还有什么可以做？交互设计师提升专业能力，我觉得可以从两方面入手： 1.岗位能力在转做交互之前，试着把大公司们（Google、BAT们）的相关岗位描述汇总整理了一下： （看不到图？试试这里） 基本就是思考/研究、设计实施和实现、影响力（包括沟通）这三方面的能力。画好线框图只是最常见的表象。如何做好交互设计师，应该从如何做出好的产品设计出发。怎样去获取和分析用户需求？怎样把它传达给团队？用户需求如何转化为产品目标（不一定是功能）？产品目标如何在界面进行引导？达到某个目的需要在界面上提供哪些元素？如何组织这些元素才能影响人的认知、行为以及情感？……不了解业务，无法通过用研发现和解答问题，不关心界面实现的交互设计师，真的只能是线框仔。 2.行业能力如果你觉得交互设计并不只是“互联网产品界面原型设计”，那就向着设计领域深潜吧，至少够你忙上两辈子了。 实现能力首先想强调一下实现能力。交互是个交叉学科，很多人（比如我）并没有学过设计。因为这个原因，我一直不敢把自己称为“设计师”。主要不是因为我的图画的不漂亮，手绘能力基本为零，而是我没有实现能力。大部分设计领域（特别复杂的领域除外，如建筑、规划）都很强调实现能力——通过材料将设计想法变成现实，至少是实物原型。很难想象一个工业设计师只会画图而对材料和造型一无所知，并且做不出产品模型。 但是我们这一行，设计师的实现能力特别弱，绝大部分输出物跟最后的成品（用代码实现的界面）是完全两码事。交互设计师尤甚，没能力决定产品的功能和界面不说，还画不出像样的效果图，又没有能力写出真正可以使用的界面。这么想想感觉真的很糟糕。极端一点说，交互设计师是现阶段大公司为了提高流水线工作效率的一个模糊角色（甚至有时候还降低了效率），能力离做真正的交互设计还太远（至少从我自己看来）。 努力地提高实现能力吧！我们用以进行创作的“材料”是实现界面效果的代码，我们也必需去研究承载这些界面的硬件。有实现能力的设计师，才能够自由地进行创作。 跨界能力交互设计本身是个交叉领域，核心的三个立足点是人、设计和技术，每一个领域都特别复杂和迷人，跨界能力是必需的。设计面对的问题越来越复杂，如何从不同的视角看待和分析问题，如何快速学习和运用不同领域的知识，如何 jump out of the box 去实验和创新，是交互面临的挑战，这些能力一点不比产品经理的岗位综合能力容易获得，而挑战也并不比企业家商业战场厮杀来得容易。怎样培养跨界能力，怎样去做不同领域和对象的设计，是个想想都令人兴奋的话题。 最后啰嗦了那么多，无非是想给自己一点鼓励。我真的很幸运，能从一个完全不相关的专业进入这个永远不缺变化的行业，还能成为没有专业基础的大龄菜鸟设计……人员。 希望在3年后，我能把自己称作“设计师”，不带一点犹豫、羞愧和自我怀疑。 &nbsp; 00 @ 2013.12.15]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>交互设计</tag>
        <tag>产品经理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[天煞的玻利维亚旅游签证攻略]]></title>
    <url>%2Fbolivia-visa-guide.html</url>
    <content type="text"><![CDATA[更新：现在已经不需要无犯罪记录证明！事先声明，我并没有拿到签证，但是觉得有必要分享这几个月吐血准备的过程，好给自己积攒人品，以及给脑门发热想签玻签的同学一点冷水和帮助。 事情缘起于佳总对天空之境的迷恋，我挣扎了两个月决定加入——从此骑虎难下。玻签的艰辛，不足为外人道，有耐心的请继续： 一、下定决心给准备玻签的同学以下忠告： 一定要下100%的决心，才开始行动。就这几个月接触的信息来判断，玻利维亚实在是一个极遥远、极不发达、极不靠谱的国家。当然，如果经过玻签一役，地球上大部分国家的签证都不会再让你感觉很难。 一定要先确定自己所在地离玻利维亚的距离以及到达方式以及所需时间，然后是自己的假期和出行预算。抵达玻利维亚的国际航班主要停留在两个城市：首都拉巴斯（La Paz，代号 LPB）和圣克鲁斯（Santa Cruz，代号VVI），一般经由美国、法国、智利等国中转。具体可上天巡查看。 玻签受理时间是1个半月到5个月不等，签证材料准备至少需要一个月，所以必须尽早申请，最好在出发前的半年就开始。 玻利维亚在国内（包括港澳台）只有北京一个领馆，所有签证申请都得提交北京，而且重点是，出签后必需本人领取或者凭双认证的委托书由他人代领。（所谓双认证，是指在办妥我国外交部领事司或有关盛自治区、市的外事办公室的认证手续后，再办理公证书的使用国驻华使（领）馆的认证。——via百度百科） 玻签拒签率据说是1/3或更高，且无规律，以往的数据看，每年拿到个人旅游签证的不到200人。 二、准备材料一般来说，即便第一次看完Uyuni Salt Lake或者是Oruro Carnival的纪录片，怀着再鸡冻的心情打开玻国旅游签证要求页面，都会吸一口凉气且有想把页面关掉的欲望。请务必在所有准备开始之前将签证要求仔细阅读三遍。 完整填写的签证申请表格两份（英文或西班牙文填写，不接受手写，请用计算机打印） 护照首页复印件 经公证及双认证的无犯罪记录证明原件（西班牙语） 酒店预订单 往返机票行程单和旅行路线单 在其本国的资产证明原件（个人银行存款证明最佳，定期存款五万人民币以上，有效期不少于六个月） 黄热病接种证明复印件 一共七点要求，看似不多，准备下来也得跑好多趟，花费一到两个月的时间，以及700+大洋。以广州为例，建议按以下顺序准备签证材料： ①借出户口卡（如果户口是集体户）②找一家公证处办理无犯罪记录公证（含翻译）广州公证机构一览 我在南方公证处办理，不用自己跑公安局，直接在公证处填表申请即可。 办证地址：广州市仓边路26号二楼（富豪酒店对面），咨询电话：83326533、83345544 取证地址：中山四路246号信德商务大厦9、10层，咨询电话：83635833、83635111 准备材料：身份证原件，户口本原件和复印件（身份证和户口本需要全部复印在一页，如果没有，可在公证处复印），具体可查询广州市公安局的办证须知 申请步骤：咨询公证员，填表，交钱，拿到受理通知单 费用：公证费130元，西语翻译60元，复印3元 提示： 只需要开最近三个月的无犯罪证明，一般公证处会给开从落户广州到现在的证明。但如果以前户口不在广州，一定要说明不是开从出生到现在的证明，否则公证处要你从公安局补迁户之前的材料才能拿到公证。 公证需要翻译成西班牙语。 需要公证处开介绍信，然后才能拿去外事办申请双认证。 ③取公证并开介绍信正常来说一周内会通知取公证，但是我的公证跨了个国庆，中间又不知道出了什么劳什子问题，过了整整两周才通知取证。取证地址在中山四路246号信德商务大厦10层。取证时需要跟公证处的人说明要交给外事办办理双认证，他们会开一份介绍信，跟其中一份公证书（共两份）装在密封的信封里。介绍信费用20元。 ④到广东省外事服务中心认证部办理无犯罪记录双认证 地址：海珠区赤岗友邻一路2号广东外交服务大楼二楼办证大厅 （邻近广州大桥南（东面），赤岗塔西面，新鸿花园对面）。交通不太方便，可以公车到客村立交或地铁到赤岗塔后步行过去。 材料：公证书和介绍信，身份证原件复印件，公证书复印件（装订好） 费用：495元（巨贵 - -，如需邮寄认证结果，再加25元） 提示：大概一个月后才能拿到双认证（我的实际用了三周）。因为外事办要将公证拿去北京领馆办认证再寄回…………（对这无脑的逻辑表示出离愤怒） ⑤到银行办存款证明要求是定期存款5w以上，有效期不少于6个月（不知道是不是冻结半年的意思 = =）。不清楚可以接受哪些其他资产证明…… ⑥联系玻当地旅行社索要行程安排原本并没有计划这一步，但是在打黄热病疫苗时被要求出具行程安排，另外穷游上SMERIC 同学建议送签材料中包括当地旅行社的行程安排。于是去到http://www.boliviatravelsite.com/ ，页面左上方有个Tailor Made Tours入口，进去点“REQUEST A QUOTE”填好需求单，说明大概的出游时间和目的地，对方很快回复了一份大略的itinary ，包含住宿的酒店（很好用，可以在后面做酒店预订单的时候用），说拿到签证后再出详细的行程。（ps 最终无论出签与否，都应该再回复邮件告知旅行社）。 ⑦到携程网出机票预订单此预订单仅用于签证，不需要付款。在携程国际机票搜索结果页面的右侧，有填写机票需求单的入口，填写后很快有客服电话联系，向客服说明是签证用的预订单，很快就能收到预订单邮件。携程这个服务要点赞。 ⑧准备照片自己拍摄或者到照相馆准备证件照： 签证申请表的照片：4x4cm，红底，两张（需要在背面写上中文名、拼音、护照号） 黄热病疫苗接种证的照片：大一寸，一张，最好是蓝底 ⑨打黄热病疫苗广州似乎只有广东国际旅行卫生保健中心能打黄热病疫苗，接种后半年不能怀孕。 地址：广州市天河区龙口西路207号 电话：(020)87537322 材料：旅行社行程单，机票预订单，照片，身份证（？忘记是否需要） 步骤：向医生说明事由，医生开单，交钱，到注射室交照片，打针，拿证（小黄本） 费用：70元 ⑩准备酒店预订单上agoda或booking或Expedia之类的网站，根据之前旅行社提供的酒店名字，预订酒店，注意选择可以全额退款的。预订成功后打印全部的预订单。 ⑪拿到双认证的公证书（那一刻太鸡冻人心了）⑫用英语或西班牙语填写签证申请表⑬按要求复印全部材料⑭如果需要他人代表送签，准备好有自己签名的委托书三、送签如果到这一步还没断气，恭喜你获得挑战最不靠谱的玻签的资格。 整理好材料，包括送签时可能需要查看的护照原件和黄热病疫苗证原件，奔赴使馆吧~（感谢可总百忙之中帮我送签 T-T） 玻利维亚使馆地址： 北京朝阳区亮马河南路 14 号塔园外交人员办公楼 2-3-2 号 电话: 010-65323074 使馆只在周一至周五 14:30~18:00(节假日除外)受理签证申请 送签时不需要缴纳任何费用。送签后被使馆告知大概一个半月后在使馆网站上查询是否出签，若出签，则电话使馆约取签（贴签）和交费。 &nbsp; ===================奄奄一息的分割线======================== 整整折腾了三个月，头发都白了不少，脾气也被磨得快没有了。眼看其他小伙伴到今天都还没有收到认证，春节奔赴南美的可能性愈发渺茫，实在不知道该祈祷签成功还是签不成功。也许南美洲在短期内只能是一个遥远的念想，只能说，试过，忍过，会继续爱。 &nbsp; &nbsp; 如果您能坚持看到这里没有睡着，也太特么不容易了，来点bonus吧： &nbsp; 南美大陆以西班牙作为官方语言的国家为多，学一点西语非常有必要。 以个人不多的一丁点经验，推荐一些零基础自学材料： 1.标准西班牙语语音入门 http://www.icili.com/emule/download/190761 虽然比较旧，但是还挺系统和实用，看两遍后，基本的发音能掌握个大概 2.Duolingo http://www.duolingo.com/ 通过游戏闯关形式帮助初学者从基础开始循序渐进，app都做得很赞，适合每天花半小时持续学习 3.Pimsleur Spanish系列教程 用英语教学，网上可以找到音频，放在手机里上下班听最合适 4.Lonely planet出的Fast Talk Latin American Spanish http://item.jd.com/19281569.html 非常小非常薄的一本，但绝对实用，随身带随时翻]]></content>
      <categories>
        <category>行走</category>
      </categories>
      <tags>
        <tag>Travel</tag>
        <tag>签证</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS7扁平化设计初探]]></title>
    <url>%2Fflatdesign.html</url>
    <content type="text"><![CDATA[命题作文，不嫌过时的话，将就看看吧……]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>iOS</tag>
        <tag>扁平化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS7设计规范学习分享_PartI_UI设计基础]]></title>
    <url>%2Fios7hig-part1-uibasic.html</url>
    <content type="text"><![CDATA[最近组织组里学习iOS7的设计规范，分享一下我整理的第一部分。 规范原版下载地址]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>交互设计</tag>
        <tag>iOS</tag>
        <tag>Guideline</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Axure使用经验分享]]></title>
    <url>%2Faxure7.html</url>
    <content type="text"><![CDATA[突然想起三个月前做的一次Axure7小分享，眼看还有几天beta版就要下了，赶紧搭个末班车把分享内容放上来。p.s Axure7是一个靠谱版本，推荐使用~ 感兴趣的同学请到微盘下载：http://vdisk.weibo.com/s/fBqH5A3_6Up &nbsp; 分享的内容很简单，希望对还不太熟悉Axure的同学有点帮助： Axure常用的一些小技巧 Axure7中实用的新特性 怎样制作Axure组件库 → 下载地址 ←&nbsp; .]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>交互设计</tag>
        <tag>Axure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leapmotion那些让手抽筋的app]]></title>
    <url>%2Fleapmotion-app.html</url>
    <content type="text"><![CDATA[明天就是Leapmotion的shipping day了。今天把最后的beta版本装上，Airspace store里面已经有不少看起来很不错的应用。试玩了几个，小录一段： &nbsp; 1.SugarRush 上个月才看完无敌破坏王，自然要重温一下作为主场景的经典游戏SugarRush。组装车的步骤真心挑战耐心，经常选不准组件，差点就放弃了。进入游戏后，用两手握方向盘的操控赛车，还算比较容易。 [youku id=”XNTg1Nzk4ODI0”] &nbsp; 2.AirBeats 最近正好在折腾着架子鼓入门，leapmotion上的drum类游戏期待已久。AirBeats整体还是相当不错的，用鼓槌、笔等物体操作，远比手指操作要舒服。 [youku id=”XNTg1ODAwNzc2”] &nbsp; 3.GoogleEarth 绝对是nightmare……经常是手掌一放上去，地球就狂转停不下来，识别精度过高导致zoom in和zoom out操作也很费力，基本不可能一次调节到想看的区域视图。 [youku id=”XNTg1ODA3NDc2”] &nbsp; 虽然不少App在体验上并没有预想的那么好，不过仅仅半年时间就有了那么多充满想象力的新玩意儿，怎么都是一件有趣的事情。谢谢Leapmotion在beta版本免费提供了这些应用，Good luck。]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>leapmotion</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科技，美学，人性——交互设计的十字路口]]></title>
    <url>%2Frd-thoughts-on-ixd.html</url>
    <content type="text"><![CDATA[好久没有正儿八经写笔记了，翻完两遍《交互设计沉思录》，还是云里雾里，不得不借助敲键盘来整理一下思路。 这是一本探讨理论的书。这类书很难写，读者一般在读的过程中频频点头认同作者的观点，但是一放下书，却又好像什么都没得到。对这一类的书，如果看完后刷新了自己对该领域的认识，就可以认为是一本好书吧。至于刷新认识，大概是看书里有没有提供一个好用的框架，帮助自己去理解这个领域，弥补过去因视角和深度的缺乏导致的局限。这么看来，这是一本好书。Jon在引言中首先指出了交互相关书籍的两大主题：一是集中在人机交互领域，局限在于被认知心理学和计算机科学所限定，过于强调界面元素，力图得出创建界面的最佳实践、启示和指导原则；二是集中在形体创造设计，考察元素的各种形状、组合或布局的美学价值及情感价值。但探讨技术和形式之间的语义关联几乎是一个空白。 交互设计为什么重要？交互设计立足于人、技术、设计三个领域，因为从“人”的因素出发，所以才需要去寻找技术和设计融合的最佳途径，以解决“人”的问题，提升“人”在科技世界中的生活品质。 Jon对交互设计的定义是：在人与产品、服务或系统之间创建一系列对话。这种观点并不新鲜，但是作者尤其强调了“时间”因素。交互即对话，对话是随时间推进而演变的，是易变和流动的，接受、拒绝、理解、困惑贯穿其中。区分用户界面设计和交互设计，时间维度是关键，两者对时间在产品使用过程中所扮演角色的理解有本质的不同。交互设计的价值之所以被逐渐认识，正是因为人们对与自己打交道的物品/系统的要求越来越高，互动发生在一定时间段，而不仅仅是接触的一瞬间。怎样让机器/系统拥有与人自然对话的能力，弥合语言鸿沟促进对话，是交互设计师的责任所在。 交互设计师是行为的塑造者，借由人与产品之间的持续对话来支持产品的使用体验。交互设计的目标是试图随着时间的推移，逐渐理解并塑造人的行为。所以其使命首先是观察人类：尝试理解并改变人们做什么事情、经历什么样的感受，以及脑子里思考什么事情；然后在复杂想法中寻求平衡：需要考虑问题的两个极端——最大的和最小的、概念层面和实效层面的、人类层面和技术层面的等。 顺便提一下困扰自己的问题：互动设计和交互设计的区别是什么？Jon认为互动式媒体设计几乎总是以技术为中心，而交互设计以人为中心。这一点很好地体现在一般的设计过程中。 万变不离其宗的设计过程CMU的设计流程框架：define定义——discover发现——synthesize综合——construct建构——refine精化——reflect反思 IDEO的四步设计过程：observation——brainstorming——prototyping——implementation Design Edge的三部设计过程：define——discover——develop Smart Design的三步设计过程：conceive——create——complete 这些经典的设计过程，基本都包含以下步骤： a 定义设计问题或机遇：人们所处的场景和经历的故事是什么？ b 发现隐藏的欲求、需求和欲望：尝试理解人们做什么事情以及为什么，实境调查的四大原则是focus、context、partnership和interpretation c 综合、建构和精化：先发散探索多种解决方式，然后收敛定位最佳答案 d 反思和评估可见设计思维所强调的是情境启发、定义问题和方案探索。 信息架构是很多交互设计师的工作范畴之一。在虚拟的空间中为人们提供类似地图的指向服务，是互联网时代设计师的一大课题。信息架构从效用来说，是为了让人们在浏览、使用某个产品时，清楚自己在哪里、可以去哪里、怎么去哪里；而从根本目标来看，信息架构其实是为了实现从数据到信息到知识到智慧的升华。信息是能表述意义的数据组织形式，经由信息得出原则、理论、论点等就产生了知识，智慧是以新的、与众不同的方式应用知识获得的启示。 设计过程中常用的一些可视化方法： 用亲和图组织数据 用概念图将系统视觉化 用流程图展现决策过程 用Ecosystem Diagram展现Engagement Point 用Journey Map体现交互序列 ：常用来描述线性的最佳场景 设计的难点有二：如何发现隐含的限制条件，如何把握隐含限制条件与明确限制条件之间的平衡。 交互设计不仅仅关乎可用性和效率关注可用性的设计师会致力于减少设计在认知上的不协调，强调速度和完成任务所需的时间，旨在把用户使用复杂系统时可能犯下的错误的数目见到最小。但如果要让用户与产品发生的交互能以具有诗意的方式与用户产生共鸣，还必需满足三点： 交互要有代入感； 对于索要完成的任务而言，交互要足够复杂，以使用户进入一种专注的状态； 交互具有高度可感知性。 交互设计对文化的影响交互设计如何影响并塑造着文化，Jon花了不少篇幅去阐述。他认为设计师所缺乏的不是解决社会问题、影响文化的能力，而是责任感和自我意识。设计师能做的最重大却也经常是最缺乏深思熟虑的决定，就是选择设计什么样的东西。并非所有设计问题都同等重要，也并不是所有设计问题都值得去解决。设计师需要明白，自己的工作之所以能够开展，是因为自己对解决问题的领域或类型做出了选择，自己的时间用在何处依赖于这个决定。Jon在最后一部分几乎是大声疾呼设计师们反思自己的工作和贡献，提醒我们设计的思维和方法其实有更广阔的价值空间。 最后用Jon的话总结并且自勉吧： 只有把科技、美学和人性三者融合到一起，我们才能踏入交互设计的世界。交互设计研究的是人与事物之间的对话，因此它能为科技的进步带来和谐之音。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>IxD</tag>
        <tag>Note</tag>
        <tag>交互设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[知道，但并不懂得]]></title>
    <url>%2Fkonwing-without-understanding.html</url>
    <content type="text"><![CDATA[一年了。这一年最大的收获，竟然不是在设计上有了多少第一次和进步，而是对几个稀松平常的词汇有了新的认识。虽然进展缓慢，但这样的一年，大概也就值得了。嗯，是一个好的开始。&nbsp; 以前只知道悲观不好但并不懂得乐观并不是靠扭转消极的心态而是要无所畏惧 以前只知道自己勇气不足但并不懂得勇气其实跟做什么关系不大而是要学会如何直面自己的所思所求所作所为 以前只知道沮丧于自己没有天赋但并不懂得绝大部分的天赋不是做某事不费吹灰之力而是想把某事做到最好的简单冲动 以前只知道兴趣是最好的老师但并不懂得兴趣不是来自已有的任何东西而是来自正在慢慢减少的童真和好奇心 以前只知道要让自己成长但并不明白成长不是沿着一条大道狂奔而是正视曾经的盲点并做出改变 以前只知道要抓紧时间去做但并不懂得行动力不是来自于自律而是强烈的欲望 以前只知道拖延症需要时间管理但并不懂得拖延的根源不是因为懒而是不承认精力有限和不会精简欲望 以前只知道时间就是金钱但不懂得时间其实才是无所不能的万物之主而一切的节约，归根到底都是时间的节约 以前很容易说出某个东西或人的不好但并不懂得美好不是完美而是学会欣赏，聚焦到积极的一面 以前只知道做人应该谦虚但并不懂得谦虚不是让自己看起来没有说的那么好而是应该根本没有去想自己 以前只知道做人应该靠谱些但并不懂得靠谱不是认真严肃而是坚守核心价值观，其他一切都不必在乎 以前只知道自己有很多不足但并不懂得自己的存在不是要把一个不完美的小孩变成循规蹈矩的大人而是要贡献自己的一份多样性 以前只知道设计是跟好看好用的东西有关但并不懂得设计不是随性而为和灵光一现而是因为关心人、希望事情更好而做出的持续努力 以前只知道活着一定有些什么意义但并不懂得寻找这个答案的整个过程也许就是答案本身是一次​机会，可以看看不一样的个体，会有怎样的可能、境遇和收获]]></content>
      <categories>
        <category>叽歪</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Leap Motion开发版试玩]]></title>
    <url>%2Fleapmotion-kit.html</url>
    <content type="text"><![CDATA[年前在Leap Motion官网下了pre-order的订单，顺手填了开发者申请。没想到大年三十收到开发者邀请的邮件，让填写收货地址，给我免费寄出leap motion kit！免费啊不得不把邮件看了三遍免得眼花……鸡冻之余赶紧上官网取消pre-order，开始了一周的等待。跟踪运单状态时发现FedEx老不给我送货，打电话过去问，才知道运单上地址乱码了（地址填的中文。。。所以申请时还是乖乖写英文吧）。 包裹是一个很轻的盒子，包装比较随意。习惯苹果家的开箱体验的就忽略吧……拿到的是06.5的版本： &nbsp; kit里面就两样东西：leap motion controler和 USB cable。 &nbsp; 就是这么个小盒子~ 嗯，“Designed in USA Made in CHINA” &nbsp; 连接controler到电脑，下载软件。先打开Leap主程序，然后打开Leap Visualizer，就看到geeky的3D界面，把手掌放在控制器（亮红灯的一面朝上）上方，就可以感应了。 不多废话，来看视频吧： [youku id=”XNTE4NTg0MTE2”] (如果无法显示可到优酷观看) Leap motion上周宣布shipping date时也宣布了应用商店Airspace即将开张，期待更多惊喜~]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>IxD</tag>
        <tag>交互设计</tag>
        <tag>Leap motion</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[00's UX Search Engine]]></title>
    <url>%2F00s-ux-search-engine.html</url>
    <content type="text"><![CDATA[两年前用 Google custom search 弄了个 UX 自定义搜索，后来 GCE 被墙后就很少更新和使用了。 今天群里聊起，觉得还是个挺好用的工具，于是增加了索引网站（包括国内各大UED团队的博客，以及平时收集的中英文设计相关的网站）重新启用，有兴趣的同学可以试试： 00’s UX Search Engine 访问方法 访问 00’s UX Search Engine ，输入keyword搜索 搜索后看不到结果，don’t panic，在地址前加上 https:// ， 刷新 如果仍然打不开，请翻墙 使用举栗 例如，对卡片分类这个方法感兴趣，可以分别用“卡片分类”和“card sorting”搜索到中英文相关的博客文章； 再例如，想找关于眼动的资料图片，可以分别用“眼动”和“eye tracking”搜索图片； 再再例如，用“pdf”做为关键词，可以搜索到这些网站提供下载的pdf文件，质量一般都不错。 收录网站最后附上目前收录的ux网站，也欢迎大家推荐~ AIGA http://www.aiga.org/ Interaction Design Foundation http://www.interaction-design.org/ ACM interactions magazine http://interactions.acm.org Nielsen Norman Group http://www.nngroup.com/ Cooper’s Journal http://www.cooper.com/journal/ Smashing magazine. http://www.smashingmagazine.com/ UX Booth http://www.uxbooth.com/ UX Matters http://www.uxmatters.com/ UX Magazine http://uxmag.com/ Boxes and arrows http://www.boxesandarrows.com/ Usability.gov http://www.usability.gov 24ways http://24ways.org/ Luke Wroblewski http://whitneyhess.com/blog/ Whitney Hess http://www.lukew.com/ User pathways http://userpathways.com/ Usability Post http://www.usabilitypost.com/ Usability blog http://www.usabilityblog.com/ Adaptive path http://www.adaptivepath.com/ IDEO中国 http://www.ideo.com/ 青蛙设计 http://www.frogdesign.cn/ 腾讯CDC http://cdc.tencent.com/ 腾讯电商用户体验设计部 http://ecd.tencent.com/ 腾讯移动互联网设计团队 http://mxd.tencent.com/ 百度无线用户体验部 http://mux.baidu.com/ 百度商业用户体验部 http://ued.baidu.com/ 淘宝网UED http://ued.taobao.com/blog/ 支付宝产品设计团队 http://ped.alipay.com/ 阿里巴巴中国站用户体验部 http://www.aliued.cn/ 一淘UX团队 http://ux.etao.com/ 良无限用户体验部 http://www.lpued.com/ 新浪微博用户体验设计中心 http://udc.weibo.com/ 网易用户体验设计中心 http://uedc.163.com/ 搜狐移动门户中心用户体验团队 http://mued.sohu.com/ 搜狗设计团队 http://ued.sogou.com/ UCDChina http://ucdchina.com/ MobiUE http://www.mobiue.com/ BeForWeb http://beforweb.com/ 一只土贼 http://www.tuzei8.com/ 知乎 http://www.zhihu.com/ Scenario Lab（台湾） http://www.scenariolab.com.tw/blog/ 00’s UX Adventure http://www.uegeek.com/]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>IxD</tag>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PM Tree 交互设计分享]]></title>
    <url>%2Fixd-sharing-for-pmtree.html</url>
    <content type="text"><![CDATA[交互设计实用六步法 &nbsp; 从UI到交互直接到prezi查看 从UI到交互 from kidult00—### 其他资源推荐The Encyclopedia of Human-Computer Interaction00的交互设计豆列交互设计师经常上什么网站找灵感Frog团队协作工具书 *00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>IxD</tag>
        <tag>设计</tag>
        <tag>交互设计</tag>
        <tag>产品</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[过去的，未来的]]></title>
    <url>%2F2012and2013.html</url>
    <content type="text"><![CDATA[过去的一年大概有这么几个关键字：低谷，改变，恢复，上路，反省，摸索，成长…… 总结该总结的正是因为滑落到人生前所未有的低谷，才让自己开始正视并改善这些问题： 任何时候不要忘记自己的目标，它是一个方向，而不是一个点； 要为自己的选择负责； 看待任何人、事物和问题时，自己很可能只是站在最舒服的一个角度，不是别人的角度，也不是客观存在的其他角度； 要将精力放在如何解决问题、使事情变得更好上面； 不要跟环境对立，处理好关系是快乐工作的基础，学会发自内心地观察、欣赏他人； 放开自己设下的条条框框，没有那么多应该不应该，通过尝试获得真实的反馈 回顾开始做设计的这一年，有好多的尝试和不成熟，来年要加油： 努力体现交互设计的价值：引入用户的视角和声音；提供专业的方法和解决方案；帮助团队做更好的决策；提高上下游的工作效率； 珍惜每一次做事的机会，感谢所有“关注”你的设计的人； 将问问题作为开始，提出好的问题，用正确的方式，问对的人； 优化流程，理清障碍，再开始做设计； 让更多人参与到设计过程中来； 遇到问题和阻碍，首先想办法，其次想办法，再其次想办法； 你遇到的问题，肯定已经有人遇到过，能启发你的人可能就在不远处； 尝试多种可能性，提供多个方案并从专业角度进行比较； 仔细聆听，耐心沟通； 细节很重要，但首先要确保方向正确，粗细有道； 不要沉溺于工具，工具只是达到目的的手段； 善始善终； 总结和积累自己的工作方法和流程 来年的几个目标： 熟练运用草图表达设计思路 做一个app 研究processing和arduino 培养对人、设计、技术三个领域的兴趣和基础 养成锻炼身体和看书的习惯 感谢该感谢的这一年过得并不轻松，从痛苦中获得的力量往往出乎人的意料。谢谢所有帮助我度过难关的人们，以前没有发现自己是这么地需要你们，需要从你们身上获得力量。 还要感谢设计这个领域，给了我看待世界的新角度，因为接受了设计的思维，过去的很多盲区正在一点一点地改善： 关注人和事物之间的关系，减少因为过度关注自己而导致的情绪化； 保持好奇心、问天真的问题，而不是掩盖自己的无知； 学会欣赏事物的美好，而不仅仅是吹毛求疵，乐观其实是一眼能看到事物美好一面的本能； 一切都在变化当中，一切都有改善的可能； 考虑更多的可能性，而不是死死抓住当前的这一个； 面对未知和不确定时，目标不是正确和完美，而是在众多可能性中选择最适合的那一种&nbsp; 已经过去的一年，要感谢这段给我力量的歌词： 没有不会停下来的绝望你在烦恼什么时间从来不回答生命从来不喧哗就算只有片刻我也不害怕是片刻组成永恒呐 将要到来的一年，希望能参悟这段歌词的含义： 美好是因为克服美好的恐惧美好是因为无视美好的逝去&nbsp;]]></content>
      <categories>
        <category>叽歪</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>2012</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[换个视角看设计]]></title>
    <url>%2Fanother-perspective-of-design.html</url>
    <content type="text"><![CDATA[一個學地理的挨踢民工/曾經迷茫的pm/曾經孤獨的用研/正在掙扎的交互眼中的設計： 请用键盘方向键切换查看:) 换个角度看设计 on Prezi希望Prezi早日支持简体中文！]]></content>
      <categories>
        <category>叽歪</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>IxD</tag>
        <tag>交互设计</tag>
        <tag>服务设计</tag>
        <tag>规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[台湾印象]]></title>
    <url>%2Ftw-snapshot.html</url>
    <content type="text"><![CDATA[从岛那边回来了，鉴于照片多得发愁，参考过的攻略堆积如山，想要整理出靠谱的攻略似乎遥遥无期，所以先趁热记录一些片段吧。 印象一：垃圾桶谜团此行最大的谜团：这个岛上的垃圾桶太少了！可是怎么还这么干净！连夜市里都找不到垃圾桶！路边全是小摊的夜市哦亲！ 作为长期生活在垃圾桶和垃圾都遍地的环境里的人，咱举目望不见一个就算了，连方圆几里内都碰不上一个，怎么能不萌生随手乱扔的冲动，可是……偏偏地上几乎没有垃圾！这分明就是破窗效应的反面教材，以及漠视游客体验活生生的例子。。。 走到后来，一买吃的就条件反射般焦虑：垃圾要怎么丢啊…… 于是三人行，一路晃，一手拿吃的，一手拎垃圾，拎着拎着就回到住处了。 出游tips：出门请自备垃圾袋 印象二：seven之岛去台湾一趟，也许没法回答它到底属于PRC(people’s republic of china)还是ROC(republic of china)，但你会发现实际全面攻占这个小岛的，是seven-eleven。如果说要在岛上新建一个最小化的镇子，只需要两个房间，一间是镇政府，另一间是7-11。遍布台湾每个毛孔的7-11可以干些什么呢：吃饭，买日用品，买特产，邮寄，打印，如厕，坐下休息，充值，问路，充电，订票，做会合点和路标…………如果上天再给我一次机会读个物流专业，一定要去台湾做7-11的研究 。 出游tips：找wc？去seven啦 印象三：古早和国小，卖老和卖萌古早和国小，是台湾随处可见的两个字眼。 无论是在活力新城台北台中，还是在老字号遍地的台南鹿港，“古早”都是商家吸引顾客所用招牌的常见定语，意思大概是历史久远的、传统的、逐渐被淡忘的。古早味的早餐，古早味的店铺，古早味的民族，卖的都是“老”。这是一个尊重传统和历史文化的小岛，这种尊重不仅仅在人满为患的故宫博物院里，还充斥在挤满破旧骑楼的大街小巷里。城市是旧的，街区是旧的，建筑是旧的，器具是旧的，审美也是旧的。对比我们所处的环境，日新月异，拆了老的建了新的，而台湾几乎是个破破旧旧风雨飘摇的小岛，以自己的审美和价值观，默默守卫着那些印刻着历史和记忆、透露着沉淀和风情的“古早”。 另外一面，是作为地标的“国小”（国民小学），随便看一下街边的地图和公车的站牌，会发现国小几乎都是区域的标记物。国小的出镜率盖过了政府、医院、7-11、邮局、商场、景点、捷运站，真是个有趣的现象。在台南安平区，我们穿过一间国小，它没有围墙，跟旁边的景点只有几步之遥。国小里下课时的热闹并不影响景点的游览，景点的游客也不会打扰学校的教学。平时我们参也参不透的“和谐”，在这里随处可见。不懂什么就追求什么，缺少什么就渴望什么，大概是这个道理吧。 凭着这两个片面的、感性的印象，得出一个结论：这是个爱幼敬老的地方。且不说捷运里的博爱座和大小店铺里捐发票的箱子，更直观的感受是各种卖老和卖萌的行为。走在大城小镇的街头，满目的广告牌超过半数用的都是书法字体，而台湾的设计，虽然不缺少简洁大气的类型，比如捷运站，比如诚品，比如各式凤梨酥的包装，但更容易吸引眼球的，是各种3头身甚至2头身的卡通形象，以及生动到有点狗血的文案。 在宪兵队旁边的国军英雄馆，看到了全面冻涨的广告: 在邮政专车上看到卖萌的邮差叔叔: 在侯硐猫村，看到了萌死人不偿命的喵星人标识: 在花莲的工厂外墙，看到鲸鱼的墙绘: 在清境农场，看到了喜羊羊远房亲戚的标语: 在高雄车站售票窗口，看到了滚动字幕里出现pac-man和飞碟: 在垦丁民宿，看到了“1234 2234”的wifi密码; 在鹿港天后宫，看到了2头身的Q版天后钥匙扣; 更不要说在台中彩虹眷村看到平安淡定像: 和台北街头这个过目难忘的广告: 印象四：铁道文化和夜市文化能成为文化现象的，想必是内涵丰富、人民群众喜闻乐见的东西，台铁和夜市是其中最好的两个诠释。 台铁贯通全岛，停站多，班次多，搭乘非常方便，在早期大概是出远门的主要方式。 车站：每个车站都有一个好听的名字：桃园、莺歌、暖暖、三貂岭、四角亭、平溪、池上……而类似高雄、台中这样的大车站，车站建筑本身就很有味道。一些特色小站，比如侯硐的猫村、池上的便當，会有主题故事馆售卖有趣的纪念品，还可以往旅行纪念册里盖上各种纪念章。铁道便当更是成为台湾特色的快餐。台湾人也许无法想象大陆大城市火车站的复杂，因为他们的车站都太小太方便了：进门就是检票口，一侧是售票窗，一侧是候车区域，没有安检，没有人潮，没有上上下下，甚至没有人留意你有没有凭票进站。 列车：台铁的火车虽然外表看上去说不上崭新，但座位着实宽敞，比国内的高铁一等座还要宽敞些。这次的一大遗憾是没能坐到海线的莒光號，隔着大玻璃窗看海景 出游tips：一定要带个本子去盖章 说到台湾，无法回避的话题一定有夜市和小吃。光是台中市，夜市就有38处。台湾大小城市的店铺关门比较早，夜生活更多集中在夜市，而夜市的主要活动就是——吃。羹、豆制品、海味、甜品和古早，是台湾小吃的几大关键词。神奇的是，每一家食店都能亮出某电视台/某报纸对他们家的采访和推荐，这真是个美食和媒体太多而地方太小的岛啊~ 出游tips：人多一定好吃的法则在这里不一定适用，放开来吃吧！ 印象五：秩序和自治一路走来，我们看到了公共场所中的处处礼让，感受到几乎每个人主动为他人考虑的贴心，也看到为维护自己权益的表达和交涉。这里很少听见喧哗，很多时候在车厢里只有车行进的声音。捷运里的博爱座的确经常空着，即使当时车厢里人多拥挤。更加令人难忘的是垦丁夜市。我们住在垦丁大街边上，晚上10点从窗口望下去，夜市的小摊陆续撤走，竟然没有留下什么垃圾，顶多在路边有一些油污，完全想象不出2个小时之前这里是川流的人群。 在国内大城市生活久了，真心羡慕这番景象。有时候在想，秩序的形成，其实并不需要太难得的素质，只是有没有多一点点己所不欲、推己及人的小小体恤和相互尊重而已。当每个人，或者大部分人，有了一点超出自己的怜悯之心，无数微小力量的汇集，就会是燎原之火了吧。真正的无为之治，其实是将最上层、最集中的统治无限细分，直到到每个人都能够“自治”，最高的统治也就可以“无为”了。这一点ROC应该做得比较好，因为在街头巷尾，能看到各种组织，从市政府、县政府、区政府等的GO到xx小组、xx会的NGO的名号频繁出现，声明着自己对某某事务负责，希望大家多多支持。这些声音，让人觉得有无数微小的力量正在给这个社会松土、施肥，不一定能马上收获果实，但可以期盼百年后的那颗大树。 印象六：真的,善的,美的对于这个岛屿以及岛上的人民，就用这最直白的三个字来概括好了。 ——它不一定富足，但足够真诚。长期生活在天朝，各种警惕各种戒备，以致于去到一个大家都比较真诚的地方，总有一种以小人之心度君子之腹的赶脚。一旦有陌生人上来搭讪，第一反应是猜测人家是否不怀好意，至少也有点莫名其妙不知所措。最后发现大多数情况是别人是想帮帮忙，或者介绍下周边的情况，顶多是推销一下包车之类的服务，基本不会缠着不放。无论是司机，商贩，路人，服务员，都干脆利落，而且很有礼貌。 ——它不一定强盛，但足够善良：捷运博爱座就不说了，岛民们对各种动物的喜爱也不说了，就拿问路举例，问A怎么去，高效的人给你直接的信息，热情的人还会顺带介绍A++、A+、A-、A–和B甚至C。去十分瀑布的路上，本来火车和行人是两座桥分开走，因为碰上行人的吊桥在翻修，我们得走火车那座桥（轨道旁边有人行道），刚好碰上火车从身后开来，司机刹车减速好让我们先过桥，还冲我们挥手、微笑。真是个温暖的地方。 ——它不一定完美，但不断追求美好：每一个车站都在改善自身的运作，每一间民宿都在努力提供更好的服务，每一处古迹都被记录、审视和加以保护。彩虹眷村九十岁的黄老伯，还在每天画画，为了守卫即将被拆的眷村，让更多人认识到它的美和价值。没错，知识和文化很重要，但当政者和普通民众的审美/价值观/追求更重要。 看到这些人们，会隐约萌生出这个地方总会有希望的感觉，以及到这样一个地方去生活的向往。反思我们的生活和状态，确实有很多现状让人不满和抱怨，但是自己有没有想过，能为他人和国家做些什么：当自己权益被侵犯的时候，能不能跳出来表达和争取；当别人需要帮助的时候，能不能停下来倾听和帮助；当遭遇看似与自己无关的问题和社会弊病，是不是愿意思考和做出一份推动变化发生的努力。每一个抱怨现状的人，或多或少都是现状的帮凶。我们都在向往些什么，但似乎没有为它努力地争取。 台湾很美。记录风景很容易，也希望这段旅途中遇见的人们，以及他们带给我的震撼、感动和反思，能及早地保留在记忆中。]]></content>
      <categories>
        <category>行走</category>
      </categories>
      <tags>
        <tag>Travel</tag>
        <tag>台湾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基本交互控件[2]：链接(Links)]]></title>
    <url>%2Fixd-controls-links.html</url>
    <content type="text"><![CDATA[基本交互控件第二篇，来看看容易与命令按钮混淆的链接~ 一、这是什么链接主要用于： 跳转其他页面、窗口； 触发某种操作的控件； 显示说明； 选择选项 链接由图标（可选），文字，经过状态，提示（可选）等要素组成。常见类型包括： 二、设计要点链接应能根据视觉外观识别，不需要鼠标移上/点击之后才能判断是否可点如下图，各大搜索引擎的搜索结果页，都能一目了然地分辨出可点击的链接： 鼠标移上应有表示可点击的反馈（如下划线、文字颜色改变、鼠标变手型等）目的是增强链接可点的提示，同时也帮助使用者更好识别将要点击的链接 不是链接的文字避免使用链接颜色保证链接在各种状态下文字颜色的可读性点击链接的结果可以预测下图是windows中的一个反例，链接的描述过于模糊，难以预料点击后的结果： 不要增加“点击”“链接”等多余的文字如下图，右侧的链接文字冗余，“点击此处”可以去掉，链接本身就包含“点击我可以xxx”的含义： 如果是图标+文字链接，图标应在文字之前，且点击图标和文字的效果应相同不要使用仅有图标的链接，用户难以识别图标包含链接避免将两个链接相邻放置，看上去像是一个链接如下图，“UX”和“guidelines”是两个链接，容易引起误解： 如有必要，区分导航链接和操作链接，用名词描述导航链接，用动词描述操作链接如下图来自虾米网的例子，点击“自定义个人主页”当前页面操作，点击“我收藏的精选集”跳转到相应页面： 链接被点击后，如不能即时响应，需提供正在处理的反馈提示如下图，在Wordpress后台点击“保存草稿”后，按钮禁用，右侧有正在处理的图标提示： 对于导航链接，考虑是否需要区分已访问链接的颜色一般而言，高级别的导航不区分链接是否已访问，除非需要在大量导航链接中帮助用户快速区分哪些已经访问过。 为链接添加有用的信息提示（infotip）而不是仅仅重复链接文字如下图，google calendar中对日期链接的提示只是简单日期，并没有起到提供额外有用信息的作用： 三、讨论与按钮相比，链接更适用于： 用作导航，去到另一个页面或窗口（向导窗口的上一步、下一步除外），按钮更常用于触发模态窗口以收集更多信息； 动作命令被包含在一段文字中； 被触发的动作并不是当前页面的主要操作； 命令属于菜单或一组链接的一部分； 描述命令的文字过长，影响按钮的视觉效果。 四、Check list当在设计中使用到链接时，可以对照这个列表检查设计是否合理： □ 是否应该使用链接而不是其他控件□ 使用纯文字or纯图标or文字+图标？为什么□ 链接中，图标是否在文字之前□ 点击图标和点击文字效果是否一样□ 链接外观看上去是否可点击□ 鼠标移上时是否有可点击反馈□ 点击链接的结果是否可以预测□ 是否有线索帮助区分导航链接和操作链接□ 按钮是否触发即时结果，如需等待是否有足够反馈□ 是否需要区分未访问和已访问链接的颜色□ 导航链接是否链接到了合适的位置，例如某段具体的内容而不是文章开头□ 链接到外部网站的链接应该通过信息提示给出URL ————————- 去看看同一系列的纠结文章 ————————– 前言：学习交互设计的语言 基本交互控件[1]：命令按钮(Buttons)]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>IxD</tag>
        <tag>交互设计</tag>
        <tag>控件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无协调，不设计]]></title>
    <url>%2Fdesign-is-relationships.html</url>
    <content type="text"><![CDATA[上周五听了柳冠中老先生在2012交互体验日上的发言：作为协调关系的设计思维 ，很庆幸自己在转做设计后没多久就听到了这些话，把一些感想记录下来。看到这个题目，第一反应是想到 Design is relationships. Design is a relationship between form and content. 这句话是Paul Rand对“设计是什么”的回答。设计是对关系的处理，柳老的演讲中，“关系”不仅包括形式和内容，还有人与物的关系，人与人的关系，人与社会的关系等等。 这让我想到了五年前在学习旅游规划、城市规划时，了解到这些学科是“干什么的”以后产生的巨大疑惑：当规划（planning）的尺度大到一个景区、一个城市、一个区域时，规划其实是一个理解、驾驭多个利益相关者的动机和社会环境限制，并协调各方面利益的价值实现过程。问题是，出钱请规划团队做规划的，往往是政府或景区或开发商，但规划结果影响最多的是市民、旅游者，这个时候，规划师到底应该站在什么立场？ 这个也是设计师要面对的问题。当然，在互联网领域，这个问题似乎简化了不少。我们已经有了“以用户为中心”的理念，纠结也主要来自于公司商业方面的考虑，远比规划行业动辄十多种stakeholder的角色要简单。 回到“协调关系”的出发点，真的不应该被设计师忘记和舍弃。互联网行业的交互设计，还是个相对新鲜的行当，我们都在尝试接受新概念，磨练基本技能，努力把使用流程理顺些、把界面设计得好一些，但在“协调关系”这件事上面，似乎没有什么贡献，就像柳老所说“现在培养的只是专业的白领打工仔”。 在日常工作中，其实有哪些“关系”需要“协调”？ 界面和功能之间的关系 用户和系统之间的关系 设计和技术之间的关系 “体验”和商业之间的关系 …… 我们关心细节、心关界面、关心工具这些都没有错，问题在于不能只关心这些。对“人”的了解是否深刻，对“行为”是否有所洞察，对“需要”是否足够敏感；是否关心技术实现，是否知道实现的代价和成本，是否能提出更好的实现方法；是否能找到用户利益和商业利益的平衡点……这些都是“协调”。而我们还只是刚刚起步。 柳老的演讲中，一直在提醒我们：如果不去思考根本的问题，就没法做真正的设计，没法进行创新，只能永远跟随在别人的身后。工业设计本质是解决关系的学问，最大的优势是解决了大多数人的需求。“从造物转为谋事”是一种服务设计的理念，柳老想说的大概是，让我们设计一个杯子，不要一开始就想着杯子怎么做的问题，而去想想为什么需要杯子，怎么更好解决喝水或喝水容器的问题，以及在喝水这个过程中，怎样提供更好的“服务”。 所谓制造，制是什么概念，造是什么概念？制是中国的吗？制是外国的，制是外国定的流程、标准、程序，我们只是造，而制是人家经过几十年、上百年沉淀下来的制。 我们没有时常去问，到底本质是什么。交互设计的本质是什么？我想是“人x关系”，在不同的领域，对象不同，可能是人与在线商品的关系，可能是人与手机的关系。这么看，交互本不应局限在屏幕，虽然它们是最重要的界面和载体。同一个人或者不同的人在不同的环境、条件、时间，需求不一样，明白了这个才能做交互。柳老说，“不是光在屏幕上做交互，在手机上做交互，这个社会要交互，社会和人之间要交互”，设计师要拿出设计来为人服务。 “设计不是舒服，而是合理。设计不是一种技巧，实际上它要让人的工作、生活更加合理和健康，这是我们的方向。” 这也是一直困扰我的问题：什么样的设计是好的设计？柳老的答案是“合理”。是否是好的设计，要看解决什么问题。合理应当建立在妥善处理各种关系基础上，再向更“好”（高效？舒适？健康？美观？）的方向做引导。 再次觉得“人机交互”这个名词涵义广泛而准确。交互设计需要关心的，就是三大部分：人，系统，相互关系。大概年轻的设计师们，得先对人和系统（业务、技术）有足够的认识和洞察，才能更好地处理“关系”，这个更为关键、真正是设计中“艺术”的部分。 再次觉得任很重，道很远。对刚刚出发的自己，说一声加油。]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>IxD</tag>
        <tag>交互设计</tag>
        <tag>设计思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[没事别随便提信息架构——读Web信息架构]]></title>
    <url>%2Fweb-ia-note.html</url>
    <content type="text"><![CDATA[入行也有一些时日了，曾经看到不少文档和设计稿里，有一部分是对“信息架构”的说明。这些说明其实一般也就是个网站的sitemap，甚至只是最粗略的导航和页面关系说明——这只是信息架构非常小的一个部分？到底什么是信息架构？ 读完在“想读”list里蹲了好久的《Web信息架构》，感觉有点如释重负，仿佛自己久治不愈的拖延症稍微有了一点点起色。读电子版的一大好处就是感觉不到书的厚度，读着、读着、读着，突然就发现读完了。 言归正传，这是一本“严谨”又“热情”的书，严谨的部分很实在地介绍了信息架构的基本概念、方法、案例等；热情的部分简直是本书的bonus，作为一个新兴的、跨学科的、价值待证明的领域，作者用自己丰富的经验，用絮叨又幽默的语气，向我们述说着这个行当面临着哪些挑战，哪些组织的哪些层级的哪些人，会提出怎样的挑战和疑问，作为一名靠谱的信息架构师，应该以什么样的态度去面对和回答这些问题。——真的，没事别乱提信息架构。 一、信息架构是干什么的？1.什么时候需要考虑信息架构？ 信息正好处在数据和知识之间混乱的地带。 信息的结构化程度不如数据，可传递性（可描述性？）又好于知识，是我们在网络上查看、搜寻的最一般的类型。 当一个网站/系统需要帮助其使用者更好地从大量数据中获取信息时，就需要考虑信息架构。越是以信息查询、获取、消费、生产等作为核心业务的网站，信息架构越重要。例如，内容型网站（如资讯门户、企业内网）、电子商务网站、垂直类社交网站（如问答类）的信息架构，比工具型网站（如日程管理、邮箱）要重要得多。 2.信息架构由什么组成网站的信息架构可以分为元素、关系和表达三部分。 元素可以用建筑的砖块来类比。支撑一个建筑的基本构成单元是什么？有多少种？体量多大？什么材质？——基本的信息单元是什么，由谁产生，如何更新，有哪些自有的和附加的属性/元数据，它们如何描述信息，如果在信息存取过程中发挥作用； 关系可以用建筑的骨架结构来类比。一个建筑的基本架构是怎样的？有哪些空间单元？它们各自的作用是什么？如何联通？——数据如何产生、如何分类、如何组织、如何流动、如何发生关系； 表达可以用建筑的外观和环境标识来类比。人们看到建筑有什么感受？身处其中时有什么感受？如何在其中穿行，根据指示到达要去的地方？——使用者在哪里通过什么方式获得信息？界面对信息的描述、指示和引导是否充足有效？ 3.信息架构要做的事情 设计结构（Structuring）——决定网站信息“单元”的粒度（granularity），及信息单元的相对大小或粗糙程度。 决定组织方式（Organizing）——将组件组合成有意义而且各有个特色的类别。 制定标签（Labeling）——如何称呼这些类别，如何导航。 信息架构的目标在于合理组织网站需要承载的信息，让人们通过浏览、搜索、提问等方式找到想要的东西。 二、如何搭建和优化网站的信息架构？实践信息架构设计模式的基础：用户，内容，情境。 必须了解网站背后的商业目的，以及可供设计和实践的资源，想办法把信息架构和企业的目标、策略、文化结合起来。 必须注意目前内容的质量和数量，以及一年后会如何改变。所有权（内容谁提供？所有权是否分散？是否有外部信息提供商授权的内容？），格式，结构（文件、内容组件、xml），元数据（有多少元数据用来描述内容和对象？手动还是自动加入标签？质量和一致性程度如何？是否有受控词表？用户是否可以自定义标签？），数量，动态性（成长率或周转率如何？明年会增加多少内容？内容多久会过时？） 必须了解主要观众的信息需求和信息搜寻行为。 1.探索不用类型的使用者，有哪些信息需求，以及什么样的信息获取策略，现在的系统存在什么问题四种常见的信息需求： 已知条目搜索（known-item seeking）——正确的东西 探索式搜索（exploratory seeking）——一些好东西： 在搜索和浏览过程中学习，并不期待得到“正确”答案 无遗漏式研究（exhaustive research）——每样东西： 搜索某一主题的任何信息 重新找到——再次需要 一些研究方法： 【背景研究】 短期和长期目标是什么？ 商业计划是什么？政治因素如何？ 计划和预算？ 观众是谁？ 观众为什么要访问这个网站？为什么会常来？ 用户应该能做什么事情？ 内容怎么建立？怎么管理？谁来做？ 技术基础架构是什么？ 以前有什么行得通？什么行不通？ 【涉众访谈 stakeholder interview】 【启发式评估 heuristic evaluation】 【内容分析 content analysisi】 目的是找出内容和元数据内的模式与关系，为内容做更好的结构、组织，以及访问途径。对每一种内容对象记录： 结构化元数据：描述该对象的信息等级。有没有标题？内容有没有分节？用户想直接获取这些信息吗？ 描述性元数据：主题？用户？格式？………… 管理性元数据：描述该对象和商业情境的关系。谁创建了这个对象？谁拥有？合适建立的？何时应该移除？ 记住自己的问题： 这个对象是什么？ 如何描述这个对象？ 这个对象和其他对象有何差别？ 怎样让人找到？ 【内容映射 content mapping】将现有的内容结构、组织和位置进行可视化表达，如 【标杆法 benchmarking】 竞争式标杆法：与他人做横向比较 前后式标杆法：与自己做时间上的纵向比较 【卡片分类 card sorting】 让我们了解用户的心智模型，他们在脑中默默编组、排序、为任务和内容制定名称的方式。 此外还有使用量统计，搜索日志分析，客服信息，问卷，情境式调查（contextual inquiry），焦点小组，访谈，用户测试等方法。 2.理清所有的数据类型、属性、来源、更新情况等自有属性，回答它们如何组织的问题 理解的源头就是分类——Hayden White 组织系统由组织体系和组织结构组成。 A.组织体系定义内容条目之间共享的特性，而且会影响这些条目的逻辑分组方式。 (1).精确性组织体系：可以将信息分成定义明确、互斥的区域。常见的是按字母顺序、按年表、按地理位置排序。 (2).模糊性组织体系：依赖的是体系构建的质量，以及体系内个别条目摆放的位置。常见的类型： 按主题。设计时需要定义好内容的范围，注意涵盖面的广度 按任务。将内容和应用程序组织成流程、功能或工作的集合。最常见的是电商网站 按用户。如果用户群可以界定的比较清楚，可以提供很好的个性化服务，但模糊性依然存在，对系统“猜测”的要求很高 按隐喻。多用于游戏 混用 B.组织结构定义内容条目和群组之间的关系类型。 (1).等级式：自上而下的分类，类别互斥（在排他性和包容性之间取得平衡），平衡宽度（每一层选项数量）和深度（层级数）； (2).数据库模式：自下而上的做法，使用受控词表的元数据为文件和其他信息对象打上标签，就可以进行有力的搜索、浏览、过滤以及动态链接。ERD（entity relationship diagram）是在设计和采用数据库之前，建立与调整数据模型的方法。大型网站最好依赖CMS来管理元数据和受控词表。 (3).超文本：涉及两种主要组件：要彼此链接的条目或信息块，以及块状信息之间的链接。缺点是难以看清全貌，用户无法在网站组织上建立心智模型，所以通常不作为主要的组织结构。 &nbsp; 设计标签 通用原则：尽量窄化范围，开发一致的标签系统而非标签。为什么一致性很重要？因为一致性代表的就是可预测性，当系统可预测时，就容易学习。 影响一致性的因素：风格，版面形式（字体、字号、颜色、空白、分组方式等），语法（动宾？问句？），粒度，理解性（没有重要的遗漏），用户（如果有必要，为每一类用户开发独立的标签系统） 创建新的标签系统 从已有内容中抽取（慢，费力） 要求内容作者为内容建议标签 找用户代言人或主题专家（SME） 直接来自用户（如卡片分类，对小群标签如导航比较适用，自由列表） 间接来自用户（如query日志分析、标签分析） &nbsp; 3.要满足使用者的需求，数据应该如何被提取，如何呈现信息架构为内容提供了情境： 告诉我们现在在哪里； 协助我们移动到其他关系紧密的网页； 协助我们以层级方式（结构和目录）和情境方式（相关内容和功能）在网站内移动； 让我们可以操控内容以便浏览（如筛选和排序）； 让我们知道可以去哪里找到基本服务（如登录和帮助）。 提供浏览信息的帮助： 组织系统：网站内容分类或分组的主要方式（如按主题/任务/用户/年代），也称分类法和等级体系； 全站导航系统 区域导航系统 网站地图/目录 网站索引：排序后的链接列表 网站指南：针对特定主题提供特定信息，以及连向网站中相关子主题的链接 网站向导：可以通过一系列的步骤来引导用户，也有连向网站中相关子主题的链接 情境式导航系统：用链接同意连向相关内容，通常内嵌在文字内，一般用来连接网站中高度专业化的内容， 提供搜索信息的帮助： 搜索界面 查询语言：搜索查询的语法； 查询构造器：一些提升查询效果的方式，场景包括拼写检查器（qc？），词干分析、概念搜索（？），以及从词典取出同义词； 搜索算法：决定哪些内容可以满足用户的查询； 搜索区域：网站内容子集，经过特殊的索引设计以满足较细致的搜索； 搜索结果：如何分类、分级、排序、聚类，显示多少结果。 隐藏的组件 受控词表和叙词表：预先确定描述特定领域的较佳词汇。通常包含上位类、下位类、相关关系的叙词链接和优选词的说明。搜索系统可以从受控词表中取出查询的同义词以提升查询效果。 搜索算法 最佳猜测（best bets）：匹配较佳的搜索结果，编辑和主题专家会决定哪些查询应该取出最佳猜测（直达区~~） 高级导航方法 个性化和定制化：个性化是我们猜测用户想要什么（but 过去的绩效无法保证未来的成效）；定制化是用户告诉我们他想要什么（but “don’t make me think”） 可视化 社会化导航：协同过滤、推荐引擎 三、信息架构的挑战和机会在哪里？1.价值待证明 2.跨学科、多领域 3.对象的不可控性：信息模糊性（语言的天然属性），异质性（组成元素之间的差异，难以结构化），不同观点的差异性（必需摆脱自己心中为内容命名和组织的模式）， 4.需要深入企业和组织，在复杂的内部政治环境中减少混乱和不确定性，寻求合理的解决办法。 &nbsp; by 00 00的公众号，更多分享酝酿中……]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>Note</tag>
        <tag>Navigation</tag>
        <tag>IA</tag>
        <tag>信息架构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基本交互控件[1]：命令按钮(Buttons)]]></title>
    <url>%2Fixd-controls-buttons.html</url>
    <content type="text"><![CDATA[基本交互控件第一篇，我们来整理命令按钮的设计要点~ （为什么要写这个系列？请看之前的文章 “学习交互设计的语言”） 一、这是什么命令按钮按钮主要用于： 指示当前页面、对话框中重要的操作命令（可能包含多个相似命令） 触发即时的操作结果 也可以用作需要强调的页面跳转链接 常见类型包括： 二、命令按钮的组成 三、设计要点同样的命令出现在不同的页面上，文字、样式和位置应保持一致如下图，新浪微博在不同页面的微博发布按钮保持一致。 命令按钮主要用于触发操作结果，而设置状态应该由单选按钮、复选框等实现如下图，win7中的防火墙设置窗口，选择选项由单选按钮完成，出发操作结果由按钮完成： 按钮被点击后，如不能即时响应，需提供正在处理的反馈提示如下图，在facebook发布状态，点击“post”按钮后，文本框右上角有通用的处理中提示： 在对话框中区分主要命令和次要命令，危险命令和安全命令如下图，新浪微博删除某条微博的二次确认对话框，确定按钮为主要命令，取消按钮为次要命令： 命令按钮和其他相关控件的位置关系 命令按钮位于其他控件右侧，顶端对齐； 命令按钮位于其他控件下方，左对齐； 在控件之间垂直居中对齐 如果按钮隶属于其他控件，当这个控件未激活时，按钮也应该是不可用状态如下图，新浪微博发布框，如果没有任何文字输入，发布按钮处于不可用状态： 如果使用对话框向用户进行提问，按钮文字应当与问题匹配如下图，QQ关闭多个会话窗口时的二次确认，问题是“确定……吗？”，按钮对应的文字是“确定”和“取消”，符合当前情况： 明确区分按钮与链接，按钮上的文字，不应增加下划线或鼠标经过的效果下图的按钮中的文字，错误地混合了链接的样式 慎用“图标+文字”按钮，如果图标不能很好地促进理解，宁愿只用文字分隔按钮的设计要点 将最常用命令作为默认命令； 默认命令出现在下拉列表中首位，使用粗体以区别于其他命令； 如果最常用的命令是用户上次选择的命令，则将默认状态改为上次的选择，如颜色选择器； 使用信息提示说明当前按钮的用途 按钮文字的设计要点 给每一个按钮（包括图标按钮）起名，让读屏软件可以读取； 明确表达操作结果，如“保存草稿”要好于“保存”； 如果点击按钮不是触发立即的操作，不要使用“马上/立即xxx”。例如“下载”按钮可以指向跳转页面，“立即下载”则应在当前状态触发下载 四、讨论与链接相比，按钮更适用于： 触发一个即时响应的操作，并且这个操作是当前页面/窗口的主要目的； 在窗口中收集用户输入信息和做出选择； 操作可能引起显著的、有风险的结果，无法撤销； 描述命令的文字较少； 命令不被包含在整段文字中 按钮什么时候应该与单选按钮结合使用（单选按钮进行选择，按钮进行确定）： 可选的操作项超过5个； 用户在操作前需要查看相关信息，或者要进行更多的交互； 用户将选项理解为选择而不是命令 五、Check list当在设计中使用到命令按钮时，可以对照这个列表检查设计是否合理： □ 是否应该使用按钮而不是其他控件□ 使用纯文字or纯图标or文字+图标？为什么□ 按钮文字是否能够准确描述所触发的动作□ 是否指定了“正常—经过—按下—聚焦—不可用”等5种状态□ 是否给出了合适的title/tooltip/infotip信息□ 何时需要指定按钮不可用状态□ 是否需要指定快捷键□ 是否需要指定默认回车键触发□ 按钮是否触发即时结果，如需等待是否有足够反馈□ 点击按钮后各种情况的反馈如何□ 与周围其他控件是否对齐，是否有从属关系□ 一个页面是否出现了多个按钮，是否需要指定主要按钮□ 与其他页面、位置同样功能的按钮在样式、文字上是否一致？ &nbsp; ————————- 去看看同一系列的纠结文章 ————————– 前言：学习交互设计的语言 基本交互控件[2]：链接(Links)]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>交互设计</tag>
        <tag>控件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习交互设计的”语言“]]></title>
    <url>%2Fstudy-ixd-language.html</url>
    <content type="text"><![CDATA[每次进入一个新的领域，都免不了踩着不一样的学习曲线，从起点开始慢慢爬。交互设计并不像其他领域有很成熟的学科体系，怎样才能在实践中不断总结，提升自己的能力？ 这个问题让我想到了每个人都最熟悉的语言学习过程。 我们如何学习语言？学习母语时，我们首先学会“听”大量的词语和句子，然后从“妈妈”、“爸爸”这些最重要最简单的词汇开始学习，慢慢地会把几个词语连起来组成句子，然后能用好些句子表达完整的意思。学习外语时，先是背单词，单词组成了短语和句子，然后通过课文学习语法，掌握了基本的阅读、对话能力，还需要去进一步了解这种语言背后的文化和思维方式，才能更好地与他人沟通。从学习语言的根本目——“交流”来看，每个学习者需要解决两个基本问题： 1.如何表达？ 学习词汇：首先知道一个意思可以用什么词汇表达，这是最基本的，再怎么强调都不为过，想想看，如果把“luck”说成“fuck”会有什么后果…… :P 学习语法：怎样把多个意思单元（词汇）用别人可以理解的逻辑连接起来，表达完整的意思。 2.如何交流？学会了词汇和语法并不代表就能沟通无障碍，有效的交流还需要双方付出更多的努力： 理解交流的目的：是获得信息、情感沟通、阐述观点还是通知……？ 理解双方的关系：是询问与解答、平等讨论、宣布与获知还是其他？ 理解对方：是一个怎样的人？价值观怎样？可能有怎样的思维方式？在对话中关心的是什么？可能会做出怎样的回应……？ 在对话过程中积极促进信息传达：理解对方的意思，给予适当的反馈，清晰表达自己的意思，遵守一般逻辑，消除双方的信息不对等…… 交互设计扮演什么角色？回过头来看看交互设计，设计师们充当的其实是”翻译“的角色：使用者和某个系统所用的是各自的”语言“，他们如何进行有效沟通？ 设计师一方面要理解用户的”语言“（Alen cooper所说的”心理模型“ mental model）： 他们是怎样一群人？为什么来使用这个产品？从什么渠道过来？目标是什么？会怎样操作？需要什么反馈？遇到什么问题？会怎样解决？……另一方面，设计师需要知道系统的”语言“（Alen cooper所说的”实现模型“ ）： 有哪些组成部分，各部分关系是什么；有哪些数据，数据怎么产生，怎么获取，怎么输出…… 了解双方的情况后，设计师开始用设计的”语言“（Alen cooper所说的”表现模型“represented model）去描绘界面（interface），让用户和系统的”对话“顺利进行，用户最终达到目标，系统体现自身价值。总结一下： 交互设计需要学习什么？接着上一部分，做一个对应的类比，看看作为交互设计师我们应该学习和掌握什么： 1.如何表达 词汇：基本控件（如命令按钮、链接、复选框等） 短语：组件（如文本编辑器组件、翻页组件、内容列表等） 语法：模式（如页面结构模式、导航模式、页面组织模式、动作和命令模式、复杂信息呈现模式、输入和编辑模式等） 2.如何交流 用户：人口统计学信息、用户分类、相关产品使用经验、使用目标、体验目标、任务和子任务…… 系统：基本组成、信息架构、数据流、页面结构…… 交互：使用场景，软硬件平台，辅助工具，如何输入，如何输出，命令和反馈…… 因为转做交互的时间不长，还没有能力总结”如何交流“部分，就从最基本的”词汇“开始吧。 交互设计的”词汇“每个领域都有最基本的“词汇”，设计的基本词汇就是用于表达设计思维的“元素”。在互联网产品交互设计领域，交互界面相对简单，主要都是通过电脑屏幕、移动设备屏幕去展现，设计师手上的材料无外乎各种页面、页面之间的连接，以及页面内承载、表达各种内容和互动方式的“控件”。控件指用户与系统进行交互的屏幕对象单元，它具有可操作性或指示性。 对基本控件的学习是基础中的基础，为了避免犯把”luck“说成”fuck“的低级错误，我决定先把pc/web的基本控件学习一遍，一是因为操作系统和web上的基本控件由来已久，在设计中最为常见；二是有大量的案例可供学习，微软总结了十分细致全面的 Windows User Experience Interaction Guidelines ，是极佳的教材。 接下来的系列文章，以基本控件为单元，整理每种控件的描述和设计要点。 ————————- 去看看这一系列的纠结文章 ————————– 基本交互控件[1]：命令按钮(Buttons) 基本交互控件[2]：链接(Links) 欢迎一起探讨~ (00的更多联系方式请见“About页面”)]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>交互设计</tag>
        <tag>控件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[没有未尽之路，只有未尽之念]]></title>
    <url>%2Fdirector-and-pm.html</url>
    <content type="text"><![CDATA[三年来，一直想不明白产品经理到底是个什么样的角色。果然，最好的答案往往来自盒子之外。《跟自己的名字赛跑》这本书翻到一半，突然明白，产品经理就是导演。可能仅仅因为一个简直是浪漫到天真的梦想，在脑海中酝酿好每一个画面，然后纠结一帮在专业上远胜于自己的人，对他们提出苛刻到近乎无理的要求(再内疚也明白是为了有更好的结果)，排除万难，饱受各种压力和煎熬，好人坏人都做尽，在绝望中继续前行，让一群普通人的努力最终变成伟大的作品。 于是明白了自己的退却： 没有坚定的愿景，并不明白自己最终坚持的到底是什么； 没有去酝酿愿景，也就是对要拍一部伟大电影的愿望，没有冥思苦想怎么把故事讲出来，每一个演员怎么选，每一个分镜怎么画，每一条动线怎么走，每一分钱怎么找怎么花……这些问题通通没有考虑清楚； 面对问题时，让愿景退让、妥协，无原则地降低要求，而不去想尽办法解决问题； 面对现实时，不愿意做坏人，暂时地得罪大家，就为了让最后的作品能让所有人都感到骄傲； …… 如果顽固地坚持这一套逻辑，那我必须先找到“非做不可”的根本所在。如果没有偏执的梦想也好愿景也好，回答不了每天都要面对的、来自所有人（包括自己）的追问“这么做真的没错么？？？”，谁又能坚持下去。 确实，很多浪漫的事情，在做的时候根本一点儿都不浪漫。导演也好产品经理也好，他们的魔力就在于让梦想一点一点变成了现实。这种魔力，并不来源于什么大智慧，可能只是对梦想毫不妥协、负气式的执拗，可能是遇到问题只想着解决的专注，甚至可能是在绝望时让自己麻木地继续前行。。。等走到彩虹桥的那一天，才发现过去的世界已经被自己抛开老远，听听内心，当初的那个声音却一直还在。 于是，怎么能没有梦想，或者是那一点没来由的热情和执念呢？ 于是，再次真心推荐电影《赛德克·巴莱》和导演魏德圣的手记《跟自己的名字赛跑》。]]></content>
      <categories>
        <category>叽歪</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[版面设计的原理(笔记)]]></title>
    <url>%2Frd-basic-layout-design.html</url>
    <content type="text"><![CDATA[《版面设计的原理》，一本很实在的入门好书。一边看书里的内容，一边看书本身的排版设计，本身就是一种享受和学习。好的设计都得经过深思熟虑，背后做出相当的努力，才能让人感受到一点点的不同。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>设计</tag>
        <tag>Note</tag>
        <tag>Layout</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你好，恐惧]]></title>
    <url>%2Fder-angst.html</url>
    <content type="text"><![CDATA[“唯一需要恐惧的，是恐惧本身”第一次看到这句话时，深以为然。过后转念一想，不对啊，又是一句正确的废话。恐惧临头的时候，难道奢望自己拍拍胸口就气冲丹田脸不变色心不跳？何况恐惧的形态多种多样，说不准什么时候自己被完全控制了还浑然不觉。 每天对着这个timeline，那个sns，正确的废话们出镜率越来越高，但是吃再多的信息快餐，灌多少锅心灵鸡汤，还不如实实在在看一本好书。《直面内心的恐惧》就是这样一本书。如果没被这本书的副标题——“分裂、忧郁、强迫、歇斯底里四大人格心理分析” 唬住，翻开书，发现作者想探讨是四种恐惧的基本类型。恐惧，让我们不自觉地一直逃避某些东西，形成一定的思维和行为模式，慢慢成为难以改变的性格。一旦失去对某种恐惧的控制，生活总会偏离正常的轨道，我们知道有些什么地方不太对劲，但因为是自己一直以来固有的模式，也就听之任之了。作者想寻找所有极端、病态的行为的心理根源，帮助生活在恐惧中（不一定自知）的人们去挣脱如影随形的束缚，以塑造更健全的心理和人格。 应该很难再找到一本心理学的书，把思路和章节组织得如此清晰。作者根据“与自我/他人的关系”（类比做自转/公转）和“与事物的关系”（类比做向心力/离心力）画出两条坐标轴，四种恐惧正好分布在四个象限： 害怕失去自我，避免与人来往——分裂人格 害怕分离与寂寞，百般依赖他人——忧郁人格 害怕改变与消逝，死守熟悉的事物——强迫人格 害怕既定的事实与前后一致的态度，专断自为——歇斯底里人格 不得不惊叹自转/公转/向心力/离心力这一系列类比的精妙，作者不满足于构建了一个清晰的解释性框架，而且用一种理解成本几乎为零的类比，帮助我们拿起放大镜，细细观察这四种神经病： 一、分裂人格特征独立自主、理性、独具个性、冷静客观、批评家、矜持、冷漠、好猜疑、喜怒无常、与世隔绝、自我中心、社交困难、敏感、独来独往、孤僻…… 童年成因害怕把自己交出去，成因可以追溯到新生儿时期。不被照顾和关爱，或者接受过多刺激的话，婴儿没有感受到被保护，要什么没有什么，或是无法建立对环境的信赖，于是日后无法培养信心，当要对生命有所付出时就会产生恐惧。成长中的努力过多放在了“自转”中，以致于不懂得如何“公转”。 恐惧什么？分裂人格所恐惧的，是自己以外的任何东西：到底它们是不是可靠的、正常的、无害的、适合自己的。于是在保护自己自转的同时，离其他人和事物的轨道越来越远，也就无法获知周围环境的任何反馈——其实哪怕一点反馈，都能帮助分裂人格们更好地评估自己和做出合适的反应，而不是疑神疑鬼地自我猜疑，然后进入Self-fulfilling prophecy的怪圈。 行为模式 “不要从我这里取走什么——我也不需要从你那里索求什么” 对分裂人格来说，最安全的模式就是尽可能自给自足，无需倚靠和依赖第二个人，也就是无需去适应、接受另外一个与自己一定存在差异的人，更不要说建立亲密关系了。因为从小缺乏丰富的情感引导可以借鉴，所以会依赖理智和感官感觉作为行为的准则，容易将人和事分为非黑即白的两极。自闭，敏感而脆弱，多疑，孤僻，分裂人格沉浸在自己的世界中。 如何克服对生命和周遭的人敞开心扉，培养对他人的好奇，了解接纳别人并不会使自己的世界分崩离析，也可以找一个伴侣帮助自己成长，扩大生活的圈子，认识到相互依靠、同甘共苦的美好。 二、忧郁人格特征依赖、心甘情愿任凭他人摆布、质疑自己的处世能力、没有安全感、谦虚、无私忘我、有同情心、忍耐力超强、卑微、服从…… 童年成因幼年时被极端宠爱或严酷拒绝，容易形成烙刻在灵魂深处、永远不敢表达的恨与妒，只好用自怨自艾或惩罚自己来赎罪。自幼被宠爱的孩子，长大后发现外面的世界并不是以自己为中心的，于是要让自己变得顺从、招人喜爱，免得失去被宠爱所包围的环境。而从小就被冷酷拒绝的孩子，持续地绝望，无法相信未来，过早放弃了表达自己、为自己争取的意愿。主体发展不健全，也就无法快乐的“自转”。 恐惧什么？不愿意走出被保护的世界，害怕寂寞、被孤立、被抛弃、不被保护。以致于让情感限制言行，不敢说“不”，不愿为自己的正常需要而去要求别人。 行为模式 “请给我更多——如果需要我先给予，我完全愿意” 尽可能地制造和保持亲密，不惜通过极端的利他主义获得周围人的认同。同时不敢有所求，甚至不允许自己批评别人，以及通过变相的自我惩罚，以避免做自己所要付出高昂的代价。对事物消极、被动地等待，同时压抑自己的情绪，尤其不善于适当表达愤怒和不满，演变成为悲观消极的怨气，自认为是倒霉蛋。 如何克服犹豫人格低估自我价值，实际上来自深植内心的胆怯和压抑怒气。要有勇气让个性自由发展，不惧怕自己可能要承担的责任，积累妥善处理各种情绪（尤其是愤怒）的经验，才能主宰自己的生活。 三、强迫人格特征完美主义、自我控制、洁癖、谨慎、自我保护、权力欲、责任感、强硬派、秩序、安全感、小心翼翼、好争辩、节省、具体不含糊、保守…… 童年成因从小就被苛刻管教和严厉规训的孩子，一直听到“你应该“”你不可以xxx”，在有所怀疑的时候也没有人提出合理的解释，他们很快就学会了克制情绪，按照既定的方式去待人处世，才能获得认同、免受责备和训斥。他们往往接受的是僵化的教育方式，太早就有事情得依照一定模式进行的经验，因此容易把所有事情都条件化、模式化。“向心力”就像一块磁铁，将他们牢牢地吸附在磁场安全的范围之内。 恐惧什么？害怕事物的消逝，害怕要重新建立和熟悉已有的秩序，害怕控制感的丧失，强烈需要安全感。 行为模式 “一切都有它应有的样子——我想远离错误和混乱” 希望一切如旧，谨小慎微，自我压抑和克制，用理智和冷静包含自己，犹豫不决，担心改变会带来什么负面的后果，以“守”的心态面对变化着的世界。如果不能强迫外部世界按照自己的方式运作，那就只好自己紧守不变的眼前，一遍又一遍地强化那些自己可控的、近乎仪式性的行为，永远都在学习遵守规则，在进行校对和修饰，进而形成套路固定的生活方式。 如何克服不要过于保护自己，接受事物终会消逝的事实，把惯于压抑转化为向外探寻出路。应该开始学习，在新鲜刺激中逐渐掌握主动权，而不是坐着等待并且让事情自由发展。 四、歇斯底里人格特征追求改变与自由、好奇心强烈、喜欢冒险、热情洋溢、花样百出、夸张、装腔作势、爱慕虚荣、任性、及时行乐、不负责任、害怕约束、没有原则、易怒、不合逻辑…… 童年成因在慢慢踏入成人世界时，缺少学习的榜样，尤其是帮助自己认知性别角色的父母角色错乱，他们自己必须扮演原本不属于自己的角色。另外，他们的行为不受规劝，对于是非对错不必计较，孩子永远不知道要负起责任。“离心力”就像是一个失重的舞台，召唤渴望自由的孩子。 恐惧什么？害怕一成不变和约束，对既定的规律和待人处世前后一致感到恐惧。竭尽全力摆脱约束和责任，追求最大限度的自由。 行为模式 “我看到的就是我所想的——我心里有一个童话” 面对诱惑，有强大的动力去满足即时的欲望。对自己的迷恋，让歇斯底里人格能在任何情境下为自己的行为找到合法性，为处于舞台中心的自己和虚荣心去设计一个又一个的谎言，自己扮演着不同的角色，至于过错，转头就可以忘记。 如何克服接受现实中的规范与法律，不回避既定事实，不害怕自由被剥夺，勇于承担责任。 &nbsp; 最后真心推荐给所有在一定程度上有某种神经病的人，尤其是像我这种兼容并包了多种恐惧的神经病看看。不仅仅因为德国心理学家严密而精巧的体系结构，让人惊叹的还有心理学能用如此丰富的语言和案例描述非常不具象的心理现象，另外，这本书的翻译，几乎不会让人觉得是在读一本用纠结语言（德语）写的带有一定学术性的书，真的很不容易。 没有什么比作者的结尾更适合作为结尾了，祝所有的神经病们能早日与内心的恐惧化敌为友： 如果有一个人厘清了自己为什么害怕交出自己，因而对生命与周遭的人敞开心灵，有勇气让个性自由发展，主宰自己的生活，不再因缺乏安全感而害怕；接着，他接受了生命事物终将消逝的事实，活得有声有色又有意义：接受世界上以及生活中的规范与法律，知道既定事实毋须回避，但不因此而惧怕自由被剥夺——假如真有这样一个人，我们想当然要颁奖表扬他的成熟与完美。但如果这些目标我们都只能稍微靠近一点儿的话，正表示完美的人性与成熟是我们想象中的目标，他并非人类捏造出来的理想，而是我们把人安放到宇宙井然有序的系统之中。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>心理学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IxDer's ability]]></title>
    <url>%2Fixder-ability.html</url>
    <content type="text"><![CDATA[根据这几个月的实际工作体会，另外读了一遍各大公司对交互设计职位的招聘要求，整理出下面这个图，作为自我能力培养的一个索引吧~ 嗯，任重道远，上下求索]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>交互设计</tag>
        <tag>能力模型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[书写是为了更好地思考]]></title>
    <url>%2Fwriting-for-better-thinking.html</url>
    <content type="text"><![CDATA[这几天把《暗时间》看完，是时候回来写点什么了。刘未鹏把生命比作沙漏，能充分利用看似不能利用的、零碎的、未经规划的时间进行有效思考的人，将拥有更长的生命。这个道理就如同把人脑比作电脑，单核的、转速慢的、空置（idle）时间长的机器，产出自然会比多核的、高转速、满负荷工作的机器少得多。人与人之间的智力差距并不大，大部分人应该都属于“单核”机器，毕竟人的注意力极其有限，无法同时应付（至少无法同时高效完成）多个有一定复杂度（需要明显占用注意力资源）的任务。于是真正的差异会产生于“转速”和“工作时间”。 “转速快”意味着思考速度快，大脑从信息接收到一步一步的处理，中间没有停滞，即便遇到困难也快速寻找其他通路；“工作时间长”意味着在一天清醒的时刻中，有尽可能多的时间都在快速思考：工作/学习时间、吃饭、走路、做家务、运动、休息……而转速快和工作时间长它们有一个共同的隐含促进条件：专注，包括长时间集中注意力和短时间内重新集中注意力的能力——切换工作模式时，转速（注意力）会受到影响，需要一定时间才能恢复最高速度，也就浪费了一定的工作时间。于是，在醒着的时间里都快速开动脑筋思考各种各样问题的人，所获得的东西（至少是从思考获得的东西），自然比不这样做的人要多。 保持“转动”的一个好方法，是一直在脑中放置几个问题，一段时间内就围绕着这些问题转动。既可以不知不觉让自己有保持转动的“焦点”，也可以避免过于频繁转换问题而产生的工作时间损耗。而这种主题式的思考，也比较容易有进展和产出，到了一定的阶段可以用文字表达出来，用书写促进更好地思考。 保持“转动”的另一个诀窍，是做自己喜欢的事情。让那些不重要（是不重要而不是不喜欢，对于不喜欢但是对自己重要且有好处的事情，还是应该尽可能慢慢喜欢上）的事情自己来找你，而把自己解放到不做都不自在的事情上去。 我们在“转动”的时候，如果心态不好，或者不足够投入，往往只是在“空转”——冒似看了很多东西，吸收了很多信息，记住了很多知识，但起身倒杯水回来就基本忘记了……获得多少并不取决于读了多少，而是思考了多少。只有靠反复琢磨才能真正理解一个事物。看过了、了解了、记住了，最终都还不是握在自己手中，只有拆解了，放到自己的知识结构中，能够凭借自己一步一步得出想要的结论，才好说得上理解。即便只是记忆，也需要尽可能多地创造召回记忆的线索（与已有知识进行联系应该是其中最有效的），方便回忆时进行提取。仅仅记忆新知识本身，几乎是没有办法克服遗忘的。 刘未鹏给出了很好的检验问题，帮助在学习过程中聚焦： 这项知识的本质是什么？第一原则是什么？知识结构是怎样的？ 我的问题到底是什么？ 到目前为止，我到底有了什么收获？ 如果需要给一个不懂的人讲解，我会怎么讲？ 阅读时快速抓住主要内容也有一些要点： 问题是什么？方案是什么？例子是什么？ 现象是什么？解释是什么？支撑解释的理由是什么？例子是什么？ 回到转动和工作时间，“转动”主要有赖于我们对自己的把控，而“工作时间”需要更多借助时间管理的技巧。对此刘未鹏有一个很恰如其分的比喻：设计自己的进度条。为什么我们面对一大堆to do的时候会感觉焦虑？因为所有的状态都是未知的。就像你刚把100个下载地址添加到迅雷中，每个都正在计算下载所需时间，如果一直保持这种状态，所有人都会疯掉或者干脆不再关注了吧。而时间管理的技巧，不论gtd也好，番茄也好，其实都是将事务和时间切分成更小的单位并以一种更加可视化的方式呈现它们的状态：可以是事务本身的undergoing和done，可以是时间的分段，总之让人在一个时期内，只需要注意一小块的目标，而不至于在完整的地图面前被需要征服地域的广袤吓得不敢直面（嗯，人的注意力真的很有限）；同时也在地图上勾勒出一条更清晰的线路（roadmap这个词是多么贴切），让人不至于东一个点西一个点拐来绕去走着重复而低效的路。“进度条”的作用，不仅分解了任务、分解了路程，而且极大缓和了焦虑感，让人将精力更多投入到“解决”问题和“推动”事情上面，而不是问题和事情的本身。 写完了这几段文字，比看“书写是为了更好地思考”那个篇章时对这句话的理解加深不少。虽然只是把自己关心的一些要点进行了简单整理，但收获绝对跟拿着书看的时候不一样。也许书写就跟上路一样，越是经常上路，越会被各种风景引诱而继续上路，而越是经常书写，思考和书写会琴瑟和谐渐入佳境而相互促进。每次确实会吃力一点，特别是开始的时候，不过“困难的路越走越容易，容易的路越走越困难”。希望这是一个好的开始。]]></content>
      <categories>
        <category>叽歪</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>自我管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[纠结的翻页设计]]></title>
    <url>%2Fpagination-design.html</url>
    <content type="text"><![CDATA[1.什么时候需要进行翻页设计当网页内容较多、不能在限定区域内显示完全时，需要进行分页呈现。为了方便用户在多个页面间跳转和快速定位（尤其是按顺序翻页），通过翻页设计提供多个页面间的导航。 2.设计翻页要考虑的问题 分页的内容是什么类型？ 页面数量有多少？ 查看最多的是哪些页面？ 手动全部翻一遍的可能性有多大？ 是否会不按顺序翻页？为什么？ 是否会查看已翻过的页面？ 翻页是否需要在列表顶部和底部都出现？ …… 3.好的翻页设计要点 扩大可点区域 不要使用下划线 清晰标识当前页面 给页面链接之间留出足够间距 提供上一页/下一页链接 如果需要，使用首页和末页链接 将首页和末页链接放在翻页区域之外 提供上一页/下一页链接位置保持固定 页码数量不宜过长（用户视线游离）或过短（页面数量显示太少） 4.设计元素讨论1)第一页Q：是否应一直显示第一页链接？ A：大部分的翻页都保持第一页链接可见。如果返回第一页的可能性很小，或者希望将用户注意力保持在当前页面以及周边页面，则不保留第一页链接，如google搜索结果页面。 Q：如果一直显示第一页链接，如何返回第一页？ A：一种是固定第一页的数字链接，一种是提供“&lt;&lt;第一页”/”&lt;&lt;首页”/”&lt;&lt;First”的链接或按钮 2)最后一页Q：是否应一直显示最后一页链接？ A：显示最后一页链接的好处是，告诉用户页面数量，使其能够评估网站内容丰富程度，并且提供从后往前翻页的捷径（适用于用户熟悉的内容）。如果靠后的内容质量较差，或者不鼓励逆向翻页的操作，可以不提供最后一页的链接。 如果不显示最后一页链接，应提供其他的线索提示页面数量，否则可能造成仅有当前显示页数的误解。 Q：如果一直显示最后一页链接，如何跳转？A：一种是固定最后一页的数字链接，一种是提供“最后一页&gt;&gt;”/”末页&gt;&gt;”/”Last&gt;&gt;”链接或按钮 3)上一页/下一页（翻页）Q：上一页/下一页是否必需？A：一般而言，如果翻页操作较频繁，应提供上一页/下一页链接（注意保持位置固定），方便快速翻页。翻页链接常用尖括号+文字表示：&lt;&lt;Previous &lt;上一页Next&gt;&gt; &gt;下一页 Q：上一页的位置与下一页紧邻还是分离？A：大部分的翻页将上一页链接放在页码条的左侧。如果前后来回翻页的操作较频繁，可以将上一页放在页码条右侧，紧邻下一页链接。 Q：上一页下一页的样式是否需要区别设计？A：根据使用的频率，可以对两者进行区别设计，例如下一页使用比较多，可以设计得更突出一些。 4)当前页当前页的样式应与其他页样式有明显区别，并且hover样式不改变、不可点击。 通过“强调”进行区分（更强调当前页，增强位置感），或者通过“弱化”进行区分（更强调hover页，增强点击行为引导）。 5)非当前页 Normal：多设计为外框+数字的样式，能更容易识别翻页区域 Hover：应与当前页、非当前页的普通样式有明显的区分 Click：一般不对点击样式另行设计 Visited：一般不对访问过的样式另行设计 6)总页数建议提供总页数，可以告知用户明确的信息量和翻页范围；但如果总页数很多或者总页数变化很频繁的情况下，系统需要计算出所有的页数，可能会导致页面性能降低。 7)页码间距为页码之间留出足够的间距，减少误点的可能性。为页码加外框能较好地保证页码之间的区隔，外框之间最好也留出一定间隔。 8)可点区域根据费茨定律 ，扩大可点区域，可以减少鼠标移动、点击链接的时间。为页码加外框能有效地扩大可点区域。还可以通过其他设计达到这一目的，如google搜索结果的翻页： 9)手动输入页码进行快速跳转何时需要？ 增加后面页面的曝光需求（如淘宝） 内容与用户关系较密切，是用户所熟悉的（如个人图片库） 用户可能按照大致的线索(如时间)，跳转到某些页面查看(如邮件列表页面) 有哪些跳转方式？ 下拉列表，适用于页数较少的翻页 输入框+按钮 5.参考文章 Pagination Gallery: Examples And Good Practices Making pagination meaningful Pagination in Web Forms | Evaluating the Effectiveness of Web Forms Some styles for your pagination 关于分页 关于网站分页的那点事儿 带页码的翻页体验与设计比较]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>IxD</tag>
        <tag>交互设计</tag>
        <tag>Navigation</tag>
        <tag>Pagination</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[两周年]]></title>
    <url>%2Ftwo-years.html</url>
    <content type="text"><![CDATA[正式卖身两周年了，按照习惯应该写点什么，何况今天还做了一个不小的决定。 两年前，作为一个学了四年地理两年旅游的门外汉，半故意半懵懂地进入了互联网，进入了网易，开始第一份正式的工作。当时虽然知道自己不懂，但不知道需要懂的有那么多，可真是无知者无畏呐。第一年过得非常非常迷茫，接触到了很多新名词新知识新方法新流程，学着跟不同角色的人打交道，学着照猫画虎开始做很多事情。伴随这个过程的，是内心这样那样的疑问，以及不知去哪里寻找答案的焦虑。尝试着看各种各样的博客文章、报告，坚持每天发早读；尝试着画邮箱的产品地图，帮助自己理清头绪；尝试着了解交互设计、可用性、用户研究、数据分析，区分UE、UX、UI、IxD、HCI、Usability、UCD这些概念。公司基本成了大本营，周末也赖着，上网，看书，带团蹭饭。 这一年有了一些收获： 对互联网有了很多感性认识，接触了各种产品，各种分析和观点 参与了互联网产品设计开发的整个流程 在与内部外部不同角色合作过程中锻炼沟通能力 去掉了一些理想化的书生气，从小事认真做起 第二年从策划转到用研，为的是解答第一年的种种疑问。很庆幸第一年有了这些疑问，因为一直觉得，解决问题的第一步永远是问更多的问题。开始从电话招募、访谈录音整理这些基本功做起，有了种种的第一次，都是以前没有接触过的。转换了环境，才发现自己需要改进的方面太多太多：应该怎样思考问题？怎样解读对方的需求？怎样秉持提供良好体验、为对方服务的态度，去做好每一件事，包括写邮件这样的细节？应该用一种什么态度工作？面对问题怎么办？怎么想办法解决？怎么跟同事配合完成一项任务？怎样快速学习？怎样从资料中获得有用信息，如何促进行动？⋯⋯当别人和自己对自己都有了更高的要求时，压力自然就来了，但每天回家走在昏黄的灯光下，十分钟的路程，听着mp3，身体很累，心里很踏实。 这一年有了另外一些收获： 在各方面提高对自己的要求 心态开放，学会聆听 用户研究基本方法和实践 积累了与各种用户、不同部门不同职位同事交流沟通的经验 减少追逐碎片化知识的时间，开始培养看书、比较系统学习的习惯 更系统、有条理地思考问题 遇到困难更主动地想办法解决 对设计有了新的理解 年初来到杭州，没有想到这半年会这么过。。。体会到了真正的“煎熬”，有了一段真正孤独的生活经历，以及大量的反思机会和时间。终于开始反省什么是“主动”，开始明白事情没有绝对的对错，但一定要找到自己的立场，以及坚持的理由。现在可以不够好，但一定要学会欣赏更好的，并且希望向更好的方向努力。最难的事情不是达到别人的期望，而是找到值得自己坚持和投入的东西，并且简单而执着地去做了。其他的，都是浮云。这些道理都很简单，但以前就是不懂，在懵懂中任时间流过。 有时候走在笔直的路上，听着老男孩，也会一阵阵地难过。不论是时间还是年轻时飞扬的气场，都不会因为谁而停留。生活每天都在向前，甚至来不及回头多看一眼，前方的轰鸣声在提醒你，看路！小心来往车辆！知道自己要去哪里么？看好红绿灯，不要乱停车！ 是的，生活没有标准答案，甚至没有答案，只有过程。走在路上，有时候并不知道方向在哪里。迷茫的时候，只好坚持做几件事：看书，走路，保持兴趣，锻炼，以及尽量帮助别人。更理想的是，弄清楚在目前的状况下，最应该做的是什么，最不应该错过的是什么，去做就是了，没有比这种方法能够更好地克制不满和抱怨，以及降低将来对这段时光后悔的可能性。 是时候向过去告别了。前路尽是未知，生活就是这样，不一步一步走过来，是长是短，是深是浅，是冷是暖，是悲是喜，谁都无法言说。 “人生只有走出来的美丽，没有等出来的辉煌” ，虽然有点作，还是拿出来自勉。 00 2011.7.13]]></content>
      <categories>
        <category>叽歪</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[师法自然的智慧——读《第五项修炼》]]></title>
    <url>%2Frn-the-fifth-discipline.html</url>
    <content type="text"><![CDATA[很早以前就常见这本书的名字: 第五项修炼。但从来没想过这是一本关于系统思考的书，一本管理学的经典。要不是在两年前上过系统动力学这门课，今天看这本书可能还是觉得云里雾里。 各种各样的组织和人们，受片段式、局部的、线性的、二分的思考方式所困已经很久了。我们越来越丧失纵观全局，考察系统要素直接的关系以及相互作机制的能力。而系统思考的艺术，在于看穿复杂现象背后引发变化的结构。 学习型组织的五项修炼，其实很像生命体的组织和演进方式： 自我超越：不断厘清并加深个人的真正愿望。就像一个个细胞，作为个体，都具有自我成长、发展的良性驱动力。 改善心智模式：找出固有的、概括性的想法，并不断反思、修正，倾听、包容他人的想法，保持与外界的互动。就像一个个细胞，作个体，保持着与外界的联系，具有开放的姿态和可融合性。 建立共同愿景：“我们想创造什么？”愿景让所有的努力和行动成为自然。就像一个生命体，有着将各个部分有机组合的凝聚力，即精神价值的核心。 团体学习：用开放与共享的精神，探讨共同的话题。就像一个生命体，可以良性地可持续发展。 系统思考：尊重复杂性，还原完整的图像，将自我作为整体的一部分进行全局思考。给我们提供了一种视角，去解读从个人到组织，一个整体是如何形成、运作和发展的。 有趣的啤酒游戏提醒我们：结构影响行为，今日的问题来自昨日的解决方案。即使每一个角色的出发点是好的，行为是理智的，但是固有的结构注定了这个游戏中没有赢家。真正具有创造性的学习，在一个以事件思考为主的组织里，无法持续。它需要一个结构性或系统性的思考框架，也就是找出行为背后所有结构性原因的能力。 系统思考语言有三个基本元件：不断增强的反馈（增强环路），反复调节的反馈（调节环路），时间延滞（delay）。 使用这些元件，发展出两个强大的基模： 1.成长上限 包含成长或改善的增强环路，运作一段时间之后，碰上一个抑制成长的调节环路（可能是一个隐含的目标、规范、资源有限性），改善变慢或最终停止。杠杆解：去除限制因素。 2.舍本逐末 包含两个调节环路，其中一个代表见效快的症状解，另一个代表常常包含延迟根本解。依赖症状解会削弱根本解，并且形成一个副作用的增强环路，导致恶性循环。杠杆解：加强根本解。 &nbsp; 关于自我超越要不断厘清到底什么对我们最重要。我们常花太多时间应付沿路上的问题，而忘了为什么要走这条路。其次要不断学习如何更清楚地看清目前的真实情况。自我超越的精义是学习如何在生命中产生和延续创造性张力。 关于心智模式传统组织强调管理、组织和控制。学习型组织强调愿景、价值观和心智模式。心智模式是固有的，代替所观察到的事实材料的概括性想法。一旦我们觉得已有答案，所有质疑自己想法的动机就消失了。改善心智模式，我们需要辨认“跳跃式推断”，不把假设当做事实；需要区分我们所“拥护”的理论与所“使用”的理论；需要兼顾探询与辩护，把自己的思考明白说出来，引导别人对自己的假设进行探究，接受检验，并且对他人的想法进行建设性评论。 关于共同愿景分享愿景的过程，远比愿景源自何处更重要。 what——追寻什么？ why——为何追寻？ how——如何追寻？ 组织中的奉献者和遵从者是不同的。奉献者愿意创造或改变任何必要的“法则”，以全心全意实现它。 关于团体学习 深度汇谈（dialogos）：大家以多样的观点探讨复杂的难题，每个人提出心中的假设，自由交换想法。主要用于探究复杂问题。 讨论（disscuss）：主要用于做出事情的决议。 习惯性防卫的根源，是惧怕暴露我们想法背后的思维，因为我们害怕别人会发现它的错误。当我们感觉自己在防卫、逃避问题，或思考如何保护自己，表示我们应该重新努力学习的时候到了。 另外，不要将知识上的了解当做学习，学习必需产生新的了解和新的行为。 其他一个学习型组织，需要 向外沟通：这是参与式的开放，成员在公开表达看法时觉得安全 反观自照：这是反思式的开放，培养成员建设性挑战自己和他人的习惯 必需去除“权威主义”的想法，因为并不一定有人知道完全的“答案”。而我们面对的问题可以分为两种： 收敛性的问题：有正确的唯一的答案。越是理性地研究这类问题，答案的焦点将越聚敛而清晰。例如从A到B的最短路径 发散性的问题：没有正确的唯一解。有知识与智慧的人越是研究这类问题，会发现并提出越多相互冲突的答案。例如设计决策 学习型组织致力于改善思考的品质、加强反思与团体学习的能力，以及发展共同愿景和共同承担企业复杂课题的能力。有效学习的基本法则之一，是不断反思目前以为最正确的想法，回到原点确认事情的真相，否则无法产生有效的学习。 如何创造学习的时间？在行动中进行反思，一面做一面反省。时间压力的减少，往往是降低品质要求的结果。 学习型组织的领导者，更重要的是充当组织设计者、学习引导者、共同愿景的仆人的角色 总而言之确实是一本好书，值得看第二遍~]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>系统思考</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[旅行观即人生观]]></title>
    <url>%2Ftravel-and-life-philosophy.html</url>
    <content type="text"><![CDATA[每次出门回来，总是与出发时的心情不同。以往常常会带回很多疑问，因为在路上有时间去胡思乱想。上个周末一个人跑到普陀山，倒是收获了答案——大概是因为出发时已经装了一肚子疑问吧⋯⋯ 从人头涌动的普济寺出来，停车场停着很多车，但直觉告诉我应该顺着盘山车道走上佛顶山。普陀之行从这一刻才真正开始。弯弯曲曲的公路上，除了偶尔呼啸而过的区间车，一个人也没有，让人觉得普济寺里的喧闹仿佛有千里之遥。 一个人走着，闷热潮湿的空气让人脑袋发胀却又神清气爽，只听到虫鸣和自己的脚步声，还有背包摩擦牛仔裤的细微声响。 一步又一步，一圈又一圈，好像没有尽头。 一个念头就这么蹦了出来：旅行不就是浓缩的生活么？人生不就是一次长途旅行么？生活中遇到的困惑，在旅途中你会怎么应对？ 最近遇到的很多困惑，貌似都有了答案： 为什么要旅行？为了看看令人感动的风景，不管宏大还是微小；看看跟自己不一样的各种生活状态，不管激昂还是谦卑；看看千百年积淀下来的文化和艺术，不管自己懂还是不懂；还有，体验旅途中的种种，不断变换的，和一直不变的。 生活不也是这样？ 看世间百态，体味酸甜苦辣咸，惊呼原来还有这样的人跟事，感叹伤不起啊其实最终还是伤得起。 旅行者总是希望效益最大化旅行的时间太有限，既然投入了金钱、时间、精力和情感，每个人都希望旅行的过程接近完美。但是，真正决定旅途质量的是随遇而安的心态，是对于种种际遇的反应，是从平凡中发掘趣味的能力。越是斤斤计较，可能越觉得旅途索然寡味。 生活不也是这样？ 时间有限、精力有限，每个人都希望能快一点，再快一点，多一点，再多一点。心态起了变化，已经不再纯粹和简单，需要权衡的因素越来越多，需要安抚的情绪越来越纷乱。我们是不是忘记了旅行的初衷，忘记了生活的本源? 人与人的世界太复杂，没法掂量也计算不清。转念一想，简单做人，认真做事，与人为善，好像不过如此而已吧。 旅行在于过程而不在于结果了解、计划、长途交通、行走、迷路、疲惫、期望⋯⋯这些都是旅行的一部分，它们使得旅行的意义变得丰富，让我们在平淡的生活中有了一次次小小的跌宕起伏。而到达目的地，看到图片、文字、他人言语中的对象变成立体的现实，这仅仅只是旅行的一部分，就时间而言，往往只是非常小的一部分。 生活不也是这样？ 每当我们到达某个点，可以困惑，可以欢呼，可以休息，可以停留，但是点与点之间的脚步，才是构成生命的主体。“今天的问题源于昨天的解决方案”，如果过程足够用心和投入了，（包含过程的）结果真的没有办法接受吗？既然过程更重要，那就珍惜现状好的一面，至于不好的一面，能忍则忍，不能忍就想办法改变。 想要有所发现和收获，必须往前走旅行时我们会遇到这样那样的问题，会犹豫，会不安，但是没有人会止步不前，因为继续往前走，就一定会有变化，说不定下一刻就是惊喜。 生活不也是这样？ 当遇到的困惑越来越多，我们往往就纠结着停下来了，甚至很想往回走。但是很多时候，只听别人说是没法得到答案的，要自己亲眼去看，好不好，只有亲身体验过才知道。 出名的景点一定好吗？声名在外的景点，总是使游人们趋之若鹜。在朝拜这些地方时，我们可能只是被推着往前进，因为大家的盲目制造出了一种稀缺的氛围，每个人几乎忘记了自己为什么要来。 生活不也是这样？ 当人人都向往某样东西时，我们可能已经分不清到底是自己真心向往，还是把别人的期望当作了自己的动机。像管理、投资、咨询这些工作，确实有着太多的光环，让人觉得那才是舞台的中心，不能在上面施展才华，几乎某种程度上代表了无能。但其实，那也只是旅途的精华之一，其实还有那么多令人惊叹的地方，却无人问津，等着有一天被发现。 只有舒适和高潮的不叫旅行有趣的旅行绝对不是只有享受。虽然每次旅行都会有高峰时刻，但是，拥挤甚至有点肮脏的公共交通，差点被蚊香熏死的青年旅社多人间，又贵又不好吃的路边饭店，平淡得让人无聊的景点，这些才是活生生的现实。 但是我喜欢这样的现实，因为这才是生活本来的面目。 生活正因为有着好与坏、善与恶、美与丑、幸福与苦难的对比，才变得有意思、有厚度、有盼头。认清了这一点，就不会再坚持不切实际的想法：人生是纯粹的享受。白岩松说：“人的一生只有5%是精彩的，也只有5%是痛苦的，另外90%是平淡的；人们往往被5%的精彩诱惑着，忍受着5%的痛苦，在90%的平淡中度过。” 别人安排的旅程不一定精彩旅游团所安排的行程不可谓不经典、高效，但是如果一切都被不知就里地安排好了，原本应该是一个完整的体验流，缩水成了几个点，游客只要在这几个点出现一下，便完成了任务。洗澡水跟孩子一起泼出去，省去了麻烦的种种，也省去了有趣的种种。 生活不也是这样？ 如果一切都有别人帮你安排好，计划好，只需要在合适时间合适地点出现一下，人生变成了check in，好不无聊。 旅行是非常个性化的活动对食物的偏好，都有个萝卜青菜，更不要说是浓缩了生活的旅途。食住行游娱购，绝对找不出口味完全相同的两个人。所以，我们常常困惑于迥异的攻略，困惑于不同的过来人那些矛盾的描述。想起去年在去巴音布鲁克的路上，有人说时节正好，有人却说进去出不来。后来虽然没有看到成群的天鹅，但是被白雪覆盖的像焦糖蛋糕一样的连绵山脉，永远也不会从记忆中消失了。 生活不也是这样？ 别人的建议，过来人的忠告，其实都是建立在个人经历的基础上。除了自己，几乎没有人可以给出为你量身定造的意见。与其徒劳地将各种碎片拼凑成景象模糊的拼图，还不如将个性化进行到底，偶滴生活偶做主~ 旅伴和过客找到默契的旅伴是一件非常幸福的事。但也要记住，路途中也有很多旅行者，跟我们不是同一类人。他们生怕自己吃亏，什么都要抢先一步，抢先了就洋洋自得，看到了就万事大吉，避开他们可能是更好的选择。 生活不也是这样？ 找到知心的伴侣，是再好不过了。如果是一个人来去，那也要学会和自己相处，自尊自爱。而另外一些人，即使你不去惹他，他还是会把你当成路障。如果他真的那么在意这条路，请他先走好了。 旅行面对各种未知为什么旅行时，我对未知感到的是好奇和兴奋，而在生活工作中，对未知感到的更多是不安和恐惧？ ——————不知所谓的分割线———— 好吧，这几个月确实经历了不少。 但也只能对自己说不要害怕～ &nbsp; 活，要活得踏实 走，要走出境界 &nbsp; 记住啊00，爱生活，爱自己]]></content>
      <categories>
        <category>行走</category>
      </categories>
      <tags>
        <tag>Travel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务设计小笔记]]></title>
    <url>%2Fservice-design-note1.html</url>
    <content type="text"><![CDATA[SERVICE DESIGN: SETTING THE STAGE FOR THE CONSUMMATE EXPERIENCE 一篇比较general的介绍性文章，看完有几点收获，简单记录一下： “service design”是我们比较常接触到的keyword，类似的keyword还包括 “holistic design,” “multi-channel experience design” or “cross-channel design,” 传统的市场营销关注4P（product, price, promotion and place），如果想创造更佳的客户互动体验，还要关注3P（participants, processes, physical evidence） 你所提供的服务到底由哪些层次构成？每个层次包括哪些人、平台、设备、产品、功能、服务细节？它们如何构成整体的体验？ 服务设计要在服务的全流程中识别问题点/痛点，将其转化为机会点/差异点 在线体验跟线下体验有什么样的差距？从counterpart那里可以学习、借鉴什么？ 优质的服务设计意味着，所有相关人员，必需时刻思考并实践：如何为客户提供他们想要的，或是超出他们期望的服务。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>服务设计</tag>
        <tag>Service design</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见网站导航的分类]]></title>
    <url>%2Ftypes-of-web-navigation.html</url>
    <content type="text"><![CDATA[网站导航的类型很多，但目前似乎还没有比较统一的分类和命名。参考了一些资料，将常见的网站导航归类如下，并附上一些例子： Types of web navigation 按用途分结构导航（Structural Navigation） 全局导航（Global/Main Navigation） 局部导航（Local Navigation） 关联导航（Associative Navigation） 上下文导航（Contextual Navigation） 相关性导航（Adaptive Navigation） 快速链接（Quick Links） 页脚导航（Footer Navigation） 功用导航（Utility Navigation） 跨站导航（Extra-Site Navigation） 工具箱（Toolboxes） 标识链接（Linked Logo） 语言选择器（Language Selectors） 国家或地区选择器（Country Or Region Selectors） 页内导航（Internal Page Navigation）&nbsp; 按形式分标签型导航（Tabs Navigation） 导航标签（Navigation Tabs） 模块标签（Module Tabs） 层级型导航（Hierarchy Navigation） 面包屑（Breadcrumbs） 快捷下拉菜单（Shortcut Dropdown） 首页链接（Home Link） 页脚导航（Footer） 菜单型导航（Menus Navigation） 垂直下拉菜单（Vertical Dropdown Menu） 水平下拉菜单（Horizontal Dropdown Menu） 手风琴菜单（Accordion Menu） 内容型导航（Content Navgation） 页面导航（Pagination） 标签和标签云（Tag/ Tag Cloud） 缩略图（Thumbnail） 走马灯（Carousel） 连续滚动（Continuous Scrolling） 存档（Archive） 文章列表（Article list） 事件日历（Event calendar）]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>交互设计</tag>
        <tag>Navigation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10 Lessons for Young Designers]]></title>
    <url>%2F10-lessons-for-young-designers.html</url>
    <content type="text"><![CDATA[from John C Jay 1. Be authentic. The most powerful asset you have is your individuality, what makes you unique. It’s time to stop listening to others on what you should do. 做真实的自己，独特的个性才是自己最强大的资本，不要听从别人安排你该做什么。 2. Work harder than anyone else and you will always benefit from the effort. 要比别人更努力，最终总会有收获。 3. Get off the computer and connect with real people and culture. Life is visceral. 离开电脑世界，走进生活中去接触真实的人和物，体味人生。 4. Constantly improve your craft. Make things with your hands. Innovation in thinking is not enough. 不断提升自己的技能，要亲自动手去做，光靠拍脑袋是远远不够的。 5. Travel as much as you can. It is a humbling and inspiring experience to learn just how much you don’t know. 尽可能多的去外面走走，你才会发现自己还有太多需要学习的东西。 6. Being original is still king, especially in this tech-driven, group-grope world. 原创仍是王道，尤其是在这个以科技为第一生产力的时代。 7. Try not to work for stupid people or you’ll soon become one of them. 尽量不要为傻逼的人工作，否则你迟早也会变得和他们一样。 8. Instinct and intuition are all-powerful. Learn to trust them. 本能和直觉都很重要，学会信任它们。 9. The Golden Rule actually works. Do good. 这条黄金法则依然适用——做好事。 10. If all else fails, No. 2 is the greatest competitive advantage of any career. 如果都不行不通，第2条仍是任何职业生涯中最重要的。]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记-交互设计精髓]]></title>
    <url>%2Frd-aboutface-1.html</url>
    <content type="text"><![CDATA[这本书算是行业书籍里面的大部头了，断断续续地读了半年，收获很大。无论是产品、用研、交互、视觉、前端、开发，About face 都值得一读。 的确，交互设计其实更多的是一种思维，很多角色都可以充当交互设计师。但这并不代表交互设计师没有空间了，因为交互设计所关心的事情，必须有人来做，只不过title不一定是这个。 简单回顾一下历史，上世纪80年代初，交互设计领域的研究已经开始。80年代中期，参与第一台笔记本电脑设计的工业设计师Bill Moggridge和Bill Verplank提出了interaction design一词。1995年about face第一版面世时，交互设计的影响力和影响范围还很小，因为过去的产品往往简单而直接。而电子化时代的产品，不可预测性增强，使用行为趋于复杂。随着互联网爆发式的增长，交互设计逐渐受到了重视。 什么是交互设计？ 形式、功能、内容、行为都是设计关注的方面。交互设计的核心，在于针对具体的产品，如何去设计复杂交互系统的行为。所谓“体验”不是设计出来的，而是我们通过控制可能影响体验的要素，让体验更加趋于理想的情况。所谓的“体验设计”，可以包含形式、内容和行为三部分。（Form+Content-Infoivz, Form+Behavior-IxD, Behavior+Content-IA ?) 交互设计注重形式（form），对行为（behavior）进行设计。 其实，严格来说，所谓“行为”也不是设计出来的。行为可以引导，行为方式可以预先设定。交互设计实际是一种“可能性设计”，关注使用者的目标，期望，态度和能力（aptitude），预先思考行为发生的各种可能。 换一种说法，交互设计实际是要做一种“疏导”的工作，按不同的目的将使用者引导到不同的行为流中，并且以一种“流”的状态去完成任务，达到目的。 在非成熟阶段，我们更倾向于问“what”，是怎么样，为了解决眼前、手边的现实问题；成熟阶段，我们会更希望知道“why”，根本原因何在，为了解决全局、隐性但起决定性作用的问题。 整本书的结构的思路很清晰，从研究到设计，从框架到细节，逐层深入： 第一部分介绍了理论背景，作者的perspective和整体的framework──Goal-directed design。思路大致是 概念和方法 –&gt; 理论根据（现实模型和心理模型）–&gt; 实践的一个基础：区分用户层次 –&gt; 定性研究的方法 –&gt; 定性方法的综合呈现：人物角色和目标 –&gt; 设计实践深入的桥梁：场景和需求 –&gt; 从需求到设计：框架和改进 第二部分是设计行为和形式。从优秀设计原则和样式的总结出发，从中观的层面去考虑好的设计需要解决的问题和达到的目标：为什么样的平台和姿态设计？达到协调和流的状态，努力消除附加工作，设计好的行为，善用隐喻、习惯用法和启示，遵循基本的设计原则。 第三部分探讨了详细的交互行为的设计：搜索和查找、撤销、文件和保存、数据输入、点操作和选择、窗口、控件、菜单、工具栏、对话框、错误/警告/确认。这些都是作者认为存在问题、需要重新认识的常见操作和交互元素。 贯穿全书始终，作者一直在强调：设计无非也是为了满足需求，所以设计要基于对人的理解。在人与计算机的关系中，人应该占绝对的主导地位，掌握着控制权；而技术是为人服务的，不应该让人去理解系统的运作方式，去适应系统的限制。 我们平常总是动辄“用户体验”，什么都是“以用户为中心的设计”。仔细想想，“以用户为中心”只是形容词，重点还是放在了“设计”上。说到底，是不是真的愿意为用户着想，觉得他们的问题确实是值得我们去解决的问题，还真要打一个很大的问号。 与其每天高喊UCD，不如讨论讨论什么是服务精神，愿不愿意用一种服务周到的态度去面对你的服务对象（还不是直接面对），把什么事情都考虑周全了，把什么麻烦事儿都自己揽下并解决了。如果大家真正对所有用户都“有爱”了，愿意像对待家人、朋友、老板、客户那样全心全意地服务，什么UCD，什么用户体验，都是再自然不过了，何必时时挂在嘴边，好像生怕自己忘记。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>IxD</tag>
        <tag>Note</tag>
        <tag>交互设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[咬文嚼字之 什么是交互设计]]></title>
    <url>%2Fdf-interaction-design.html</url>
    <content type="text"><![CDATA[“咬文嚼字”系列的目的，是为了记录对一些基本概念或常见词语的理解。概念其实比我们想象中要重要，因为无效的沟通往往有一个特点：双方对基本概念的理解根本就不同。 虽然冒着成为书呆子和学究的风险，但还是有必要想一想什么叫做“交互设计”（百度百科上的词条实在不太好理解&gt;&lt;），毕竟每天都要听/说上个十几回。下面是一些不成熟的想法，欢迎拍打~ 让我们先来对这个词做一下拆解：神马是设计？神马是交互？神马是人机交互？神马是交互设计？神马是好的交互设计？ 什么是设计？00的理解：设计是为更好地处理关系而提出完整的解决方案设计和艺术（art）最显著的区别在于目的不同 设计：为了解决问题、传递信息、促进沟通 艺术：为了自我表达、激发灵感、引起情感共鸣 两者还有其他方面的差异 设计：表达的是对问题和服务对象的理解 艺术：表达的是对艺术家自己、对外在世界的理解 设计：更多是将已经存在的东西更好地联系起来、表现出来 艺术：更多是从无到有的创造 与其将设计与艺术做比较，不如类比设计与规划（plan）：两者都是基于问题的解决方案，以及解决方案的实施。设计侧重于可视化，规划侧重于系统化和操作性。 什么是交互？00的理解 交互是两个实体之间的关系（relation）、行为（behavior）和响应（action &amp; reaction） 这两个实体的特征分别是什么？ 它们的关系是什么？ 它们的关系是否会变化及如何变化？ 它们会有哪些独立行为及相互行为？ 这些行为之间如何响应？ 相互行为对它们分别有怎样的影响？ …… 什么是人机交互？人机交互指系统和使用者之间的互动关系（wiki） 什么是交互设计？我们来看看一些交互设计的定义吧~ Interaction design (IxD) defines the structure and behavior of interactive systems. (wiki) 交互设计，又称互动設計，(Interaction Design, 缩写 IxD 或者 IaD),是定义、设计人造系统的行为的设计领域。人造物，即人工制成物品，例如，软件、移动设备、人造环境、服务、可佩带装置以及系统的组织结构。交互设计在于定义人造物的行为方式,即人工制品在特定场景下的反应方式)相关的界面。（wiki） Interaction designers strive to create useful and usable products and services. Following the fundamental tenets of user-centered design, the practice of interaction design is grounded in an understanding of real users—their goals, tasks, experiences, needs, and wants. Approaching design from a user-centered perspective, while endeavoring to balance users’ needs with business goals and technological capabilities, interaction designers provide solutions to complex design challenges, and define new and evolving interactive products and services.(The Interaction Design Association (IxDA) ) IxD is about shaping our everyday life through digital artifacts. We not only design what it looks like, but also how it behaves, and we’re designing the quality of the way we interact with the system.(Gillian Crampton Smith) 技术为中心的观点：将原材料塑造出人们喜欢使用的产品；行为学派观点：定义人造物、环境和系统的行为；社会交往设计的观点：利用产品来促进人与人之间的沟通(Dan Saffer) 交互设计是指设计人和产品或服务互动的一种机制（via） 还是挺晕吧？从这些定义我们大致可以了解，交互设计是关于系统、人的行为、互动、产品的机制定义。 因为IxD是设计的一种，so，它的目标是要解决问题，利用提供的材料在特定的环境下解决特定的问题。 因为设计有目的有对象（人/受众），so，设计要基于对人的理解，而对IxD而言，更重要是要基于对人的目标和行为模式的理解。 因为IxD是为实体间的互动进行设计，so，它天生具有场景性，人与系统是在一定的环境、条件下发生关系、进行互动。 00对交互设计的理解： 根据用户的目标和期望，对用户与系统交互过程中的行为方式和所感知、接触的元素进行定义、规划和设计，以平衡用户与系统利益的方式，引导交互行为容易、有效、愉悦地完成。 上面提及的都是广义的交互设计，我们平时谈论更多的交互设计是人机界面交互设计（HCIID：Human-Computer Interface Interaction Design），而我们的工作领域主要是互联网用户界面交互设计（Internet User Interface Interaction Design），这里的界面主要包括web界面、移动设备界面、客户端界面。 还需要说明的是，正如体验实际上是不能被“设计”（只能为更佳的体验进行设计）的，行为也是不能被“设计”的，但是我们可以设计交互方式（怎样的交互行为可行？），以引导行为的发生，进而达到目的。 什么是好的交互设计？00的理解： 好的交互设计提供有用（useful）和可用（usable）的解决方案，能最有效地传达信息，激发、帮助用户高效地完成某个任务，并且在这个过程中感觉满意、愉悦。 简而言之嚼了半天，我们是不是可以这样理解： 交互设计本质上是为使用者提供贴心、周全的服务而做的设计方面的所有努力 by 00]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>IxD</tag>
        <tag>交互设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Designing Interfaces中文版摘要]]></title>
    <url>%2Frd-designing-interface.html</url>
    <content type="text"><![CDATA[“模式是某个对象的结构和行为上的特点”，这是一本关于界面设计模式的书。为什么界面设计中模式很重要？因为 对设计师而言： 模式捕捉了常用的结构，是关于best practice的总结和沉淀 模式可以快速复用，提供设计的模块化素材 对使用者而言 界面的习惯用法在增多，模式使用得当的设计得让人有熟悉感，易学习 全书的思路大概是：基于对用户的理解而进行模式的探索和积累——内容组织和结构模式——导航模式——布局模式——操作和任务模式——大容量信息展示——少量信息输入模式——大量信息编辑模式——视觉模式 01 用户做些什么好的界面设计并非始于图片，而是对人的理解：人们喜欢什么，为什么会使用某种特定的软件，他们可能会怎样与之交互。人们使用工具的理由包括：寻找信息或对象，学习知识，进行交易，控制或监视，建造某种东西，和其他人交谈，娱乐等等。 交互设计第一步：找出用户的目的。界面设计真正的艺术在于解决正确的问题。用户的学习动机：用户愿意花多大的努力来学习使用你的界面？ 为熟练用户设计的软件：Photoshop，Dreamweaver、Web服务器的系统管理工具。为有效的操作而不是可学习性进行优化。 中间状态：Office，邮件客户端，网络浏览器，手机应用。大部分情况：人们很快学会了基本知识，达到自己满意的熟练程度，并且在不需要完成更具体的目标时不用进一步学习。 为偶尔使用而设计：设置桌面背景的Win或Mac控件，在线商店的购买页面，安装向导。提供向导的形式，不需要用户特地集中注意力，用户通常没有学习这些界面的动机。 用户的行为模式： Safe Exploration 安全探索：好的软件鼓励用户尝试不熟悉的操作，不必付出任何代价 Instant Gratification 即使满足：立刻从行为得到结果；为用户提供明显的任务起点 Satisficing 满意即可：当了解所有可能的选择需要付出时间和努力的时候，人们愿意接受“够用”而不是“最佳”的选择（Herbert Simon）。视觉复杂性常常诱使非专家用户采用满意即可的策略，只寻找第一个可行的选择。 Changes in Midstream 中途变卦：让用户可以进行其他选择，并且容易重新进入（reentrance），例如邮件草稿 Deferred Choices 延后选择：不要让用户一开始就面临太多选择，在将来可以回到需要延后填写的字段 Incremental Construction 递增构建：创建某个东西的过程是增量式的，应支持快速的变化和保存，持续告诉用户整个目标对象的样子和它们的行为 Habituation 习惯：外部一致性和内部一致性 Spatial Memory 空间记忆：人们常通过回忆东西或文档的位置来再次找到它们，而不是通过名字，适用于对象数目不太大的情况 Prospective Memory 前瞻记忆：计划在将来完成某事，会设置一些提示物来提醒自己。 Streamlined Repetition 简化重复工作 Keyboard Only 只支持键盘 Other People’s Advice 旁人建议 02 组织内容：信息架构和应用结构如何组织内容？一是切分内容（Dividing stuff up），想象动作和对象怎样才能和主题最顺畅的结合起来，先考虑内容组织方式和任务流。二是用物理结构把内容用页面、窗口、面板等元素表达出来。 大多数应用程序是根据这些方式来组织的： 对象列表（list of objects），“你将操作什么对象？”，例如满是邮件的收件箱，通过线性模型、二维表格、类别、层次、空间等方式进行组织 动作或任务列表（list of actions），“你想进行什么操作？”，如浏览、购买、出售、注册 某种主题类别的列表（list of subject categories），如健康、科学、技术，适合组织名词对象，不太适合组织动作 工具列表（list of tools），如日历、地址簿、写字板 可以根据软件本质和所在领域/主题、用户领域知识、用户计算机熟练程度、心智模型等来组织。心智模型是用户基于以前的经验或了解，它表示用户对某个东西的认知程度，也就是他认为他已经知道的那部分。 模式： 双面板选择器（Two-Panel Selector）:“选择-显示”，适用于展现对象列表、类别列表、动作列表，显示设备需要足够大 画布加调色板工具条（Canvas Plus Palette）：图形编辑器，创建新对象，将工具条放在画布左边或上边 单窗口深入（One-Window Drilldown）：用单一窗口显示每一页面，适用于显示空间有限或复杂性低的应用 可选视图（Alternative Views）：进行结构上的改变，以支持不同目的的操作 向导（Wizard）：适用于用户面临又长又复杂而且陌生的任务。但在确定要做什么的时候，决策就是一种负担：不要让我考虑，告诉我接下来做什么就好 需要时显示（Extras on Demand）：让80%的使用情形更容易，让20%能达到 有趣的分支（Intriguing Branches）：要提供明显的方式回到主要的工作流中 多级帮助（Multi-Level Help） 03 到处走走：导航，路标和找路导航问题： 现在在哪里 可以去哪里 接下来去哪里 如何去到 常规的路标（Signposts）包括页面和窗口标题，网页标识（logo），其他有标记的设备，Tab，选择指示器。 页面关联模式： 清楚的入口点（Clear Entry Points）：只在界面上显示几个入口，让它们面向任务，并具有自描述性。这些入口应该涵盖人们来这里的理由 金字塔（Pyramid）：用Back/Next链接来关联一系列页面，由主页链接到所有页面，如幻灯片、向导、书的章节等 全局导航（Global Navigation）：一个好的全局导航面板应该是一个良好定义顶视觉框架的组件。用户通常不会注意网站或UI是怎么组织的，而是简单的沿着最近或最明显的路标往前走，知道找到想要的内容为止。 模态面板（Moda Panel） 中心和辐条（Hub and Spoke）：把应用顶各个栏目分割成几个迷你的小应用，每个应用都有一个入口，并且可以回到主页。应用相对独立。特别适用于小屏幕设备，常与单窗口深入一起使用 路标模式： 序列地图（Sequence Map）：在一系列页面的每一页上，显示所有页面顺序的地图以及当前位置的指示 注释滚动条（Annotated Scrollbar）：滚动条滚动的同时作为位置指示器 面包屑层级结构（Breadcrumbs）：在层级结构的每一页面，显示所有父级页面的链接 颜色编码的栏目（Color-Coded Sections）：不应成为唯一的栏目区分方式 其他 动画转换（Animated Transition）：把突然出现或位置移动的转换用动画来显示，保持用户在当前虚拟空间中的位置感，可以跟踪变化顶位置，而不是费力去寻找。300微秒的动画在平滑滚动的时候最理想 逃生舱（Escape Hatch）：在限制了导航选择的页面上，提供能离开回到熟悉地方顶按钮或链接 04 组织页面：页面元素的布局页面布局是一种艺术，它通过操纵用户在页面上的注意力来完成对含义、顺序和交互点的传达。 视觉层次（Visual Hierarchy: What’s important）：主次分明，读者能从页面布局推导出信息结构。左上角优先，空白，字体对比，前景和背景颜色对比，位置、对齐、缩进，图形（线条、方框、颜色条） 视觉流（Visual flow: What should I look at next）：良好的视觉层次在页面上建立了许多焦点，控制和引导焦点之间的视觉流 分组和对齐（Grouping and alignment: What goes with what）：格式塔（Gestalt）心理学： 相邻性：相邻物体产生关联 相似性：想同大小、形状、颜色、方向的物体产生关联 连续性：由对齐或小元素组成的连续线条和曲线 封闭性：简单封闭的区域 模式 整体视觉层次模式： 视觉框架（Visual Framework）：使用相同的基本布局、颜色、格式方案来设计页面。颜色、字体、路标、导航、带标题栏目、间隔和对齐、整体布局网格等保持一致。 中央舞台（Center Stage）：适用于表格和数据表、表单、网页、图形编辑器等。大小：中央舞台至少有左右边距的两倍宽，上下边距的两倍高；颜色：与周围元素形成对比 内容组块模式： 带标题的栏目（Titled Sections） 卡片堆（Card Stack）：把不同栏目的内容组织成几个单独的面板。横向tab页通常只支持6个或更少的卡片，如果一行实在显示不下，就水平滚动而不是两行 可关闭的面板（Closable Panels）：在很多可以使用卡片堆模式的地方都可以使用。链接箭头向下表示已经打开，向右表示关闭 可移动的面板（Movable Panels） 视觉流细节： 右对齐/左对齐（Right/Left Alignment） 对角平衡（Diagonal Balance）：用不对称的方式布置页面，把视觉重量放在左上角和右下角来使页面保持平衡 属性表（Property Sheet）：使用两栏或表单格式的布局告诉用户，一个对象的属性可以在这个页面进行编辑。如果可以实现及时刷新就及时刷新 动态布局模式： 响应式展开（Responsive Disclosure）：从最小限度的用户界面开始，在每个步骤显示更多，引导用户完成一系列步骤 响应式允许（Responsive Enabling）：当设计响应式允许或响应式展开界面时，要保证只禁止确实不能使用或不应该使用的元素，要避免没有提供任何线索来说明为什么一个元素被禁止，尽量将它们和开关控件放在一起 流式布局（Liquid Layout）：当调整窗口大小时，页面元素的大小和位置也相应变化，让页面一直保持填满的状态 05 完成任务：动作和命令常规动作表现形式 按钮 菜单条：显示一个应用所包含的完整动作集合，并以可预测的方式组织。读屏软件可以访问这些动作 弹出菜单/上下文菜单：右键菜单或者一些动作之后出现，列出有关的动作，而不是所有可能的动作 下拉菜单：下拉控件的典型应用是设置状态，而不是执行动作 工具条 链接：很多web应用的做法是 用按钮强调动作，用链接显示其他内容 动作面板 不可见动作：在对象上双击，键盘动作，托拽，命令行键入 模式： 按钮分组（Button Groups） 动作面板（Action Panel）：例如PPT新演示文档面板，可见性和自由展示的需要。形式自由 突出的“完成”按钮（Prominent “Done” Button）：把完成一项任务的按钮放在视觉流的末尾，加大尺寸并为它提供合适的标签 智能菜单项（Smart Menu Items）：动态改变，在使用前就能明确知道可以进行哪些操作 预览（Preview）：提交重量级操作前，显示任何可以告诉他将会发生什么结果的信息 进度提示（Progress Indicator）：超过两秒的打断当前任务的操作，可以考虑使用。告诉用户：当前正在做什么；已经完成了多少比例；还需要多少时间才能完成；如何停止这项任务 可取消性（Cancelability）：首先找出某种方式让耗时的操作加快速度，至少让它看起来更快一些。在进度指示或显示操作结果的地方提供取消按钮，并对操作即时响应 多极撤销（Multi-Level Undo）：人们期望能撤销这些改变：文字输入，数据库事务，图片或画布的修改，布局变化（位置、大小、顺序、分组），文件操作，对象的创建、删除和重组，剪切、复制、粘贴操作 命令历史（Command History）： 宏（Macros） 06 显示复杂数据：树、表格及其他信息图形Information Graphics带着给用户传递数据的目标，对数据进行可视化展示。良好的交互式信息图形为用户提供以下问题的答案： 数据是如何组织的？ 它们之间的关系如何？ 我能怎样进一步了解这些数据？ 我可以重新组织这些数据来换一种方式看待它吗？ 只要把我想知道的数据显示就可以了 具体的数据值是多少？ 组织模型 Organizational Models 线性模型 表格 层级模型 网络模型（组织模型） 地理模型（空间模型） 其他模型 前摄变量（Preattentive Variables）：一些可视化特性是前摄的，在用户有意识的注意他们之前，他们就已经开始传达信息了。包括色调、亮度、颜色饱和度、底纹、位置和对齐、方向、大小、形状。 “Focus plus Context”焦点加上下文：一个好的可视化界面，应该允许用户把注意力集中在一个兴趣点上，同时在它周围显示足够的素材。 导航和浏览：滚动和平移，缩放，打开和关闭兴趣点，深入到兴趣点内部 排序和重新排列：字母顺序、数字顺序、日期或时间顺序、物理地点顺序、根据类别或标记排序、受欢迎程度，用户设计的排列方法，完全随机排列 搜索和过滤：用户意图–把注意力集中到感兴趣的那部分数据，去掉其他数据。高度交互（尽快响应用户请求）、迭代（允许不断细化直到获得想要的结果）、上下文相关（在整个上下文中显示结果） 实际数据：标签，图例，坐标轴、量尺、比例和时间轴，数据提示（datatips），数据刷（data brushing） 模式 一般模式 总揽加细节（Overview Plus Detail）：Micro and Macro reading。视野框和详细视图之间的反应最好在十分之一秒以内（标准的直接操作反应时间） 数据提示（Datatips）：当鼠标划过兴趣点时，把相关数据显示在工具提示或其他浮动窗口上 动态查询（Dynamic Queries）：充满交互性的快速过滤数据的方式 数据刷（Data Brushing）：让用户在一个视图里选择数据，然后在另一个视图里同时显示这些数据。选择数据的方式：画方框，鼠标单击，shift+单击，control+单击，在数据点外围画不规则“套索”，通过菜单项、按钮或按键取消选择。 局部缩放（Local Zooming）：鼠标移动时页面会变形，鼠标位置的数据项变大 标签和列表模式 斑马行（Row Striping）：在表格行上使用两种样式类似但颜色不同的背景，来间隔显示数据 可排序表格（Sortable Table） 跳转到对象（Jump to Item）：输入某个对象名称时，直接跳转到该对象并选中 新对象行（New-Item Row）：在表格的最后一行创建新的对象 层级结构组织模式 级联列表（Cascading Lists）：对每一层级对象的选择，会将其子对象显示在下一层级的列表中 树状表格（Tree Table） 多维数据组织模式 多Y值图表（Multi-Y Graph）：将多个图表的曲线一个接一个从上到下摆放在一个面板里，共享y轴 大量小对象（Small Multiples）：需要用两个以上的维度或独立变量来显示一个大型数据集 树状地图（Treemap）：用不同大小的矩形来表示多维数据或层级结构的数据。关键是确定用那些可视化变量对那些数据属性进行编码. 07 从用户获得输入：表单和控件控件选择考虑因素：可使用的空间，用户电脑使用经验，用户领域经验，来自其他应用的期望，可用的技术 对象列表LISTS OF ITEMS：选择一个或两个选项；进行n选1（n很小）；进行n选1（n很大）；从n个选项里选择多个；为输入建立列表；建立有序对象 文字TEXT：输入一行文本；要么输入一行文本，要么从多个选项中选择；输入多行无格式文本；输入多行有格式文本 数字NUMBERS：允许输入任何数字类型；从一个有界范围内输入数字；从一个大范围内输入一个字范围 日期或时间DTES OR TIMES 模式 文本输入框模式： 容错格式（Forgiving Format） 结构化格式（Structured Format）：一组格式预定的文本输入框 填空（Fill-in-the-Blanks） 输入提示（Input Hints）：在文本框旁边 输入提醒（Input Prompt）：预先填写在文本框内进行提示 自动完成（Anto completion） 其他 下拉选择器（Dropdown Chooser） 图示选项（Illstrated Choices） 列表建造器（List Builder）：同时显示源列表和目的列表，让用户在他们之间移动项目 良好的默认值（Good Defaults） 错误显示在同一页（Same-Page Error Messages） 08 Builder和编辑器 页面布局和格式化的文本编辑器：word，quark，indesign 图像编辑器：ps，gimp，macpaint 矢量图形编辑器：ppt，illustrator，omnigraffle 网站Builder：dw，golive GUI Builder和代码编辑器：visual studio，eclipse，interface builder 常见的文本编辑器：notepad，emacs，web页面 模式 就地编辑（Edit-in-Place） 智能选择（Smart Selection） 组合选择（Composite Selection） 一次性模态（One-Off Mode）：一个模态打开时，执行一次操作，然后自动切换回默认模态或前一个模态 弹性加载模态（Spring-Loaded Mode）：通过按住某个键或鼠标进入某种模态（如shift键输入大写字母） 强制调整大小（Constrained Resize） 磁性吸附（Magnetism） 对齐指示线（guides） 粘贴变种（Paste Variations） 09 修饰外观：视觉风格和美感颜色： 在深色背景上放置浅色前景对象，或者反过来 永远不要采用红色和绿色来区分重要的元素（10%的男性和1%的女性有某种程度的色盲） 不用采用互补色的背景和前景（如红色和蓝色） 冷色调（红、橙、黄、褐、米）和暖色调（蓝、绿、紫、灰、白） 深背景和浅背景：浅背景更常用于计算机界面 强对比和弱对比：强对比会让人觉得紧张、有力和大胆，弱对比会更平滑，更让人放松 饱和色和不饱和色：高饱和度颜色生动、明亮、有力、温暖，但容易使视觉疲劳 排版： 显示器上无衬线（Sans-Serif）字体表现更好，印刷品上衬线字体更具可读性 避免使用斜体、草书和其他装饰性字体 可能的情况下，把大量文本放在中等宽度的区域里，如10~12个英文单词 空间和拥挤 Spaciousness and crowding 曲线和角度 Angles and curves：注意曲线相切的视觉效果，考虑视觉焦点的引导 底纹和旋律 Texture and rhythm 模式 深色背景（Deep Background）：用图片或渐变颜色作为页面的背景，这样能可视化的拉开和前景元素的距离。柔和的焦点，避免太多细节，颜色渐变，深度暗示，没有强烈的焦点 少一点色彩，多一些价值（Few Hues, Many Values）：选择最多三种主要颜色样式应用在页面上 角落处理（Corner Treatments） 边界回应字体（Borders that Echo Fonts）：在描画边界和其他线条的时候，使用设计中某种主要字体所使用的颜色、粗细和曲线 发丝（Hairlines）：在边界、水平标尺和Texture上使用一个像素宽的线条 通过为标题加下划线来区分带标题的栏目 用水平分割线、垂直分隔线或封闭的边界来划分不同的内容区域 引导视线穿过一个组合元素的指示线 在不同背景颜色的区域之间，清楚标识它们的边界 用在底纹上，例如格线或一组水平线 用在图标、图片和画出的图形里 用在控件周围的边界上 粗细字体对比（Contrasting Font Weights） 皮肤（Skins） End by 00]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>Note</tag>
        <tag>交互设计</tag>
        <tag>Interface</tag>
        <tag>Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web交互设计优化的简易Check list]]></title>
    <url>%2Fixd-quick-checklist.html</url>
    <content type="text"><![CDATA[“优化已有产品的体验”，这是用户体验相关岗位职责中常见的描述。我们的产品常常是在快速的迭代过程中不断完善的，就像孩子生下来需要养育才能长大一样，优化已有功能/产品，和设计新功能/产品同样重要，不可偏废。 但是，相比实现新功能，已有功能的优化总是显得没有那么紧迫而且很零散，导致了迭代优化的计划总是被归入“重要不紧急”甚至是“不重要不紧急”的象限，变成了东一棒子西一榔锤的买卖。我们可以通过可用性测试来发现问题，但是测试往往受到时间、用户邀约、场地和设备等条件的限制，可能无法进行。更多时候，设计师需要根据一定的原则（例如可用性准则）进行走查，以快速地发现并解决问题。 这篇小文章关心的问题是：如果想对非娱乐导向产品已有的交互设计进行优化，我们 需要从哪些方面考虑 遵从什么样的原则 如何开始检查现有的设计 如何确定优化的优先级 而不涉及： 新功能/产品的交互设计过程 娱乐导向产品的设计优化 产品概念、功能层次的优化 适合每一类型产品的tips 具体的优化方法 一、需要优化什么 (Considerations)“设计原则的主要目的之一就是优化用户的产品体验。对于生产工具和其他非娱乐导向的产品而言，这意味着将工作负荷降至最低。”——《交互设计精髓》 行为和界面层面的设计原则告诉我们，应该为降低用户的工作负荷而设计。但是我们常常不够贴心，不知不觉就对用户设下了种种考验，让他们抓狂： 1.视觉负担 visual work 需要分解布局 需要区分内容层次 需要区分视觉元素 需要努力定位目标信息 需要识别阅读起点 需要经常变换视线 视觉流被干扰、打断 2.认知负担 cognitive work 需要理解不熟悉的概念和模式 需要理解冗长、生涩的文本内容 需要理解混乱的结构和布局 需要理解模棱两可的操作 需要猜测系统状态、行为、结果 3.记忆负担 memory work 需要记住对象的各种属性（名字、位置、大小、颜色） 需要记住对象的关联 需要记住操作的命令、步骤、结果 需要记住以往的操作 4.物理负担 physical work 需要长距离移动鼠标 需要进行（多次）点击 需要执行不同的鼠标手势 需要多种操作组合 需要切换输入模式 需要进出不同的页面/区域 需要长时间等待 二、优化目标 (Goal)仔细检查已有的设计，或多或少总是能发现问题。在解决问题之前，我们应该清楚要往什么方向进行优化： 1.基于可用性的目标 易于识别/定位/阅读 易于理解/学习/记忆 易于操作 优化的最重要的目的，是让产品更好用，使设计符合Jakob Nielsen的十条可用性准则： 通过有效的反馈信息提供显著的系统状态 符合用户的真实世界 用户自由控制权 一致性和标准性 预防出错 识别而不是回忆 灵活、便捷的使用 美观，精简的设计 协助用户认识，分析和改正错误 帮助和说明 2.基于产品的目标需要根据不同产品进行定义。例如，对于快速注册流程的优化，目的是让用户用最方便完成注册进入目标页面，优化目标可能是最小化输入、最短等待时间等。 三、快速检查清单 (Check list)为了达到优化的目标，整理了一个简易的checklist（pdf版本下载链接请见文末），方便在走查时对架构、布局、内容、行为四个方面对照检查： 1.架构和导航Architecture and navigation 是否采用了用户熟悉或容易理解的结构？ 是否能识别当前在网站中的位置？ 是否能清晰表达页面之间的结构？ 是否能快速回到首页/主要页面？ 链接名称与页面名称是否相对应？ 当前页面的结构和布局是否清晰？ 2.布局和设计Layout and design 是否采用了用户熟悉的界面元素和控件？ 界面元素和控件的文字、位置、布局、分组、大小、颜色、形状等是否合理、容易识别、一致？ 界面元素/控件之间的关系是否表达正确？ 主要操作/阅读区域的视线是否流畅？ 其他文本（称谓、提示语、提供反馈）是否一致？ 3.内容和可读性Content and readability 文字内容的交流对象是用户吗？ 语言是否简洁、易懂、礼貌？ 内容表达的含义是否一致？ 重要内容是否处于显著位置？ 是否在需要时提供必要的信息？ 是否有干扰视线和注意力的元素？ 4.行为和互动Behavior and interaction 是否告知、引导用户可以做什么？ 是否告知需要进行哪些步骤？（op） 是否告知需要多少时间完成？（op） 是否告知第一步做什么？（op） 是否告知输入/操作限制？ 是否有必要的系统/用户行为反馈？ 是否允许必要的撤销操作？ 是否页面上所有操作都必须由用户完成？ 是否已将操作步骤、点击次数减至最少？ 是否所有跳转都是必须的（无法在当前页面呈现）？ 以上只是一个不完全的清单，同学们可以根据自己的实践经验修改，也可以参考更全面、权威的可用性测试检查表，如普渡大学可用性测试检查列表。 四、确定优先级 (Priority)当我们通过checklist将需要优化的问题筛选出来以后，可以根据问题的严重性和解决的问题的成本（时间、人力等）来综合考虑问题的优先级，例如，问题严重性得分高而且优化成本低的问题，应该优先解决。 五、小结Considerations：为降低用户的视觉负担、认知负担、记忆负担以及物理负担而优化设计 Goal：使设计易于识别/定位/阅读，易于理解/学习/记忆，易于操作，符合可用性原则和产品目标 Check list：交互设计快速检查清单v1 PDF版本 Download Priority：根据问题的严重性和成本综合考虑，优先解决严重且成本低的问题。 Reference 《About Face3：交互设计精髓》 《人机交互：以用户为中心的设计和评估》 Ten Usability Heuristics Purdue Usability Testing Questionnaire]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>交互设计</tag>
        <tag>Checklist</tag>
        <tag>Interaction design</tag>
        <tag>Usability</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记-信息设计]]></title>
    <url>%2Frd-information-design.html</url>
    <content type="text"><![CDATA[第一部分 概述当人们活动越来越多，任务越来越复杂，给予信息的时间和精力会更少。从来没有那么多方式可以获取信息，从来没有那么多信息需要筛选。生活节奏加快，对信息设计的清晰度、易读性、有效性要求更高。抽取精华，浓缩价值，这也是信息设计的使命。 当信息量越来越大时，人们共享概念和想法的时候，清晰的视觉交流方式显得尤为重要。设计需要通过易于理解的方式，向不同语言、文化、审美观念的受众传达信息。这是一种超越语言的交流方式。 信息设计的一些定义： 信息设计是将复杂的数据转换成二维视觉呈现，旨在交流、记录和保存知识。信息设计负责将完整的事实及其相互关系变得易于理解，目的在于创建信息的透明度并剔除不确定性。——Gerlinde Schuller (Information Design=Complexity+Interdisciplinarity+Experiment. aiga.org) 信息设计是对信息内容及其关于用户需求、意图实现特定目标的所呈现环境的定义、规划和塑造。—— 国际信息设计学会 International Institute for Information Design 信息设计涉及对数据的组织和呈现：将其转化成有价值、有意义的信息。—— Nathan Shedroff (nathan.com) 信息设计就是关于用户如何获取、分析和记忆信息的心理学和生理学，关于颜色、形态、图案的学习方式的作用和影响。—— Luigi Canali De Rossi（masterviews.com） 信息设计是对信息清晰而有效的呈现。它通过跨学科的途径达到交流的目的，并结合了平面设计、技术性与非技术性的创作、心理学、沟通理论和文化研究等领域的技能。——FrankThissen（Lexikon des Digitalen Informations Designs） 信息设计的各种形式：日历、大事表和时间表；图表和曲线图；图解和示意图；展览设计与环境；外部标志、路标和广告亭；图标和符号；实体和数字用户界面；地图；3D模型和计算机模拟；故事板和情节叙述；科技插图；指导手册和使用说明；网页、动画和互动媒体 信息设计功能： 数据视觉化，使复杂/大量信息清晰可读； 标识，导向； 简化复杂概念，形象化表达事物之间的关联。 决定功能的两个因素：信息密集度（高密度如门户，低密度如标识）和信息接受者（广泛受众如日历，特定受众如医学插图）范围。 信息设计也应该以用户为中心，以需求调研为起点，遵循迭代的设计流程. Dunn learning-Style Model 三种最常见的学习风格：视觉型、听觉/言语型、动觉/触觉型。视觉型通过创造流程图、图解或其他图像组织形式来掌握新知识。听觉型更希望信息以演讲、书面文件和群组讨论的形式出现。触觉型喜欢实验、示范和寓教于乐的学习。 ISOTYPE是国际图画文字教育体系的简称，由奥地利社会学家、政治经济学家Otto Neurath在德国艺术家Gerd Arntz的帮助下在1940年创造的，他相信“文字产生区分，图像制造连接”。ISOTYPE目的是把复杂信息变得让所有民众都能理解，不管他们教育程度如何。 洞穴壁画和原始岩刻，象形文字，绘图是信息交流史上几个重要的发明……地图是人类最早的信息设计形式之一。 现代图表和曲线图之父：William Playfair 第二部分 原则——认知原则，交流原则，美学原则一、认知原则阶段学说模型显示了人类记忆发展的三个阶段：感知输入（注意，几毫秒）、短期记忆（储存，几十秒）和长期记忆（储存和复原，可永久）。用对比和颜色迅速吸引读者的注意。与熟知的主题创造关联来帮助使用者储存信息。提供经过解析的、平易近人的内容组块以帮助记忆重现。 米勒的组块理论：人脑在短期记忆阶段可以记住7±2个组块。将复杂或冗长的内容分解成小组块，可以方便读者接受、理解和回想。 韦伯最小可觉差定律 Law of Just Noticeable Differences : 变化量一旦确定，就将作为一个常数不再改变，并且可以以此来预测以后的刺激。 完形心理学（Gestalt psychology）：人类将各感知成分作为一个整体来理解，而不是作为单个构成形式的集合来看。感官完形法则 The Gestalt Principles of Perception包括： 接近法则（The Principle of Proximity）：观察者看到彼此邻近（空间或时间）的物体时会将它们视为一个整体，并认为它们由相近的含义。 相似法则（The Principle of Similarity）：具有相似特性（如大小、颜色、形状、方向等）的物体，会被观察者从感知和认知角度组合在一起。 主体-背景法则（The Principle of Pragnanz）：物体要么占显性位置（被感知为主体）要么占隐性位置（被看做背景）。 区域法则（The Principle of Area）：较小的物体在较大的视野或背景中通常被理解为主体。 闭合法则（The Principle of Closure）：我们在脑海中将带有视觉暗示的物体靠拢合并或者重构。例如一组相邻的店因为它们的视觉暗示而被重构成一条线。 眼球运动可分成三种：凝视、扫视和审视轨迹。扫视是两次凝视中间的运动。审视轨迹是一系列的凝视和扫视运动。眼动热点图可以让设计师更了解用户的视觉焦点所在。 图表以两种不同方式展示内容。William S. Cleveland称为“图形知觉”(Pattern Perception)-大体陈述或主要概要，和”表格查找”(Table Lookup)-具体细节、事件、日期、数字和数量。 使用图形知觉时，读者可以更清楚地理解某一趋势，或者看到数据在不同方向的变化。表格查找过程中处理的信息是整体中的某些细节。信息设计师在视觉呈现统计数据时，有两个目的：使其详尽、清晰而准确；为读者提供更快速的阅读。 Wayfinding 描述人在身处新环境时如何确认自己的访问，以及如何确认及跟随行进路线、从某一地点到达下一地点的认知过程。ref- Kevin Lynch《城市意象》，路线、地标、地区、城市边缘、连接点。 两种不同的判定空间方向的知识集：“基于路线知识”-使用环境提示和地标来寻找路径；“查勘知识”-依靠查阅空间再现物（如地图）来选择路径。 tip：提供地图。使用界定明确的道路：所有导航都需有始有终，沿途有可循的信息点。在决策点提供帮助。建立有标注的目的地。保持简约：过多的标识意味着过多的选择，过多的选择意味着混乱无序。|| 不粉饰，只设计；提供不同层次的选择；用结构创建意义。 二、交流原则往往是信息传播的媒介，而不是信息的内容，决定了信息交流是人际的还是大众的。互联网的出现显著突出了人际沟通和大众传播两者宗旨的趋同性。 1.组织AIDA（注意、兴趣、欲望、行动）推销模式。 LATCH（位置、字母表、时间、类别、层级）组织模式是由理查德·索尔·沃尔曼开发的用于组织信息的模式。 L-适用于组织需要着重理解各物理连接的信息。 A-适用于被各种不同受众所广泛熟悉的，或在海量信息中安置了非常特定内容的组织结构。 T-适用于组织对一连串时间的了解和来龙去脉关联紧密的信息。 C-根据信息的相似特征或特性来群组。 H-根据信息的度量标准（大小、明暗）或重要程度（级别、高度）来组织。 倒金字塔式写作文体将最重要或最有新闻价值的信息放在文章的最前面，余下信息按照相对重要性排列顺序。 先让用户感到轻松自在，再考虑如何传递信息。 2.熟悉度最小努力原则（the Principle of Least Effort）：不论有怎样的经历和专业技能，使用者们都会倾向于使用熟悉和易用的工具，即使由此产生的使用效果并不理想。对资讯搜寻者来说，搜索过程的简便性比他们找到结果的质量更重要。 不确定感理论 基本前提：不确定干令人不快，所以我们用语言和交流来降低它。当遇到陌生人/群体是会经历三个不同的探索阶段：进入、个人、退出，最终是为了建立一定程度的了解，以便能更容易的预测对方的行为，从而减少不确定感和不舒适感。启示：当我们觉得不确定的时候，会主动寻求信息；确定感由于共同点而增强，由于不同点而减弱；我们觉得不确定的东西会变得不受欢迎。 3.文化素养信息素养指能否辨别何时需要信息，然后可以发现、评估、分析并有效利用这些新信息的个人能力。视觉素养是诠释、欣赏、收集和创造图像的能力。 符号学是一门将标识和符号视为语言和交流中重要元素的研究。力求理解并解释在信息发送者、接收者、情境和文化变化不定的前提下，各种不同的含义是如何被分别传达的。每一个符号都具有“外延意义”-最为普遍接受的含义和“内涵意义”-根据个人经验而产生的继发关联。 单个符号可以分为：图标-原义的直观视觉呈现；象征符号-抽象，可能代表没有实物形态的东西；指示符号-在事物之间建立联系，利用更容易描述的符号来指明更抽象的事物。 三、美学原则对信息设计的研究目的，大部分美学原则可以分成两个相互重叠的类别：结构和易读性。 结构-网格系统 基本的网格结构包括了页边距（版口）、栏、栏间距。最常见的水平线包括“悬挂线”和“流线”。重复的组织结构（共用网格、悬挂线）为读者检索画面内容提供了可预知的版式，加强了作品的可用性。 移动–使用网格设计的时候考虑到眼睛的移动和节奏感，可以提高略读和浏览的速度并帮助读者快速找到相关内容。 群组–位置、接近性、相似点可以极大地改变具体内容的语境。 设计网页时，不能用栏的概念来固定宽度，因为网页宽度是根据浏览器的宽度和读者的偏好设定来调整的。 结构-层次 用户对信息层次的理解需要两个过程：首先是快速捕捉或者概观（颜色、特例、鲜明对比、定位），其次是对具体内容更详细的理解（文字版式设计、网格结构和板块对齐、对比原则、颜色编码）。帮助用户找到信息集之间的关联性和层次感。保证信息层次结构正确，设计各阶段都必须注意。 易读性-颜色 设计师应该考虑作品将在何时、何地、如何被观看。光照的细节对于环境设计项目来说有特别大的影响。颜色和对比的使用让我们得以在自然环境中迅速发现变化。我们对颜色含义的理解跟文化有很大关系。 易读性-对比 对比与设计的关系，就好比盐与烹饪的关系。没有对比的设计平淡无味，太多对比的设计苦涩难咽。 ADA认为字体和背景间的对比度要达到70%。针对引导标识，浅色的背景上的深色字体会更为清晰易读。若字体与背景之间的明暗度过于接近，会造成“共时对比”-字体在视觉上出现晃动。 常见的对比：颜色；方向；位置-位置的突然变化会造成动态对比，或者改变视觉焦点，排成直线的位置意味着连通性；形状；纹理-质感对语境、层次感和意义有影响；材质-材质或图案的变化可以制造焦点，或带来信息集的差别；重量-层次感和重要性的视觉提示。 用灰阶模式来迅速检查明暗对比度。 注意对比应建立在连贯性上。如果信息让读者无暇应对，无法将注意力集中在信息上，那么对比所制造出的层次效果也就没有任何价值了。 易读性-字体设计 易读性是指影响单个字母和词语识别的特性。字体的易读性可以体现在形状、尺度和风格上。可读性是指在大批量的信息中，阅读字体内容的速度和清晰度。字母由实体形状（正行）和外部空间（负形/字谷）构成。易读的字体，其正形和负形之间的比例很均衡。字体的比率由若干比例系数决定，包括：x高度、大写字母高度，宽度、高度，笔画宽度、笔画高度。 字体可读性的关键因素：尺寸、字号、列宽和行长、行距、字间距、对齐。 在印刷设计中的字号单位是点（pt，72pt为一英寸，1cm有28.35pt）。12points=16pixels=1em（近似值） 在网页设计中的字号单位是em，一种可变测量单位。如果用户设置了显示画面大小的偏好，字号会按比例作出调整。Erik在Stop stealing sheep &amp; find out how type works建议印刷品正文字号最好大于9pt，小于14pt。 当代在线文本研究表明7映衬（18厘米）长的字行长度最适合在线阅读。页面排版会将行距设置为字体字号的120%（如10pt字体行距是12pt），以达到最大的可读性。 ADA建议将字间距值设在110%将会最清晰可读。左对齐最适合长时间阅读。 案例介绍基克地图（kickmap）将世界上最为复杂的铁路系统（纽约地铁）用形象的视觉语言呈现了出来。相对于地理位置的精确，基克地图更重视用户的需要，剔除了无关信息，定位文字和图像内容都处于清晰的网格结构上。地铁线路要么呈直线，要么呈标准化角度的曲线。 第一次通过腾讯微博记读书笔记，整理出来比较零散，囧一个。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>可视化</tag>
        <tag>Information design</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于iOS平台的阅读应用简介]]></title>
    <url>%2Freading-apps-on-ios.html</url>
    <content type="text"><![CDATA[iOS4.2发布在即，大家对新版本的Multitasking, AirPrint, AirPlay等新特性充满了期待。等待之余，除了在iPad/iPhone上继续切蔬菜、打小鸟，我们不妨来看看移动平台上越来越受人关注的阅读应用。 一、移动阅读设备的演进说到移动阅读，还是有必要先回顾一下移动平台的演进。 via 移动电话的发展经历了这么几个阶段：Brick Era（大块头手机），Candy Bar Era（功能有限的2G手机），Feature Phone Era（功能手机），Smart Phone Era（智能机），Touch Era（触屏机）。而书籍的载体更是变化巨大： via 不论是移动电话、电子阅读器、平板设备，可供移动阅读的设备都越来越轻巧，僵硬的机械感离我们远去，取而代之的是更贴近自然实物的材质。而且，人与界面的互动更加直接。 二、移动阅读的新宠——iPad回想起年初乔帮主在发布会上演示iPad时，多少人惊呼：新的电子阅读时代到来了。一年快过去了，iPad的表现如何呢？ 2010.10.18苹果第三季度财报显示，iPad三季度销量达419万台。摩根斯坦利11月1日表示，保守预测明年iPhone和iPad销量分别为5,500万与2,500万。 尼尔森的调查显示，iPad用户花费在内容上的时间的确更多。付费的iPad应用中，与阅读相关的书籍应用、时事新闻应用、娱乐新闻应用、杂志应用排名靠前。 更多的iPad使用情况，可以查看Business Insider的最新数据。 三、基于iOS的阅读应用我们来看看一些常见的iPhone和iPad的阅读类应用： 这些阅读应用大概可以分为5类： （其中Paper.li和QQ阅读是web应用，不是iOS应用） 3.1 单阅读应用由内容供应方针对自己的内容服务所设计、开发的阅读应用，主要面向已有的读者群体。 优势： 自身提供内容 有固定用户群 易于对内容进行统一设计 局限： 内容有限，不够丰富 目标用户群较小 原有业务的简单延伸，扩展性弱 3.2 RSS/媒体聚合应用应用提供方自身不生产内容，仅提供feed抓取、内容聚合、阅读的应用。 优势： 内容来源丰富 业务模式简单、成本低 易于对内容进行统一设计 局限： 新用户学习成本高 转移成本低 信息量大、噪音大 依赖于其他聚合阅读服务 3.3 社会化阅读应用 从已有的社会化服务中抓取内容，版式化设计输出，以提供更好的阅读体验 优势： 现成的内容 + 关系 易于对内容进行统一设计 互动性、拓展性强 局限： 依赖于现有的社会化服务 内容碎片化，难以组织 对信息过滤、筛选、去重的要求高 3.4 电子书应用 提供电子书的搜索、下载/购买、阅读服务 优势： 盈利模式清晰 基本不需要对内容进行加工、管理 难点： 必需有稳定的内容提供来源 版权问题 利益相关者多，关系复杂 涉及购买、支付环节，功能复杂 3.5 电子阅读平台提供电子书、报纸、杂志等的搜索、下载/购买、阅读，整合内容、渠道、硬件、软件和服务。 电子阅读的产业链构成比较复杂，深度参与甚至控制了产业链大部分环节的亚马逊和苹果，是最具影响力和盈利能力的企业。 优势： 平台的规模效应 强而有力的商业模式 大量的用户和市场需求 难点： 疏通整条价值链 初期需要投入很高成本 理顺错综复杂的利益关系 庞大的产品、合作、交易体系 到了平台阶段，最重要的已经不是看得见的产品形态和功能，而是商业模式和产品逻辑，以及在整个产业链中能够把握的价值和产生的影响。 以上只是对iOS平台的阅读应用做了一个简单的分类。关于移动阅读、电子阅读的话题，欢迎大家一起来讨论。 By 00 2010.11.16]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Reading</tag>
        <tag>ipad</tag>
        <tag>APP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记-金字塔原理[1]]]></title>
    <url>%2Frn-the-pyramid-principle1.html</url>
    <content type="text"><![CDATA[第一篇 写作的逻辑写作风格和文章结构（句子组织顺序）是造成文章条理不清的原因。 对读者来说，最容易理解的顺序是先了解主要的、抽象的思想，然后再了解次要的、为主要思想提供支持的思想。 金字塔：从上至下，先声明主要、重要观点，让读者产生疑问，在下一层进行回答。金字塔结构中的思想可以是纵向的（上层是下层的总结），也可以是横向的（比列组成逻辑推断）。 第一章 为什么选择金字塔结构控制表达思想的顺序：先提出总结性思想，再提出被总结的具体思想。我们是自下而上思考，但需要自上而下组织、表达思想。 金字塔结构，确保读者能在第一时间做到与作者对话，了解议题和最重要的结论，然后在下面可以找到解释、展开讨论。预先告诉读者逻辑关系，能减少读者的阅读负担以及与作者交流的成本。不应让读者自己吃力地从文中寻找一种能够将所摄入信息联系起来的结构，这样最后得出的不一定是你想表达的结果。 归类、概括，自下而上总结出个括所有各组思想的单一思想。分组，找出逻辑关系，自上而下组织思想。 文章金字塔结构的规则： 文章结构中任一层次上的思想都必须是其下一层次思想的概括。 每一组中的思想都必须属于同一范畴。（在逻辑上有共同点。检查方法：能否用一个复数名词表示该组所有思想） 每一组中的思想都必须按逻辑顺序组织。（内在逻辑，为什么是这个顺序?反映组织思想时的分析过程） 大脑可进行的四种分析活动是：演绎推理（论证）、发现因果关系、化整为零（与结构相关）、归纳总结。组织思想基本上只有四种可能的逻辑顺序： 演绎顺序（大前提、小前提、结论） 时间顺序（第一、第二、第三） 结构顺序（波士顿、纽约、华盛顿） 重要性顺序（最重要、次重要，等等） 大脑中的信息组织成一个由相互关联的金字塔组成的巨大联合体。《神奇的数字7+─2》提到，大脑的短期记忆无法容纳约7个以上的记忆项目，当需要处理的项目数量达到4、5个时，就会开始将其归类到不同的逻辑范畴中。将事物组织成为逻辑单元，有助于帮助大脑识别逻辑关系，进行理解和记忆。帮助读者将他一定要做的事情（分组、归类、概括）预先做好并告知。 中国人习惯的思考和表达方式，是先含糊发问，然后让读者随着自己的思路一路到结论。很可能读者在中途就迷失了，只有坚持绕到了最后，才发现作者想表达的原来是这些。这种将精华保留到最后的做法，是一个倒金字塔的结构，往往不利于理解。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>写作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记-如何阅读一本书]]></title>
    <url>%2Frn-how-to-read-a-book.html</url>
    <content type="text"><![CDATA[《如何阅读一本书》这本书断断续续竟然读了半年有多。一开始看英文版，看了几章发现有点看不下去，找到中文翻译的版本，发现翻译质量很不错，于是又买了一本从头看起。 如果你把阅读当作一件比较严肃的事情，希望能从阅读中获得些什么，那这本书绝对不应该错过。好书太多，时间有限，让我们好好地读书吧！ 1.为什么要阅读？阅读可能有很多目的：打发时间、获得资讯、学习知识、解决问题。。。作者将阅读的目标分为两种：为获得资讯而读，以及为求得理解而读。阅读是一种自我发现型的学习，越是主动的阅读，效果越好。阅读其实需要很多方面的能力：敏锐观察、记忆、想象、分析、省思…需要通过不停地自问、自答来提升理解能力。 很多时候，我们进行阅读的目的可能并不明确，并没有意识到“太多的资讯就如同太少的资讯，都是一种对理解力的阻碍”，没有意识到“知识不等于理解”。从阅读的结果来看，往往也就是“知道”了一些以前不知道的“知识”，但是对自己的阅读、理解、思考能力并没有什么提升作用。作者在整本书中，希望传递给读者的都是“阅读增进理解和心智”这样一种观念，介绍的也是怀有这样目的的读者应该掌握的方法。 2.什么是主动的阅读？主动阅读的四个基本问题 （1）这本书的主题是什么，在谈些什么？ （2）作者的主要想法、声明、论点是什么？ （3）这本书说得有道理吗？哪部分有道理？ （4）与我何干？ 主动的阅读应该像是与作者的对话。 知其然–知其所以然–知道可以解决什么问题，如何运用 最佳的检验方法：用自己的话表达，举自己所经历的经验。 3.阅读的层次和特点A.基础阅读：看懂字面意思 B.检视阅读：系统化略读，了解这本书的结构，归类，决定是否值得阅读。看书名-序目录-索引-出版介绍-选看一些篇章-随便翻翻 C.分析阅读：完整、系统的阅读，目的在于寻求理解和心智的提升 第一阶段，掌握大纲-架构性-骨（找出一本书在谈什么）： （1）分类，依照书的种类与主题来分类 （2）摘要，最简要地概括整本书的内容 （3）纲要，篇章如何按顺序组成整体架构 （4）问题，找出作者想要解决的问题 第二阶段，诠释意图-诠释性-肉（知道这本书详细内容是什么）： （1）单字，诠释作者使用的关键字，与作者达成共识 （2）句子，从最重要的句子中找出主旨 （3）论述，通过作者的论述重新架构这些论述的前因后果，以明白作者的主张 （4）解答，确定作者解决了哪些问题 第三阶段，评论-评论性-筋 智慧礼节的一般规则 （1）先完整地了解一本书，不要轻易批评 （2）不要争强好辩或盲目反对 （3）要为自己不同的意见找到理论基础，区别出真正的知识与个人观点的不同 批评观点的特别标准 （4）证明作者的知识不足 （5）证明作者的知识错误 （6）证明作者不合逻辑 （7）证明作者的分析与理由是不完整的 D.主题阅读：在某个主题范围内的比较阅读 首先进行检视阅读，了解是否对要研究的主题有帮助 （1）找到相关章节，对需要解决的问题、主题有何帮助 （2）带引作者达成共识（自己建立共识），将共通词汇加诸许多作者身上 （3）厘清问题，建立主旨，列出问题 （4）界定议题，将争议的前后关系整理清楚 （5）分析和讨论 主题阅读需要读者非常主动，组织一次虚拟的相关领域书籍作者的对话讨论。 4.不同的书怎么读？（1）实用型的书分为两类：一是说明规则的（how），二是阐述形成规则的原理（why） （2）想象文学想象文学创造经验，教导衍生意义，是在阐述一个经验本身，在读者心中重塑/重现某种经验/经历。目标不在于传达知识和观点，而以达成某种深沉经验为目标。（人的知识是有限性的，所以会看一些实用型、知识性的书；同样人的经历是有限的，所以看一些文学作品，丰富自己的经验） ①架构规则：分类，从情节中归纳大意和故事梗概 ②诠释规则：熟悉角色和相关要素，想象场景，身临其境，跟随情节发展 ③先投入，再评论 （3）故事、戏剧、诗要去感受与体验 故事：快读，全心全意地读 小说：能满足潜意识或意识中许多需要，可分享洞察力，却不需要分享苦难遭遇 戏剧：自己提供演出 悲剧：精髓在时间，或是缺乏时间 抒情诗：一口气读完，大声重读 （4）历史书读历史最重要的是知道作者解释事件发生原因及行为动机的模式，以及他的理论/哲学。读历史不是为了还原史实，而是知道著作/史学家通过对这段历史的描述，如何影响后人。 要多读不同的书。不但要关心过去，更要读懂普适（过去-现在-未来）性，人们行动的原因。 （5）科学与数学要解决的问题是什么？ 科学的客观不在于没有最初的偏见，而在于坦白承认。 （6）哲学科学-描述事物本质；哲学-解说事物本质，询问的不只是现象间的联系，而是最终原因与条件。哲学问题的最大特色：每个人必须为自己回答。 哲学来自怀疑，阅读时最重要是要发现问题。提问题时有孩子气的单纯，而回答时却成熟而睿智。 2个哲学领域： A-存在与变化。属于理论/思辨型，主要探讨存在-形而上、变化-自然哲学、知识-认知论 B-善与恶，好与坏。属于实用型、规范，主要探讨善恶标准-伦理学、行为-政治学 哲学作品的风格：对话，论文/散文，面对异议，系统化，格言 （7）社会科学易处：熟悉，容易投入并且有自己的见解 难处：不能数学化，要说明用语较困难。混杂，非纯粹的论说性。 最后，用作者的结尾来作为这篇笔记的结尾吧： 好的阅读，也就是主动的阅读，不只是对阅读本身有用，也不只是对我们的工作或事业有帮助，更能帮助我们的心智保持活力与成长。 附：《如何阅读一本书》推荐书目豆列]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Reading</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[再见，早读]]></title>
    <url>%2Fmorning-reading.html</url>
    <content type="text"><![CDATA[不知不觉，坚持发早读已经整整一年了，今天要跟早读说再见了。 一年，说长不长，说短不短，坚持一件小事，原来也不是那么容易。 为什么早读？其实一开始发早读的动机十分简单。毕业后，结束了每天参与公车人肉罐头制作的实习生活，搬到公司附近，早上8点半就能到公司。于是一边吃早餐一边看看reader或其他地方的文章，看到不错的顺手就发链接到产品组的群。很随意的一个想法，发着发着就成了惯例，不过压力也随之而来。 形成习惯后，会有意识地分享一些质量比较高的文章，就需要阅读更多的东西。于是每天花不少时间，从数百+、1000+的reader里筛选出2-4篇比较合适的文章去分享。不过人总是有惰性的，有时睡眼惺忪地来上班，文章也看不下去。于是得在前一天晚上开始扫reader，以保证第二天一大早有东西可以分享。一开始只是在组里发，后来发展到其他的群，甚至是定时发到一些google group以供大家讨论。很高兴自己的一个小习惯能给其他人帮助，虽然这其实是一个人肉过滤的体力活，时不时会有overwhelming的感觉。 早读的方式改变这样半年下来，确实看了不少东西，熟悉了行业里面一些活跃blog。这个过程对一个菜鸟而言很有帮助，一是能尽快熟悉各种产品和概念，二是引发自己的思考，三是慢慢纠正一些原有的错误理念，四是接触到了更多好的资讯和平台。但是经过半年，发现从中得到的新东西越来越少，而且局限于网络文章的形式，总觉得接触的内容零散、不成体系。于是琢磨着怎样将早读变得更有用些。 年后采用了主题式早读的方式，每1~2周会围绕一个主题进行文章推荐。跟之前随机推荐最近文章不同，主题式早读会介绍时效性不那么强，但质量较高的文章，而且围绕一个主题集中阅读，可以帮助我们很快地了解某个领域。不知不觉到现在已经做了17期这样的早读。这种方式也有局限性，比如早读主题可能不是每个人都感兴趣，那可能连续两周都没有可看的文章了。又比如围绕主题可能国外好文章更多，阅读起来就不像以往快餐式早读那么轻松，有时连自己都没有完整看过的文章，就这么发出去了。 又经过了半年，接触了不少领域的知识，英文阅读量也比以前加大了。虽然说早读比以前系统了一点，但是更加强烈地感觉到网络资讯的局限：碎片化、缺乏完整性和严谨性、不容易引发深层的思考，等等。自己已经深深意识到，没有经过系统学习，再多的早读也起不到什么作用。 再见，早读所以，决定停止持续了一年的早读，以周读书笔记或翻译代替： 减少碎片化阅读的时间，改变为了读而读的不良习惯 将更多时间花在系统学习上面，真正提高自己的知识储备和能力 以读专业相关书籍为主，尝试翻译一些国外好的文章 附：早读资源 A.国外优秀的UX主题网站/博客UXmatters: 经典而实用，文章质量高 The UX Booth:关注范围广，有很实用的Complete xx Guide系列，适合主题式了解和学习 Useit: Jakob Nielsen的网站，里面很多文章虽然是多年以前写的，但今天看仍然很有帮助 inspireUX words: 文摘性质的blog，汲取近期行业文章里面有代表性的point，给人以启发 其他不错的网站还包括 Boxes and Arrows JND.org UX Magazine Interactions magazine It’s all about interaction UsabilityBlog UsabilityPost Usability Notes The daily me B.国内UED团队博客和行业聚合类网站腾讯系：腾讯CDC，腾讯ISD，腾讯WSD 网易系：网易用户体验设计中心，网易杭州研究院UED， 阿里系：淘宝网UED，支付宝UED，阿里巴巴（中文站），阿里巴巴（国际站），阿里妈妈UED，阿里软件UED 其他：百度泛用户体验，搜狐UED，盛大UED，携程UED，口碑网UED，人人网FED，19楼UED 聚合类：UCDChina，UIRSS C.个人博客这类就太多了，主要是根据平时自己关注的领域按需订阅吧，行业聚合往往已经能提供很全很新的文章和消息了。]]></content>
      <categories>
        <category>设计</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[良好网络广告体验的“FACT”法则]]></title>
    <url>%2Ffact-rule-of-better-online-ads.html</url>
    <content type="text"><![CDATA[广告，已经成为在线生活的一部分，当我们关注网站和产品的用户体验时，广告不应该被忽视。 说起广告，不少设计师会眉头一皱：多少次，自己在设计时一个作品时，对每一个细节都力求完美：风格、布局、用色、对比、平衡……结果产品上线后，旁边有一个大大的广告位，充满声光电效果的flash动画让人无“语”伦比。而在跟用户的面对面交流中，用户对广告大都抱持一种理解的态度，但总免不了提到“广告再少点儿”的期望。 我们都有过被设计粗糙、广告满天飞的网站所折磨的经历，在大家的印象中，广告与用户体验总是以一种此消彼长的关系出现。但是，当广告不可避免地成为在线体验的一部分的时候，我们不应再简单地将它与体验对立起来，陷入在非此即彼的争论中，而应该更深入地思考两者之间的关系：如何平衡广告与用户体验的关系， 如何提升广告本身的用户体验、如何通过广告提升网站/产品的用户体验，这些都是成功产品要解决的关键问题。 1.网络广告的分类和市场表现首先简要回顾一下网络广告的一些基本知识。 关于网络广告的分类，并没有一个绝对权威的统一标准，很多资料提到的分类和描述都不一样，我们关心的主要还是常见的广告形式。 网络广告常用的计费方式包括 CPM（Cost Per Thousand Impression）：按每1000次广告展示进行计费。 CPC（Cost Per Click）：每点击成本，以点击一次广告进行计费。 CPA（Cost Per Action）：每行动成本，按广告投放实际效果计费。 CPR（Cost Per Response）：每回应成本，以浏览者的每一个回应计费。 CPS（Cost Per Sale）：以实际销售产品数量来计费。 CPP（Cost Per Purchase）：每购买成本，按产品购买行为进行计费。 CPL（Cost Per Leads）：以搜集潜在客户名单多少来计费。 近年来，网络广告（尤其是传统横幅广告）的点击效果不断下降，传统网络广告形式正逐渐被搜索广告、富媒体广告所取代。 2.网络广告研究的一些启发网络广告的体验，应与广告和受众接触的整个过程相关。但以往研究主要关注“到达”和“注意”这两部分的效果。 现在对广告的研究，会更全面地考察用户与广告互动的整个过程：从接触情境（用户动机、模式和信息处理过程）到广告展现（类型、形式、要素），再到广告效果。而对广告效果的评估，除了关注用户的点击行为，还开始重视用户在接触广告的过程和结果中，有哪些认知和态度方面的因素，会对广告效果产生影响。这有助于我们更深入地了解广告和用户体验的关系。 Nielsen结合他人和自己的研究给出了十个最不受欢迎的广告设计要素，弹窗广告高居榜首。而其他包含以下特征的广告，也容易引起消极情绪和挫败感，用户可能会主动忽略： 干扰目的、打断操作 欺骗性质 侵略式 用户无法控制 另外，眼动研究揭示了一种重要的现象：横幅广告或看起来像广告的信息（例如红色的大字体）往往被用户忽略，也就是Banner Blindness。 3.良好网络广告体验的“FACT”法则那么，如何对广告进行优化，以创造更好的在线广告体验呢？ 让我们从以下四个方面着手： ①Form-形式什么是好的广告形式？ 与网站设计风格尽可能一致 内容相关、位置合适 富有创意和视觉吸引力 互动性 可预知操作结果 如何引人注意？ 表达具体、直白 提供可操作的选择 与目的或当前主题相关 不像推销 最能吸引眼球的设计要素有哪些？ 纯文本 脸部 身体部位 形似内容的广告 要注意些什么？ 不使用弹窗广告 帮助用户识别、理解和快速定位广告区域 不要同时出现过多的广告类型 根据不同的页面的特点，在合适位置安排不同类型的广告 善用文字广告 提供个性化/定向/智能广告 建立并执行广告规范 总之，“形式”方面，要注意平衡和协调，玄妙之处就在于“像”广告与“不像”广告之间。 ②Affection-情感下面是苹果公司在NYT网站投放的一个广告组合：左栏是头发再生广告，右栏广告中用PC的人跟秃顶的广告演员在做眼神交流，而用Mac的人则跟顶部的苹果用户体验广告在做眼神沟通。一组简单的广告变得妙趣横生。 广告反映的不应只是赤裸裸的推销与被推销的关系。通过情感要素来打动用户，而不仅仅是骇人的感官效果，效果会超乎想象。比如下面的杜蕾斯广告： 总之，“情感”方面，要让广告容易被人接受，传递的不仅仅是商品信息，还有用户所关心的价值。 ③Content-内容 提供有用信息，帮助用户完成任务 广告本质上也是一种信息，这些信息是否对用户有用，是否能成为他完成任务比不可少的一部分，决定了用户对广告的态度和互动深度。 跟踪历史浏览行为和兴趣推送匹配广告 让用户感觉到广告是与自己有关的（前提是用户不认为这触犯了其浏览隐私）。 提供用户真正关心的广告内容，如促销信息 将产品置于生活场景/真实情境中 广告之所以“太广告”，往往是因为脱离了我们熟悉的场景。在广告中提供真实的生活场景，或者将商品置于自然的情境下，效果会更佳。 总之，“内容”方面，提供有用的信息，让广告和用户能形成互动。 ④Timing-时机广告出现的时机重要吗？太重要了！过去我们往往会忽视这个要素。 用户在网络使用的不同态度和行为模式之下，对广告的接受程度可能存在差异： 就态度而言，以被动模式（如网页弹窗广告、电视节目中插播的广告）接触的广告容易引起反感；以主动模式（如订阅邮件广告、报纸分类广告）接触的广告容易被接收。 就行为而言，用户在目的明确的搜索模式下接触广告，会倾向于将其视为干扰因素而忽略；在随意的浏览模式下，注意到广告的机会则大大增加。 用户从进入网站到离开，会根据自己的目标完成一系列任务。在每一个小任务进行的过程中，用户的注意力主要集中在当前操作上，这时候如果强行插入广告，容易产生消极的体验。所以要注意分析用户使用网站/产品主要的任务流，不要在主要任务上打断、干扰用户。可以多采用一些间隙广告（Interval ad），任务节点广告（Post-task ad），情境辅助广告（Contextual Approaches），精准广告（Target Audiences），以确保不会在用户对内容的注意力处于峰值时受到广告的干扰。 总之，“时机”方面，尽可能根据用户目标，在恰当的位置、时机展示广告。 上面介绍的就是良好广告体验值得关注的四个方面：F-形式，A-情感，C-内容，T-时机。其实称不上“法则”，只是便于理解和记忆，取了“FACT”的名字。 广告与用户体验，是一个有趣且具有实用价值的话题，在这里抛砖引玉，希望听听大家的想法 ：） 00 2010.7.25]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>AD</tag>
        <tag>UX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新马攻略之签证、准备篇]]></title>
    <url>%2Fmalaysia-singapore-visa-and-plan.html</url>
    <content type="text"><![CDATA[0.前言6月初在琢磨年假怎么用时，突然决定月底去马来西亚。第一次出国吧，啥都不懂，大概按照 机票-签证-住宿-做功课定行程-换汇-行装 这么一个顺序进行准备。 1.机票东南亚的机票，应该没有比亚航（Airasia）更好的选择了。先火急火燎地去注册了个账号，查机票。本想从香港走，但时间不太合适，为了省事，还是多花了点钱从广州（CAN）飞吉隆坡（KUL）。如果早有打算，可以尽早留意亚航的打折信息，几百块搞定往返不是问题。 原本没打算去新加坡，但一不小心看到吉隆坡飞新加坡（SIN）的机票才28人民币（没错，28￥，不过税可比机票高多了。。。），才盘算着一起去，结果得以吉隆坡做中转，平添了不少麻烦。早知道就先飞新加坡，最后从吉隆坡回来。。。。 亚航很会做生意，为了保持廉价航空足够低的票价吸引，在订机票时加上了一堆附加服务选择：飞机餐、选位费、托运、保险、机场巴士（skybus）、电话卡（tunetalk）、住宿等等。如果为了省事，巴士和电话卡可以订一下，当然其他选择也挺多，价格可能更低，只不过第一次去的话，要稍微花多一点时间去了解。 第一次去吉隆坡需要注意一下机场，KLIA（Kuala Lumpur International Airport）是国际机场，而亚航的飞机一般停在廉价航运楼LCCT（Low cost carrier terminal），两个机场大约有十多分钟的车程，有巴士接驳，2.5马币。 机票订好，整个行程最关键的时间点就确定了，骨架搭好，接下来是做各种准备。 2.签证3月份办好了护照，这次终于可以开始用了~查了半天网上的签证介绍和攻略，发现马来西亚和新加坡大使馆都在中信，而旅行社代办也快不到哪里去，于是决定自己去签。 马来西亚签证马签（旅游）最省事了，只要准备照片一张，到领事馆填一张表格，交80块，3个工作日办好，一般有效期都是3个月。如果需要多次出入的签证，则需要提供目的地机票。 马来西亚驻广州总领事馆签证处 地址：广东省广州市天河北路233号，中信广场1915-1918室，电话：020-87395660,38770766,38770763转签证处 递交材料：周一至周五 上午 9：00-12：00 领取签证：周一至周五 下午 16：30-17：00 新加坡签证新签比较麻烦，一般旅游申请的是14天个人旅游签证，153元，3个工作日（包括递交和取证，效率很高）办好，需要提交以下资料： 英文填写的14A表格（Form 14A，下载链接） 在职证明，加盖公章（好像说以4401开头的广州身份证不用提供？） 2张白底2吋三月内彩色照片 身份证原件和复印件 户口本原件复印件 新加坡广州领事办公室 地址：广东省广州市天河北路233号，中信广场2418室，电话：+86-20-3891 2345 递交材料：周一至周五 上午 8：30-11：30（update 2011-2-17 Jan：我今天去递交材料时间为：周一至周五 上午 9:00 -11：00. 已经不是11:30了。） 领取签证：周一至周五 下午 16：00-16：30 签证几个有用的参考链接： 各国驻广州领事馆一览表 马来西亚签证注意事项 新加坡签证须知 新加坡签证细节 新加坡广州领事馆签证经验 新加坡在线签证网址 新加坡在线签证经验 跑了四趟中信，终于把最担心的签证都办好了。网上说新加坡很容易拿到2年多次往返签证，但我只有2周，而且还是电子签证，护照上没有章，那个郁闷啊。。。。 3.住宿酒店预订推荐agoda，比别家都便宜。吉隆坡的酒店价格尚可接受，新加坡就贵得有点离谱了，几家用HI卡的Hostel4人间一晚得550￥，疯了不是。。。于是到Hostelworld上面找了一家不错的hostel，两晚160多￥，只不过是8人间，得吃吃苦了。住宿的其他介绍后面的游记会再提到。 4.功课出国如果不跟团，功课还是得认真做的。下了Lonely Planet的Malaysia_Singapore_Brunei10th_Edition和Singapore8th_Edition来研究，还有从使馆拿回来的资料，查了无数次google map，成果如下（点击下载，可直接打印）： 吉隆坡攻略 Kuala Lumpur Guidebook 新加坡攻略 Singapore Guidebook 5.行程Mindmanager里面有个travel planner的模板很好用，做了个行程安排~ 6.换汇马来西亚货币：令吉（RM），1马币约换2元人民币。公司旁边的中行竟然没有马币可以换，于是身无分文地在机场用银联卡直接取了100令吉，手续费好贵 - -。换汇攻略网上有不少，可以参考这篇。 新加坡货币：新加坡元（SGD），1新元约换5元人民币。中行需要预约，换的那天刚好汇率跌到近期最低，又郁闷了一下。。。 7.行装这次收拾行装找了个灰常好用的工具：苹果app store里面的uPackingList free，这个app有非常详细的出游packing list，只要对着清单，有则pack之，无则淘宝之~行装尽量精简吧，这次最庆幸的是带了眼罩，在男女混住的8人间也能睡得很安稳，咔咔。]]></content>
      <categories>
        <category>行走</category>
      </categories>
      <tags>
        <tag>Travel</tag>
        <tag>签证</tag>
        <tag>Singapore</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Reading notes – Asking the right questions[all]]]></title>
    <url>%2Frn-asking-the-right-questions-all.html</url>
    <content type="text"><![CDATA[这次偷偷懒，直接把在google doc里的笔记贴出来吧。 http://docs.google.com/View?id=dgqjvzc9_198dbfgq7fs 这是一本值得看第二次的好书。其实批判性思维并不神秘，但是需要我们具备起码的openness和curiosity，不厌其烦地自问自答，久而久之自然能锻炼出这方面的能力。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Reading notes – Asking the right questions[2]]]></title>
    <url>%2Frn-asking-the-right-questions2.html</url>
    <content type="text"><![CDATA[Part 1 Chapter 2 What Are the Issue and the Conclusion? “Before we evaluate someone’s reasoning, we must first find it.” Similarly, before we solve a problem, we must distinguish it. “An issue is a question or controversy responsible for the conversation or discussion. It is the stimulus for what is being said.” Kinds of IssuesDescriptive Issues: “Descriptive issues are those that raise questions about the accuracy of descriptions of the past, present, or future.” 【Informative】 Prescriptive Issues: “Prescriptive issues are those that raise questions about what we should do or what is right or wrong, good or bad.” 【价值判断】 Searching for the issue self explicit Ask yourself “What’s the topic the author trying to argue” The conclusion is the message that the speaker or writer wishes you to accept. Searching for the Authors’s or Speaker’s Conclusion“What’s the writer or speaker trying to prove?” “Conclusions are inferred; they are derived from reasoning.” nothing Claims ——-&gt; opinions Claims ——-&gt; conclusions reasoning proves How to find the conclusion: Ask what the issue is. Look for indicator words. Look in likely locations. Remember what a conclusion is not. Check the context of the communication and the author’s background. Ask “and therefore?”“Before you can evaluate an author’s argument, you must clearly identify the issue and conclusion.” Once find the conclusion, your concern is: “Should I accept that conclusion on the basis of what is supporting the claim?” CHAPTER 3 What Are the Reasons?Reasons are beliefs, evidence, metaphors, analogies, and other statements offered to support of justify conclusions. Reasons are explanations or rationales. You cannot determine the worth of a conclusion until you identify the reasons. 【Identifying reasons requires us to remain open and curious.】 Reasons+Conclusion=ArgumentArguments: intent to convince, different quality. Reasons are the tool by which conclusions are shaped and modified. Initiating the Questioning ProcessApproach the argument with a questioning attitude. Ask question with “why”. 【After you identifying a conclusion, try to play the role of the communicator. Ask questions like “Why am I support or disagree?”】 Kinds of ReasonsBy evidence, we mean specific information that someone uses to furnish “proof” for something. Evidence includes facts, research finding, examples from real life, statistics, appeals to experts and authorities, personal testimonials, metaphors, and analogies. Keeping the Reasons and Conclusions StraightClues for Identifying and Organizing the Reasoning of a Passage Circle indicator words. Underline the reasons and conclusion in different colors of ink, or highlight the conclusion and underline the reasons. Label the reasons and conclusion in the margin. After reading long passages, make a list of reasons at the end of the essay. CHAPTER 4 What Words Or Phrases Are Ambiguous?Whenever you are reading or listening, force yourself to search for ambiguity. Locating Key Terms and PhrasesAmbiguity refers to the existence of multiple possible meanings for a word or phrase. Summary of Clues for Locating Key Terms Review the issue for possible key terms. Look for crucial words or phrases within the reasons and conclusion. Keep an eye out for abstract words and phrases. Use reverse role-playing to determine how someone might define certain words and phrases differently. 【First, find terms that may have more than one plausible meaning. Then identify words or phrases that seem crucial in the reasoning structure.】 The more abstract a word or phrase, the more likely it is to be susceptible to multiple interpretations. 【Pay attention to “new” concepts. Ask this question as often as possible: what other meanings may it be? 】 Determining AmbiguityOnly the ambiguity in the reasoning is crucial to critical thinkers. 【Tips: Can I create a mental picture(maybe specifically), based on what these phrases represent?】 Ambiguity, Definitions, and the DictionaryMeanings usually come in one of three forms: synonyms, examples, and specific criteria. Synonyms and examples are inadequate when evaluating most controversial issues. SummaryYou cannot evaluate an essay until you know the communicator’s intended meaning of key terms and phrases as well as alternative meanings they could conceivably have had in the context of the argument. “What could be meant?” “What is meant by the key terms?” Four very important components of the reasoning: the key terms and phrases; which of these are adequately defined; which of these possess other possible definitions, which if substituted, would modify your reaction to the reasoning; and which of these are ambiguous within the context of the argument.]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Critical thinking</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Reading notes - Asking the right questions[1]]]></title>
    <url>%2Frn-asking-the-right-questions1.html</url>
    <content type="text"><![CDATA[Asking the Right Questions——A Guide to Critical Thinking (8th Edition) The benefit of asking the right question: reasoning（推理）,critical thinking（思辨）,judgement（判断）,decision making（决策）. To give you the framework, method and steps to solve a problem. CHAPTER 1 The Benefit of Asking the Right Questions “Opinions are cheap; anyone can have one of those.” True enough. If we can not tell important opinion from nonsense, that the opinion we’ve made might be rubbish as well. so “You need to build skills and attitudes that will enable you to decide for yourself which opinions to make your own.” Yeah,we all have two choices, one is to ask and the other is to ignore everything. One is laborious and the other is convenient. It all depends. Critical Thinking to the RescueGoal: use critical questions to identify the best decision available. “A system of questions is more consistent with the spirit of curiosity, wonder, and intellectual adventure essential to critical thinking. “ “Critical questions provide a stimulus and direction for critical thinking.” Can’t agree more. Asking a question is always the first step of solving a problem. Why? I didn’t have a clear thought about it, now the keyword “stimulus” and “direction” give me a clue. Another question, how? Keep your curiosity. Critical thinking refers to the following: 1. awareness of a set of interrelated critical questions; 2. ability to ask and answer critical questions at appropriate times; and the 3. desire to actively use the critical questions.”There are two points that I feel hard to achieve. 1. ability to answer critical questions; 2. at appropriate times(时期). Keep them. The Sponge and Panning for Gold: Alternative Thinking StylesSponge approach(knowledge acquisition): Absorb everything. Interactive approach(active interaction with knowledge as it is being acquired): Take the question asking attitude. “Such a thinking style requires active participation. The writer is trying to speak to you, and you should try to talk back to him.” “to ask frequent questions and to reflect on the answers. “ Note that these two approaches are complementary. The example of sponge reader is just another me: “He memorizes the reasoning, but doesn’t evaluate it.”Well, lots of efforts should be paid before becoming a Panning for Gold. 1. Why did he say so? 2. Are there any questions? 3. What about his answers? 4. My conclusions? Remember, the better approach is interactive involvement. Let yourself be involved! Be a active reader and listener by asking questions. Weak-Sense and Strong-Sense Critical Thinking Weak-sense critical thinking is the use of critical thinking to defend your current beliefs. Strong-sense critical thinking is the use of the same skills to evaluate all claims and beliefs, especially your own. We make decisions based on our “history”. When listen to others, put them on a shelf. That is to say, keep openness and leave your emotion temporary. Be willing to change your mind. The interplay between out old answers and new ones provides a basis for our growth.]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Critical thinking</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记-应需而变：设计的力量]]></title>
    <url>%2Fnote-subject-to-change.html</url>
    <content type="text"><![CDATA[“预测未来的最佳方法是创造未来”──彼得 德鲁克 1 产品=体验 彻底地转变你和用户之间的关系，是在市场上获得成功的关键。 设计作为一种活动，包含以下要素： 同理心：设计必须满足人们的某种目的，所以需要理解人如何与产品互动 解决问题 思维能力和原型能力 发现可选方案 不能简单地通过增加特性来吸引用户，还必须真实、深刻地了解用户和他们的能力、需求、期望。 乔帮主的“技术-特性（产品）-体验”产品进化论确实经典。一项新技术，能让一家企业在市场上立足，但是技术可以被扩散和学习，更新换代很快，竞争对手终究会模仿。随后，如果将技术“变现”成为满足人们某些需求的具体feature（特性），可以在日渐成熟的市场中保有竞争力。但是特性同样易于模仿和复制。只有能为用户提供独特体验的产品，才能牢牢抓住用户和市场。 2 体验=战略“体验”是在这些要素中出现的： 动机：人们为什么会使用你的产品，希望从中得到什么 期望：根据经验对事物怎样运行进行联想 能力：对产品怎样形成认知以及实际上怎样交互 沉浸：怎样长时间使用产品 文化：一些规范框架、行为方式，以及信任机制 我们平常谈论的用户体验，往往集中在比较狭窄的“产品使用体验”这个具体层面。如果将视角切换到上面几个方面，思路会更加开阔，有助于我们思考如何产生、为什么会产生某些体验。 战略是权衡──有目的地选择不同于竞争对手的策略。战略是懂得取舍──这样才能在某些方面优于对手。 战略，其实就是事先对已见之事和未知之数进行的思考，以做出如何优化资源配置的决策，从而达到某些目的。因为已见（例如国外成功的商业模式、竞争对手的尝试），所以总想着拿来主义，只要做到人有我优就万事大吉了；因为未知，所以想起来都是可做的，很简单、很美好、很激动。但是，战略最困难的不是知道“可以做什么”，而是明白“不能做什么”，尤其是“能做但不去做什么”。从来没有一个产品能讨地球上每个人的欢心，尤其当门户模式日渐式微，随web2.0和长尾呼啸而来的碎片化越来越明显的时候，战略的本质——先“舍”后“得” 就显得更为重要，在无数选择的诱惑下保持专注，才能笑到最后。 “创造那种值得在营销中放第一位的产品和服务”── Seth Godin 必须不断问自己：“如何针对重点用户的重点需求提供一种独特的价值？” 功能的对抗不是一种战略，而是同化，抹平与对手之间的差异。就像是竞争对手在设计你的产品一样。没有可识别的差异，体验将变得平庸。 想一想在平常的生活、工作中，我们最容易记住哪类人呢？往往不是脾气最好、人缘最好的人，反而是那些个性鲜明，有脾气、有气场的人~~ 产品也一样，该有的功能一个不少，不一定能够让人一眼就记住、一用就喜欢。必需想明白自己到底要表现出什么“性格”、“脾气”，一款产品才能有自己的特色和方向，才有可能设计出不平庸的体验。 经常，产品团队没有一个共同的愿景，最多有一个待满足的需求规格说明。 体验战略本质上是一种愿景，表达的是期望用户能拥有的体验。 体验战略由外而内通过用户的动机、行为和情境来引导产品、服务或者系统开发，最终满足人们的期望。 如果我们自己都没法清晰描述出希望用户获得怎样的体验，那么一切都是空谈。（可是，如何去了解、总结？由谁描述？如何在团队中达成共识？需要具体到什么层面？） 3 理解人们的新方式 同理心：知道、感觉到、代入式地体验其他人的感觉、想法、经历。同理心能帮助我们抓住驱动行为发生的原理机制。 人因（human factor）：任务-目标法让我们聚焦在人们的行为过程，但只是基本，不能包含体验的方方面面。 无论“绵羊论”、“经济理性人”、“任务-目标”法，它们过于简化了用户，降低了复杂度，尝试通过通用法则来面对不确定的市场和社会化的世界。缺少了情感、文化和情境。 用户不喜欢在使用产品时多思考，并不代表用户“低端”、“懒”，谁愿意在浪费时间的同时又饱受折磨呢？ 我们需要重新认识我们的用户： 他们是谁？——识别目标用户 他们的任务、目标、偏好？——深入了解目标和需求 他们有怎样的行为？需要怎样的激励？——探究行为模式，更好地进行引导和设计交互过程 一旦有了任务、目标和偏好，就有了讨论行为、动机和意义的机会。我们应该从本质上去理解是什么在驱动人们在特定的情境下做特定的事。 4 抓住复杂性 培养同理心用户研究+市场研究–&gt;设计研究 定量研究：对趋势的理解及预测； 定性研究：聚焦于体验、情形、行为等问题，更关注“过程”。 “研究报告的效果与它的厚度成反比” 真正有效的研究工作必需具备可行性和持久性。 1.混合使用多种方法：通过定性研究获得一个丰富的感性认识后，可通过问卷来考量行为和态度的普遍性。 2.将研究整合入设计流程：让企业员工对研究信任。让其他人参与到研究过程中，是最好的能培养同理心的方式。 3.创建真正有用的交付物：如persona。让沟通变得高效并促进同理心的培养。 4.制作原型：如故事板、概念图或者功能运作系统等。 5 停止设计“产品”“停止设计产品”，意思是不要仅仅提供feature，不要仅仅提供满足一个或几个具体需求的产品，而应该去思考：怎样才能使用户离不开我们的产品？如果我们提供的是垄断性质的必需品，又或者完全没有人能够提供比我们更有竞争力的产品，而且没有任何形式的替代品，那么我们就不必去思考这个问题。但现实往往比想象的要残酷，如果回避这个问题，可能永远也找不对方向。 人们想达成什么目的？这种活动如何融入人们的生活？针对这些期望，我能如何传达？ 这几个问题，可以帮助我们思考产品的核心竞争力所在。 到底怎么才能将用户固化下来，成为产品的“粉丝”呢？ 例一：M记 ○持续满足具体需求：吃汉堡薯条能填饱肚子~ ○提供良好的体验：干净的环境、高效的服务，无营养但味道还行的食物~ ○形成情感依赖:看到大大的“M”字、看到红黄色的经典搭配、看到麦当劳叔叔，就能勾起小时候去M记过生日的回忆~ ○成为生活方式的一部分:忙碌而高节奏的都市生活，没有精力和时间去过健康绿色的生活，去M记将就将就吧~ 例二：苹果 苹果的例子就更经典了。乔帮主打造了一个数字媒体生态系统，从设备到软件，从产品到服务，从设计到体验，目标用户大抵都逃不出他的手掌心： 数字消费品可以从三大在线商店获得，媒体管理由通过iTunes高效完成，而iTunes让iPod、iPhone等保持简单优雅。 将整个产品or服务作为一个大的系统，各个部分有定义好的相对窄的功能，保持在某一个领域的专注。带有食物链上下游关系特征的产品线一旦形成，系统的效应就能显现出来。当然，并不是说系统中所有部分都需要自己创建，重要的是让自己成为所处生态系统中的一环。 6 设计竞争力 优秀的体验需要系统性协调。优秀体验面临的最大障碍可能很简单： 1.新的：找到旧问题的新解决办法 2.足够吸引人，合人心意而不仅仅是新奇 3.与众不同且难以模仿 优秀用户体验的核心：为真实用户需求提供一种有差异化的协调系统。 SPARC计划： See─Plan─Act─Refine─Communicate 体验，最终是存在于用户的意识中，是一种对与企业交互的主观感受。 7 敏捷方法 瀑布模型不够敏捷。提前准确了解项目的所有需要，通常是不可能的。 敏捷方法： 高度迭代的流程，缩短研发周期； 将用户融入研发流程； 创建更小型的工作小组； 重视正确性和及时性。 准确、恰当地完成原型，是敏捷方法成功的关键。 8 不确定的世界 形成一种创新的、敏捷的及专注与体验的方法，是关键的商业实践。 持续不断地设想出可能性和将新创意融入体验，是保证领先的秘诀。 by 00]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>UX</tag>
        <tag>Strategy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记-用户体验的要素]]></title>
    <url>%2Fnote-the-elements-of-user-experience.html</url>
    <content type="text"><![CDATA[用户体验的要素—以用户为中心的Web设计 1.用户体验为什么如此重要 用户体验不但关注产品将被用来做什么，而且关注产品如何工作。 换一种说法是否更好：我们不但要了解产品被用来做什么，也要了解它如何工作，才能知道它是如何影响用户体验的 用户体验指“产品如何与外界发生联系并发挥作用”，也就是人们如何“接触”和“使用”它。 这种定义是否过于具象化，主要关注交互和行为的过程，而不包含感受、情绪、情感？ 拥有更多的“产品特性”，只能保持短时间的竞争优势。随着功能不断膨胀，网站越来越复杂、笨重、难用，最后就失去了吸引力。仅有功能是不够的，必需用一种能够帮助人们理解和接受的方式呈现出来。 什么是用户体验？（太大，需要另外讨论）什么是好的用户体验？ 好的体验是协调一致、直观明了、愉快的体验。成功的用户体验就是能事先知道用户的期望。 2.用户体验包含哪些要素 要考虑用户有可能采取的每一个行动的每一种可能性，并且去理解在这个过程的每一个步骤中用户的期望值。 如何考虑全面？如何估计期望值？ 根据网页的双重性，划分为： 描述软件界面类型的网页，关注任务，操作被纳入一个过程，网站是工具； 作为超文本信息空间的网页，关注信息和信息的意义，网站是用户可以穿越的信息空间。 其实就是功能层面/表现和内容层面/表现？ 表现层–surface 由图片、文字等组成的视觉呈现。视觉设计（Visual Design） 框架层–skeleton 内容的设计布局。信息设计（Information Design），促进理解的信息表达方式；软件–界面设计（Interface Design），安排好用户与系统功能产生互动的界面元素；信息空间–导航设计（Navigation Design），允许用户在信息架构中穿行。 结构层–structure 系统结构和导航，功能的组合方式。软件–交互设计，定义系统如何响应用户的请求；信息空间–信息架构，内容元素的分布。 范围层–scope 特性和功能。软件–创建功能规格（Functional Specification），对产品功能组合的详细描述；信息空间–内容需求（Content Requirement），对内容元素要求的详细描述。 战略层–strategy 经营者对网站的期望目标（Site Objective）；用户想从网站得到什么（User Need），他们想达到的目标将怎样满足他们所期待的其他目标。 每一层都是根据它下面那个层面来决定的。目标→功能/特性→架构/导航→交互→视觉。如此划分用户体验的要素，是站在供给方即网站和设计者的角度出发的。 3.战略层：网站目标和用户需求战略应该是设计用户体验流程中的起点。回答“我们为什么要建这个网站？”网站失败最常见的原因，是没有人试图回答两个非常基本的问题： 我们要从这个网站得到什么？(Site Objective) 用户要从这个网站得到什么？(User Need) Asking a question before solving it 网站目标需要有成功标准(Success Metric)，可追踪的指标。 如果想要用户喜欢并使用我们的产品，必须要了解“他们是谁”以及“他们的需求是什么”。 who they are what they need what they like 如何确定用户需求？用户细分（User Segmentation）:将用户划分为更小的群组，每一群用户都是由具有某些共同关键特征的用户组成。 维度是什么？哪些特征对我们而言是重要的？细分之后需要排定需求的优先级？ 人口统计学（demographic）标准 心理描绘图（psychographic） 用户对技术和网页本身的观点：如每周花多少时间使用？喜欢跟计算机打交道吗？ 用户对网站相关的知识：新手or熟手 用户的社会或专业角色，如学生、白领 当不同群体目标矛盾时：要么选择针对单一用户群设计，而排除其他用户群；要么为执行相同任务的不同用户群提供不同的方式。 可用性和用户研究 可用性：寻求使产品更容易使用的方法 用户研究：收集必要信息来认识用户是谁，然后才能知道用户需要什么。问卷、访谈、焦点小组，适于收集用户的普遍观点与感知；测试和现场调查，适于理解具体的用户行为，以及和网站的交互信息。 现场调查（Contextual Inquiry）：用于了解在日常生活情境中的用户行为。 任务分析（Task Analysis）：仔细地了解用户完成任务的精确步骤。认为每一个用户与网站的交互行为都发生在执行某一任务的环境中。 用户测试（User Testing） 卡片排序法（Card sorting）：用于探索用户如何分类或组织各种信息元素。帮助我们了解用户对网站信息的看法。 人物角色（Personas）：能够代表整个真实用户需求的虚构人物。从用户研究中提取出可成为样例的虚构人物。帮助我们更好地理解用户需求。 4.范围层：功能规格和内容需求 我们的现状：不停地增加产品的功能特性。有固定的工作流程，但是没有日程安排，没有里程碑，项目看不到尽头。因为根本就没有人知道这个项目的范围，又怎么能知道它应该在什么时候结束呢？ 范围蠕变（scope creep）像滚雪球，每一个额外的要求看上去并没有增加太多的工作量，但当它们汇集到一起的时候，整个项目就会失去控制的膨胀，结束时间遥遥无期。 功能和内容 软件开发中，范围层确定的是功能需求或功能规格（functional specification）文档。功能需求是项目初期阶段的需求，描述系统应该做什么；功能规格是在末期的规格说明，描述系统真正完成了什么。内容需求的更新频率介于用户期望值和有效资源之间的一个合理的中间值。 5.结构层：交互设计与信息架构####结构层定义 交互设计，关注于描述“可能的用户行为”，关注将影响用户执行和完成任务的选项，同时定义“系统如何配合与响应”这些用户行为，为用户设计结构化体验；信息架构，关注如何将信息表达给用户的选项，涉及多学科，包括组织管理、分类、顺序排列，内容呈现相关的学科。 两者都强调一个重点：确定各个将要呈现给用户的选项的模式和顺序。理解用户、用户的工作方式和思考方式。 ####信息架构 信息架构把一个结构应用到设定好的“内容需求清单”，着重于设计组织分类和导航的结构，让用户可以高效率、有效地浏览。作用是指引、教育、通知、说服用户。 创建分类体系的方法：至上而下–从对网站目标与用户需求的理解进行结构设计；自下而上–从对内容和功能需求分析开始，逐渐构建能反映网站目标和用户需求的结构。 至上而下适合前期规划和设计，至下而上适合对已有网站进行总结梳理 ####结构方法 信息架构的基本单位是节点（node）。常见的结构类型： 层级结构（hierarchical structure）/树状结构/中心辐射结构（hub-and-spoke structure）：父级/子级关系 矩阵结构（matrix structure）：允许用户在节点之间沿着两个或更多的“维度”移动。能帮助需求不同的用户。 自然结构（organic structures）：对探索一些列关系不明确或一直在演变的主题很适合。 线性结构（sequential structures）：顺序是关键。 6.框架层：界面设计、导航设计和信息设计 结构层定义了网站用什么方式来运行，是一个较大的架构和交互的设计； 框架层定义了用什么样的功能形式来实现，关注点几乎都在不同的页面和页面组件上。 界面设计（interface design）——框架和界面控件的设计，可交互元素的布局。【让用户真正接触具体功能，可以do sth】 导航设计（navigation design）——用于呈现信息的界面形式，引导用户移动的元素的安排。【让用户可感知网站的结构，可以go to somewhere】 信息设计（information design）——呈现有效的信息沟通，考虑传达给用户的信息要素的排布。【传达想法给用户，用户可以know sth】 对设计者而言，IA是结构，导航是结构可视化。对用户而言，IA是隐性的，可感知；导航是显性的，可使用 DesignerUserIAstructureinvisible, feelNav.structure visualizationvisible, use ####界面设计 让用户一眼就能看到最重要的东西。一个良好的界面是要组织好用户最常采用的行为，同时让这些界面元素用最容易的方式获取和使用。 如何确定哪些是用户最常采用的行为？ 设计网页界面完全就是做这样一些事：为用户想完成的任务选择正确的界面元素，通过一种能迅速理解和易于使用的方式，把他们放置到页面上去。 “哪个功能应该在那些页面上完成”，是结构层的交互设计的主要工作；“这些功能在页面上如何被实现”，则是界面设计范围内的事。 ####导航设计 目标：①提供用户一种在网站间跳转的方法；②传达元素和他们所包含内容之间的关系；③传达内容和当前浏览页面之间的关系。 Navigation System 全局导航global navigation，提供了覆盖整个网站的通路。 局部导航loval navigation，提供在这个架构中到“附近地点”（父级、兄弟级、子级）的通路。 辅助导航supplementary navigation，提供全局导航或局部导航不能快速到达的相关内容的快捷途径。 上下文导航contextual navigation/inline navigation，嵌入页面自身内容的一种导航。 友好导航courtesy navigation，作为一种便利途径来使用，如联系信息、反馈表单和法律声明等。 远程导航remote navigation，如网站地图（通常不会显示超过两个层级的导航）和索引表。 ####信息设计 用一种能反映用户的思路和支持他们完成任务和目标的方式来分类和排列信息元素。信息设计和导航设计结合到一起，执行的是一个重要的功能——指示标识（wayfinding）。帮助用户很快的得到一个心理图像，在哪儿，能去哪儿，哪条路离目标更近。 ####线框图 线框图是整合在结构层的全部三种要素的方法：通过安排和选择界面元素来整合界面设计；通过识别和定义核心导航系统来整合导航设计；通过放置和排列信息组成部分的优先级来整合信息设计。 7.表现层：视觉设计 设计应该强化结构，使用户可用的选项清楚明了。 评估视觉设计简单方法：视线首先落在什么地方？那个设计要素第一时间吸引了注意力？它们对于战略目标是很重要的吗？用户第一时间注意到的与他们的目标是背道而驰的吗？ 表现层需要考虑对比和一致性，配色方案和排版(color palette，typography)，设计和成品和风格指南。 8.要素的应用 改善用户体验其实就是大量收集亟待解决的非常细微的问题，思考清楚这些问题到底属于哪个层次，它的改变对其上层、下层会有哪些连锁反应。 创建任何一种用户体验的挑战是**“比用户自己更准确的理解他们的需求”**。 by 00 Jesse James Garrett提出用户体验要素已有10年之久了，这个模型逻辑清晰，简单易理解，为我们提供了一个思考的框架，在用户体验概念与产品设计的实践之间架起了桥梁。 下面是JJG在今年UX London接受访谈时回顾 The elements of user experience 的一段话： It’s been a decade since you released the Elements of User Experience diagram. What’s it like looking back on it now, and would you change anything? Jesse James Garrett: There really isn’t much in Elements I’ve felt the need to change. Everything there is still important. I’ve been surprised by the durability of the Elements model, because I created it to solve a problem that seemed to be particular to that moment in the evolution of the field. Everybody had to explain everything about UX, because the practice was so new. What I didn’t count on was that ten years later, there would still be so many people to educate!But even among experienced practitioners, I think it’s been a valuable touchstone, to establish a common frame of reference for discussions about our work. I love the various riffs on Elements people have put out over the years, from George Olsen in 2003 to Richard Dalton in 2007 to David Sherwin in 2010. Some people have thought I’d be upset by what they’ve done, but it’s actually really gratifying to see people pick it up and do their own thing with it. It’s a tool, it’s no good if it’s not useful to you, so you should reshape it to your purposes. 更多的访谈内容，请围观这里。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>UX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Persona:Web人物角色介绍]]></title>
    <url>%2Fpersona-intro-ppt.html</url>
    <content type="text"><![CDATA[Persona：Web人物角色介绍PPT 如需转载，请注明出处：By 00 from Uegeek 更多关于人物角色的资料，请点这里。 一、什么是人物角色？人物角色，即persona（[pə:’səunə]），这里讨论的主要是web persona，是指针对网站目标群体真实特征的勾勒，是真实用户的综合原型。我们对产品使用者的目标、行为、观点等进行研究，将这些要素抽象综合成为一组对典型产品使用者的描述，以辅助产品的决策和设计。 来看看人物角色的例子~ 人物角色一般会包含一些个人基本信息，家庭、工作、生活环境描述，与产品使用相关的具体情境，用户目标或产品使用行为描述等。一个产品通常会设计3～6个角色代表所有的用户群体。 人物角色不是什么？ 人物角色不是用户细分 人物角色看起来像我们比较熟悉的用户市场细分。用户细分是市场研究中常用的方法，通常基于人口统计特征（如性别，年龄，职业，收入）和消费心理，分析消费者购买产品的行为。与消费者-商品的对应关系不同，我们更加关注的是用户如何看待、使用产品，如何与产品互动，这是一个相对连续的过程，人口属性特征并不是影响用户行为的主要因素。而人物角色关注用户的目标、行为和观点，能够更好地解读用户需求，以及不同用户群体之间的差异。 人物角色不是平均用户 某个人物角色能代表多大比例的用户？首先，在每一个产品决策问题中，“多大比例”的前置条件是不一样的。是“好友数大于20的用户”？是“从不点击广告的用户”？不一样的具体问题，需要不一样的数据支持。人物角色并不是“平均用户”，也不是“用户平均”，我们关注的是“典型用户”或是“用户典型”。创建人物角色的目的，并不是为了得到一组能精确代表多少比例用户的定性数据，而是通过关注、研究用户的目标与行为模式，帮助我们识别、聚焦于目标用户群。 人物角色不是真实用户 人物角色实际上并不存在。我们不可能精确描述每一个用户是怎样的、喜欢什么，因为喜好非常容易受各种因素影响，甚至对问题不同的描述就会导致不同的答案。如果我们问用户“你喜不喜欢更快的马？”用户当然回答喜欢，虽然给ta一辆车才是更好的解决办法。所以，我们需要重点关注的，其实是一群用户他们需要什么、想做什么，通过描述他们的目标和行为特点，帮助我们分析需求、设计产品。 创建人物角色的前提 人物角色能够被创建出来、被设计团队和客户接受、被投入使用，一个非常重要的前提是：我们认同以用户为中心的设计理念。人物角色创建出来以后，能否真正发挥作用，也要看整个业务部门/设计团队/公司是否已经形成了UCD的思路和流程，是否愿意、是否自觉不自觉地将人物角色引入产品设计的方方面面，否则，人物角色始终是一个摆设、是一堆尘封的文档，纸上画画，墙上挂挂。 所以，在创建人物角色之前，我们需要明确几个问题：谁会使用这些人物角色？他们的态度如何？将会如何使用？做什么类型的决策？可以投入的成本有多少？明确这些问题，对人物角色的创建和使用都很关键。 二、为什么要创建人物角色？ 创建人物角色的目的是：尽可能减少主观臆测，理解用户到底真正需要什么，从而知道如何更好为不同类型用户服务。 使用人物角色的好处 带来专注 人物角色的第一信条是“不可能建立一个适合所有人的网站”。成功的商业模式通常只针对特定的群体。一个团队再怎么强势，资源终究是有限的，要保证好钢用在刀刃上~ 引起共鸣 感同身受，是产品设计的秘诀之一。 促成意见统一 帮助团队内部确立适当地期望值和目标，一起去创造一个精确的共享版本。人物角色帮助大家心往一处想，力往一处使，用理解代替无意义的PK~ 创造效率 让每个人都优先考虑有关目标用户和功能的问题。确保从开始就是正确的，因为没有什么比无需求的产品更浪费资源和打击士气了。 带来更好的决策 与传统的市场细分不同，人物角色关注的是用户的目标、行为和观点。 什么时候可以用到人物角色？ 在制定产品策略时 在讨论产品需求时 在项目优先级排序时 在进行任务分析时 在琢磨交互流程时 在选择设计风格时 在用研项目招募用户时 在锁定推广目标时 在完善运营方案时 ………… 总之，在各种讨论、脑暴、pk时，在我们想冲口而出”用户xxx”的时候，人物角色都可以派上用场。 三、如何创建人物角色按用研类型和分析方法来区分，人物角色可以分为：定性人物角色，经定量检验的定性人物角色，定量人物角色。三者的步骤、优缺点和适用性如下表： Alen Cooper的“七步人物角色法”： Lene Nielsen的“十步人物角色法”： 四、如何使用人物角色？人物角色清晰揭示用户目标，帮助我们把握关键需求、关键任务、关键流程，看到产品必须做的事，也知道产品不该做什么。人物角色不是精确的度量标准，它更重要的作用是作为一种决策、设计、沟通的可视化的交流工具。 丰满而有真实感的人物角色比正确的人物角色更有用。所谓正确的100%符合实际情况的角色是不存在的，我们应该尽可能丰富、形象化我们的目标用户群，让它在设计决策过程中发挥作用。 如何保持人物角色的活力？这个问题绝对不容忽视，尤其是当团队首次创建和使用人物角色。人物角色不只是未某个项目、某次特殊需求而创建的。持续使用和更新，将核心用户的形象融入到每个成员开发、设计思维中，才是人物角色的使命。我们需要不断地完善、展示、解释、使用它： 建立人物角色文档 展示人物角色 与人物角色一起生活 参考文献 [1]赢在用户:Web人物角色创建和应用实践指南. Steve Mulder,Zivv Yarr,范晓燕译. 2007 [2]About Face 3：The Essentials of Interaction Design. Alan Cooper,Robert Reimann,and Dave Cronin.2007 [3]Engaging Personas and Narrative Scenarios. Lene Nielsen. 2004 [4]The Persona Lifecycle.John Pruitt,Tamara Adlin. 2006 [5]Perfecting Your Personas. Kim Goodwin. 2001]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Persona</tag>
        <tag>User research</tag>
        <tag>PPT</tag>
        <tag>人物角色</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Twitter/微博客的学习摘要]]></title>
    <url>%2Fa-brief-summary-about-twitter.html</url>
    <content type="text"><![CDATA[一、概述Twitter的产生源自一个很简单的问题：“What are you doing?” 后来Twitter团队将这句话演变为“Share and discover what’s happening right now, anywhere in the world”。 Wiki相关条目的描述： 微博客（Microlog，微部落格、微网志、微型网志） 是一种允许用户及时更新简短文本（通常少于200字）并可以公开发布的博客形式。它允许任何人阅读或者只能由用户选择的群组阅读。 Twitter 是一个社交网络及微型部落格服务。用户可以经由Twitter网站或Twitter客户端、SMS、IM、RSS、Email等，输入最多140字的文字更新。Wiki link：Microblogging | Twitter | Twitter(中文) | 微博客 “Twitter就像你在一个盛大的聚会中经过某些人时偷听到的对话。”Twitter for beginners：英文版PDF | 中文版Docs 国内微博服务：滔滔、新浪微博、139说客、网易微博、饭否、叽歪、嘀咕、QQ邮箱广播、Follow5、做啥、贫嘴、Fexion网、同学、我烧叨叨、MySpace聚友、蟹爪、相闻、爱唠叨、微可、easytalk、随时记、碎碎念、推客、迷你博客等 国外微博服务：Twitter、Yahoo meme、Plurk、jaiku、tumblelog、Thumbcast、Twingr、Sideblog 、Yammer 、Juick, etc. 二、Twitter的组成和功能组成：Tweets Tweets也就是Twitter消息，140个字符。Tweets可以用于回答”What are you doing? “ ，”What are you thinking? “这些问题，当然并不局限于此。 Timeline Twitter时间线(TimeLine)是一些Tweets列表，显示在你的Twitter主页上，包含了所Follow的推友的Tweets，也包含你自已的。Public Timeline (公众时间线http://twitter.com/public_timeline)则包含了所有Twitter用户发布的Tweets。 @reply（回复） 回复某条Tweet。这个@Replies(回复)并不是私密消息。 Direct message (私密消息） 你可以发送一条Direct Messages(私密消息)给某一位follow你的人。 RT(Retweet回推/转发) 把某条Tweet再次分享给其他推友，你的推友也许会重复你的动作，进行再一次的RT。 Tweet Status(消息状态) 点击Timeline中某条Tweet消息的Tweet Status(消息状态，也就是时间)元素，就可以显示单条的Tweet消息。 功能： （1）记录和发布消息 （2）获得消息、定向阅读 （3）分享信息流 （4）关注一个人 （5）沟通 三、特点属性：Social Media 产品特性关键词：Follow机制、实时、开放、简洁、海量、高效交互、可传播、碎片化、自媒体 Microblog是一种社会化媒体，以媒体为基础，以社区为条件。它是一种给与用户极大参与空间的新型在线媒体，具有参与、公开、交流、对话、社区化和流通性等特征。在应用中，交互性、信息的传播能力较传统更强，用户的黏着度也更高。 1.微博客对信息的处理一个微博客系统能保持正常的运转，从信息的产生，信息的分类存储，信息的检索，信息在用户间的传递，到依附这个信息所产生的互动，都是这些基础模块之间的相互配合，有序组织的结果。 微博是一种典型的轻量级应用。“轻”指的是三方面：一是信息粒度足够小，二是传播成本足够低，三是反馈周期短。用户对于“轻”信息和“重”信息都有需求。140个字数限制使得信息的粒度足够小，所以信息的生产成本足够小，门槛降低；同时因为信息粒度足够小，所以也可以增加信息生产的频次，同时使得信息的消费也变得更容易；因为粒度足够小，还可以使人利用闲散时间来消费。(via) 微博客信息特点 信息的权威度、可信度来自于人 信息具有很强时效性 社区化的信息传递 信息获取的局部筛选 初步实现信息的按需获得和推送 可控的信息消费周期 信息碎片化 2.微博客对关系的处理Twitter的”单向广播”特点非常明显，这一点不同于 IM的”点对点沟通”以及”群沟通”。Twitter有两类特征明显的用户：“话唠型”和“粉丝型”。 Follow关系 你的Twitter社区可以分为三个部分： 双向Follow，个人的讨论区域。 Follow你的人但你没有Follow他们，你的粉丝。 你Follow的人但他们没有Follow你，你是粉丝，或者对方是Twitter bot。 Twitter的关键是它的交际性——充满了各种社交姿态。这一点是Facebook和其他社交网络的共同点，但Twitter的独特之处在于联系是不对称的。Twitter把每一个人都定位为旁观者。你可以很方便地参与到你旁观的世界，这种安全距离的社交，正是利用了互联网匿名性，广泛性，用极低的成本实现了对现实世界虚拟形式的旁观。 3.微博客对沟通方式的处理微博的沟通方式有别于博客、聊天工具，它是半公开的，一对多、一对一并存的广播模式。微博的follow、retweet和reply机制使得信息的传播成本和反馈周期都很小，从信息生产到信息传播，可以形成一个信息增值的过程（RT和回复增加原始信息的价值）。 Twitter跟SNS本质上都是信息传播效率的产物。 Twitter和SNS对于信息传播效率的区别在于，Twitter是从传播方式切入，而SNS是从传播途径（传播渠道）切入，而随着时间的推移，Twitter式的微博客模式正在成为SNS的消息传播机制。(via) Twitter是一个简单便捷却又精确定位的广播平台。首先，一对多的沟通方式，可以瞬间把个人消息或者组织的消息快捷地广播出去。同时由于信息含量的限制，使信息更容易被接受和传播。另外，加入了大量包括手机和即时通讯的信息流的入口，让它成为信息的集散地，巩固了在即时信息流中的地位。 四、第三方及移动应用Twitter本身并不提供复杂的功能，几乎所有忠实用户都会有自己喜爱的第三方应用。这些第三方应用渗透到各平台各个领域，和Twitter共同构成一个包含很多可能性的互联网商业生态环境，Twitter的开放性让很多人看好它的商业前景。 常用Twitter客户端分类汇总 浏览器类：TwitterFox, Power Twitter(Firefox), Twitter sidebar(Maxthon), Opera(Twitter widget)。 移动类：Twibble(JAVA) ,Twitterberry(Blackberry) ,Gravity,Twittai(S60) , TwitterFon, Hahlo(iPhone) ,TwidRoid(Android G1) , Mobile Tweete 客户端类：Twhirl, Spaz, gTwitter, Witty, Twitterrific, TwettDeck, Seesmic DeskTop, Nambu软件内置：OutTwit, SpreadTweet, Tweets in Excel 邮件类：TwitterMail, Twitter Gadget For Gamil, TwitterGadget 博客类：多是基于Wordpress博客体系的应用。例如：Twitter Badge, TwitThis, Twitter Wordpress Sidebar Widget, Twitter Feed。 其他 通过IM：国内的“微博”会提供一些官方的MSN、QQ、Gtalk等“机器人”服务。而国外也有一个应用叫Twittd，它是一个支持通过多种IM更新Twitter，支持Skype，Gtalk，MSN，Yahoo Message的非常实用的应用。 通过web：还有一些Twitter的web应用，例如一站式更新的Ping.fm、HelloTxt以及同步大巴；将Feed输出到Twitter的Feedlr；定时发布tweet的应用的twuffer；对话形式展现tweets的Quotably以及群组Twitter应用 GroupTweet等都能加强Twitter体验。 五、微博客的价值体现Google 和 Yahoo: “信息服务公司” , Twitter、Facebook: “网络服务公司” –Sean Parke 个人价值体现： 获得资讯（对人、对事件、对新闻、对话题等） 社交活动（话题交流、资讯分享、头脑风暴、情感交流） 个人媒体（自我展示，输出观点，张扬个性、价值和魅力） 商业价值体现： 娱乐明星播报平台 运营商分成 媒体内容发布 本地信息服务 广告 预订服务 搜索 消费者即时体验反馈 六、竞争优势1.价值 如上所述 2.简单 用户界面方面，Twitter让用户几乎不需要过多思考就能理解和上手；产品模式方面，Twitter让人与人之间的沟通变得更加轻松和简单；使用方式方面，Twitter极尽所能为用户创造着简单，用户可以通过Web界面、手机、 IM等多种方式发布消息，真正体现了Anytime, Anywhere的概念。(via) 3.适用性 即时通信工具日益多元化，目前主流即时通信工具还不能互联互通，在产品特性上也未能满足多样的沟通需求，且没有一个即时工具能够处在绝对领导地位时，为第三方的准实时工具让出了空间。 4.开放 如果Twitter仅仅是一个网页形式的微博客的话，根本不可能取得今天的成就。它专注于产品的核心价值，并且提供开放的API，让第三方开发者在其上发挥想象力，于是一大批基于Twitter API的应用涌现出来，在表现层上极大的丰富了用户的使用体验。 5.创新 产品创新：赢在创新的互动机制上，在作者与跟踪者（Follower）之间制造不平衡关系。 创新主体：给予了用户创新的条件。 七、微博的困境1.去中心化？ 我们看到Twitter由5%的用户贡献了75%的内容 ，看到新浪名人微博的火爆，去中心化的微博因为带有强烈的媒体特征，似乎同时也在制造着局部的中心化。 2.信息噪音 微博客中的信息数量和更新速率很大程度上超过了以往的信息沟通方式，在过滤和推送机制还未完善时，如何面对更加汹涌的实时信息流？如何处理可能的信息遗失和持续的信息焦虑？ 3.信息甄别与监管 信息真假的甄别 信息传播介质的可信度认证 信息传播权限及传播速率 信息质量的评价内容及评价者的认可度 不良信息的控制 4.盈利模式 大家都觉得Twitter能盈利，但具体如何盈利，目前还不明晰。 00 2010.2.28整理]]></content>
      <categories>
        <category>叽歪</category>
      </categories>
      <tags>
        <tag>Twitter</tag>
        <tag>产品研究</tag>
        <tag>微博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记-赢在用户[3]：如何使用人物角色]]></title>
    <url>%2Fnote-how-to-use-persona.html</url>
    <content type="text"><![CDATA[在上一篇笔记中，我们回顾了三种人物角色——定性人物角色、经定量验证的定性人物角色、定量人物角色，它们的创建方法。在了解了什么是人物角色，如何创建人物角色后，我们自然会关心下一个问题：怎样使用人物角色？ 一、如何使人物角色可信? 能代表所关注的用户； 角色的属性和描述是准确而完整的； 这些角色能涵盖所有用户。 这三个标准（有效性、完整性、全面性）用于衡量人物角色是否创建成功。 二、人物角色包括哪些相关信息？ 关键差异（明确的目标、行为和观点）：如果只给10秒，我们会怎么描述一个角色？ 姓名，照片，个人信息（职业和公司、住址、年龄、家庭情况、爱好、性格），领域行业信息（过往经历、当前状态、未来计划、动机、抱怨和痛处［参考《赢在用户》p120-121］），计算机和互联网使用情况（程度，目的，每周在线时间，电脑配置、计算机/互联网经验、互联网主要使用方式、喜欢的网站等），简介，附加属性，语录，商业目标，人物角色优先级，场景等。 此外，还需要为人物角色设定优先级和场景（scenario）： 人物角色的特点在于将事实转化为故事，用丰富的细节去描绘用户的形象，帮助我们聚焦、沉浸在角色的情境中。所以，一些有助于我们理解这个角色（尤其是人物的目标、行为和观点）的信息，都可以考虑包含在对角色的描述中。 也许，在初次接触人物角色的细节描述时，我们会觉得不大习惯：为什么要（貌似）凭空捏造出大量的细节？告诉我用户大概是怎样的不就ok了？我面对的一群而不是一个用户呀~ 问题是，我们是否对自己的想象力和共情的能力过于太乐观呢？就如同拍照和素描的区别：仅仅将一个场景拍下来，不对着照片，我们很可能还是无法详细描述出每一个细节；但是素描则不同，每一个细节的表达和处理，都是经过仔细的观察、思考、揣摩、平衡的结果，否则素描作品就会“失真”。人物角色的相关信息，其实相当于提供了一个模拟的情境，让我们不得不去“观察”、“揣摩”我们的素描对象——用户。 三、如何保持人物角色的活力？这个问题绝对不容忽视，尤其是当团队首次创建和使用人物角色。人物角色不是未某个项目、某次特殊需求而创建的。持续使用和更新，将核心用户的形象融入到每个成员开发、设计思维中，才是人物角色的使命。我们需要不断地完善、展示、解释、使用它： 建立人物角色文档 展示人物角色 与人物角色一起生活 四、哪些层面的工作可以使用人物角色？将人物角色放回到产品设计的过程中，它所处的位置大致是： 下面我们来看看人物角色在从策略指导到产品完成的过程中可以起到什么作用： 1.制定商业策略 策略是一个企业做出的、关于如何利用资源来最大化商业利益的决策的总和。 企业必须决定哪一个机会对于所拥有的资源是最值得追求的。将有限的资源投入到为核心用户提供服务中，肯定是保险且有益的选择。策略型的人物角色正是帮助团队进行决策的有效工具。 在策略讨论会中，列出每一个人物角色的“关键目标、行为和观点”，并讨论可以用来满足这些需求的、可能的解决方案。应该关注使我们在行业内与众不同的解决方案，而不是那些本来就应该逐渐提升的、不能使我们与竞争对手有所区别的改善措施。 2.定义产品特性和功能、内容范围两种能用人物角色为项目建立范围的方法： ①头脑风暴：基于人物角色的目标、行为和观点来集体讨论有可能的特性、功能和内容。 列出人物角色的目标，同时列出对于每个人物角色我们想达到的所有商业目标，让他们关联起来。 ②优先级别：基于对人物角色很重要的方面来确定最终应该纳入考虑范围的相关功能。 竞争对手分析：试着把人物角色加进去，评估每一个功能在多大程度上满足每一个人物角色的需求。 创建范围矩阵：不涉及竞争对手，仅对人物角色进行功能的优先级、工作量的评估。 3.指导结构、内容和设计①建立结构：信息架构和交互设计 进行任务分析 任务分析要对场景进行深入研究，直到识别出它的最小组成部分为止。得到的是一个待完成事项的列表，用于详细说明这次体验的结构。 任务分析应该反映哪些是可能的途径，并按“业务”、“内容”、“技术”等给出约束条件。输出的是很多个独立的任务分析，然后创建一个支持所有独立任务的架构。 撰写用例 任务分析关注于用户体验的视角，用例关注范围还包括了系统的视角和行为。用例讨论的是普通用户。每个人物角色都有自己的一系列用例。 一个典型的用例还会有可选流程、后置条件、假设和关于这个用例的开放议题。 建立网站架构和页面结构 为人物角色建立网站的基本架构。 定义导航 首先，明确对于每一个人物角色来说，哪一条路径是最核心的路径。然后，弄清楚每一个人物角色离开一个页面后会去的地方。建立一系列规则，来定义网站导航系统。使用人物角色来确定导航文字。 设计网站搜索 弄清楚首要人物角色想看什么类型的搜索结果，然后考虑每一条结果中应该出现哪些内容，他希望用什么样的顺序来浏览？需要过滤功能吗？ ②建设内容理解哪些内容将帮助用户完成目标。与其向用户描述产品，不如告诉他们可以用这些产品“做什么”。 文章或产品描述:人物角色需要了解什么，对什么感兴趣； 指导文字：去哪里，做什么； 文档和帮助：规划用户会在什么地方需要额外帮助； 错误信息：用户想听到什么 图像、声音：提供合适的体验 建立能影响人物角色的内容，风格是关键的因素。用什么方式说出来，和说什么同样重要。注意词汇、语气、正式程度。 了解每个人物角色需要的东西，以及在什么时候需要。将这些内容整合到任务分析或用例中，或用独立内容文档识别每个人物角色所有的内容需求。 ③确定视觉设计为每一个人物角色建立一套风格指南，或情绪板。 三篇关于人物角色的笔记告一段落了。00也总算对人物角色方法有了初步的认识。如果你有任何想法想跟大家分享，赶紧留言或留下相关链接吧~ 希望以后能够有机会再跟大家分享关于人物角色的实践经验 :P 补充 怎样创建已有产品的人物角色？怎样创建新产品的人物角色？回答这个问题，首先还是要明确为什么要创建人物角色。目的是为不同类型的用户提供更好地服务，让我们在决策和设计时能高度focus。这么看来，对处在不同生命周期的产品，创建人物角色的方法其实应该是大致类似的，只不过可获得的数据、选取的处理方法有所不同。 对老产品（整体层面的产品，例如邮箱），除了定性的方法，用户行为日志能很好地帮助我们寻找和聚焦核心用户群，在定性验证时能有更多的数据支持； 对新产品（局部层面的产品，例如邮箱聊天），根据产品性质对全局的人物角色进行细化和调整； 对全新的全局产品（例如sns），人物角色更重要的作用，是根据目标和决策，综合用户的需求、目标、动机，来辅助具体的设计，更多采用访谈和问卷的方法，可能包括一些市场研究的方法。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Persona</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记-赢在用户[2]：如何创建人物角色]]></title>
    <url>%2Fnote-how-to-create-persona.html</url>
    <content type="text"><![CDATA[在上一篇笔记中，我们回顾了什么是人物角色，为什么要使用人物角色。今天我们来看看如何创建人物角色。 人物角色首先要根据用户目标来定义：需要什么内容和功能。完全不同的目标意味着完全不同的人物角色。 人物角色也可以基于用户行为和观点（用户对自身的认知或已有的经验）来定义——内容和功能应如何工作。 作者在书中介绍了定性研究和定量研究的一些方法，这里就不详细展开了。人物角色主要涉及的方法如下图所示： 按用研类型和分析方法来区分，人物角色可以分为：定性人物角色，经定量检验的定性人物角色，定量人物角色。总结三者的步骤、优缺点和适用性如下图： 下面以定量的人物角色为例，总结一下创建人物角色的步骤。 1.研究准备包括向你的团队介绍人物角色、进行必要的预调研（收集相关资料，向相关部门和人员了解情况）和形成初步假设（大概的用户群可能有哪几类）。 2.定性的用户研究这一阶段的主要目的是获得关于用户目标、行为、观点的列表，形成初步的细分选项，并列出有待定量验证的想法。 定性用户研究的方法主要是访谈和现场调查。 其中访谈又包含这些步骤： 确定访谈目标 了解、界定访谈对象 招募访谈对象 准备访谈的topic list 正式访谈 整理访谈的输出资料 现场调查的步骤大体与访谈相似，研究人员会深入用户所处的现实场景去观察和访谈。 3.定量的用户研究这一阶段的主要目的是验证和修正定性研究的发现，以及提供一些更为精确的细分候选项。 方法主要包括调查文件、日志和网站流量分析。 定量研究阶段的步骤包括： 研究计划（目的？数据来源？数据准备？分析方法？） 调查准备（建立细分选项清单，列出对应的数据收集方法） 进行问卷调查（确定对象、设计问卷、投放和回收、分析） 分析系统数据 4.提炼用户细分选项，创建细分这一阶段是在定性和定量用户研究的基础上，提炼出划分人物角色的细分选项。 可以创建定性的细分，例如根据目标、使用周期、行为和观点的组合等来细分用户群； 也可以创建定量的细分：选择属性→选择细分群体的数量（3-6个）→软件计算得到细分选项→评估细分选项→描绘细分群体。 在提炼时，需要考虑以下问题： 这些细分群体可以解释已知的关键差异吗？ 这些细分群体已经足够不同了吗？–用户的习惯、需求、思考方式。 这些细分群体像真实的人吗？–能马上想起某个或某类用户。 这些细分群体能很快地描述出来吗？–找出一到三个能区分每种细分群体的因素，并略微简化，以提高理解程度。 这些细分群体覆盖了全部用户吗？ 这些细分群体将如何影响决策制定？ 5.对（定性）细分进行定量验证例如使用数据透视表或统计分析进行验证。 经过简单的梳理，现在我们应该对人物角色的创建有了基本的了解。当然，创建定量的人物角色的成本投入是相对较大的，我们也可以从以上的步骤中选择更为简化的方法来创建定性的人物角色。 预告：下一篇笔记，我们会一起看看如何使用人物角色。]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Persona</tag>
        <tag>User research</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记-赢在用户[1]：什么是人物角色？为什么要创建人物角色？]]></title>
    <url>%2Fnote-what-is-persona.html</url>
    <content type="text"><![CDATA[《赢在用户》是为数不多的介绍web人物角色的经典之作，整本书读下来，收获不少。虽说是用户研究入门必读，但这本书主要介绍的是一种颇为“奢侈”的研究方法。先将笔记跟大家分享一下，希望很快能有机会实践一下这个方法。 什么是人物角色？人物角色，即persona（[pə:’səunə], not [ˈpə:snə]）。《赢在用户》讨论的主要是web persona。 人物角色是针对网站目标群体真实特征的勾勒。 作者给出的定义很简单。这里有几个关键词：网站、目标群体、真实特征、勾勒。看到这个定义，我们一下子能蹦出不少问题：除了网站的人物角色，还有哪些人物角色的分类？和网站的人物角色有什么区别？如何寻找和确定网站的目标群体？需要了解他们的哪些特征？为什么要了解？如何评判这些特征是否“真实”？如何勾勒这些特征？……这些基本都是这本书尝试回答的问题。 看完整本书，00的理解是：人物角色是对产品目标人群的目标、行为、观点等进行抽象和综合后，得到的一组对典型产品使用者的描述，以辅助、指导产品的决策和设计。 人物角色前提——UCD理念人物角色能够被创建出来、被设计团队和客户接受、被投入使用，一个非常重要的前提是：我们认同以用户为中心的设计理念。来看看作者对User Centered Design的一些解读： 1.商业成果取决于用户 用户是带着某个特定目的来访问网站的，只有帮助用户实现了目的，商业成功才能够实现。 2.你不是用户 用户不会像你一样思考，因为目标和关注点不同，而且用户之间也有差异（目标、行为、思维方式等）。 3.通过直接接触来了解用户 访谈和现场调查：用户想得到什么，是什么激发了兴趣，有哪些错误或遗漏之处； 可用性测试：有哪些影响用户完成目标的障碍； 用户调查：通过具有统计学意义的方式验证与用户目标、动机和机会有关的研究结果； 网站流量/日志分析：分析用户行为。 4.用户研究成果必须是可实施的 “用研结果只有在可实现的时候才是有用的”，如果不能让每个人都能用上，研究有什么用呢？ 5.基于用户研究结果进行决策 决策包括：提供什么，如何运作，内容是什么，如何呈现等。之所以说UCD理念是人物角色的前提，是因为：如果我们不把网站的最终对象（用户）作为中心，不从用户角度出发去着手解决一些根本问题的话，我们不会、也没有必要勾勒出目标人群的特征，毕竟这不是一个轻松的过程。更进一步，人物角色创建出来以后，能否真正发挥作用，也要看整个业务部门/设计团队/公司是否已经形成了UCD的思路和流程，是否愿意、是否不自觉地将人物角色引入产品设计的方方面面，否则，人物角色始终是一个摆设、是一堆尘封的文档，不能发挥应有的作用。 所以，在创建人物角色之前，我们需要明确几个问题：谁会使用这些人物角色？他们的态度如何？将会如何使用？做什么类型的决策？可以投入的成本有多少？明确这些问题，对人物角色的创建和使用都十分关键。 为什么要创建人物角色？创建人物角色的目的是： 知道如何更好为不同类型用户服务，建立与用户的对话并将其转变为商业成果。从这个目的我们可以看出，创建人物角色的必要性条件之一，是产品/网站/服务的目标用户可以区分为若干类型，且它们之间存在着需求、目标、行为、观点等方面的显著差异。越是用户基础广泛、用户特征多样的产品，人物角色可能发挥的作用越明显（当然，创建人物角色的过程也越困难）。 我们应该根据人物角色进行决策（通常会设计3-6个角色来代表所有用户），而不是企业本身的需求。 使用人物角色的好处 1.带来专注 人物角色的第一信条是“不可能建立一个适合所有人的网站”。成功的商业模式通常只针对特定的群体。将时间和注意力花在目标群体上。一个团队再怎么强势，资源终究是有限的，要保证好钢用在刀刃上~ 2.引起共鸣 人物角色第二信条“你不是你的用户”。做决策时想象角色在这种情形下会怎么做。感同身受，是产品设计的秘诀之一。 3.促成意见统一 帮助团队内部确立适当地期望值和目标，一起去创造一个精确的共享版本。人物角色帮助大家心往一处想，力往一处使，用理解代替无意义的PK~ 4.创造效率 让每个人都优先考虑有关目标用户和功能的问题。确保从开始就是正确的，因为没有什么比无需求的产品更浪费资源和打击士气了。 5.带来更好的决策 与传统的市场细分（通常基于人口统计特征和消费心理）不同，人物角色关注的是用户的目标、行为和观点。 人物角色是帮助制定用户战略的利器。 我们在平时的工作中，是不是常常会听到下面的话语？ “用户喜欢xx而不是xx” “这个功能是小众需求” “这个功能实现太困难，我们先做简单的” “xx（竞争对手）新出了这个功能，我们也去做” “明年我们的方向是什么？” “这两个用户的反馈和意见是矛盾的，咋整？” …… 如果有了人物角色，可以预见，这些疑问、争论和纠结将会大大减少。 如果你也是跟我一样的菜鸟，是不是对人物角色颇感兴趣了呢？下一篇笔记，我们一起看看怎么创建人物角色吧~ XD]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Note</tag>
        <tag>Persona</tag>
        <tag>User research</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[漫话产品设计]]></title>
    <url>%2Ftalk-about-product-design.html</url>
    <content type="text"><![CDATA[2010年00在优涩控的第一篇文章，来个轻松的话题：漫话产品设计。只是00的有感而发，请勿对号入座~ 以下被借题发挥的漫画来自这里的转载~ 1.鱼饵就应当符合鱼儿的胃口，而不是钓鱼者 第一次看到这幅漫画就笑了：画的不就是做产品的我们嘛~ 花了不少成本、人力、时间，把自己看起来都颇诱人的鱼饵（x产品x功能）抛到鱼塘（网站）里，满心欢喜地守着盼着等着念着：“鱼儿鱼儿快上钩~”鱼儿们来到网站，先是看到一个庞然大物，一晕；然后满世界找熟悉的功能，未遂，再晕；好不容易找对地儿，发现鱼饵味道变了，三晕…… 反省：核心需求的满足，永远是最好的饵料啊~ 2.踏着别人的脚步前进，超越就无从谈起 “超越”是一个我们都很迷恋的词。但是它后面藏着很多疑问：为什么要超越？怎样算超越？要在哪些方面超越？现在距离有多少？大家的起跑线、方向、耐力、步长、频率一样吗？怎样超越？投入多少成本去超越？…… 好了，如果顺利回答完上面的问题，我们往往发现，“超越”其实只是我们嘴巴迷恋的词，而“跟随”才是我们脑袋和腿脚（不自觉地）迷恋的词。正是因为“有距离”，所以欲望很强烈，心情很急切，脚步很错乱。“跟随”就显得很靠谱：直接跨越摸索、纠结阶段，直接节约思考、打磨的时间，直接规避失败的风险，何乐而不为呢？但是，跟随的结果最多是不过不失，大家都跟随了，整个市场的产品也同质化了。我们表面上做了不少事情，将产品改头换面更新换代，但是，实际上属于自己的东西越来越少，产品的个性越来越不鲜明，用户只好在审美疲劳中放弃选择。 反省：寄望通过别人的分享和经验得到提高，将永远没有自己核心的东西 3.找解决方案要比纠结原因的优先级高 呱呱坠地就流芳百世的产品，恐怕是百年一遇的。绝大多数的产品被设计出来后，都会经历一个生命周期。尤其在生命周期曲线的上升期和下降期，我们尤其会纠结于产品停滞不前、不受欢迎甚至是被千夫所指的阶段。这个时候，如上图，大概会有几种情况：a.在汪洋中没有方向，在一小片区域打转，自我感觉良好；b.大家逐渐发现各种问题，前后不靠岸，于是开始相互推诿和指责 c.大家坐到一起，发现问题有ABCD，解决方案是1234，分工是甲做指南针、乙补洞、丙掌舵、丁划桨…… 反省：没有目标，任何风向都是不顺的；不提出问题，也无法寻找到原因；办法总比问题多，关键是想不想，做不做。 4.真正的创新只有在经历过擦肩而过后才能实现 创新是产品设计中不可缺少的元素。但它总是披着“灵光一现”的隐形衣，所以我们总觉得它可遇不可求。但是为什么有人遇到了，有人求之却不得？这里有歪理一枚：“遇”字包含这样的意思，两个物体要相遇，前提是至少有一个物体在移动。如果目标是静止不动的，当然只有我们去移动，才有与其相遇的可能；当然，我们的目标也可能是移动的，但是相遇往往只是电光火石的一瞬间，你有把握能捕捉到吗？所以说，“机会只光顾有准备的人”…… 反省：实践和思考的反复迭代，是创新的催化剂。 5.过多的会议是一个糟糕的组织明显的标志 这一点，估计只需意会，不需言传了。用会议代替流程和规范，用讨论代替执行，推卸责任，陷入细节，导致时间成本高筑，责权不明晰，奖惩不分明……在产品设计的过程中，我们或多或少都能体会到。 反省：绅士的演讲应该像女人的裙子，越短越好，会议也是。当然前提是问题能够解决。 胡诌了五幅小漫画，很不厚道地作为优涩控新年开篇。更多的漫画，可以到这里和这里围观~ 生活总是充满问题和思考的，一言半语的总结常常能让我们获益良多，做产品，也是一样。]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>产品</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是OpenID？OpenID概念、原理和案例]]></title>
    <url>%2Fopenid-intro.html</url>
    <content type="text"><![CDATA[这几周有关OpenID的新闻不断：Google Profile变身OpenID、WordPress上的Google Friend Connect插件实现OpenID留言、OpenID先驱JanRain获得325万美元风险投资、雅虎将全面支持Facebook Connect服务…… 正好前段时间看了一些OpenID的资料，希望下面的内容可以帮助大家了解OpenID（参考资料见附录）。 1.OpenID介绍1.1概念OpenID 是一个以用户为中心的数字身份识别框架，是一个以URL为身份标识的分散式身份验证解决方案，它具有开放、分散、自由等特性。 OpenID 的创建基于这样一个概念：可以通过URL来认证一个网站的唯一身份，同理，也可以让每人通过一个URL(一个OpenID身份就是一个URL)，在多个网站上进行登录，作为用户的身份认证。 形象一点来说：URL是护照，OpenID服务器就是户口所在地。首先在一个OpenID服务器网站注册，获得一个URL，等于申请一个了“出入许可证”。然后可以直接使用这个URL来登录别的网站，也可以把这个URL加到自己的主页，让个人主页的URL具备OpenID URL的功能，就像是一个复印件。然后就可以拿这个URL到支持OpenID的网站去登录了。不需要每个网站都注册一遍，因为你的信息已经保存在OpenID服务器上，并获得那些网站的认可。好比是银行卡可以在银联内的多家银行取钱一样。不用担心自己的用户名被别人抢注，也不用怕忘记那许多用户名和密码。 谁将拥有或控制的OpenID ？ OpenID的出现缘于开源社区，其目的是为了解决现有技术所不能轻易解决的问题。OpenID不属于任何人，也不应该属于任何人。任何人都可以选择成为一个OpenID用户或成为一个OpenID的免费提供方，而不需要注册或者被任何组织批准允许。OpenID基金会的成立，目的是为了协助开源社区的管理和发展，以促进和支持OpenID的扩展和应用 。 1.2基本原理简述OpenID系统由三部分角色组成： End User — 终端用户，使用OpenID作为网络通行证的互联网用户； Relying Part（RP） — OpenID支持方，支持End User用OpenID登录自己的网站； OpenID Provider（OP） — OpenID提供方，提供OpenID注册、存储等服务。 USER —— 使用OpenID RP —— 支持OpenID登录 OP —— 提供OpenID 使用 OpenID时，URL就是用户名，密码存储在一个 OpenID 服务网站（OP）上。登录RP时需要提交两个重要信息，一个是你的名字，一个是OpenID网站的网址。例如我在OP：open.cn上的账号是：kidult，我的OpenID就是http://kidult.openid.cn/。 打个比方，你到朋友公司，要经过门卫，门卫需要确认你的身份。这时候，你就是用户，门卫就是网站登录框，朋友就是一个OpenID中介。 你要进门，告诉门卫：“我要找某某某。” 门卫打电话问你朋友：“这有个人说是找你的。” 门卫把电话交给你，你给朋友暗号：“地瓜地瓜，我是土豆。” 再把电话交给门卫，朋友告诉门卫：“没错，他是我朋友，让他进来吧。”事实上， “门卫” 并不需要认识你朋友，只需要通过一种通用的协议与OpenID的网站交换确认信息就行了，“门卫”和OpenID网站之间的信息是建立在tcp/ip基础上的比较可靠的唯一通路上，除非别人知道你的OpenID密码，或者黑客通过某种手段劫持他们之间的通信，或者劫持OpenID网站域名，否则别人不能冒充你的身份。 1.3 OpenID优缺点优点： 对用户 1. 简化注册登录流程：一定程度上避免了重复注册、填写身份资料的繁琐过程，不需要注册邮件确认，登录更快捷。2. 一处注册，处处通行：免去记忆大量账号的麻烦，一个OpenID就在任何支持OpenID的网站自由登录。 3. 减少密码泄露风险：频繁登录各种网站，容易被垃圾网站暗地里收集密码和资料，或者冒充用户身份发送垃圾信息。 4. 用户拥有账号信息控制权：根据对网站的信任程度，用户可以清楚的控制哪些profile信息可以被共享，例如姓名、地址、电话号码等。 对网站（RP） 1. 共享用户资源：给所有支持 OpenID 的网站带来了价值。 2.已经有相当数量的高端注册用户可以直接使用，不必从零开始； 3.可以不负担自己建立会员系统或登录功能所需要的开发成本、机器、带宽、安全费用； 4.用户数据是安全的，用户数据不统一存储，用户可以任意选择、更换存储的server。没有组织，没有任何一个地方可以做root，没有任何一个机构或者个人能够从这里面获利。 缺点： 1. 任何人都可以建立一个网站提供OpenID验证服务，而网站性能参差不齐，导致OpenID的验证过程不是很稳定。 2. 如果提供OpenID验证服务的网站突然关闭的话，可能会导致大量用户无法使用多个网站的服务。 3. 目前几乎所有支持OpenID的网站都很谨慎地将其做为一种可供选择的辅助登录方法，这会在很大程度上阻碍OpenID的发展。 4. 目前支持OpenID的网站还不多，其独特的使用方法并不被多数用户所熟悉。 More about OpenID… 1.4 OpenID跟Passport的比较网络通行证进化历程： 最原始的注册方式，自选字母或是数字等组合作为ID； 到了传说中的web2.0时代，用邮箱作为ID来注册，但是隐患是“不请自来”的邮件； 现在，用OpenID登录，即，不用担心垃圾邮件，省去填定个人资料的过程，节省了注册时间。 目前互联网上的主流帐号管理方式有两种： 单一帐号系统。只提供单一服务的网站采用的用户帐号管理模式。用户注册后使用此帐号可以在其网上上实现所有功能操作。 通行证。例如google、163、微软等提供多套服务的网站采用的帐号管理程序。用户在注册一次之后，使用该帐号可以在这些网站所属群里面自由使用。 与目前流行的网站帐号系统（Passport）相比，OpenID具有开放性以及分散式的特点。它不基于某一应用网站的注册程序，而且不限制于单一网站的登录使用。 2.相关案例目前，OpenID联盟包括的知名网站有：Google，IBM，雅虎，微软，Myspace，Facebook等。 2.1 国外OpenID其实很多网站的账号本身就是一个OpenID： AOL - OpenID.aol.com/screenname Blogger - username.blogger.com Bloglines - d.bloglines.com/username Flickr - www.flickr.com/photos/username LiveDoor - profile.livedoor.com/username LiveJournal - username.livejournal.com SmugMug - username.smugmug.com Technorati - technorati.com/people/technorati/username Vox - member.vox.com Yahoo - http://OpenID.yahoo.com WordPress.com - username.wordpress.com Ziki.com 表 2 一些OpenID提供方比较 (易用性 安全性 用户信息 多ID管理 反钓鱼 密码保护) via Facebook 作为RP支持OpenID 2009年5月19日，facebook宣布正式启用OpenID登录系统，允许用户使用Gmail或其它支持OpenID的网站帐号登录Facebook。可以用Gmail帐号登录Facebook，也就是说，当你在Gmail里浏览邮件时，点击了一个Facebook的链接，你不需要再输入密码，就能到达你自己的Facebook页面里。 OpenID是一个非盈利性质的联盟，期望推动用一个帐号/密码来登录所有网站。这可以省掉大量的用户不停注册的时间，以及一堆帐号/密码的麻烦。 但是很多OpenID的参与者都不像Facebook这么彻底，例如不能用Facebook帐号登录Gmail。为什么Facebook这么做？Facebook说：”我们认为，开放有助于培育出一个强大的开发人员社区。”Facebook在测试中发现，利用OpenID注册Facebook的新用户”更可能”成为Facebook的活跃用户。 当然，最真实的原因来自：Facebook从一开始就是一个彻底的”开放”态度，它让用户用自己的Email地址作为Facebook的帐号，而从来没有生成Facebook自己的帐号。所以，它采纳OpenID跟自己的历史逻辑一致，没有任何损失。 2.2 Yahoo ID和Google IDYahoo OpenID技术让你可以用Yahoo!账号登录许多网站。一旦启用您的Yahoo！ OpenID的访问帐户，您可以简单地告诉任何支持OpenID的网站，你是Yahoo！用户。 当您访问的网站支持OpenID登录，您只需找到Yahoo！登录按钮。或者你看到一个OpenID图标，只需在文本框输入“yahoo.com”。登录信息将被发送到Yahoo！验证您的Yahoo！ ID和密码，然后登录到该网站。 例子：用yahoo账号登录plaxo 安全措施：Yahoo! sign-in seal (安全图章) 一个安全图章是一个只在本机显示的秘密的信息或照片。每次登录都寻找它，以确保您在一个真正的雅虎正在网站。如果消息，照片，或颜色是不同的，你可能在访问一个钓鱼网站。 Google Google期望用户用Gmail的帐号登录其他网站，比如Facebook，但是，它不允许用户用其它Facebook的帐号来登录Gmail。（例外） Google OpenID解决方案：Federated Login 基于OpenID标准。第三方网站和应用程序现在可以使用google帐户注册和登录。 图 2 Google Federated Login原理 （谷歌作为Relying Part） 为什么谷歌音乐支持人人ID、live ID、Yahoo! ID登录？有兴趣的同学可以看这里。 2.3 国内类OpenID国内支持OpenID的Relying Part：Yupoo又拍，乐铺，…… 国内OpenID Provider：OpenID.cn，豌豆，…… 更多的是类OpenID 提供方和类OpenID Relying Part 类OpenID Relying Part：京东商城、土豆、D1、99网上书城、365商城、钻石小鸟，等等。 类OpenID Provider：支付宝、人人网、QQ等。 附：如何在我的网站上用支付宝账户登录功能？(via)答： 1、确认您签约的合同中是否有该项服务，我们称之为“免注册登陆”、“信任登陆”等。 2、若有该项服务，且已开通该项权限功能，请从客户经理那获得，免注册登陆的接口资料。若没有，则请联系客户经理 或拨打商户客服电话0571-88158090 3、根据接口资料与接口代码DEMO，类似接入支付宝支付接口的方式，接入这个接口到商户网站中，并与商户网站里的会员数据库衔接。 具体实现步骤可参考：http://dev.alipay.com/devclub/mvnforum/viewthread_thread,398 流程 ： 1、 用户在访问您的网站时，在您的登陆框里，点击功能按钮“支付宝会员登陆” 2、 通过您做好的接口与支付宝的网关，页面跳转到支付宝专门为会员免注册登陆设计的登陆页面 3、 用户填写登陆帐号密码登陆进去以后，支付宝会把这个用户的相关信息发送回本网站，同时页面跳回到本网站已设置好路径的返回页，本网站通过该返回页执行程序实现用户在本网站的自动登陆（此登陆并非登陆到支付宝网站上，而是登陆到本网站里）。 2.4 小结封闭性质的OpenID——形似而非神似 OpenID：双向开放 类OpenID：单向有选择性的开放，提供接口，通过合作或开放给用户自行添加 真正的OpenID支持网站（OI）：影响力太弱 类OpenID Provider（OP）：重量级公司，用户量庞大且较为优质，活跃度高。都不是真正的开放，自身产品不支持OpenID登录。 类OpenID Relying Part（OR）：实力较强，多是服务型网站，以电子商务网站为多，跟几大OP有深入的良好合作关系（互补的性质 &gt; 竞争性质），看重的是强强联合，打通用户资源。 [1]. OpenID Wikipedia, http://en.wikipedia.org/wiki/OpenID [2]. Six Apart - Labs: OpenID, http://www.sixapart.com/labs/OpenID/ [3]. OpenID Explained , http://OpenIDexplained.com/ [4]. OpenID百度百科, http://baike.baidu.com/view/832917.html?wtp=tt [5]. OpenID使用手册, http://www.matrix.org.cn/resource/article/2007-09-20/187c9604-671e-11dc-91f8-0da64dffe568.html [6]. Towards an OpenID-based solution to the Social Network Interoperability problem，Position paper for the W3C Workshop on the Futureof Social Networking [7]. Slideshare.net Results 1-12 of 1160 for “ OpenID” http://www.slideshare.net/search/slideshow?q=+OpenID&amp;submit=post&amp;searchfrom=header [8]. 什么是OpenID , David, March 23, 2008, http://blog.iyi.cn/start/2008/03/OpenID.html [9]. 什么是OpenID , OpenID的工作原理简述, OpenID的两种模式, http://vovo.net.cn/go/OpenID [10]. OpenID初体验, 2008-09-10, http://www.tiray.net/post/OpenID-experience.aspx [11]. OpenID，新的用户登录体验, http://www.adxonist.com/archives/32 [12]. OpenID的用户体验 (一), http://www.adxonist.com/archives/34 [13]. OpenID的用户体验 (二), http://www.adxonist.com/archives/39 [14]. OpenID的用户体验 (三), http://www.adxonist.com/archives/54 [15]. OpenID系列(一)：注册篇, http://www.kuqin.com/shuoit/20080411/6538.html [16]. OpenID系列(二)：使用自己的URL, http://www.kuqin.com/shuoit/20080411/6539.html [17]. 国外各大OI、OP、RP网站 [18]. 国内各大OP、RP网站 by 00]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>OpenID</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UCD年会收获：开放、思考、积累]]></title>
    <url>%2Fucd-annual-meeting-2009.html</url>
    <content type="text"><![CDATA[从广美的UCD年会会场回来，趁着还没有忘记，感紧记一下今天的收获。 鸦总的发言很精彩，很多话都重重地压在我心上，很过瘾，很惶恐。 观点1：产品业务、市场运营、体验设计都必须围绕着用户进行，且三者不可分割，须融为一体。任何一个角色都需要具备另外两个角色的能力。 UCD至少有两个层面，具体层面和抽象层面。具体层面很好理解，我们每天都在念叨：要从用户角度出发。具体层面的UCD绝对必要，但这更多是从产品功能、操作和设计等细节出发，我们是在朝着一个正确的方向去UCD吗？感谢鸦总给我们带来了很多另一个层次UCD的思考：战略UCD。抽象层面的UCD，其实是很难把握的，至少要在3个方面下足功夫： （1）对本质的思考： 用户需求的本质是什么？驱动用户使用产品的根本原因是什么？回溯原始的需求，这是支付宝的一个制胜法宝。我其实不同意提问环节一些同行提出的关于“淘宝有一个明确的方向和用户群，而很多小公司、创业团队没有”的观点。“中国网民有网购的需求，支付宝为网络购物提供最好的支付体验”，这句话并不是在互联网诞生之日就写在大家心里而成为一个共识的，淘宝支付宝之所以成功，就是因为抓住了关键和本质，提炼出了最原始最稳定的需求，并一直在这些关键上发力，才有今天的成功。如果连一个局外人都清楚一个团队的核心目标和用户群，难道这个团队本身不清楚吗？所以，能否将自己的目标提炼为一个最原始、最朴素供需模式描述，可以做为判断一个团队有没有清晰的方向和战略的指标之一，否则，小公司和创业团队始终会找不着北，始终希望有一天这个方向会自己跑到门口，做成大公司有希望了。 （2）团队UCD观念的普及：这在下面第三点会提到。 （3）UCD的整合：产品业务、市场运营、体验设计都能以用户角度出发，已经是很理想的情况了，但是这还不够。因为我们服务的是一个复杂的用户群体，只有几个部门在设计开发的不同阶段对各自领域的做法梳理和整合，往往还要相互理解和妥协，才能让UCD成果最大化重叠。 观点2：互联网的竞争从入口之争转入平台之争，将转入用户之争。得民心者得天下。用户的体验，不再是一个独立环节，要贯穿全程。 一代|入口：新浪、搜狐、网易 二代|平台：阿里、腾讯、百度、盛大 三代|用户：开心、豆瓣、迅雷…… 鸦总的这个总结也很好。这大概也是web1.0到2.0的一个转变过程。之所以产品传播途径从抓入口到抓平台到抓口碑（当然他们之间不是替代关系），之所以觉得用户体验越来越应该贯穿全程，我的一个补充理解是：用户的力量在web2.0时代有了一个质的增长，第三代网站之所以能够以轻产品轻网站的模式跟一、二代大网站分庭抗礼，除了网站间开放、协同、分享的理念外，用户力量的贡献也是不可忽视的，若是UGC网站就更不用说了。这时注重全程的用户体验，对用户和网站来说，是一个双赢的做法。 观点3：用户体验设计，将不是一个独立部门，而是全民的参与。我对于支付宝UED的愿景：不再有一个部门叫“UED”。 公司UCD、UED观念的普及。“把UED部门做没了”，这确实是一个愿景，一句豪言壮语。为什么现在很多User Center 的Design不被接受或者UE部门的工作会遇到比较多的阻力？因为UCD的观念在团队中没有被每一个人接受，大家的目标和步伐不一致，所以会存在“用户体验是UI的事情，与我无关”的误解。只有每个人在产品设计开发的每一个阶段，甚至每一个细节，都能主动站在用户去思考，以用户的逻辑去理解，以用户的习惯去模拟，才有可能让产品从能用到易用到好用到喜欢用。无论是自上而下，还是自下而上，UCD观念的普及是良性发展的一个前提。 而且，UCD观念的普及，并不是指表面化的从用户角度出发，例如“我觉得如果是用户的话会怎样怎样”，“用户会喜欢四个字而不是六个字”，还是要在多个问题和决策上不停地发问。例如你觉得用户可能会这么想，那么为什么会这么想？为什么不会那样想？哪些选择会让他不这么想？为什么这些选择会起到这个作用？选择的原因又是什么？…… 支持这个理念的，其实是背后一整套学科体系和方法，仅仅喜欢发问是远远不够的，将设计、心理、市场等相关学科的知识和方法整合运用进来，才有可能真正地UCD。 观点4：用户研究的根本需要围绕：“什么样的人，在什么样的环境里，有什么样的遭遇，获得了什么样的信息，希望解决什么样的问题”。 很多时候，我们的用户研究，询问的是用户对一个产品、一个功能、一个界面的“看法”，但是，为什么他会产生某个“看法”，我们不得而知，因为我们没有问他是“什么样的人，在什么样的环境里，有什么样的遭遇，获得了什么样的信息，希望解决什么样的问题”，还有，为什么来？问题是否得到解决？等等。用研那么多种方法，没有一种是完美的，定量和定性研究，一个解决是什么，一个解决为什么，都不可缺少。 观点5：最好的用户研究方法就是把产品做出来，给用户用。看他用，站在他的角度读懂它。 做产品不必一步到位，也不必畏首畏尾，网站和服务是我们的试验田，如果真的是一些不明确的功能，可以采用迂回的方法，进行局部试探性的尝试，方便快速反应和迭代。用户需求本身是复杂的，有时很难拿出各方都满意的解决方案，更简单的做法可能是进行试验，让市场和用户自己去选择。 观点6：用户需求不是偶然发现的，更不是创造出来的，而是计算出来的。对于线上定量数据的分析，往往比线下的定性数据分析更有价值。 对没有较完善数据系统的团队，这个观点简直是噩梦。但这确实是大白话。在不同部门因为对用户需求的不同理解在pk的时候，有什么比从线上数据挖掘出的用户行为更有说服力呢？偶然发现的用户需求，必定是零散不成体系的，缺乏承续性和扩展性；创造出来的用户需求 ，大多可能是拍脑袋的结果。如果有详细而易于挖掘的数据，用户需求的提取会相对简单且精准。不过，对数据的运用，也是一门艺术。有时数据也是一把双刃剑，如果仅仅是片面地想用数据证明某些观点和做法的正确性，数据沦为了断章取义的论据，也会成为产品失败的帮凶。 观点7：产品体验和需求的完善，是逐步实现的，有阶段、有节奏、有偶然，更有必然。 这点的体会还不太深，呵呵 另外有一点印象深刻：要抓住核心用户群的核心需求。知易行难。核心的东西，要坚持正确的做法，非核心的东西，则可以稍微灵活处理。能够明确知道核心需求]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>产品</tag>
        <tag>用户</tag>
        <tag>UCD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从如何制定经营模式想到的]]></title>
    <url>%2Fthink-about-product-strategy.html</url>
    <content type="text"><![CDATA[刚刚看到阮一峰关于经营模式的文章，有这么一段话 如何制定经营模式 制定经营模式的窍门，就是使用倒推法，从最终消费者开始一步步倒推到生产阶段。你可以按下面的顺序，向自己提问： 第一步：谁来购买你的产品？为什么购买？市场有多大？ 第二步：客户愿意付多少钱购买你的产品？竞争对手是什么价格？ 第三步：客户在什么地方能买到你的产品？ 第四步：为了让客户买到你的产品，你要付出多少销售成本？ 第五步：你要生产出这些产品，能够负担的最高生产成本是多少？ 通过这一系列的步骤，你就可以整理出经营模式的大概轮廓，其中包括这样几个要点：产品定位、原料、生产过程、定价、经销渠道、营销、市场的进入壁垒、规模的扩大等等。 这段的话的可扩展性颇强，用在互联网产品，即便是免费产品，也基本适用： 制定产品战略的窍门，可以使用倒推法，从最终用户开始一步步倒推到设计阶段： 第一步：谁来使用你的产品？为什么使用？市场有多大？ 第二步：用户愿意投入多少注意力和时间使用你的产品？用户对竞争对手的态度如何？ 第三步：用户在什么地方能够接触到产品的信息和推广？在哪些场合使用哪些工具可以访问或使用？ 第四步：为了让用户了解并使用产品，你要付出多少推广成本？ 第五步：你要生产出这些产品/功能，能够负担的最高人力成本/时间成本是多少？ 要点产品定位、用户需求、策划和设计过程、推广策略和渠道、品牌营销、市场的进入壁垒、规模的扩大等等。 这么看来，第一步类似用户群的定位和研究，是我们做得较多但做得不够透的一步：我们大概了解哪些人会使用我们的产品，但是他们的比例构成、使用动机和人群规模，我们貌似了解却又有点雾里看花，总感觉浅了一点，自己描述起来，底气都不足； 第二步最容易被忽视，我们时常犯的一个错误，是将自己的产品看得太重要，觉得用户每天有很多时间在用，很仔细地用，很投入地用，但是，用户真的有那么多时间和注意力吗？有多大比例的用户，对产品的使用习惯与我们对产品的定位高度重合？对自己的用户无暇做这些分析，竞争对手的情况就更不了解了。 第三步，与品牌形象、产品推广有关，与使用体验有关。这是一个信息爆炸的时代，用户的注意力已经被抢夺得支离破碎了，“酒香不怕巷子深”已经不大现实，因为路边挤满了摊位，所有人匆匆的目光的脚步，远比“酒香”的扩散速度快。即便是勾住了用户的注意力，还是需要提供不同场景、多平台的优秀使用体验，才能帮助用户跨出从“了解”到“使用”的关键一步。 第四步，在这么一个选择太多的时代，宣传推广任何东西都不是一件容易的事。哪些用户是我们最关注的？他们有在关注产品吗？在用户和产品之间牵线搭桥，到培养品牌忠诚度，我们可以投入的成本是多少？ 第五步，是最为现实的问题。用户的需求是各种各样的，即便我们通过各种渠道听到了他们的声音，但是被表达的需求就一定是内心真正的需求吗？被表达的需求就是大多数人的需求吗？被表达的需求就是符合产品逻辑的需求吗？（需求这个话题太大，这里打住）根据团队的能力（软硬件、人力、时间、资源），筛选出大多数用户真正的需求，才能保证好钢用在刀刃上。否则为用户（比例未知）打一枪换一个地方，这是为不合身的衣服打补丁，而不是量体裁衣。 啰嗦了那么多，光提问，也没有提出具体解决方法，总结一句就是：产品规划，三思而后行。]]></content>
      <categories>
        <category>叽歪</category>
      </categories>
      <tags>
        <tag>产品</tag>
        <tag>用户</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记-情感化设计[2]]]></title>
    <url>%2Frn-emotional-design-2.html</url>
    <content type="text"><![CDATA[笔记1 5. 三种水平的设计与产品特点的对应关系 本能水平的设计——外形 行为水平的设计——使用的乐趣和效率 反思水平的设计——自我形象、个人满意、记忆 本能水平人是视觉动物，对外形的观察和理解是出自本能的。如果视觉设计越是符合本能水平的思维，就越可能让人接受并且喜欢。 行为水平行为水平的设计可能是我们应该关注最多的，特别对功能性的产品来说，讲究效用，重要的是性能。使用产品是一连串的操作，美观界面带来的良好第一印象能否延续，关键就要看两点：是否能有效地完成任务，是否是一种有乐趣的操作体验，这是行为水平设计需要解决的问题。 优秀行为水平设计的4个方面：功能，易懂性，可用性和物理感觉。 产品形成良好理解的秘密是建立一个适当的概念模型，任何物品有三种不同的心理形象：“设计者模型”，“使用者模型”，“系统形象”（产品和书面材料表达的形象）。 反思水平反思水平的设计与物品的意义有关，受到环境、文化、身份、认同等的影响，会比较复杂，变化也较快。这一层次，事实上与顾客长期感受有关，需要建立品牌或者产品长期的价值。只有在产品/服务和用户之间建立起情感的纽带，通过互动影响了自我形象、满意度、记忆等，才能形成对品牌的认知，培养对品牌的忠诚度，品牌成了情感的代表或者载体。 真正的问题与产品的内在价值无关，而在于联络产品和用户之间的情感纽带。 产品真正的价值是可以满足人们的情感需要，最重要的一个需要是建立其自我形象和其在社会中的地位需要。 当以物品的特殊品质使他成为我们日常生活的一部分时，当它加深了我们的满意度时，爱就产生了。 6.为谁设计？我们不断给产品增加新特征，但从没研究过用户从事什么样的活动，产品需要支持什么样的任务？设计者必须知道产品是为谁设计的。道理很简单，你想讨好一个人，必需先知道这个人的喜欢是什么。不要想着他会主动告诉你：I preferred Coke to Pepsi。更多时候，我们需要观察用户，看他买汽水时，到底有几次买了可口可乐，几次买了百事可乐。 产品开发有两种形式：改进和创新 ▲产品设计的真正挑战是：“去理解终端用户未得到满足的和为表达出来的需求”。这些是不能通过询问、focus group、问卷等得到的。 ▲发现需求需要在自然环境下认真观察。多数行为是潜意识的，人们真正做的与他们认为自己做的可能差异很大。 ▲行为水平的设计理解用户的需求开始，在产品被使用的任何地方进行观察和研究。 上面的观点已经有很多相关的讨论了，苹果的产品永远是最佳的例子。在自然环境下、在产品被使用的任何地方认真观察，这是最贴近用户、最直接有效的方法了，但是往往我们最容易轻视，最懒得去执行。我们把用户请到访谈室、实验室，让他们在陌生环境下做一些片段式的操作，发表一些可能是迎合我们的看法，得到的东西真的可靠吗？不要说走到用户中去，就在我们前后左右的同事，我们是否观察过，他们是怎样使用自己的产品？ 但是我们很快又会发现，用户的需求是难以捉摸的，何况这些需求可能大部分是隐性的，用户不一定意识得到、不一定表达得出、不一定有动力去表达。Norman说：“最好的设计是那些为自己创作的东西”。顺着这个思路，在产品设计时是不是起码有两个选择： A. 把功能都做出来，提供足够多的选择，将产品高度可定制化，让用户自己选择最适合自己的产品； B. 将自己变成超级BT用户，能够在每一个细节上让自己无法挑剔，产品才算合格。 两个选择都是既不太靠谱，也不太可行。不过，如果能够真的朝这两个方向一路走到黑，是不是会有第二个google和第二个apple呢………… 笔记到这里告一段落。向来不读书的后果就俩字：浅薄。日后慢慢补课吧。 这本书里还有一些观点值得进一步思考，先记下： 团体设计与个人设计：如果想要一个成功的产品，就测试和修改它；如果想要一个伟大的产品，就让它由某人的一个明确观点驱动吧。 任何物品有三种不同的心理形象：“设计者模型”，“使用者模型”，“系统形象” 。 产品设计里的一个重要维度：对情境的适宜性 。 设计的精髓是把许多东西放入一个小的空间而且保持一种美感。 产生高峰体验的条件：没有分心的事物，一个节奏恰好匹配技能的活动，并且略微在能力之上。 期待来自对积极结果的预期，焦虑来自对消极结果的预期 在人造设备中，信任意味着反复多次可靠的完成任务。信任必需由经验获得。 缺乏信任是由缺乏理解引起的。产品需提供连续操作的反馈，若持续缺乏控制和理解，用户会愤怒。以人为中心的设计，让用户感到一切在控制之下，且得到了准许。 相关链接：读书笔记-情感化设计[1]]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书笔记-情感化设计[1]]]></title>
    <url>%2Frn-emotional-design-1.html</url>
    <content type="text"><![CDATA[《情感化设计》是Norman的力作，对于我这种半路出家的且不做设计的民工，应该先去看看Norman的《设计心理学》。估计看完后者再看前者，会有更深入的理解。 1. “美观的物品更好用”这是一句不那么好理解的大白话——一眼看过去好像没有办法反驳，但是一下子又想不清楚为什么。Norman用了一章来解读。 “正面的情绪对学习、好奇心和创造性思维都很关键。” “人在焦虑时，思路变窄，仅集中于与问题直接相关的方面，甚至会重复操作。美观的物品使人更容易找到问题的答案。” 人的情感、行为和认知是相互影响的，上面的两句话这应该是心理学领域一个很直白的观点吧，但对我来说却是一个新鲜的发现。过去的一些疑惑似乎迎刃而解：我不是一个思维活跃的人，至少不是一个富有创造力的人，我的数学一直很差，竞技类的比赛我临场发挥总是不太好，等等，但这些似乎不是因为我智商太低造成的，那是其他什么原因吗？现在看来，倒是有一个合理的解释：我是一个悲观主义者，很容易焦虑，面对问题时，仅集中于与问题直接相关的方面，所以总是找不到巧妙的解法，想不出天花乱坠的创意，在比赛场上总害怕失误。我甚至觉得心理学家有必要做这么一个研究：人的焦虑程度跟数学(或其他需要创造力的学科)成绩是否相关…… 但是，我在网络上会比其他场合思维更发散一些，可能这就是我成为挨踢民工的动力之一：互联网能缓解焦虑（不过信息焦虑绝对是增加了），感觉轻松自在。 “负面情绪使人把注意力集中在问题的细节方面。正面情绪更容易让人注意整体而非局部。”这个结论很有用。不过，反之是否也成立？多注意整体而不是拘泥于细节是否更容易产生正面情绪？想起前几天看的一篇文章：幸运是一种很容易习得的技能，个性测验揭示不幸的人通常比幸运的人紧张，研究已经表明，焦虑会分散人们注意意外事情的能力，其实跟Norman的观点有异曲同工之妙。 从另一个角度想，容易紧张的人会不会更加喜欢美观的东西或更注重审美？因为这是他们减轻焦虑的一个好方法。喜欢美观的东西–减少焦虑–更富创造力–审美能力提高–喜欢美观的东西……这似乎是一个正循环。很多艺术家都有mental problem，是不是也跟这个有关？ 2. 对产品和设计的启发扯了半天，回到产品和设计上来。产品设计的易用、视觉设计的美观，肯定都是对用户的体验有很大帮助的。如果是一个复杂的界面，广告、文字链满天乱飞，导航入口到处都是，只能让人在注意力支离破碎之余，产生焦虑和负面情绪，让本来就不佳的体验雪上加霜。并不是说应该把功能和内容隐藏起来，而是在没有十足把握时，更应该考虑如何做减法，而不是加法，因为“过犹不及”，想一口塞成胖子的后果，很可能就是什么都没吃进去，活活饿死。 从微观一点的层面来说，产品可利用负面情感例如适当的焦虑，令使用者注意眼前的任务。如何从正面情绪转换为负面情绪？我们常用的做法有红色、感叹号、对话框以外反白等等。 3. 大脑加工的三种水平 本能的-visceral level，自动的预先设置层 行为的-behavioral level，支配日常行为脑活动 反思的-reflective level，脑思考的部分 这是全书的核心观点的基础。从上至下是知觉驱动，从下至上是思维驱动。作者举了过山车的例子，坐过山车本身是会引起对害怕的本能感觉，但是过后又会因为是一种冒险刺激行为而感觉良好，还可以作为吹嘘的资本，这就是本能水平的焦虑 vs 反思水平的快乐。 4. 产品的功能、性能和可用性这几个概念很重要，了解它们的差别更重要。 功能：能做什么 性能：能多好的完成要实现的功能 可用性：使用者理解它如何工作和如何使它完成工作的容易程度 在平时的产品策划和设计中，我们其实对三个方面都很重视，但是常常混为一谈。一个好的功能可能因为可用性差而导致性能低。举个不知道恰不恰当的例子，在网易邮箱里面，邮箱搬家是一个好的功能，但是对很多用户来说，这是一个理解和使用门槛相对较高的功能，如果本身做不到“产品智能，界面傻瓜”(也就是可用性强)的话，是很难快速方便地完成”收取/管理其他邮箱”这个任务的，于是性能就不好。 当我们反思一个不成功的产品/服务时，可能首先要想清楚，到底是功能并不是目标人群需要的呢，还是性能方面可以优化，还是因为存在可用性的瓶颈，使得它的作用没有得到发挥，等等。如果是功能问题，是不是用研、产品规划和策划没有做好；如果是可用性问题，是不是交互、视觉、文案没有做好；如果是性能差，是不是除了策划和设计外，技术和开发也有问题。Norman也总结道，“产品必须是吸引人的，令人快乐和有趣的，有效的可理解的”。 [中场休息] ^^ 相关链接： 读书笔记-情感化设计[2]]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人是这样变傻的....]]></title>
    <url>%2Ftoughday.html</url>
    <content type="text"><![CDATA[注：标题的“人”特指“我”…. 摘要：白天上班，晚上论文；工作日上班，周末论文；不疯也傻…. 关键字：论文 周一~周五 7：10 闹钟响 7：30 出门 7：50 等公车 8：00-8：30 在505路上参与人肉罐头的制作 8：40 在公司吃挤扁的早餐 9：00 开工 18：10 下班 18：30 吃饭 19：30 等公车 20：30 回到地下室 20：30-21：30 昏昏欲睡，努力恢复神志清醒 21：30-22：00 打开word，发呆 22：00-23：00 发呆，间或敲几个字，间或上校内 23：20 回到宿舍 24：20 昏睡 周末 9：00 闹钟响 9：30-10：00 昏昏欲睡，努力恢复神志清醒 10：00-11：30 打开word，发呆 11：30 吃饭 13：00 昏睡 14：00 昏昏欲睡，努力恢复神志清醒 15：00-17：30 发呆，间或敲几个字，间或上网，间或扫雷 17：30 吃饭 18：00 昏昏欲睡，努力恢复神志清醒 19：00-23：00 发呆，间或敲几个字，间或上网，间或扫雷 24：00 昏睡]]></content>
      <categories>
        <category>叽歪</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[一月浓缩多功能型游走计划]]></title>
    <url>%2Ftravel-08.html</url>
    <content type="text"><![CDATA[时间：2008.8.13-2008.9.13 线路：广州→杭州→上海→(周庄)→苏州→青岛→天津→北京→(大同)→太原→西安→成都→重庆→韶关 目的：毕业论文调研（互助游，有兴趣可以参见 www.huzhuyou.com）+游玩+见朋友 第一次一个人出远门去那么多地方。真是挑战极限……请各位亲朋好友捐赠或临时借出rp，保佑我完完整整、顺顺利利回家~ Orz如果想看我晃到哪里了，可以瞄一下我的校内签名~如果有事短信联系，我会根据手机电量回复……囧路上肯定经常麻烦各位在大本营的亲友，先拜谢！SEE U ！ 具体行程：8.13出发 8.14(周四)-8.17(周日) 杭州(**住3**晚)：西湖、浙大、延安路等8.14 上午到8.17一早出发到上海 8.17(周日)-8.19(周二) 上海（住2**晚）**：外滩、新天地(石库门)、淮海路、南京路、城隍庙、复旦大学8.17 早上到8.19 一早去周庄 8.19(周二) 周庄 下午到苏州 8.19(周二)-8.22(周五) 苏州（住3**晚）**：虎丘、拙政园or狮子林、观前街……8.19 下午到8.22 出发去青岛 8.22(周五)-8.27(周三) 青岛（住5**晚）**：逗地主（八大关、崂山、海大、名人故居）8.27 一早去天津 8.27(周三) 天津：五大道、天津金融一条街、南开天大、天塔、小吃 8.27 晚上去北京 8.27(周三) -8.31(周日) 北京（住4**晚）**：天安门故宫，王府井、北大清华、中关村、CBD8.27 晚上到8.31 一早去大同 8.31(周日) 大同云冈石窟 晚上卧到太原 9.1(周一)-9.2(周二) 太原：晋祠，平遥古城9.1 早上到9.2晚上卧到西安 9.3(周三)-9.7(周日) 西安（住3**晚）**：华山，兵马俑、西安城、小吃……9.3 上午到9.7下午卧到成都 9.8(周一)-9.10(周三) 成都（住2**晚）**：茶馆、锦里、宽窄巷子、杜甫草堂、武侯祠、小吃……9.8 中午到9.10晚上卧到重庆 9.11(周四)-9.12(周五) 重庆（住1**晚）**：解放碑、瓷器口、朝天门、南滨路、南山、小吃……9.11 早上到9.12下午卧回家 9.13到家 预祝自己rp持续高涨，行程顺利，吃好睡好，逢凶化吉！！]]></content>
      <categories>
        <category>行走</category>
      </categories>
      <tags>
        <tag>Travel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Excel中所有空格如何自动填入上一行相同数字或内容]]></title>
    <url>%2Fexcel-tip1.html</url>
    <content type="text"><![CDATA[假设B2:B21区域是要操作的“字段内容”，选定B2:B21单元格 按“Ctrl+G”－“定位条件……”－“空值” 在编辑栏内输入“=B2”(即空格最近的有内容的上一行)，Ctrl+Enter 选定B2:B21单元格，Ctrl+C,“选择性粘贴……”－“数值”(可省) Excel中所有空格如何自动填入上一行相同数字或内容]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Office</tag>
        <tag>Tip</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[六月流水]]></title>
    <url>%2F2008june.html</url>
    <content type="text"><![CDATA[考试：大半个六月，整整一个年级的研究僧摇身一变，成了高中生、背书机器、ppt机器、论文机器和考试机器……在体力衰退、记忆力衰竭、rp稀缺的时候，俺们将desperate的常态显性化，为着不值几文的成绩搏斗着…… 毕业：大半个六月，整整一个年级的毕业僧摇身一变，成了背包客、流浪者、情圣、诗人、愤青、食客、麦霸、摄影家，更重要的是成为校园里穿着学士服怀旧迎新的一道风景线。有人的中大史如卷轴画一般，内容丰富得堪比清明上河图；有人的中大史如东方水墨画，平淡中还有一大片留白；有人的中大史如积尘的瓦罐，藏着不能说的密秘……有很多人即将离我们而去，每个人的经历也许都会成为别人传述的故事。我只希望临走前能抱抱你们，以后能听到你们的故事。 高考：大半个六月，整整一个社会的各色人等摇身一变，成了考生、监考、考生家长、考生亲友、校方发言人、发考试财的暴发户、教育权威、状元访谈员……远离高考已5年，但它一考定终身的性质千年不变，其他人再怎么折腾都好，最终要承受因概率或其他不确定因素作用下的不幸与无奈的，只有考生自己…… 过敏：半罐嘉士伯，竟然能成为一个上限，极力克制中我只能无语……如果这也跟rp挂钩，那也只好认命了。]]></content>
      <categories>
        <category>叽歪</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Word2007尾注问题：尾注序号，连续尾注，尾注分隔符]]></title>
    <url>%2Fword-endnote.html</url>
    <content type="text"><![CDATA[插入尾注 方法一：快捷键ctrl+alt+d插入尾注方法二：快捷键ctrl+alt+f 插入脚注，然后将脚注转换为尾注 问题一：尾注序号样式默认序号样式为i,ii,iii… 一般都要改成[1],[2],[3]…的样式。方法是：①快捷键按下alt再按s再按q，调出尾注和脚注属性框，选择合适的数字样式，点击应用；②序号样式改为了1,2,3… 但是要怎样加入[]号呢？这里用到替换的功能。③ctrl+f调出查找替换框，点击下面“更多”格式按钮，在“替换”中选择“特殊”字符，选择“尾注标记”，就可以发现在查找文本框内自动输入了“^e”；在替换文本框内先输入想要的序号符号如“[ ]”，光标移置“[ ]”内，在“特殊”字符中选择“任意文本(find what test)”，替换文本框内就完成了替换符“[^&amp;]”的输入。这一步最好是在全文完成后，参考文献齐全了再一次全部替换，不然加一次文献改一次，就会比较麻烦。 问题二：连续尾注问题 引用文献特别在文献综述部分，常常要把几篇引文列在一起，如[21-25]，但是word没有这一功能，又不能将中间的文献删去，否则尾注引文也会自动删除，所以只好用比较笨的方法实现：①先按照常规的方法将所有尾注插入好，包括替换样式，如有连续的尾注先不处理，例如形成[3][4][5][6]这样的连续尾注，下面要变成“[3-6]”的形式。②选择字符“][4][5][”，快捷键 按下alt再按H-FN调出字体属性框，在“效果”选项中勾上“隐藏”的复选框，将所选字符隐藏。这样形式上达到要求，而且也能够保留引文链接。 问题三：尾注前短横线的删除 word在尾注前会自动加上一条横线，一般都要将其去掉：①将视图改为“草稿”②ctrl+alt+d调出下方的尾注编辑栏，在下拉菜单中选择“尾注分隔符”，这时短横线出现了，可以将其删除了。]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Tip</tag>
        <tag>参考文献</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不是机经]]></title>
    <url>%2Fibt-tips.html</url>
    <content type="text"><![CDATA[iBT三月终于结束了！！经历了各种纠结和堕落，我最终还是压抑住了转考位的巨大诱惑，滚进了3.30仲恺的考场。环境还算不错，除了座位距离近了点，干扰灰常大…JJ我就不写了，想写也记不得。作为一个不知为什么考ibt的sjb，本人的经历纯粹可以为后来人作反面教材(当然首先是给ETS送钱，其次是作分母)。 考前： 没有动力切记不要发傻报名烧钱！等到临考前一个月才发现自己完全没有动力去准备，除了心疼1400大洋。 要保证充足的大块时间准备。零碎时间是不利于crack iBT的(对非牛来说) 阅读:如果要应试的话，读首尾段+每段首句就开始做题，不确定时再倒回去读；如果不为应试的话，下电子版的academic杂志来看吧。听力:听抄还是必要的，如果有时间的话。再就是一定要练好一边笔记一边一字不漏地听的能力，不然宁愿不记笔记。口语:应试的话，整理段子+机经+狂练；不应试的话…..作文:应试的话，无论如何好歹自己动手敲一两篇，总结自己的模板；不应试的话，写E日记+E论文吧。 不要迷恋论坛和JJ，掌握了足够的信息就好好准备吧，练一道口语远比看一个预测帖重要千百倍。 考中： 要迅速集中注意力 阅读:比平时的长且难！特别是第一篇，得迅速进入状态且把握好时间。听力:这part做得特别差。感觉语速很快，而且旁边有人在口语了，干扰严重。口语:偷听机会挺大（代价是听力干扰…）作文:时间很紧！想提纲要快，先打模板再填充。打字还是要多练练。 稿纸中间休息时会被换，所以只管用 加试并不好对付，虽然加的是阅读..我没有看过答案，只看了文章介绍，而且心理总以为加试比较容易，结果差点不够时间… 完全不用担心体力不够，中途也不用休息了 Anyway，莫名其妙的三月过去了，四月还有无数多事要做。感谢很多人对我不知所谓的举动的包容和支持，感谢各位在我rp极低时的无私捐赠，真的谢谢！]]></content>
      <categories>
        <category>叽歪</category>
      </categories>
      <tags>
        <tag>Tip</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CNKI题录导入Endnote的方法]]></title>
    <url>%2Fimport-cnki-into-endnote.html</url>
    <content type="text"><![CDATA[Referworks and Endnote “Referworks”in result output page can help you to import your research results into some bibliographic manager software such as Endnote. Please follow the steps below on how to use “Referworks” to import data into Endnote. Referworks与Endnote 结果输出页中的Referworks可以帮助你导出研究结果到参考文献管理软件，例如Endnote。请按以下步骤具体操作如何将Referworks数据导入到Endnote。 The first step Please download the filter from http://www.global.cnki.net/grid20/help/cnki_filter.rar and copy it to the exact folder on your computer : C:\Program Files\EndNote 9\Filters. 第一步 从http://www.lib.unimelb.edu.au/endnote/filterfiles/CNKI.enf下载filter，并将其复制到你电脑中Endnote安装目录的filters文件夹中。 The second step Click the “file” menu and select “new” to create a reference library; Click “import” and a dialogue box pops up; Click the button “choose file” to select the file you would like to import, and click “import option” to choose CNKI filter. If CNKI filter is not in the list , please click “other filters” to find it. Click “Import” to finish the whole process and you will see that all the references in CNKI’s Result page have been imported into Endnote. 第二步 打开Endnote 点击File菜单，选择New来新建一个参考文献库（当然也可打开现有的文献库） 点击import，弹出一个对话框 点击choose file 来选择刚下载的RefWorks.txt，在import option中选择CNKI filter。如果它不在列中，点击other filters来找 在text translation中选择Unicode（UTF-8） 点击import来完成整个导入过程，你会发现所有在CNKI搜索结果中的文献已经被导入到Endnote了]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Tip</tag>
        <tag>参考文献</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[游走河西]]></title>
    <url>%2Ftravel-in-hosi-corridor.html</url>
    <content type="text"><![CDATA[10个市县，14天，4300公里，4300米，外加青海2日游。。。 以上数字应该是我这辈子目前为止干过的最不真实的事了。过去大半个月了，想来一切历历在目。 7月19日兰州黄河阶地、黄土地貌、古沙丘、荒漠草原-灰钙土实习；参观引大入秦工程；石门沟、五台岭植被垂直带路线观察 宿天祝藏族自治县华葬寺乡 7月20日针阔叶混交林认知实习、灰褐土剖面观测；丹霞地貌、天堂寺；大通河峡谷、引大入秦工程渠首；青海北山森林公园 宿天祝藏族自治县华葬寺乡 7月21日马雅雪山古冰川遗迹、高山草甸；乌鞘岭、古浪峡、河西走廊东段路线考察 宿武威市 7月22日武威市雷台、文庙、西夏博物馆；大黄山及汉、明长城路线考察；参观张掖市石岗墩农业示范园 宿张掖市 7月23日祁连山北麓洪积扇、洪积阶地；莺落峡逆冲断层、黑河水利枢纽；马蹄寺、裕固族民族风情；彩色劣地、冰沟丹霞地貌，宿张掖市 7月24日唐建康军遗址骆驼城；嘉峪关、长城博物馆、酒泉钢铁公司 宿嘉峪关市 7月25日祁连山“七一”冰川实习；干旱区风能利用 宿玉门市 7月26日布隆吉风蚀土丘、古砂楔、黑戈壁；酒泉砾岩、莫高窟及其风沙防治；党河绿洲、敦煌街市夜景 宿敦煌市 7月27日罗布泊阿奇克谷地雅丹地貌；玉门关遗址 宿敦煌市 7月28日鸣沙山-月牙泉、金字塔形沙丘；培训班、兰州大学-中山大学路线考察 宿酒泉市 7月29日高台县红西路军烈士陵园；路线考察巴丹吉林沙漠边缘封育禁牧生态建设 宿阿拉善右旗额肯呼都格镇 7月30日考察雅布赖盐湖及盐化公司；考察巴丹吉林沙漠腹地湖泊 宿阿拉善右旗额肯呼都格镇 7月31日考察古湖泊及其岸堤；新月形沙丘测量实习；考察人工梭梭林、沙产业生态示范园；考察民勤沙生植物园；参观动植物标本陈列；路线考察腾格里沙漠 宿武威市 8月1日跑路回兰州 宿兰州市 8月2日自赴青海西宁市；塔尔寺；青海夜市小吃口福街 宿西宁市 8月3日青海湖，金沙湾，日月山，花海；西宁小吃口福街 宿西宁市]]></content>
      <categories>
        <category>行走</category>
      </categories>
      <tags>
        <tag>Travel</tag>
        <tag>地理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Word2007如何转PDF(软件下载)]]></title>
    <url>%2Fhow-to-convert-word2007-to-pdf.html</url>
    <content type="text"><![CDATA[论文终于交上去了，明天要答辩了，中午在做ppt的间隙中打算休息一下把论文word转一个PDF，谁知遇到了不少问题，倒腾了半天才弄好。 1、下载word另存为pdf的插件Save As PDF and XPS(for word2007) (下载1,下载2),安装,在word中”Save as”选项中就会出现”PDF or XPF”选项,可以选择要转换的页数,设定好后开始转换. 2、一般来说转换问题就解决了,但我的论文中有好多emf格式的图片,转换到PDF后图片有问题,所以要替换成jpg格式的图片.所以又找了个PDF编辑器 (链接可下载),将PDF里面的图片替换掉. 3、图片转换.找了半天没看到emf格式的转换软件,一怒之下干脆截图-_-| . 4、图片替换好后保存.又有问题了,一到某一页就出错自动关闭.找不出原因,只好重新生成一个PDF,把那一页单独导出,再将有问题的PDF除去那一页导出,再加入正常的单页….呼,还以为大功告成,结果一看文件大小—16m! 昏倒. 5、醒过来后满世界找PDF压缩软件,找到一个但没效果.只好重头做.At last,终于搞出一个正常大小的PDF…. 一看时间,又浪费了好久.明天要答辩的啊,阿门….]]></content>
      <categories>
        <category>动手</category>
      </categories>
      <tags>
        <tag>Tip</tag>
        <tag>PDF</tag>
        <tag>Software</tag>
      </tags>
  </entry>
</search>
